package com.saartak.el.repositories;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.graphics.Bitmap;
import android.location.Location;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;

import androidx.annotation.RequiresApi;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.bfil.uilibrary.helpers.AppConstants;
import com.bfil.uilibrary.helpers.AppHelper;
import com.bfil.uilibrary.images.FileUtils;
import com.bfil.uilibrary.images.ImageCompressionAsyncTask;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.saartak.el.App;
import com.saartak.el.BuildConfig;
import com.saartak.el.activities.LOSBaseActivity;
import com.saartak.el.adapter.ClientDetailsAdapter;
import com.saartak.el.api.DynamicUIWebservice;
import com.saartak.el.constants.AppConstant;
import com.saartak.el.database.converter.DataTypeConverter;
import com.saartak.el.database.converter.DateTimeConverter;
import com.saartak.el.database.converter.TimestampConverter;
import com.saartak.el.database.dao.DynamicUIDao;
import com.saartak.el.database.entity.ApplicationStatusTable;
import com.saartak.el.database.entity.CBCheckTable;
import com.saartak.el.database.entity.CGTAttendanceTable;
import com.saartak.el.database.entity.CGTTable;
import com.saartak.el.database.entity.CIBILTable;
import com.saartak.el.database.entity.CMPhotoTable;
import com.saartak.el.database.entity.CMFetchTable;
import com.saartak.el.database.entity.CashDenominationTable;
import com.saartak.el.database.entity.CenterCreationTable;
import com.saartak.el.database.entity.FTOverDueCMTable;
import com.saartak.el.database.entity.FetchOtherDayCMTable;
import com.saartak.el.database.entity.FetchOtherDayCollectionTable;
import com.saartak.el.database.entity.GRTAttendanceTable;
import com.saartak.el.database.entity.InitiatePaymentStatusTable;
import com.saartak.el.database.entity.KnowledgeBankTable;
import com.saartak.el.database.entity.LoanProductCodeTable;
import com.saartak.el.database.entity.OverDueCMTable;
import com.saartak.el.database.entity.SalesToolTable;
import com.saartak.el.database.entity.StaffActivityTable;
import com.saartak.el.database.entity.CenterMeetingAttendanceTable;
import com.saartak.el.database.entity.CashCollectionSummaryTable;
import com.saartak.el.database.entity.CenterMeetingCollectionTable;
import com.saartak.el.database.entity.CenterMeetingTable;
import com.saartak.el.database.entity.ColdCallTable;
import com.saartak.el.database.entity.CollectionTable;
import com.saartak.el.database.entity.DocumentMasterTable;
import com.saartak.el.database.entity.DocumentUploadTable;
import com.saartak.el.database.entity.DocumentUploadTableNew;
import com.saartak.el.database.entity.DuplicateDynamicUITable;
import com.saartak.el.database.entity.DynamicUITable;
import com.saartak.el.database.entity.EkycAttemptTable;
import com.saartak.el.database.entity.EligibilityTable;
import com.saartak.el.database.entity.GRTTable;
import com.saartak.el.database.entity.GroupTable;
import com.saartak.el.database.entity.HouseVerificationTable;
import com.saartak.el.database.entity.LeadTable;
import com.saartak.el.database.entity.LoanTable;
import com.saartak.el.database.entity.LocationTable;
import com.saartak.el.database.entity.LogInTable;
import com.saartak.el.database.entity.LogTable;
import com.saartak.el.database.entity.MasterTable;
import com.saartak.el.database.entity.NetworkStrengthTable;
import com.saartak.el.database.entity.OTPVerificationTable;
import com.saartak.el.database.entity.PlannerTable;
import com.saartak.el.database.entity.ProductMasterTable;
import com.saartak.el.database.entity.QCReSubmissionTable;
import com.saartak.el.database.entity.RawDataFromServerTable;
import com.saartak.el.database.entity.RawDataTable;
import com.saartak.el.database.entity.RoleNameTable;
import com.saartak.el.database.entity.SODTable;
import com.saartak.el.database.entity.StageDetailsTable;
import com.saartak.el.database.entity.SubmitDataTable;
import com.saartak.el.database.entity.TodayCollectionScheduledTable;
import com.saartak.el.database.entity.VillageSurveyTable;
import com.saartak.el.dynamicui.services.DynamicUIApiInterface;
import com.saartak.el.dynamicui.services.DynamicUIWebService;
import com.saartak.el.encryption.SHA256Encrypt;
import com.saartak.el.keystore.JealousSky;
import com.saartak.el.models.*;
import com.saartak.el.models.BreSnsManageResults.BreSnsManageResultsREsponseTable;
import com.saartak.el.models.BreSnsManageResults.BreSnsManageResultsRequestDTO;
import com.saartak.el.models.BreSnsManageResults.BreSnsManageResultsResponseDTO;
import com.saartak.el.models.CPV.CPVRequestDTO;
import com.saartak.el.models.CPV.CPVResponseDTO;
import com.saartak.el.models.CreditApprovalScreenPricing.CreditApprovalScreenPricingResponseDTO;
import com.saartak.el.models.CreditApprovalScreenPricing.CreditApprovalScreenPricingTable;
import com.saartak.el.models.CreditApprovalScreenPricing.CreditApprovalScreenPricingrequestDTO;
import com.saartak.el.models.Dedupe.DedupeRequestDTO;
import com.saartak.el.models.Dedupe.DedupeResponseDTO;
import com.saartak.el.models.Deliquency.DeliquencyRequestDTO;
import com.saartak.el.models.Deliquency.DeliquencyResponseDTO;
import com.saartak.el.models.DigitalDocs.DigitaklDocHypothecationDeedTW_UCRequestDTO;
import com.saartak.el.models.DigitalDocs.DigitalDocApplicationFormUCRequestDTO;
import com.saartak.el.models.DigitalDocs.DigitalDocRequestSanctionLetterRuralDTO;
import com.saartak.el.models.DigitalDocs.DigitalDocResponseDTO;
import com.saartak.el.models.ENach.ENachRequestDTO;
import com.saartak.el.models.ENach.ENachResponseDTO;
import com.saartak.el.models.ENach.MNachRequestDTO;
import com.saartak.el.models.ENach.MNachResponseDTO;
import com.saartak.el.models.ENach.MNachResponseTable;
import com.saartak.el.models.ESignEstamp.ESignEStampRequestDTO;
import com.saartak.el.models.ESignEstamp.ESignEStampResponseDTO;
import com.saartak.el.models.ESignEstamp.ESignEStampStatusRequestDTO;
import com.saartak.el.models.ESignEstamp.ESignEStampStatusResponseDTO;
import com.saartak.el.models.GetCityNameModel.CityRequestDTO;
import com.saartak.el.models.GetCityNameModel.CityResponseDTO;
import com.saartak.el.models.GetPricingInbox.GetPricingInboxRequestDTO;
import com.saartak.el.models.GetPricingInbox.GetPricingInboxResponseDTO;
import com.saartak.el.models.GetPricingInbox.GetPricingInboxResponseTable;
import com.saartak.el.models.Hunter.HunterNonIndividualRequestDTO;
import com.saartak.el.models.Hunter.HunterRequestDTO;
import com.saartak.el.models.Hunter.HunterResponseDTO;
import com.saartak.el.models.IBBMasters.GETColorRequestDTO;
import com.saartak.el.models.IBBMasters.GETVariantResponseDTO;
import com.saartak.el.models.IBBMasters.GetColorResponseDTO;
import com.saartak.el.models.IBBMasters.GetMakeRequestDTO;
import com.saartak.el.models.IBBMasters.GetMakeResponseDTO;
import com.saartak.el.models.IBBMasters.GetModelRequest;
import com.saartak.el.models.IBBMasters.GetModelResponseDTO;
import com.saartak.el.models.IBBMasters.GetVariantRequestDTO;
import com.saartak.el.models.IBPModel.IBPRequest;
import com.saartak.el.models.IBPModel.IBPResponse;
import com.saartak.el.models.InsertRawDataBag.InsertRawDataBagRequestDTO;
import com.saartak.el.models.InsertRawDataBag.InsertRawDataBagResponseDTO;
import com.saartak.el.models.InsertRawDataBag.InsertRawDataBagResponseTable;
import com.saartak.el.models.KarzaModel.KarzaRequestDTO;
import com.saartak.el.models.KarzaModel.KarzaResponseDTO;
import com.saartak.el.models.LDAP_Login.LoginNewRequestDTO;
import com.saartak.el.models.LDAP_Login.LoginnewResponseDTO;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownBankDetailsResponseDTO;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownBankDetailsTable;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownBranchNameTable;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownDetailsRequestDTO;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownDetailsResponseDTO;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownProductNameDetailsDTO;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownProductNameTable;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownProductTypeResponseDTO;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownProductTypeTable;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownSqIdAndNameTable;
import com.saartak.el.models.LeadDropDownDetails.GetLeadDropDownSqIdAndNameresponseDTO;
import com.saartak.el.models.LoanAmountWisePricingDefaultValues.LoanAmountWisePricingDefaultValuesRequestDTO;
import com.saartak.el.models.LoanAmountWisePricingDefaultValues.LoanAmountWisePricingDefaultValuesResponseDTO;
import com.saartak.el.models.LoanAmountWisePricingDefaultValues.LoanAmountWisePricingDefaultValuesResponseTable;
import com.saartak.el.models.LoanTenure.TenureMonthsRequestDTO;
import com.saartak.el.models.LoanTenure.TenureMonthsResponseDTO;
import com.saartak.el.models.LoanTenure.TenureMonthsResponseTable;
import com.saartak.el.models.NegitiveProfileList.NegitiveProfileListRequestDTO;
import com.saartak.el.models.NegitiveProfileList.NegitiveProfileListResponseDTO;
import com.saartak.el.models.NegitiveProfileList.NegitiveProfileListResponseTable;
import com.saartak.el.models.PINCodeArea.PInCodeAreaResponseDTO;
import com.saartak.el.models.PINCodeArea.PinCodeAreaRequestDTO;
import com.saartak.el.models.PINCodeArea.PinCodeAreaResponseTable;
import com.saartak.el.models.PINCodeValidationLP.PinCodeRequestDTO;
import com.saartak.el.models.PINCodeValidationLP.PinCodeResponseDTO;
import com.saartak.el.models.PINCodeValidationLP.PinCodeResponseTable;
import com.saartak.el.models.Posidex.PosidexRequestDTO;
import com.saartak.el.models.Posidex.PosidexResponseDTO;
import com.saartak.el.models.ProcessPricingWF.ProcessPricingWFRequestDTO;
import com.saartak.el.models.ProcessPricingWF.ProcessPricingWFResponseDTO;
import com.saartak.el.models.ProcessPricingWF.ProcessPricingWFResponseTable;
import com.saartak.el.models.RAT.RATRequestDTO;
import com.saartak.el.models.RAT.RATResponseDTO;
import com.saartak.el.models.RATSourseOfIncome.CustomerTypeDropDownResponseDTO;
import com.saartak.el.models.RATSourseOfIncome.IndustryTypeDropDownResponseDTO;
import com.saartak.el.models.RATSourseOfIncome.RATSPRequestDTO;
import com.saartak.el.models.RATSourseOfIncome.SPCustomerTypeResponseTable;
import com.saartak.el.models.RATSourseOfIncome.SPIndustryTypeResponseTable;
import com.saartak.el.models.RATSourseOfIncome.SPSourseOfIncomeResponseTable;
import com.saartak.el.models.RATSourseOfIncome.SourseOfIncomeDropDownResponseDTO;
import com.saartak.el.models.Ramp.RampRequestDTO;
import com.saartak.el.models.Ramp.RampResponseDTO;
import com.saartak.el.models.ScreenEditValidation.ScreenEditValidationRequestDTO;
import com.saartak.el.models.ScreenEditValidation.ScreenEditValidationResponseDTO;
import com.saartak.el.models.ScreenEditValidation.ScreenEditValidationResponseTable;
import com.saartak.el.models.StudentGrade.StudentGradeRequestDTO;
import com.saartak.el.models.StudentGrade.StudentGradeResponseDTO;
import com.saartak.el.models.StudentGrade.StudentGradeResponseTable;
import com.saartak.el.models.SyncWorkflow.SyncWorkflowRequestDTO;
import com.saartak.el.models.SyncWorkflow.SyncWorkflowResponseDTO;
import com.saartak.el.models.SyncWorkflow.SyncWorkflowResponseTable;
import com.saartak.el.models.TWLMakeModel.GetTWLDataRequestDTO;
import com.saartak.el.models.TWLMakeModel.TWLCategoryResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLCategoryResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLElectricModelResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLElectricModelResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLEngineCCResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLEngineCCResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLExShowRoomPriceResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLExShowRoomPriceResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLManufacturerResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLManufacturerResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLModelResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLModelResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLTwowheelertypeResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLTwowheelertypeResponseTable;
import com.saartak.el.models.TWLMakeModel.TWLVariantResponseDTO;
import com.saartak.el.models.TWLMakeModel.TWLVariantResponseTable;
import com.saartak.el.models.TypeOfProfession.GetAddressAddressProofTable;
import com.saartak.el.models.TypeOfProfession.GetKYCDropDownIDProofTable;
import com.saartak.el.models.TypeOfProfession.GetLeadCustomerTypeResponseDTO;
import com.saartak.el.models.TypeOfProfession.GetLeadCustomerTypeTable;
import com.saartak.el.models.TypeOfProfession.GetLeadDropDownTypeOfProfessionTable;
import com.saartak.el.models.TypeOfProfession.KYCAddressProofResponseDTO;
import com.saartak.el.models.TypeOfProfession.KYCIdProofResponseDTO;
import com.saartak.el.models.TypeOfProfession.TypeOfProfessionRequestDTO;
import com.saartak.el.models.TypeOfProfession.TypeOfProfessionResponseDTO;
import com.saartak.el.models.UserLoginMenu.UserLoginMenuRequestDTO;
import com.saartak.el.models.UserLoginMenu.UserLoginMenuResponseDTO;
import com.saartak.el.models.UserLoginMenu.UserLoginMenuTable;
import com.saartak.el.models.VKYC.DownStreamRequestDTO;
import com.saartak.el.models.VKYC.DownStreamResponseDTO;
import com.saartak.el.models.VKYC.VKYCRequestDTO;
import com.saartak.el.models.VKYC.VKYCResponseDTO;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.Executor;

import javax.inject.Inject;
import javax.inject.Singleton;


import io.reactivex.Observable;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


import static com.saartak.el.activities.LOSBaseActivity.CLIENT_ID;
import static com.saartak.el.activities.LOSBaseActivity.branchGSTcode;
import static com.saartak.el.activities.LOSBaseActivity.branchId;
import static com.saartak.el.activities.LOSBaseActivity.currentStage;
import static com.saartak.el.activities.LOSBaseActivity.loanType;
import static com.saartak.el.activities.LOSBaseActivity.moduleType;
import static com.saartak.el.activities.LOSBaseActivity.userId;
import static com.saartak.el.constants.AppConstant.*;
import static com.saartak.el.dynamicui.constants.ParametersConstant.*;
import static com.saartak.el.dynamicui.constants.ParametersConstant.SP_NAME_TO_GET_CENTER_DETAILS_FOR_FETCH_OTHER_DAY;
import static com.saartak.el.dynamicui.constants.ParametersConstant.SP_NAME_TO_GET_CENTER_DETAILS_FOR_FTOD_CLIENTS_PCS;
import static com.saartak.el.dynamicui.constants.ParametersConstant.SP_NAME_TO_GET_CENTER_DETAILS_FOR_OD_CLIENTS_PCS;
import static com.saartak.el.dynamicui.constants.ParametersConstant.SP_NAME_TO_GET_CENTER_NAMES_FOR_FETCH_OTHER_DAY;
import static com.saartak.el.dynamicui.constants.ParametersConstant.SP_NAME_TO_POST_SALES_TOOL_DATA_SINGLE;

@Singleton
public class DynamicUIRepository {

    private static final String TAG = DynamicUIRepository.class.getCanonicalName();
    private final DynamicUIWebservice dynamicUIWebservice;
    private final DynamicUIDao dynamicUIDao;
    private final Executor executor;
    private final AppHelper appHelper;
    private MutableLiveData<DynamicUITable> dynamicUITableMutableLiveData = new MutableLiveData();

    @Inject
    public DynamicUIRepository(DynamicUIWebservice dynamicUIWebservice, DynamicUIDao dynamicUIDao, Executor executor, AppHelper appHelper) {
        this.dynamicUIWebservice = dynamicUIWebservice;
        this.dynamicUIDao = dynamicUIDao;
        this.executor = executor;
        this.appHelper = appHelper;
    }

    public LiveData<List<DynamicUITable>> getDynamicUILiveDataList(String screenID, String screenName,
                                                                   String loanType, String projectId, String moduleId,
                                                                   String clientId, String userId, String moduleType) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(BASE_URL);

            executor.execute(() -> {
                // TODO: Need to check this condition
                List<DynamicUITable> dynamicUITableListFromDB = (dynamicUIDao.getTableBasedOnScreen(screenID));
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    dynamicUIWebservice.getDynamicUIFromServer(screenID, projectId, moduleId, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")).enqueue(new Callback<List<DynamicUITable>>() {
                        @Override
                        public void onResponse(Call<List<DynamicUITable>> call, Response<List<DynamicUITable>> response) {
                            Log.e("TAG", "DATA REFRESHED FROM NETWORK");
                            executor.execute(() -> {
                                List<DynamicUITable> dynamicUITableList = response.body();
                                // TODO: INSERTING SCREEN NUMBER
                                if (dynamicUITableList != null) {

//                                    MasterTable masterTable=dynamicUIDao.getMasterTableByClientId(clientId);

                                    LoanTable loanTable = dynamicUIDao.getMemberLoanDetailByClient(clientId);

                                    for (DynamicUITable dynamicUITable : dynamicUITableList) {
                                        dynamicUITable.setScreenID(screenID);
                                        dynamicUITable.setScreenName(screenName);
                                        dynamicUITable.setLoanType(loanType);
                                        dynamicUITable.setClientID(clientId);
                                        dynamicUITable.setUser_id(userId);
                                        dynamicUITable.setModuleType(moduleType);
                                        dynamicUITable.setProductId(moduleId);

                                        if (loanTable != null && loanTable.isSync()) {
                                            dynamicUITable.setSync(true); // TODO: setting true only for view purpose on screen , not allowing to edit screen
                                        }

                                        if (loanType.equalsIgnoreCase(LOAN_NAME_JLG)) {
                                            if (screenName.equalsIgnoreCase(SCREEN_NAME_CENTER_CREATION) &&
                                                    dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_CENTER_ID_IN_CENTER_CREATION)) {
                                                dynamicUITable.setValue(clientId);
                                                dynamicUITable.setEditable(false);
                                            } else if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC) &&
                                                    dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_MEMBER_ID_IN_APPLICANT_KYC)) {
                                                dynamicUITable.setValue(clientId);
                                                dynamicUITable.setEditable(false);
                                            } else if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL) &&
                                                    dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_REQUESTED_LOAN_APPLICATION_DATE)) {
                                                String currentDate = appHelper.getCurrentDate(DATE_FORMAT_DD_MM_YYYY2);
                                                if (!TextUtils.isEmpty(currentDate)) {
                                                    dynamicUITable.setValue(currentDate);
                                                } else {
                                                    dynamicUITable.setEditable(true);
                                                }
                                            }
                                        }
                                    }

                                    if (screenName.equalsIgnoreCase(SCREEN_NAME_ITR_DETAIL_MSME)) {
                                        // TODO: ONLY FOR ITR DETAIL SCREEN
                                        List<String> yearList = new ArrayList<>();

                                        for (int i = 0; i > -6; i--) {
                                            Calendar calendar = Calendar.getInstance();
                                            calendar.add(Calendar.YEAR, i);
                                            yearList.add(String.valueOf(calendar.get(Calendar.YEAR)));
                                        }
                                        List<RawDataTable> rawDataTableListITRDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_ITR_DETAIL_MSME,
                                                clientId);

                                        if (rawDataTableListITRDetails != null && rawDataTableListITRDetails.size() > 0) {

                                            for (RawDataTable rawDataTable : rawDataTableListITRDetails) {
                                                if (rawDataTable != null) {
                                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                                    if (hashMap != null && hashMap.size() > 0) {
                                                        if (hashMap.containsKey(TAG_NAME_YEAR_IN_ITR_DETAIL)) {
                                                            String year = hashMap.get(TAG_NAME_YEAR_IN_ITR_DETAIL).toString();
                                                            if (!TextUtils.isEmpty(year) && yearList.size() > 0) {
                                                                for (String matchYear : yearList) {
                                                                    // TODO: year is unique
                                                                    if (matchYear.equalsIgnoreCase(year)) {
                                                                        yearList.remove(year);
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        DynamicUITable dynamicUITable = getObjectByTAG(TAG_NAME_YEAR_IN_ITR_DETAIL, dynamicUITableList);
                                        if (dynamicUITable != null) {
                                            String[] yearsArray = yearList.toArray(new String[0]);
                                            dynamicUITable.setParamlist(yearsArray);
                                        }
                                    }
                                    // TODO: delete ekycattempt table functionality
                                    if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC) || screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                                        // TODO: delete ekycattempt table when come to applicant&coapplicant kyc opened
                                        // delete EkycAttemptTable all data
                                        dynamicUIDao.deleteEkycAttemptTable();
                                    }

                                    // TODO: inserting correlation id based on raw data list
                                    // TODO: SCREEN_NAME_PRODUCT_ESTIMATE_MSME
                                    if (loanType.equalsIgnoreCase(LOAN_NAME_MSME) &&
                                            (screenName.equalsIgnoreCase(SCREEN_NAME_PRODUCT_ESTIMATE_MSME)
                                                    || screenName.equalsIgnoreCase(SCREEN_NAME_PRODUCT_ESTIMATE_DETAIL_MSME))) {
                                        List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(
                                                SCREEN_NAME_PRODUCT_ESTIMATE_DETAIL_MSME, clientId, moduleType);
                                        if (rawDataTableList != null) {
                                            int correlationId = rawDataTableList.size() + 1;
                                            for (DynamicUITable dynamicUITable : dynamicUITableList) {
                                                dynamicUITable.setCoRelationID(String.valueOf(correlationId));
                                            }
                                        }
                                    }// TODO: SCREEN_NAME_SERVICE_ESTIMATE_MSME
                                    if (loanType.equalsIgnoreCase(LOAN_NAME_MSME) &&
                                            (screenName.equalsIgnoreCase(SCREEN_NAME_SERVICE_ESTIMATE_MSME)
                                                    || screenName.equalsIgnoreCase(SCREEN_NAME_SERVICE_ESTIMATE_DETAIL_MSME))) {
                                        List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(
                                                SCREEN_NAME_SERVICE_ESTIMATE_DETAIL_MSME, clientId, moduleType);
                                        if (rawDataTableList != null) {
                                            int correlationId = rawDataTableList.size() + 1;
                                            for (DynamicUITable dynamicUITable : dynamicUITableList) {
                                                dynamicUITable.setCoRelationID(String.valueOf(correlationId));
                                            }
                                        }
                                    }


                                    if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                                        dynamicUIDao.deleteAndInsertDynamicUITable(dynamicUITableList, screenID);

                                        if (dynamicUITableList.size() > 0) {
                                            List<DuplicateDynamicUITable> duplicateDynamicUITableList = createDuplicateTable(dynamicUITableList);
                                            if (duplicateDynamicUITableList.size() > 0) {
                                                dynamicUIDao.insertAndDeleteInDuplicateTable(duplicateDynamicUITableList, screenID);
                                            }
                                        }

                                        data.postValue(dynamicUIDao.loadTableList(screenID));
                                    } else {
                                        dynamicUIDao.save(dynamicUITableList);
                                        if (dynamicUITableList.size() > 0) {
                                            List<DuplicateDynamicUITable> duplicateDynamicUITableList = createDuplicateTable(dynamicUITableList);
                                            if (duplicateDynamicUITableList.size() > 0) {
                                                dynamicUIDao.saveDuplicateTable(duplicateDynamicUITableList);
                                            }
                                        }
                                        data.postValue(dynamicUIDao.loadTableList(screenID));
                                    }
                                }
                            });
                        }

                        @Override
                        public void onFailure(Call<List<DynamicUITable>> call, Throwable t) {
                            t.printStackTrace();
                            executor.execute(() -> {
                                data.postValue(dynamicUIDao.loadTableList(screenID));
                                insertLog("getDynamicUILiveDataList", t.getMessage(), "", "", TAG, "", "", "");
                            });
                        }
                    });

                } else if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {
                    // TODO: NO INTERNET CONNECTION : OFFLINE MODE ( need to check )
                    for (DynamicUITable dynamicUITable : dynamicUITableListFromDB) {
                        dynamicUITable.setScreenID(screenID);
                        dynamicUITable.setScreenName(screenName);
                        dynamicUITable.setLoanType(loanType);
                        dynamicUITable.setClientID(clientId);
                        dynamicUITable.setUser_id(userId);
                        dynamicUITable.setUser_id(moduleType);
                        dynamicUITable.setVisibility(true);
                        dynamicUITable.setEditable(true);
                        dynamicUITable.setValue("");
                        if (!TextUtils.isEmpty(dynamicUITable.getFieldName()) &&
                                dynamicUITable.getFieldName().equalsIgnoreCase(TAG_NAME_KYC_ID)) {
                            dynamicUITable.setHint("Enter KYC ID");
                        }
                        if (!TextUtils.isEmpty(dynamicUITable.getFieldTag()) &&
                                dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LEAD_GENERATION_DATE)) {
                            dynamicUITable.setVisibility(false);
                            dynamicUITable.setEditable(false);
                        }
                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_REASON_FOR_NO_INTEREST)
                                || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_REASON_FOR_NOT_ELIGIBLE)) {
                            dynamicUITable.setVisibility(false);
                        }
                    }
                    dynamicUIDao.updateDynamicUITable(dynamicUITableListFromDB);
                    dynamicUIDao.clearAllValues(screenID, true);
                    if (screenName.equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                        String paramlist = "[null]";
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_PINCODE, true, true);
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_CITY, true, true);
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_DISTRICT, true, true);
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_STATE, true, true);
                    }
                    dynamicUIDao.updateDynamicTableFieldName(TAG_NAME_SAVE_BUTTON, screenID, TAG_NAME_SAVE_BUTTON);

                    data.postValue(dynamicUIDao.loadTableList(screenID));
                } else {
                    // TODO: Send dummy data to remove observer
                    data.postValue(dynamicUIDao.loadTableList(screenID));
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(dynamicUIDao.loadTableList(screenID));

                insertLog("getDynamicUILiveDataList", ex.getMessage(), "", "", TAG, "", "", "");
            });

        }
        return data;
    }


    public LiveData<List<DynamicUITable>> getMetaDataWithCorrelationID(String screenID, String screenName,
                                                                       String loanType, String projectId, String moduleId,
                                                                       String clientId, String userId, String moduleType, String correlationId) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(BASE_URL);

            executor.execute(() -> {
                // TODO: Need to check this condition
                List<DynamicUITable> dynamicUITableListFromDB = (dynamicUIDao.getTableBasedOnScreen(screenID));
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    dynamicUIWebservice.getDynamicUIFromServer(screenID, projectId, moduleId, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""))
                            .enqueue(new Callback<List<DynamicUITable>>() {
                                @Override
                                public void onResponse(Call<List<DynamicUITable>> call, Response<List<DynamicUITable>> response) {
                                    Log.e("TAG", "DATA REFRESHED FROM NETWORK");
                                    executor.execute(() -> {
                                        List<DynamicUITable> dynamicUITableList = response.body();
                                        // TODO: INSERTING SCREEN NUMBER
                                        if (dynamicUITableList != null) {
                                            for (DynamicUITable dynamicUITable : dynamicUITableList) {
                                                dynamicUITable.setScreenID(screenID);
                                                dynamicUITable.setScreenName(screenName);
                                                dynamicUITable.setLoanType(loanType);
                                                dynamicUITable.setClientID(clientId);
                                                dynamicUITable.setUser_id(userId);
                                                dynamicUITable.setModuleType(moduleType);
                                                dynamicUITable.setCoRelationID(String.valueOf(correlationId));
                                            }

                                            if (screenName.equalsIgnoreCase(SCREEN_NAME_ITR_DETAIL_MSME)) {
                                                // TODO: ONLY FOR ITR DETAIL SCREEN
                                                List<String> yearList = new ArrayList<>();

                                                for (int i = 0; i > -6; i--) {
                                                    Calendar calendar = Calendar.getInstance();
                                                    calendar.add(Calendar.YEAR, i);
                                                    yearList.add(String.valueOf(calendar.get(Calendar.YEAR)));
                                                }
                                                List<RawDataTable> rawDataTableListITRDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_ITR_DETAIL_MSME,
                                                        clientId);

                                                if (rawDataTableListITRDetails != null && rawDataTableListITRDetails.size() > 0) {

                                                    for (RawDataTable rawDataTable : rawDataTableListITRDetails) {
                                                        if (rawDataTable != null) {
                                                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                                            if (hashMap != null && hashMap.size() > 0) {
                                                                if (hashMap.containsKey(TAG_NAME_YEAR_IN_ITR_DETAIL)) {
                                                                    String year = hashMap.get(TAG_NAME_YEAR_IN_ITR_DETAIL).toString();
                                                                    if (!TextUtils.isEmpty(year) && yearList.size() > 0) {
                                                                        for (String matchYear : yearList) {
                                                                            // TODO: year is unique
                                                                            if (matchYear.equalsIgnoreCase(year)) {
                                                                                yearList.remove(year);
                                                                                break;
                                                                            }
                                                                        }

                                                                    }

                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                DynamicUITable dynamicUITable = getObjectByTAG(TAG_NAME_YEAR_IN_ITR_DETAIL, dynamicUITableList);
                                                if (dynamicUITable != null) {
                                                    String[] yearsArray = yearList.toArray(new String[0]);
                                                    dynamicUITable.setParamlist(yearsArray);
                                                }
                                            }

                                            if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                                                dynamicUIDao.deleteAndInsertDynamicUITable(dynamicUITableList, screenID);

                                                if (dynamicUITableList.size() > 0) {
                                                    List<DuplicateDynamicUITable> duplicateDynamicUITableList = createDuplicateTable(dynamicUITableList);
                                                    if (duplicateDynamicUITableList.size() > 0) {
                                                        dynamicUIDao.insertAndDeleteInDuplicateTable(duplicateDynamicUITableList, screenID);
                                                    }
                                                }

                                                data.postValue(dynamicUIDao.loadTableList(screenID));
                                            } else {
                                                dynamicUIDao.save(dynamicUITableList);
                                                if (dynamicUITableList.size() > 0) {
                                                    List<DuplicateDynamicUITable> duplicateDynamicUITableList = createDuplicateTable(dynamicUITableList);
                                                    if (duplicateDynamicUITableList.size() > 0) {
                                                        dynamicUIDao.saveDuplicateTable(duplicateDynamicUITableList);
                                                    }
                                                }
                                                data.postValue(dynamicUIDao.loadTableList(screenID));
                                            }
                                        }
                                    });
                                }

                                @Override
                                public void onFailure(Call<List<DynamicUITable>> call, Throwable t) {
                                    t.printStackTrace();
                                    executor.execute(() -> {
                                        data.postValue(dynamicUIDao.loadTableList(screenID));
                                        insertLog("getMetaDataWithCorrelationID", t.getMessage(), "", "", TAG, "", "", "");
                                    });
                                }
                            });

                } else if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {
                    // TODO: NO INTERNET CONNECTION : OFFLINE MODE
                    for (DynamicUITable dynamicUITable : dynamicUITableListFromDB) {
                        dynamicUITable.setScreenID(screenID);
                        dynamicUITable.setScreenName(screenName);
                        dynamicUITable.setLoanType(loanType);
                        dynamicUITable.setClientID(clientId);
                        dynamicUITable.setUser_id(userId);
                        dynamicUITable.setUser_id(moduleType);
                        dynamicUITable.setVisibility(true);
                        dynamicUITable.setEditable(true);
                        dynamicUITable.setValue("");
                        if (!TextUtils.isEmpty(dynamicUITable.getFieldName()) &&
                                dynamicUITable.getFieldName().equalsIgnoreCase(TAG_NAME_KYC_ID)) {
                            dynamicUITable.setHint("Enter KYC ID");
                        }
                        if (!TextUtils.isEmpty(dynamicUITable.getFieldTag()) &&
                                dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LEAD_GENERATION_DATE)) {
                            dynamicUITable.setVisibility(false);
                            dynamicUITable.setEditable(false);
                        }
                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_REASON_FOR_NO_INTEREST)
                                || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_REASON_FOR_NOT_ELIGIBLE)) {
                            dynamicUITable.setVisibility(false);
                        }
                    }
                    dynamicUIDao.updateDynamicUITable(dynamicUITableListFromDB);
                    dynamicUIDao.clearAllValues(screenID, true);
                    if (screenName.equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                        String paramlist = "[null]";
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_PINCODE, true, true);
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_CITY, true, true);
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_DISTRICT, true, true);
                        dynamicUIDao.clearPincodeDetails(screenID, paramlist, TAG_NAME_STATE, true, true);
                    }
                    dynamicUIDao.updateDynamicTableFieldName(TAG_NAME_SAVE_BUTTON, screenID, TAG_NAME_SAVE_BUTTON);

                    data.postValue(dynamicUIDao.loadTableList(screenID));
                } else {
                    // TODO: Send dummy data to remove observer
                    data.postValue(dynamicUIDao.loadTableList(screenID));
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("getMetaDataWithCorrelationID", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }


    // TODO: EKYC REQUEST SERVICE CALL
    public LiveData<EKYCResponseDTO> EKYCRequest(EKYCRootDTO ekycRootDTO, DynamicUITable dynamicUITable) {
        final MutableLiveData<EKYCResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(EKYC_URL);

            String uniqueId = "" + System.currentTimeMillis();
            ekycRootDTO.setUniqueId(uniqueId);
            String baseString = new Gson().toJson(ekycRootDTO, EKYCRootDTO.class).replace("\\u003d", "=");
            Log.d(TAG, "EKYCRequest: baseString ==    " + baseString);
            String k1 = SHA256Encrypt.sha256(baseString);
            executor.execute(() -> {

                // TODO: Initially it will be false
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_IS_VERIFIED, dynamicUITable.getScreenName(), IS_VERIFIED_FALSE, false, false);


                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    DynamicUIWebService.createService(DynamicUIApiInterface.class).EKYCRequest(ekycRootDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<EKYCResponseDTO>() {
                                @Override
                                public void onResponse(Call<EKYCResponseDTO> call, Response<EKYCResponseDTO> response) {
                                    Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                    executor.execute(() -> {
                                        EKYCResponseDTO ekycResponseDTO = new EKYCResponseDTO();
                                        ekycResponseDTO = response.body();
                                        Log.d(TAG, "EKYCResponseDTO  ==> " + ekycResponseDTO);
                                        // TODO: Ekyc Success Case
                                        if (ekycResponseDTO != null && ekycResponseDTO.getApiResponse() != null &&
                                                !TextUtils.isEmpty(ekycResponseDTO.getApiResponse().getObj_responseCode())
                                                && ekycResponseDTO.getApiResponse().getObj_responseCode().equalsIgnoreCase("00")) {

                                            String headerK1 = response.headers().get("k1");
                                            //String baseString = new Gson().toJson(ekycRootDTO,EKYCRootDTO.class);
                                            String k1 = SHA256Encrypt.sha256(response.body().toString().replace("\\u003d", "="));
                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_IS_VERIFIED,
                                                    dynamicUITable.getScreenName(), IS_VERIFIED_TRUE, false, false);
                                           /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PHOTO,
                                                    dynamicUITable.getScreenName(),ekycResponseDTO.getApiResponse().getPhoto() , false, false);
*/
                                            if (!TextUtils.isEmpty(dynamicUITable.getClientID())) {
                                                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(dynamicUITable.getClientID());
                                                if (masterTable != null) {
                                                    // TODO: ALREADY EXISTING CLIENT IN MASTER TABLE
                                                    if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                                                        dynamicUIDao.updateMasterTableVKYCStatus(masterTable.getId(), "E");
                                                    }else {
                                                        dynamicUIDao.updateMasterTableVKYCStatusForCoAPPLICANT(masterTable.getId(),"E");
                                                    }
                                                }
                                            }

                                            // TODO: success case - delete EkycAttemptTable all data
                                            dynamicUIDao.deleteEkycAttemptTable();

                                            // TODO: Insert EKY Document only for JLG
                                            //  if(dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_EL)) {
                                            DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(
                                                    dynamicUITable.getScreenID(), SPINNER_ITEM_FIELD_NAME_AADHAAR, dynamicUITable.getModuleType());
                                            if (documentMasterTable != null) {
                                                if (!TextUtils.isEmpty(documentMasterTable.getFileFormat())) {
                                                    String fileName = documentMasterTable.getFileFormat();
                                                    fileName = fileName.replace("{0}", dynamicUITable.getClientID());
                                                    fileName = fileName.replace("{1}", String.valueOf(1));

                                                    if (!TextUtils.isEmpty(fileName)) {

                                                        String appFolderPath = Environment.getExternalStorageDirectory()
                                                                .getAbsolutePath() + "/" + APP_FOLDER + "/";
                                                        String imageUploadFolderPath = Environment.getExternalStorageDirectory()
                                                                .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/";
                                                        String clientIdFolderPath = Environment.getExternalStorageDirectory()
                                                                .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/"
                                                                + dynamicUITable.getClientID() + "/";

                                                        String imagePath = Environment.getExternalStorageDirectory()
                                                                .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/"
                                                                + dynamicUITable.getClientID() + "/" + fileName + "." + EXTENSION_JPG;

                                                        String pdfPath = Environment.getExternalStorageDirectory()
                                                                .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/"
                                                                + dynamicUITable.getClientID() + "/" + fileName + "." + EXTENSION_PDF;

                                                        File root = new File(appFolderPath);
                                                        if (!root.exists()) {
                                                            root.mkdirs();
                                                        }
                                                        File imageUploadFolder = new File(imageUploadFolderPath);
                                                        if (!imageUploadFolder.exists()) {
                                                            imageUploadFolder.mkdirs();
                                                        }
                                                        File clientIdFolder = new File(clientIdFolderPath);
                                                        if (!clientIdFolder.exists()) {
                                                            clientIdFolder.mkdirs();
                                                        }

                                                        try {
                                                            File imagePathFile = new File(imagePath);
                                                            if (!imagePathFile.exists()) {
                                                                imagePathFile.createNewFile();
                                                                FileOutputStream out = new FileOutputStream(imagePathFile);
                                                                out.flush();
                                                                out.close();
                                                            }
                                                            File pdfPathFile = new File(pdfPath);
                                                            if (!pdfPathFile.exists()) {
                                                                pdfPathFile.createNewFile();
                                                                FileOutputStream out = new FileOutputStream(pdfPathFile);
                                                                out.flush();
                                                                out.close();
                                                            }
                                                        } catch (Exception e) {
                                                            e.printStackTrace();
                                                        }
                                                        // TODO: Create PDF document
                                                        Bitmap bitmap = createPDF(ekycResponseDTO.getApiResponse(), imagePath, pdfPath);
                                                        if (bitmap != null) {
                                                            // TODO: Write bitmap to file location
//                                                                try (FileOutputStream out = new FileOutputStream(imagePath)) {
//                                                                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out); // bmp is your Bitmap instance
//                                                                    // PNG is a lossless format, the compression factor (100) is ignored
//                                                                } catch (IOException e) {
//                                                                    e.printStackTrace();
//                                                                }
                                                            // TODO: Compress Image
                                                            compressImagefromPath(imagePath);

                                                            // TODO: IMAGE ENCRYPTION
//                                                                try {
//                                                                    File file = new File(imagePath);
//                                                                    JealousSky jealousSky = JealousSky.getInstance();
//
//                                                                    jealousSky.initialize(
//                                                                            IMAGE_ENC_PSWD,
//                                                                            IMAGE_ENC_SALT);
//
//                                                                    File fileInput = new File(imagePath);
//                                                                    FileInputStream fileInputStream = null;
//
//                                                                    if (file.exists()) {
//                                                                        fileInputStream = new FileInputStream(fileInput);
//                                                                    }
//
//                                                                    jealousSky.encryptToFile(fileInputStream, imagePath);
//
//                                                                } catch (Exception ex) {
//                                                                    ex.printStackTrace();
//                                                                }
                                                        }
                                                    }
                                                }
                                            }

                                            //  }
                                        } else {
                                            // TODO: get attempt value functionality
                                            String errorMessage = "EKYC FAILED";
                                            if (ekycResponseDTO != null && ekycResponseDTO.getApiResponse() != null
                                                    && !TextUtils.isEmpty(ekycResponseDTO.getApiResponse().getAuthenticationMessage())) {
                                                errorMessage = ekycResponseDTO.getApiResponse().getAuthenticationMessage();
                                            } else if (ekycResponseDTO != null && !TextUtils.isEmpty(ekycResponseDTO.getErrorMessage())) {
                                                errorMessage = ekycResponseDTO.getErrorMessage();
                                            }

                                            int attemptValue = getAttemptValue(dynamicUITable, ekycRootDTO.getKYCId() + "", errorMessage);
                                            if (ekycResponseDTO != null) {
                                                ekycResponseDTO.setAttempt(attemptValue);
                                            } else {
                                                ekycResponseDTO = new EKYCResponseDTO();
                                                ekycResponseDTO.setAttempt(attemptValue);

                                            }
                                        }
                                        data.postValue(ekycResponseDTO);
                                    });
                                }

                                @Override
                                public void onFailure(Call<EKYCResponseDTO> call, Throwable t) {
                                    Log.d(TAG, "EKYCRequest Failure ==> " + t.getMessage());

                                    executor.execute(() -> {
                                        data.postValue(new EKYCResponseDTO());
                                        insertLog("EKYCRequest", t.getMessage(), "", "", TAG, "", "", "");
                                    });
                                }
                            });

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("EKYCRequest", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    private void compressImagefromPath(String path) {
        Log.e(TAG, "inside ImageCapture activity compressImage -->");

        try {

            @SuppressLint("StaticFieldLeak")
            ImageCompressionAsyncTask imageCompression = new ImageCompressionAsyncTask() {
                @Override
                protected void onPostExecute(String filePath) {
                    try {

                        Log.i(TAG, "FILE PATH-----> " + filePath);
                        File file = new File(filePath);
                        String fileName = file.getName();
                        Log.i(TAG, "FILE NAME-----> " + fileName);

                        try {
                            // TODO: IMAGE ENCRYPTION
                            JealousSky jealousSky = JealousSky.getInstance();

                            jealousSky.initialize(
                                    IMAGE_ENC_PSWD,
                                    IMAGE_ENC_SALT);

                            File fileInput = new File(filePath);
                            FileInputStream fileInputStream = null;

                            if (file.exists()) {
                                fileInputStream = new FileInputStream(fileInput);
                            }

                            jealousSky.encryptToFile(fileInputStream, filePath);

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
            imageCompression.execute(path); // imagePath as a string
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Bitmap createPDF(ApiResponse apiResponse, String imagePath, String pdfPath) {
        Bitmap finalBitmap = null;
        try {

            // step 1
            Document document = new Document();
            // step 2
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(pdfPath));
            document.setPageSize(PageSize.LETTER);
            document.setMargins(36, 72, 108, 180);
            document.setMarginMirroring(false);
            // step 3
            document.open();
            // step 4

            // Main table
            PdfPTable mainTable = new PdfPTable(2);
            mainTable.setWidthPercentage(100.0f);
            float[] columnWidths = new float[]{40f, 60f};
            mainTable.setWidths(columnWidths);

            byte[] decodedString = Base64.decode(apiResponse.getPhoto(), Base64.DEFAULT);

            // TODO: Write to local storage
            appHelper.writeToFile(decodedString, imagePath);

            //Add Image
            Image image1 = Image.getInstance(imagePath);
            //Fixed Positioning
            image1.setAbsolutePosition(400f, 800f);
            //Scale to new height and new width of image
            image1.scaleAbsolute(180, 180);
            //Add to document

            PdfPTable imageTable = new PdfPTable(1);
            PdfPCell imageCell = new PdfPCell(image1);
            imageCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            imageCell.disableBorderSide(Rectangle.BOX);
            imageCell.setExtraParagraphSpace(1.5f);
            imageTable.addCell(imageCell);

            Font f1 = FontFactory.getFont(FontFactory.COURIER, 12, Font.BOLD, BaseColor.BLACK);
            Paragraph name = new Paragraph("NAME ", f1);
            Paragraph nameValue = new Paragraph(apiResponse.getName(), f1);
            Paragraph gender = new Paragraph("GENDER ", f1);
            String strGender = apiResponse.getGender();
            if (strGender.equalsIgnoreCase("M")) {
                strGender = "MALE";
            } else if (strGender.equalsIgnoreCase("F")) {
                strGender = "FEMALE";
            }
            Paragraph genderValue = new Paragraph(strGender, f1);
            Paragraph dob = new Paragraph("DOB ", f1);
            Paragraph dobValue = new Paragraph(apiResponse.getDob(), f1);
            Paragraph rrn = new Paragraph("RRN ", f1);
            Paragraph rrnValue = new Paragraph(apiResponse.getRrn(), f1);
            Paragraph building = new Paragraph("BUILDING ", f1);
            Paragraph buildingValue = new Paragraph(apiResponse.getBuilding(), f1);
            Paragraph street = new Paragraph("STREET ", f1);
            Paragraph streetValue = new Paragraph(apiResponse.getStreet(), f1);
            Paragraph area = new Paragraph("AREA ", f1);
            Paragraph areaValue = new Paragraph(apiResponse.getArea(), f1);
            Paragraph pincode = new Paragraph("PINCODE ", f1);
            Paragraph pincodeValue = new Paragraph(apiResponse.getPin(), f1);
            Paragraph city = new Paragraph("CITY ", f1);
            Paragraph cityValue = new Paragraph(apiResponse.getCity(), f1);
            Paragraph district = new Paragraph("DISTRICT ", f1);
            Paragraph districtValue = new Paragraph(apiResponse.getDistrict(), f1);
            Paragraph state = new Paragraph("STATE ", f1);
            Paragraph stateValue = new Paragraph(apiResponse.getState(), f1);

            PdfPTable table = new PdfPTable(2);
            float[] tablecolumnWidths = new float[]{25f, 75f};
            table.setWidths(tablecolumnWidths);
            table.setWidthPercentage(100);
            table.spacingAfter();

            PdfPCell cell = new PdfPCell(name); // TODO: NAME
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(nameValue); // TODO: NAME VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(gender); // TODO: GENDER
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(genderValue); // TODO: GENDER VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);

            cell = new PdfPCell(dob); // TODO: DOB
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(dobValue); // TODO: DOB VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(rrn); // TODO: RRN
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(rrnValue); // TODO: RRN VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(pincode); // TODO: PINCODE
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(pincodeValue); // TODO: PINCODE VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(city); // TODO: CITY
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(cityValue); // TODO: CITY VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(district); // TODO: DISTRICT
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(districtValue); // TODO: DISTRICT VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(state); // TODO: STATE
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(stateValue); // TODO: STATE VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(building); // TODO: BUILDING
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(buildingValue); // TODO: BUILDING VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(street); // TODO: STREET
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(streetValue); // TODO: STREET VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(area); // TODO: AREA
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            cell = new PdfPCell(areaValue); // TODO: AREA VALUE
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.disableBorderSide(Rectangle.BOX);
            cell.setExtraParagraphSpace(1.5f);
            table.addCell(cell);
            mainTable.addCell(imageTable);
            mainTable.addCell(table);
            document.add(mainTable);
            document.add(new Phrase("\n"));

            document.close();
            writer.close();

            Log.d(TAG, " PDF Created=====> ");

            File file = new File(pdfPath);

            Log.d(TAG, " File ========> " + file);

            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                Log.d(TAG, " Greater than Lollipop =====> ");
                ArrayList<Bitmap> bitmapArrayList = appHelper.pdfToBitmap(file, App.context); // TODO: PDF TO BITMAP CONVERSION
                if (bitmapArrayList != null && bitmapArrayList.size() > 0) {
                    Bitmap bitmap = bitmapArrayList.get(0);
                    Log.d(TAG, " bitmap created =====> " + bitmap);
                    return bitmap;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return finalBitmap;
    }

    public int getAttemptValue(DynamicUITable dynamicUITable, String aadhaar, String errorMessage) {
        // TODO: 20-11-2019 ekyc failed functionality
        //fail
        int attemptvalue = 1;
        try {
            List<EkycAttemptTable> finalEkycAttemptList = dynamicUIDao.loadEkycAttemptData(dynamicUITable.getScreenID());
            if (finalEkycAttemptList != null && finalEkycAttemptList.size() > 0) {
                boolean aadhaarExist = false;
                for (EkycAttemptTable ekycAttemptData : finalEkycAttemptList) {
                    if (ekycAttemptData != null && !TextUtils.isEmpty(ekycAttemptData.getAadhaar_no())) {
                        if (aadhaar.equalsIgnoreCase(ekycAttemptData.getAadhaar_no())) {
                            int attempt = ekycAttemptData.getAttempt() + 1;
                            //update attempts value
                            dynamicUIDao.updateEkycAttemptTable(ekycAttemptData.getAadhaar_no(), attempt, dynamicUITable.getScreenID());
                            aadhaarExist = true;//put true
                            attemptvalue = attempt;
                            break;
                        }
                    }
                }
                if (!aadhaarExist) {
                    EkycAttemptTable ekycAttemptTable = new EkycAttemptTable(aadhaar, 1, dynamicUITable.getScreenID(), errorMessage);
                    //insert EkycAttemptTable data
                    dynamicUIDao.insertEkycAttemptTable(ekycAttemptTable);
                    attemptvalue = 1;
                }
            } else {
                EkycAttemptTable ekycAttemptTable = new EkycAttemptTable(aadhaar, 1, dynamicUITable.getScreenID(), errorMessage);
                //insert EkycAttemptTable data
                dynamicUIDao.insertEkycAttemptTable(ekycAttemptTable);
                attemptvalue = 1;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("getAttemptValue", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return attemptvalue;
    }

    // TODO: GENERATE OTP SERVICE CALL
    public LiveData<OTPTriggerResponseDTO> generateOTP(OTPTriggerDTO otpTriggerDTO, OTPVerificationTable otpVerificationTable) {
        final MutableLiveData<OTPTriggerResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(OTP_TRIGGER_URL);

            executor.execute(() -> {
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    DynamicUIWebService.createService(DynamicUIApiInterface.class).generateOTP(otpTriggerDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")).enqueue(new Callback<OTPTriggerResponseDTO>() {
                        @Override
                        public void onResponse(Call<OTPTriggerResponseDTO> call, Response<OTPTriggerResponseDTO> response) {
                            Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                            executor.execute(() -> {
                                OTPTriggerResponseDTO otpTriggerResponseDTO = response.body();
                                Log.d(TAG, "OTPTriggerResponseDTO  ==> " + otpTriggerResponseDTO);
                                if (otpTriggerResponseDTO != null && otpTriggerResponseDTO.getApiResponse() != null) {
                                    if (!TextUtils.isEmpty(otpTriggerResponseDTO.getApiResponse().getStatus())) {
                                        String referenceId = otpTriggerResponseDTO.getApiResponse().getRefferenceId();
                                        if (otpTriggerResponseDTO.getApiResponse().getStatus().equalsIgnoreCase("1")) {
                                            dynamicUIDao.updateOTPGenerated(otpVerificationTable.getId(), otpVerificationTable.getMobileNumber()
                                                    , true, referenceId);
                                        } else {
                                            dynamicUIDao.updateOTPGenerated(otpVerificationTable.getId(), otpVerificationTable.getMobileNumber()
                                                    , false, referenceId);
                                        }
                                    }
                                }
                                data.postValue(otpTriggerResponseDTO);

                            });
                        }

                        @Override
                        public void onFailure(Call<OTPTriggerResponseDTO> call, Throwable t) {
                            Log.d(TAG, "OTPTrigger Failure ==> " + t.getMessage());
                            data.postValue(new OTPTriggerResponseDTO());
                            insertLog("generateOTP", t.getMessage(), "", "", TAG, "", "", "");
                        }
                    });

                } else {
                    Log.d(TAG, "No Internet Connection");
                    data.postValue(new OTPTriggerResponseDTO());
                    insertLog("generateOTP", "No Internet Connection", "", "", TAG, "", "", "");

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("generateOTP", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    // TODO: GENERATE OTP SERVICE CALL FOR COLLECTION SMS
    public LiveData<OTPTriggerResponseDTO> generateCollectionSMS(OTPTriggerDTO otpTriggerDTO) {
        final MutableLiveData<OTPTriggerResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(OTP_TRIGGER_URL);

            executor.execute(() -> {
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    DynamicUIWebService.createService(DynamicUIApiInterface.class).generateOTP(otpTriggerDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")).enqueue(new Callback<OTPTriggerResponseDTO>() {
                        @Override
                        public void onResponse(Call<OTPTriggerResponseDTO> call, Response<OTPTriggerResponseDTO> response) {
                            Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                            executor.execute(() -> {
                                OTPTriggerResponseDTO otpTriggerResponseDTO = response.body();
                                Log.d(TAG, "OTPTriggerResponseDTO  ==> " + otpTriggerResponseDTO);
                                if (otpTriggerResponseDTO != null && otpTriggerResponseDTO.getApiResponse() != null) {
                                    if (!TextUtils.isEmpty(otpTriggerResponseDTO.getApiResponse().getStatus())) {
                                        String referenceId = otpTriggerResponseDTO.getApiResponse().getRefferenceId();
//                                        if (otpTriggerResponseDTO.getApiResponse().getStatus().equalsIgnoreCase("1")) {
//                                            dynamicUIDao.updateOTPGenerated(otpVerificationTable.getId(), otpVerificationTable.getMobileNumber()
//                                                    , true, referenceId);
//                                        } else {
//                                            dynamicUIDao.updateOTPGenerated(otpVerificationTable.getId(), otpVerificationTable.getMobileNumber()
//                                                    , false, referenceId);
//                                        }
                                    }
                                }
                                data.postValue(otpTriggerResponseDTO);

                            });
                        }

                        @Override
                        public void onFailure(Call<OTPTriggerResponseDTO> call, Throwable t) {
                            Log.d(TAG, "OTPTrigger Failure ==> " + t.getMessage());
                            data.postValue(new OTPTriggerResponseDTO());
                            insertLog("generateOTP", t.getMessage(), "", "", TAG, "", "", "");
                        }
                    });

                } else {
                    Log.d(TAG, "No Internet Connection");
                    data.postValue(new OTPTriggerResponseDTO());
                    insertLog("generateOTP", "No Internet Connection", "", "", TAG, "", "", "");

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("generateOTP", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    // TODO: CREATE ACCOUNT AND SMS TRIGGER SERVICE CALL
    public LiveData<InitiateResponseDTO> initiateServiceCall(EMIDetailsDTO emiDetailsDTO, String mobileNumber, String userId) {
        final MutableLiveData<InitiateResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(INITIATE_TRANSACTION_URL);

            executor.execute(() -> {
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    InitiateRequestDTO initiateRequestDTO = new InitiateRequestDTO();
                    String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_DDMMYYYYSMS);
                    initiateRequestDTO.setUniqueId(timeStamp);
                    initiateRequestDTO.setClientID("");
                    initiateRequestDTO.setExternalCustId("");
                    initiateRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                    initiateRequestDTO.setCreatedBy(userId);
                    initiateRequestDTO.setServiceType(SERVICE_TYPE_ACCOUNT_SMS);

                    InitiateRequestDTO.RequestStringBean requestStringBean = new InitiateRequestDTO.RequestStringBean();

                    InitiateRequestDTO.AccountSmsRequestBean accountSmsRequestBean = new InitiateRequestDTO.AccountSmsRequestBean();
                    accountSmsRequestBean.setAccountId(emiDetailsDTO.getLAN());
                    accountSmsRequestBean.setAccountName(emiDetailsDTO.getCustomerName());
                    accountSmsRequestBean.setMobileNumber(mobileNumber);
                    accountSmsRequestBean.setLoan_Amount(String.valueOf(emiDetailsDTO.getCollection()));
                    accountSmsRequestBean.setAppName("JLG");
                    String timeStampForRequestId = new SimpleDateFormat("yyMMddHHmmssSSS",
                            Locale.getDefault()).format(new Date());
                    String EMP_LAST_5_DIGIT = userId.substring(3);
                    String REF_ID = EMP_LAST_5_DIGIT + timeStampForRequestId;
                    accountSmsRequestBean.setRequestId(REF_ID);
                    accountSmsRequestBean.setVpa("");
                    accountSmsRequestBean.setCompanyCode("");
                    accountSmsRequestBean.setStaffId(userId);
                    accountSmsRequestBean.setAmount_In_Arrear("0.0");// TODO: HARD CODED
                    accountSmsRequestBean.setEmi_Amount("0.0");// TODO: HARD CODED
                    accountSmsRequestBean.setTotal_OutStanding("0.0");// TODO: HARD CODED
                    accountSmsRequestBean.setAmountToBePaid("0.0");// TODO: HARD CODED

                    requestStringBean.setAccountSmsRequest(accountSmsRequestBean);
                    initiateRequestDTO.setRequestString(requestStringBean);

                    String baseString = new Gson().toJson(initiateRequestDTO, InitiateRequestDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).initiateServiceCall
                                    (initiateRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<InitiateResponseDTO>() {
                                @Override
                                public void onResponse(Call<InitiateResponseDTO> call, Response<InitiateResponseDTO> response) {
                                    Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            InitiateResponseDTO initiateResponseDTO = response.body();
                                            Log.d(TAG, "InitiateResponseDTO  ==> " + initiateResponseDTO);
                                            if (initiateResponseDTO != null && initiateResponseDTO.getApiResponse() != null) {

                                            }
                                            data.postValue(initiateResponseDTO);
                                        } else {
                                            data.postValue(new InitiateResponseDTO());
                                        }

                                    });
                                }

                                @Override
                                public void onFailure(Call<InitiateResponseDTO> call, Throwable t) {
                                    Log.d(TAG, "InitiateResponseDTO Failure ==> " + t.getMessage());
                                    data.postValue(new InitiateResponseDTO());
                                    insertLog("generateOTP", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });

                } else {
                    Log.d(TAG, "No Internet Connection");
                    data.postValue(new InitiateResponseDTO());
                    insertLog("InitiateResponseDTO", "No Internet Connection", "", "", TAG, "", "", "");

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("initiateServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    // TODO: VERIFY OTP SERVICE CALL
    public LiveData<OTPVerifyResponseDTO> verifyOTP(OTPVerifyDTO otpVerifyDTO, OTPVerificationTable otpVerificationTable) {
        final MutableLiveData<OTPVerifyResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(OTP_VERIFY_URL);

            executor.execute(() -> {
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    DynamicUIWebService.createService(DynamicUIApiInterface.class).verifyOTP(otpVerifyDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")).
                            enqueue(new Callback<OTPVerifyResponseDTO>() {
                                @Override
                                public void onResponse(Call<OTPVerifyResponseDTO> call, Response<OTPVerifyResponseDTO> response) {
                                    Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                    executor.execute(() -> {
                                        OTPVerifyResponseDTO otpVerifyResponseDTO = response.body();
                                        Log.d(TAG, "OTPVerifyResponseDTO  ==> " + otpVerifyResponseDTO);

                                        if (otpVerifyResponseDTO != null && otpVerifyResponseDTO.getApiResponse() != null) {
                                            if (!TextUtils.isEmpty(otpVerifyResponseDTO.getApiResponse().getStatus())) {
                                                if (otpVerifyResponseDTO.getApiResponse().getStatus().equalsIgnoreCase("1")) {
                                                    dynamicUIDao.updateOTPVerified(otpVerificationTable.getId(), otpVerificationTable.getMobileNumber()
                                                            , true);
                                                } else {
                                                    dynamicUIDao.updateOTPVerified(otpVerificationTable.getId(), otpVerificationTable.getMobileNumber()
                                                            , false);
                                                }
                                            }
                                        }
                                        data.postValue(otpVerifyResponseDTO);

                                    });
                                }

                                @Override
                                public void onFailure(Call<OTPVerifyResponseDTO> call, Throwable t) {
                                    Log.d(TAG, "OTPVerify Failure ==> " + t.getMessage());
                                    insertLog("verifyOTP", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("verifyOTP", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    public LiveData<List<DocumentUploadRawdataResponseDTO>> getDocumentRawData(String clientId, String staffId, String loanType, String connectionString) {
        final MutableLiveData<List<DocumentUploadRawdataResponseDTO>> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            executor.execute(() -> {

                // TODO: GET DOCUMENT UPLOAD RAW DATA FROM SERVER
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    RawDataForSingleScreenRequestDTO rawDataForSingleScreenRequestDTO = new RawDataForSingleScreenRequestDTO();
                    RawDataForSingleScreenRequestDTO.SpNameWithParameterClass spNameWithParameterClass =
                            new RawDataForSingleScreenRequestDTO.SpNameWithParameterClass();
                    List<RawDataForSingleScreenRequestDTO.SpNameWithParameterClass> spNameWithParameterClassArrayList
                            = new ArrayList<RawDataForSingleScreenRequestDTO.SpNameWithParameterClass>();
                    RawDataForSingleScreenRequestDTO.SpParametersClass spParametersClass = new RawDataForSingleScreenRequestDTO.SpParametersClass();
                    String screenId = SCREEN_N0_DOCUMENT_UPLOAD_MSME;
                    if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_AHL)) {
                        screenId = SCREEN_N0_DOCUMENT_UPLOAD_AHL;
                    } else if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_PHL)) {
                        screenId = SCREEN_N0_DOCUMENT_UPLOAD_PHL;
                    } else if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_EL)) {
                        screenId = SCREEN_N0_DOCUMENT_UPLOAD_EL;
                    } else if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_TWL)) {
                        screenId = SCREEN_N0_DOCUMENT_UPLOAD_PHL;
                    } else {
                        screenId = SCREEN_N0_DOCUMENT_UPLOAD_PHL;
                    }


                    spParametersClass.setCustomerId(clientId);
                    spParametersClass.setRoleId("4002");
                    spParametersClass.setScreenId(screenId);
                    spParametersClass.setUserId(staffId);
                    spParametersClass.setRowIdentity("0");

                    spNameWithParameterClass.setSpParameters(spParametersClass);
                    spNameWithParameterClass.setSpName(SP_NAME_TO_GET_SINGLE_SCREEN_RAW_DATA);

                    rawDataForSingleScreenRequestDTO.setConnectionString(connectionString);
                    rawDataForSingleScreenRequestDTO.setUserId(staffId);
                    rawDataForSingleScreenRequestDTO.setIMEINumber(appHelper.getIMEI());
                    rawDataForSingleScreenRequestDTO.setProjectName("LOS");

                    spNameWithParameterClassArrayList.add(spNameWithParameterClass);
                    rawDataForSingleScreenRequestDTO.setSpNameWithParameter(spNameWithParameterClassArrayList);
                    String baseString = new Gson().toJson(rawDataForSingleScreenRequestDTO, RawDataForSingleScreenRequestDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).rawDataForSingleScreenFromServer(
                                    rawDataForSingleScreenRequestDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1)
                            .enqueue(new Callback<ResponseBody>() {
                                @Override
                                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                    Log.e("TAG", "DATA REFRESHED FROM NETWORK");
                                    executor.execute(() -> {

                                        if (response.isSuccessful()) {
                                            try {
                                                String strResponse = response.body().string();
                                                JSONObject json = new JSONObject(strResponse);
                                                String key = json.keys().next();

                                                String tableJson = json.get(key).toString();
                                                if (!TextUtils.isEmpty(tableJson)) {
                                                    JSONObject jsonTable = new JSONObject(tableJson);
                                                    List<DocumentUploadRawdataResponseDTO> rawdataResponseDTOList = null;
                                                    if (jsonTable.has("Table")) {
                                                        String Table = jsonTable.getString("Table");
                                                        JSONArray jsonArray = new JSONArray(Table);
                                                        if (jsonArray.length() > 0) {
                                                            JSONObject jsonObject = jsonArray.getJSONObject(0);

                                                            if (jsonObject != null && jsonObject.has("Rwas")) {
                                                                String Rwas = jsonObject.getString("Rwas");
                                                                if (!TextUtils.isEmpty(Rwas)) {

                                                                    Type type = new TypeToken<List<DocumentUploadRawdataResponseDTO>>() {
                                                                    }.getType();

                                                                    rawdataResponseDTOList = new Gson().fromJson(Rwas, type);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (rawdataResponseDTOList != null && rawdataResponseDTOList.size() > 0) {
                                                        // TODO: INSERT HEADER
                                                        for (DocumentUploadRawdataResponseDTO documentRawdataDTO : rawdataResponseDTOList) {
                                                            if (documentRawdataDTO != null && documentRawdataDTO.getFILES() != null
                                                                    && documentRawdataDTO.getFILES().length > 0) {
                                                                String[] fileDetails = documentRawdataDTO.getFILES()[0].split("_");
                                                                if (fileDetails.length > 0) {
                                                                    try {
                                                                        String clientId = fileDetails[0];
                                                                        String documentTag = fileDetails[1];
                                                                        String documentName = fileDetails[2];
                                                                        String front = fileDetails[3];
//                                                                        String jpg = fileDetails[4];

                                                                        // TODO: Only for co applicants we need to remove last charecter
                                                                        // TODO: Eg : {0}_coappbnkd1_bankaccountdetails_front_{1}
                                                                        // TODO: Remove : {0}_coappbnkd_bankaccountdetails_front_{1}
                                                                        if (documentRawdataDTO.getCustomer_type().contains(MODULE_TYPE_CO_APPLICANT)) {
                                                                            documentTag = documentTag.substring(0, documentTag.length() - 1);
                                                                        }

                                                                        String fFormat = "{0}_" + documentTag + "_" + documentName + "_" + front + "_{1}";

                                                                        if (!TextUtils.isEmpty(fFormat)) {
                                                                            RawDataTable rawDataTable = null;
                                                                            List<RawDataTable> rawDataTableList = null;
                                                                            // TODO:  SCREEN NO ZERO
                                                                            if (documentRawdataDTO.getScreen_id().equalsIgnoreCase("0")) {
                                                                                if (documentRawdataDTO.getCustomer_type().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                                                                                    rawDataTableList = dynamicUIDao.
                                                                                            getRawDataByClientAndScreenName(SCREEN_NAME_APPLICANT_KYC,
                                                                                                    clientId);
                                                                                } else if (documentRawdataDTO.getCustomer_type().contains(MODULE_TYPE_CO_APPLICANT)) {
                                                                                    rawDataTableList = dynamicUIDao.
                                                                                            getRawDataByClientAndScreenName(SCREEN_NAME_CO_APPLICANT_KYC,
                                                                                                    clientId);
                                                                                }

                                                                            } else {
                                                                                rawDataTableList = dynamicUIDao.
                                                                                        getRawDataByClientAndScreenNoModuleTye(documentRawdataDTO.getScreen_id(),
                                                                                                clientId, documentRawdataDTO.getCustomer_type());
                                                                            }

                                                                            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                                                                rawDataTable = rawDataTableList.get(0);
                                                                            }

                                                                            if (rawDataTable != null) {
                                                                                // TODO: Insert Document Upload Header
                                                                                insertDocumentUploadHeader(documentRawdataDTO.getScreen_id()
                                                                                        , clientId
                                                                                        , documentName, rawDataTable, "", fFormat);
                                                                            }
                                                                        }

                                                                    } catch (Exception ex) {
                                                                        ex.printStackTrace();
                                                                    }

                                                                }
                                                            }
                                                        }

                                                        // TODO: Final Result
                                                        data.postValue(rawdataResponseDTOList);

                                                    } else {
                                                        // TODO: Final Result
                                                        data.postValue(new ArrayList<DocumentUploadRawdataResponseDTO>());
                                                    }
                                                }

                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                                // TODO: Final Result
                                                data.postValue(new ArrayList<DocumentUploadRawdataResponseDTO>());
                                            }
                                        } else {
                                            // TODO: Final Result
                                            data.postValue(new ArrayList<DocumentUploadRawdataResponseDTO>());
                                        }

                                    });
                                }

                                @Override
                                public void onFailure(Call<ResponseBody> call, Throwable t) {
                                    t.getMessage();
                                    // TODO: Final Result
                                    data.postValue(new ArrayList<DocumentUploadRawdataResponseDTO>());
                                    insertLog("getDocumentRawData", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });

                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(new ArrayList<DocumentUploadRawdataResponseDTO>());
                    insertLog("getDocumentRawData", "Internet Not Available", "", "", TAG, "", "", "");
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("getDocumentRawData", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    public LiveData<String> downloadDocuments(List<DocumentUploadRawdataResponseDTO> documentRawDataResponseDTOList,
                                              String clientId, String moduleType) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(DOCUMENT_DOWNLOAD_URL);

            executor.execute(() -> {

                // TODO: GET DOCUMENT UPLOAD RAW DATA FROM SERVER
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    // TODO: INSERT FILES
                    List<String> imageDownloadList = new ArrayList<>();
                    for (DocumentUploadRawdataResponseDTO rawDataResponseDTO : documentRawDataResponseDTOList) {
                        if (rawDataResponseDTO != null && rawDataResponseDTO.getFILES() != null
                                && rawDataResponseDTO.getFILES().length > 0) {
                            imageDownloadList.addAll(Arrays.asList(rawDataResponseDTO.getFILES()));
                        }
                    }

                    // TODO: List of images to download
                    if (imageDownloadList.size() > 0) {

                        DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                        List<Observable<ResponseBody>> requests = new ArrayList<>();

                        for (String fileName : imageDownloadList) {
                            String file = fileName.split("\\.")[0];
                            if (!TextUtils.isEmpty(file)) {
                                requests.add(service.imageDownload(file, EXTENSION_JPG,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")));
                            }
                        }
                        if (requests.size() > 0) {

                            DynamicUIWebService.changeApiBaseUrl(DOCUMENT_DOWNLOAD_URL);

                            // Zip all requests with the Function, which will receive the results.
                            Disposable disposable = Observable.zip(requests,
                                    new Function<Object[], List<DocumentUploadTableNew>>() {
                                        @Override
                                        public List<DocumentUploadTableNew> apply(Object[] objects) throws Exception {
                                            List<DocumentUploadTableNew> documentList = new ArrayList<>();
                                            try {
                                                if (objects != null && objects.length > 0) {
                                                    if (imageDownloadList.size() == objects.length) {
                                                        for (int i = 0; i < imageDownloadList.size(); i++) {
                                                            ResponseBody response = (ResponseBody) objects[i];
                                                            String fileName = imageDownloadList.get(i);

                                                            // TODO: Get customer type

                                                            String filePath = writeResponseBodyToDisk(response, fileName);
                                                            if (!TextUtils.isEmpty(filePath)) {
                                                                try {
                                                                    // TODO: IMAGE ENCRYPTION
                                                                    JealousSky jealousSky = JealousSky.getInstance();

                                                                    jealousSky.initialize(
                                                                            IMAGE_ENC_PSWD,
                                                                            IMAGE_ENC_SALT);

                                                                    File fileInput = new File(filePath);
                                                                    FileInputStream fileInputStream = null;

                                                                    if (fileInput.exists()) {
                                                                        fileInputStream = new FileInputStream(fileInput);
                                                                    }

                                                                    jealousSky.encryptToFile(fileInputStream, filePath);

                                                                } catch (Exception ex) {
                                                                    ex.printStackTrace();
                                                                    insertLog("downloadDocuments", ex.getMessage(), "", "", TAG, "", "", "");
                                                                }

                                                                try {
                                                                    String[] fileDetails = fileName.split("_");
                                                                    String clientId = fileDetails[0];
                                                                    String documentTag = fileDetails[1];
                                                                    String documentName = fileDetails[2];


                                                                    // TODO: {0}_coappid1_pancard_front_{1}
                                                                    String fileFormat = "{0}_" + documentTag + "_" + documentName + "_front_{1}";

                                                                    // TODO:Get Document Upload Header
                                                                    DocumentUploadTableNew documentUploadTableNewHeader = dynamicUIDao.
                                                                            getDocumentHeaderByFileFormatAndClientId(fileFormat, clientId, true);

                                                                    if (documentUploadTableNewHeader != null) {
                                                                        DocumentUploadTableNew documentUploadTableNewImage = new DocumentUploadTableNew();

                                                                        documentUploadTableNewImage.setScreen_id(documentUploadTableNewHeader.getScreen_id());
                                                                        documentUploadTableNewImage.setClient_id(documentUploadTableNewHeader.getClient_id());
                                                                        documentUploadTableNewImage.setDocument_name(documentUploadTableNewHeader.getDocument_name());
                                                                        documentUploadTableNewImage.setDocument_full_name(documentUploadTableNewHeader.getDocument_full_name());
                                                                        documentUploadTableNewImage.setDocument_tag(documentUploadTableNewHeader.getDocument_tag());
                                                                        documentUploadTableNewImage.setHeader(false); // TODO: Header should be false for new image capture
                                                                        documentUploadTableNewImage.setFileCount(1); // TODO: Hardcoded file count
                                                                        documentUploadTableNewImage.setCustomer_type(documentUploadTableNewHeader.getCustomer_type());
                                                                        documentUploadTableNewImage.setDisplay_name(documentUploadTableNewHeader.getDisplay_name());
                                                                        documentUploadTableNewImage.setFull_display_name(documentUploadTableNewHeader.getFull_display_name());
                                                                        documentUploadTableNewImage.setLoan_type(documentUploadTableNewHeader.getLoan_type());
                                                                        documentUploadTableNewImage.setModule_type(documentUploadTableNewHeader.getModule_type());
                                                                        documentUploadTableNewImage.setFile_format(documentUploadTableNewHeader.getFile_format());
                                                                        documentUploadTableNewImage.setUser_id(documentUploadTableNewHeader.getUser_id());
                                                                        documentUploadTableNewImage.setProduct_id(documentUploadTableNewHeader.getProduct_id());
                                                                        documentUploadTableNewImage.setFile_name(fileName);
                                                                        documentUploadTableNewImage.setFile_path(filePath);
                                                                        documentList.add(documentUploadTableNewImage);
                                                                    }

                                                                } catch (Exception ex) {
                                                                    ex.printStackTrace();
                                                                    insertLog("downloadDocuments", ex.getMessage(), "", "", TAG, "", "", "");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                                insertLog("downloadDocuments", ex.getMessage(), "", "", TAG, "", "", "");
                                            }
                                            return documentList;
                                        }
                                    }).subscribe(new Consumer<List<DocumentUploadTableNew>>() {
                                                     @Override
                                                     public void accept(List<DocumentUploadTableNew> documentUploadTableNewList) throws Exception {

                                                         if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {

                                                             // TODO: INSERT IMAGE LIST
                                                             for (DocumentUploadTableNew documentUploadTableNew : documentUploadTableNewList) {
                                                                 // TODO: Insert new image row
                                                                 dynamicUIDao.insertDocumentUploadNew(documentUploadTableNew);
                                                             }

                                                             // TODO: Updating Status And Response Message
                                                             dynamicUIDao.updateDocumentResponseAndStatusByClientId(SUCCESS_RESPONSE_MESSAGE, true, clientId);

                                                             if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_AHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             }
                                                             else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             }
                                                             else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             }
                                                             else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             }
                                                             else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             }
                                                             else {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0), documentUploadTableNewList);
                                                             }

                                                             // TODO: Final Result
                                                             data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                         } else {
                                                             // TODO: Final Result
                                                             data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                         }
                                                     }
                                                 },
                                    // Will be triggered if any error during requests will happen
                                    new Consumer<Throwable>() {
                                        @Override
                                        public void accept(Throwable e) throws Exception {
                                            //Do something on error completion of requests
                                            Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                            // TODO: Final Result
                                            data.postValue(e.getMessage());
                                            insertLog("downloadDocuments", e.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    }
                            );
                        } else {
                            // TODO: Final Result
                            data.postValue(SUCCESS_RESPONSE_MESSAGE);
                        }
                    } else {
                        // TODO: Final Result
                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                    }

                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(ERROR_MESSAGE_NO_INTERNET_CONNECTION);
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("downloadDocuments", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    // TODO: VERIFY OTP SERVICE CALL
    public LiveData<ResponseBody> downloadDocumentsForKnowledgeBank(KnowledgeBankTable knowledgeBankTable) {
        final MutableLiveData<ResponseBody> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(DOCUMENT_DOWNLOAD_URL);

            executor.execute(() -> {
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection
                    String file = knowledgeBankTable.getFileName().split("\\.")[0];
                    if (!TextUtils.isEmpty(file)) {
                        DynamicUIWebService.createService(DynamicUIWebservice.class).imageDownloadForKnowledgeBank(file, /*EXTENSION_JPG*/knowledgeBankTable.getFileType(),
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")).
                                enqueue(new Callback<ResponseBody>() {
                                    @Override
                                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                        executor.execute(() -> {
                                            if (response.body() != null) {
//                                                InputStream inputStream=response.body().byteStream();
                                                data.postValue(response.body());
                                            } else {
                                                data.postValue(null);
                                            }

                                        });
                                    }

                                    @Override
                                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                                        data.postValue(null);
                                        Log.d(TAG, "OTPVerify Failure ==> " + t.getMessage());
                                        insertLog("verifyOTP", t.getMessage(), "", "", TAG, "", "", "");
                                    }
                                });
                    }

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("verifyOTP", ex.getMessage(), "", "", TAG, "", "", "");
            data.postValue(null);
        }
        return data;
    }

    public LiveData<String> imageDownloadFromServer(List<RawDataResponseDTO.Table> rawDataFromServerList) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(DOCUMENT_DOWNLOAD_URL);

            executor.execute(() -> {

                // TODO: GET DOCUMENT UPLOAD RAW DATA FROM SERVER
                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    // TODO: INSERT FILES
                    List<String> imageDownloadList = new ArrayList<>();

                    if (rawDataFromServerList != null && rawDataFromServerList.size() > 0) {
                        for (RawDataResponseDTO.Table table : rawDataFromServerList) {

                            Type type = new TypeToken<List<DocumentUploadRawdataResponseDTO>>() {
                            }.getType();

                            if (String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_N0_DOCUMENT_UPLOAD_MSME)
                                    || String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_N0_DOCUMENT_UPLOAD_AHL) || String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_N0_DOCUMENT_UPLOAD_PHL)) {
                                String raws = table.getRwas();
                                if (!TextUtils.isEmpty(raws)) {
                                    try {
                                        List<DocumentUploadRawdataResponseDTO> documentRawDataResponseDTOList = new Gson().fromJson(raws, type);
                                        if (documentRawDataResponseDTOList != null && documentRawDataResponseDTOList.size() > 0) {
                                            for (DocumentUploadRawdataResponseDTO rawDataResponseDTO : documentRawDataResponseDTOList) {
                                                if (rawDataResponseDTO != null && rawDataResponseDTO.getFILES() != null &&
                                                        rawDataResponseDTO.getFILES().length > 0) {
                                                    imageDownloadList.addAll(Arrays.asList(rawDataResponseDTO.getFILES()));
                                                }
                                            }
                                        }
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        insertLog("imageDownloadFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                    }
                                }
                            }
                        }
                    }

                    // TODO: List of images to download
                    if (imageDownloadList.size() > 0) {

                        DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                        List<Observable<ResponseBody>> requests = new ArrayList<>();

                        for (String fileName : imageDownloadList) {
                            String file = fileName.split("\\.")[0];
                            if (!TextUtils.isEmpty(file)) {
                                requests.add(service.imageDownload(file, EXTENSION_JPG,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")));
                            }
                        }
                        if (requests.size() > 0) {

                            DynamicUIWebService.changeApiBaseUrl(DOCUMENT_DOWNLOAD_URL);

                            // Zip all requests with the Function, which will receive the results.
                            Disposable disposable = Observable.zip(requests,
                                    new Function<Object[], List<DocumentUploadTableNew>>() {
                                        @Override
                                        public List<DocumentUploadTableNew> apply(Object[] objects) throws Exception {
                                            List<DocumentUploadTableNew> documentList = new ArrayList<>();
                                            try {
                                                if (objects != null && objects.length > 0) {
                                                    if (imageDownloadList.size() == objects.length) {
                                                        for (int i = 0; i < imageDownloadList.size(); i++) {
                                                            ResponseBody response = (ResponseBody) objects[i];
                                                            String fileName = imageDownloadList.get(i);

                                                            // TODO: Get customer type

                                                            String filePath = writeResponseBodyToDisk(response, fileName);
                                                            if (!TextUtils.isEmpty(filePath)) {

                                                                try {
                                                                    String[] fileDetails = fileName.split("_");
                                                                    String clientId = fileDetails[0];
                                                                    String documentTag = fileDetails[1];
                                                                    String documentName = fileDetails[2];

                                                                    // TODO: Eg :  {0}_coappid1_pancard_front_{1}
                                                                    String fileFormat = "{0}_" + documentTag + "_" + documentName + "_front_{1}";

                                                                    // TODO:Get Document Upload Header
                                                                    DocumentUploadTableNew documentUploadTableNewHeader = dynamicUIDao.
                                                                            getDocumentHeaderByFileFormatAndClientId(fileFormat,
                                                                                    clientId, true);

                                                                    if (documentUploadTableNewHeader != null) {
                                                                        DocumentUploadTableNew documentUploadTableNewImage = new DocumentUploadTableNew();

                                                                        documentUploadTableNewImage.setScreen_id(documentUploadTableNewHeader.getScreen_id());
                                                                        documentUploadTableNewImage.setClient_id(documentUploadTableNewHeader.getClient_id());
                                                                        documentUploadTableNewImage.setDocument_name(documentUploadTableNewHeader.getDocument_name());
                                                                        documentUploadTableNewImage.setDocument_full_name(documentUploadTableNewHeader.getDocument_full_name());
                                                                        documentUploadTableNewImage.setDocument_tag(documentUploadTableNewHeader.getDocument_tag());
                                                                        documentUploadTableNewImage.setHeader(false); // TODO: Header should be false for new image capture
                                                                        documentUploadTableNewImage.setFileCount(1); // TODO: Hardcoded file count
                                                                        documentUploadTableNewImage.setCustomer_type(documentUploadTableNewHeader.getCustomer_type());
                                                                        documentUploadTableNewImage.setDisplay_name(documentUploadTableNewHeader.getDisplay_name());
                                                                        documentUploadTableNewImage.setFull_display_name(documentUploadTableNewHeader.getFull_display_name());
                                                                        documentUploadTableNewImage.setLoan_type(documentUploadTableNewHeader.getLoan_type());
                                                                        documentUploadTableNewImage.setModule_type(documentUploadTableNewHeader.getModule_type());
                                                                        documentUploadTableNewImage.setFile_format(documentUploadTableNewHeader.getFile_format());
                                                                        documentUploadTableNewImage.setUser_id(documentUploadTableNewHeader.getUser_id());
                                                                        documentUploadTableNewImage.setProduct_id(documentUploadTableNewHeader.getProduct_id());
                                                                        documentUploadTableNewImage.setFile_name(fileName);
                                                                        documentUploadTableNewImage.setFile_path(filePath);

                                                                        documentList.add(documentUploadTableNewImage);
                                                                    }
                                                                } catch (Exception ex) {
                                                                    ex.printStackTrace();
                                                                    insertLog("imageDownloadFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                                insertLog("imageDownloadFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                            }
                                            return documentList;
                                        }
                                    }).subscribe(new Consumer<List<DocumentUploadTableNew>>() {
                                                     @Override
                                                     public void accept(List<DocumentUploadTableNew> documentUploadTableNewList) throws Exception {

                                                         if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {

                                                             // TODO: INSERT IMAGE LIST
                                                             for (DocumentUploadTableNew documentUploadTableNew : documentUploadTableNewList) {
                                                                 // TODO: Insert new image row
                                                                 dynamicUIDao.insertDocumentUploadNew(documentUploadTableNew);
                                                             }

                                                             // TODO: Updating Status And Response Message
                                                             dynamicUIDao.updateDocumentResponseAndStatusByClientId(SUCCESS_RESPONSE_MESSAGE,
                                                                     true, documentUploadTableNewList.get(0).getClient_id());

                                                             if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_AHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getLoan_type()) && documentUploadTableNewList.get(0).getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             } else {
                                                                 // TODO: Insert or Update Document Upload Raw Data
                                                                 insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                         documentUploadTableNewList);
                                                             }

                                                             // TODO: Final Result
                                                             data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                         } else {

                                                             // TODO: Final Result
                                                             data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                         }
                                                     }
                                                 },
                                    // Will be triggered if any error during requests will happen
                                    new Consumer<Throwable>() {
                                        @Override
                                        public void accept(Throwable e) throws Exception {
                                            //Do something on error completion of requests
                                            Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                            // TODO: Final Result
                                            data.postValue(e.getMessage());
                                            insertLog("imageDownloadFromServer", e.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    }
                            );
                        } else {
                            // TODO: Final Result
                            data.postValue(SUCCESS_RESPONSE_MESSAGE);
                        }
                    } else {
                        // TODO: Final Result
                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                    }

                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(ERROR_MESSAGE_NO_INTERNET_CONNECTION);

                    insertLog("imageDownloadFromServer", ERROR_MESSAGE_NO_INTERNET_CONNECTION, "", "", TAG, "", "", "");
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("imageDownloadFromServer", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    public LiveData<String> getQCReSubmissionDataFromServer(String staffId) {

        final MutableLiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final QCReSubmissionDataRequestDTO qcReSubmissionDataRequestDTO = new QCReSubmissionDataRequestDTO();
            qcReSubmissionDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            qcReSubmissionDataRequestDTO.setProjectName(loanType);

            QCReSubmissionDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new QCReSubmissionDataRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_QC_RE_SUBMISSION_DETAILS);

            QCReSubmissionDataRequestDTO.SpParametersClass spParametersClass = new QCReSubmissionDataRequestDTO.SpParametersClass();
//            spParametersClass.setCmDate(currentDate); // TODO: current date
//            spParametersClass.setLoId(staffId); // TODO: staff id

            spNameWithParameter.setSpParameters(spParametersClass);

            ArrayList<QCReSubmissionDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<QCReSubmissionDataRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            qcReSubmissionDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {
                String baseString = new Gson().toJson(qcReSubmissionDataRequestDTO, QCReSubmissionDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);

                DynamicUIWebService.createService(DynamicUIWebservice.class).qcReSubmissionDataFromServer(qcReSubmissionDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            QCReSubmissionDataResponseDTO qcReSubmissionDataResponseDTO = new Gson().fromJson(tableJson, QCReSubmissionDataResponseDTO.class);
                                            if (qcReSubmissionDataResponseDTO != null && qcReSubmissionDataResponseDTO.getQcReSubmissionTables().size() > 0) {
                                                for (QCReSubmissionTable qcReSubmissionTable : qcReSubmissionDataResponseDTO.getQcReSubmissionTables()) {
                                                    // TODO: set user id
                                                    qcReSubmissionTable.setCreatedBy(staffId);
                                                }
                                                dynamicUIDao.deleteAndInsertQCReSubmissionDataFromServer(qcReSubmissionDataResponseDTO.getQcReSubmissionTables());
                                                // TODO: Final Result
                                                data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            insertLog("getQCReSubmissionDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                insertLog("getQCReSubmissionDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(FAILURE_RESPONSE_MESSAGE);
                insertLog("getQCReSubmissionDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<List<InitiatePaymentStatusTable>> getInitiatePaymentStatusFromServer(String currentDate, String staffId) {

        final MutableLiveData<List<InitiatePaymentStatusTable>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final InitiatePaymentStatusRequestDTO initiatePaymentStatusRequestDTO = new InitiatePaymentStatusRequestDTO();
            initiatePaymentStatusRequestDTO.setIMEINumber(appHelper.getIMEI());
            initiatePaymentStatusRequestDTO.setProjectName(loanType);
            initiatePaymentStatusRequestDTO.setUserId(staffId);

            InitiatePaymentStatusRequestDTO.SpNameWithParameterBean spNameWithParameter = new InitiatePaymentStatusRequestDTO.SpNameWithParameterBean();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_INITIATE_PAYMENT_STATUS);

            InitiatePaymentStatusRequestDTO.SpParametersBean spParametersClass = new InitiatePaymentStatusRequestDTO.SpParametersBean();
            spParametersClass.setRequestedDate(currentDate); // TODO: current date
            spParametersClass.setUserId(staffId); // TODO: staff id

            spNameWithParameter.setSpParameters(spParametersClass);

            ArrayList<InitiatePaymentStatusRequestDTO.SpNameWithParameterBean> SpNameWithParameterList = new ArrayList<InitiatePaymentStatusRequestDTO.SpNameWithParameterBean>();
            SpNameWithParameterList.add(spNameWithParameter);
            initiatePaymentStatusRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {
                String baseString = new Gson().toJson(initiatePaymentStatusRequestDTO, InitiatePaymentStatusRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).initiatePaymentStatusFromServer(initiatePaymentStatusRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            InitiatePaymentStatusResponseDTO initiatePaymentStatusResponseDTO = new Gson().fromJson(tableJson, InitiatePaymentStatusResponseDTO.class);
                                            if (initiatePaymentStatusResponseDTO != null && initiatePaymentStatusResponseDTO.getInitiatePaymentStatusTable().size() > 0) {
                                                // TODO: delete and insert InitiatePaymentStatus
//                                                dynamicUIDao.deleteAndInsertInitiatePaymentStatusFromServer(initiatePaymentStatusResponseDTO.getInitiatePaymentStatusTable());
                                                // TODO: Final Result
                                                data.postValue(initiatePaymentStatusResponseDTO.getInitiatePaymentStatusTable());
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(new ArrayList<>());
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(new ArrayList<>());
                                            insertLog("getInitiatePaymentStatusFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(new ArrayList<>());
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(new ArrayList<>());
                                insertLog("getInitiatePaymentStatusFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(new ArrayList<>());
                insertLog("getInitiatePaymentStatusFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<String> getCenterMeetingDetailsFromServer(String currentDate, String staffId) {

        final MutableLiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final CenterMeetingDataRequestDTO centerMeetingDataRequestDTO = new CenterMeetingDataRequestDTO();
            centerMeetingDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            centerMeetingDataRequestDTO.setProjectName(loanType);

            CenterMeetingDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CenterMeetingDataRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_CENTER_DETAILS_BY_CENTER_MEETING_DAY);

            CenterMeetingDataRequestDTO.SpParametersClass spParametersClass = new CenterMeetingDataRequestDTO.SpParametersClass();
            spParametersClass.setCmDate(currentDate); // TODO: current date
            spParametersClass.setLoId(staffId); // TODO: staff id

            spNameWithParameter.setSpParameters(spParametersClass);

            ArrayList<CenterMeetingDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CenterMeetingDataRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            centerMeetingDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {
                String baseString = new Gson().toJson(centerMeetingDataRequestDTO, CenterMeetingDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).centerMeetingDataFromServer(centerMeetingDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            CenterMeetingDataResponseDTO centerMeetingDataResponseDTO = new Gson().fromJson(tableJson, CenterMeetingDataResponseDTO.class);
                                            if (centerMeetingDataResponseDTO != null && centerMeetingDataResponseDTO.getCenterMeetingTable().size() > 0) {
                                                for (CenterMeetingTable centerMeetingTable : centerMeetingDataResponseDTO.getCenterMeetingTable()) {
                                                    // TODO: set cmdate
//                                                    centerMeetingTable.setCenterMeetingDate(currentDate);

                                                    CenterMeetingTable centerMeetingTableFromDB = dynamicUIDao.getCenterMeetingTableByCenterMeetingDateAndCenterIdAndLoanAccountNumber(centerMeetingTable.getCenterMeetingDate(), centerMeetingTable.getCenterId(), centerMeetingTable.getLoanAccountNumber());
                                                    if (centerMeetingTableFromDB == null) {
                                                        dynamicUIDao.insertCenterMeetingTable(centerMeetingTable);
                                                    }
                                                }
//                                                dynamicUIDao.deleteAndInsertCenterMeetingDataFromServer(centerMeetingDataResponseDTO.getCenterMeetingTable());
                                                // TODO: insert cm fetch table
                                                CMFetchTable cmFetchTable = new CMFetchTable();
                                                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                                cmFetchTable.setStaffId(staffId);
                                                cmFetchTable.setCreated_date(dateTime);
                                                cmFetchTable.setSync(true);
                                                CMFetchTable cmFetchTableFromDB = dynamicUIDao.getTopCMFetchData(staffId, dateTime);
                                                if (cmFetchTableFromDB == null) {
                                                    dynamicUIDao.insertCMFetchTable(cmFetchTable);
                                                }

                                                // TODO: Final Result
                                                data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                insertLog("getCenterMeetingDetailsFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(FAILURE_RESPONSE_MESSAGE);
                insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<String> getCMDetailsFromServerForFetchOtherDay(List<FetchOtherDayCMDTO> fetchOtherDayCMDTOList, String staffId) {

        final MutableLiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            if (fetchOtherDayCMDTOList != null && fetchOtherDayCMDTOList.size() > 0) {
                List<String> centerNamesList = new ArrayList<>();

                for (FetchOtherDayCMDTO fetchOtherDayCMDTO : fetchOtherDayCMDTOList) {
                    if (fetchOtherDayCMDTO != null && !TextUtils.isEmpty(fetchOtherDayCMDTO.getCenterName()) && fetchOtherDayCMDTO.isSelected()) {
                        centerNamesList.add(fetchOtherDayCMDTO.getCenterName());
                    }
                }

                if (centerNamesList.size() > 0) {
                    final CMDataForOtherDayRequestDTO cmDataForOtherDayRequestDTO = new CMDataForOtherDayRequestDTO();
                    cmDataForOtherDayRequestDTO.setIMEINumber(appHelper.getIMEI());
                    cmDataForOtherDayRequestDTO.setProjectName(loanType);

                    CMDataForOtherDayRequestDTO.SpNameWithParameterClass spNameWithParameter = new CMDataForOtherDayRequestDTO.SpNameWithParameterClass();
                    spNameWithParameter.setSpName(SP_NAME_TO_GET_CENTER_DETAILS_FOR_FETCH_OTHER_DAY);

                    CMDataForOtherDayRequestDTO.SpParametersClass spParametersClass = new CMDataForOtherDayRequestDTO.SpParametersClass();
                    StringBuilder builder = new StringBuilder();
                    // Append all Integers in StringBuilder to the StringBuilder.
                    for (String center : centerNamesList) {
                        if (!TextUtils.isEmpty(center)) {
                            builder.append(center);
                            builder.append(",");
                        }
                    }
                    // Remove last delimiter with setLength.
                    builder.setLength(builder.length() - 1);
                    String centerName = builder.toString();
                    spParametersClass.setCenterName(centerName); // TODO: centers
//                    spParametersClass.setCenterName(centerNamesList.get(0)); // TODO: centers
                    spParametersClass.setLoId(staffId); // TODO: staff id

                    spNameWithParameter.setSpParameters(spParametersClass);

                    ArrayList<CMDataForOtherDayRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CMDataForOtherDayRequestDTO.SpNameWithParameterClass>();
                    SpNameWithParameterList.add(spNameWithParameter);
                    cmDataForOtherDayRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                    executor.execute(() -> {
                        String baseString = new Gson().toJson(cmDataForOtherDayRequestDTO, CMDataForOtherDayRequestDTO.class).replace("\\u003d", "=");
                        String k1 = SHA256Encrypt.sha256(baseString);
                        DynamicUIWebService.createService(DynamicUIWebservice.class).cmDetailsFromServerForFetchOtherDay(cmDataForOtherDayRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                                enqueue(new Callback<ResponseBody>() {
                                    @Override
                                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                        executor.execute(() -> {
                                            if (response.isSuccessful()) {
                                                try {
                                                    String strResponse = response.body().string();
                                                    JSONObject json = new JSONObject(strResponse);
                                                    String key = json.keys().next();

                                                    String tableJson = json.get(key).toString();
                                                    FetchOtherDayCMDataResponseDTO centerMeetingDataResponseDTO = new Gson().fromJson(tableJson, FetchOtherDayCMDataResponseDTO.class);
                                                    if (centerMeetingDataResponseDTO != null && centerMeetingDataResponseDTO.getFetchOtherDayCMTable() != null && centerMeetingDataResponseDTO.getFetchOtherDayCMTable().size() > 0) {
                                                        dynamicUIDao.deleteAndInsertFetchOtherDayCMDataFromServer(centerMeetingDataResponseDTO.getFetchOtherDayCMTable());

                                                        // TODO: Final Result
                                                        for (FetchOtherDayCMTable fetchOtherDayCMTable : centerMeetingDataResponseDTO.getFetchOtherDayCMTable()) {
                                                            if (fetchOtherDayCMTable != null) {
                                                                String fetchOtherDayTableJson = new Gson().toJson(fetchOtherDayCMTable, FetchOtherDayCMTable.class);
                                                                if (!TextUtils.isEmpty(fetchOtherDayTableJson)) {
                                                                    CenterMeetingTable centerMeetingTable = new Gson().fromJson(fetchOtherDayTableJson, CenterMeetingTable.class);
                                                                    if (centerMeetingTable != null) {
                                                                        CenterMeetingTable centerMeetingTableFromDB = dynamicUIDao.getCenterMeetingTableByCenterMeetingDateAndCenterIdAndLoanAccountNumber(centerMeetingTable.getCenterMeetingDate(), centerMeetingTable.getCenterId(), centerMeetingTable.getLoanAccountNumber());
                                                                        if (centerMeetingTableFromDB == null) {
                                                                            dynamicUIDao.insertCenterMeetingTable(centerMeetingTable);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                    } else {
                                                        // TODO: Sending result
                                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                    }
                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                    // TODO: Sending result
                                                    data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                    insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                }
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            }

                                        });
                                    }

                                    @Override
                                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                                        t.printStackTrace();
                                        // TODO: Sending result
                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                        insertLog("getCenterMeetingDetailsFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                    }
                                });


                    });
                } else {
                    data.postValue(FAILURE_RESPONSE_MESSAGE);
                }
            } else {
                data.postValue(FAILURE_RESPONSE_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(FAILURE_RESPONSE_MESSAGE);
                insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<List<OverDueCMDTO>> getCMDetailsFromServerForPendingOD(String staffId) {

        final MutableLiveData<List<OverDueCMDTO>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final CMDataForOtherDayRequestDTO cmDataForOtherDayRequestDTO = new CMDataForOtherDayRequestDTO();
            cmDataForOtherDayRequestDTO.setIMEINumber(appHelper.getIMEI());
            cmDataForOtherDayRequestDTO.setProjectName(loanType);

            CMDataForOtherDayRequestDTO.SpNameWithParameterClass spNameWithParameter = new CMDataForOtherDayRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_CENTER_DETAILS_FOR_OD_CLIENTS_PCS);

            CMDataForOtherDayRequestDTO.SpParametersClass spParametersClass = new CMDataForOtherDayRequestDTO.SpParametersClass();
//            spParametersClass.setCenterName(centerNamesList.get(0)); // TODO: centers
            spParametersClass.setLoId(staffId); // TODO: staff id

            spNameWithParameter.setSpParameters(spParametersClass);

            ArrayList<CMDataForOtherDayRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CMDataForOtherDayRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            cmDataForOtherDayRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {

                String baseString = new Gson().toJson(cmDataForOtherDayRequestDTO, CMDataForOtherDayRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).cmDetailsFromServerForFetchOtherDay(cmDataForOtherDayRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            OverDueCMDataResponseDTO centerMeetingDataResponseDTO = new Gson().fromJson(tableJson, OverDueCMDataResponseDTO.class);
                                            if (centerMeetingDataResponseDTO != null && centerMeetingDataResponseDTO.getOverDueCMTable() != null && centerMeetingDataResponseDTO.getOverDueCMTable().size() > 0) {
                                                for (OverDueCMTable overDueCMTable : centerMeetingDataResponseDTO.getOverDueCMTable()) {
                                                    overDueCMTable.setLoanOfficerId(staffId);
                                                }
                                                dynamicUIDao.deleteAndInsertOverDueCMDataFromServer(centerMeetingDataResponseDTO.getOverDueCMTable());

                                                List<OverDueCMDTO> overDueCMDTOList = new ArrayList<>();
                                                List<String> centerNameList = dynamicUIDao.getDistinctCentersFromOverDueCMTable(staffId);
                                                if (centerNameList != null && centerNameList.size() > 0) {
                                                    for (String centerName : centerNameList) {
                                                        List<OverDueCMTable> overDueCMTableList = dynamicUIDao.getMembersFromOverDueCMTable(centerName);
                                                        if (overDueCMTableList != null && overDueCMTableList.size() > 0) {
                                                            OverDueCMDTO overDueCMDTO = new OverDueCMDTO();
                                                            overDueCMDTO.setCenterName(centerName);
                                                            overDueCMDTO.setOverDueCMTableList(overDueCMTableList);
                                                            overDueCMDTOList.add(overDueCMDTO);

                                                        }
                                                    }

                                                }

                                                // TODO: Final Result
                                                data.postValue(overDueCMDTOList);
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(new ArrayList<>());
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(new ArrayList<>());
                                            insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(new ArrayList<>());
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(new ArrayList<>());
                                insertLog("getCenterMeetingDetailsFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });

        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(new ArrayList<>());
                insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }
    public LiveData<List<FTOverDueCMDTO>> getCMDetailsFromServerForPendingFTOD(String staffId) {

        final MutableLiveData<List<FTOverDueCMDTO>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final CMDataForOtherDayRequestDTO cmDataForOtherDayRequestDTO = new CMDataForOtherDayRequestDTO();
            cmDataForOtherDayRequestDTO.setIMEINumber(appHelper.getIMEI());
            cmDataForOtherDayRequestDTO.setProjectName(loanType);

            CMDataForOtherDayRequestDTO.SpNameWithParameterClass spNameWithParameter = new CMDataForOtherDayRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_CENTER_DETAILS_FOR_FTOD_CLIENTS_PCS);

            CMDataForOtherDayRequestDTO.SpParametersClass spParametersClass = new CMDataForOtherDayRequestDTO.SpParametersClass();
//            spParametersClass.setCenterName(centerNamesList.get(0)); // TODO: centers
            spParametersClass.setLoId(staffId); // TODO: staff id

            spNameWithParameter.setSpParameters(spParametersClass);

            ArrayList<CMDataForOtherDayRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CMDataForOtherDayRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            cmDataForOtherDayRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {
                String baseString = new Gson().toJson(cmDataForOtherDayRequestDTO, CMDataForOtherDayRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).cmDetailsFromServerForFetchOtherDay(cmDataForOtherDayRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            FTOverDueCMDataResponseDTO centerMeetingDataResponseDTO = new Gson().fromJson(tableJson, FTOverDueCMDataResponseDTO.class);
                                            if (centerMeetingDataResponseDTO != null && centerMeetingDataResponseDTO.getFTOverDueCMTable() != null && centerMeetingDataResponseDTO.getFTOverDueCMTable().size() > 0) {
                                                for (FTOverDueCMTable overDueCMTable : centerMeetingDataResponseDTO.getFTOverDueCMTable()) {
                                                    overDueCMTable.setLoanOfficerId(staffId);
                                                }
                                                dynamicUIDao.deleteAndInsertFTOverDueCMDataFromServer(centerMeetingDataResponseDTO.getFTOverDueCMTable());

                                                List<FTOverDueCMDTO> overDueCMDTOList = new ArrayList<>();
                                                List<String> centerNameList = dynamicUIDao.getDistinctCentersFromFTOverDueCMTable(staffId);
                                                if (centerNameList != null && centerNameList.size() > 0) {
                                                    for (String centerName : centerNameList) {
                                                        List<FTOverDueCMTable> overDueCMTableList = dynamicUIDao.getMembersFromFTOverDueCMTable(centerName);
                                                        if (overDueCMTableList != null && overDueCMTableList.size() > 0) {
                                                            FTOverDueCMDTO overDueCMDTO = new FTOverDueCMDTO();
                                                            overDueCMDTO.setCenterName(centerName);
                                                            overDueCMDTO.setFtOverDueCMTableList(overDueCMTableList);
                                                            overDueCMDTOList.add(overDueCMDTO);

                                                        }
                                                    }

                                                }

                                                // TODO: Final Result
                                                data.postValue(overDueCMDTOList);
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(new ArrayList<>());
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(new ArrayList<>());
                                            insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(new ArrayList<>());
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(new ArrayList<>());
                                insertLog("getCenterMeetingDetailsFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });

        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(new ArrayList<>());
                insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }
    public LiveData<List<String>> getCenterNamesFromServerForFetchOtherDay(String staffId) {

        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final CenterMeetingDataRequestDTO centerMeetingDataRequestDTO = new CenterMeetingDataRequestDTO();
            centerMeetingDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            centerMeetingDataRequestDTO.setProjectName(loanType);

            CenterMeetingDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CenterMeetingDataRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_CENTER_NAMES_FOR_FETCH_OTHER_DAY);

            CenterMeetingDataRequestDTO.SpParametersClass spParametersClass = new CenterMeetingDataRequestDTO.SpParametersClass();
//            spParametersClass.setCmDate(currentDate); // TODO: current date
            spParametersClass.setLoId(staffId); // TODO: staff id

            spNameWithParameter.setSpParameters(spParametersClass);

            ArrayList<CenterMeetingDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CenterMeetingDataRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            centerMeetingDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {
                String baseString = new Gson().toJson(centerMeetingDataRequestDTO, CenterMeetingDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).centerMeetingDataFromServer(centerMeetingDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            FetchOtherDayCMDataResponseDTO centerMeetingDataResponseDTO = new Gson().fromJson(tableJson, FetchOtherDayCMDataResponseDTO.class);
                                            if (centerMeetingDataResponseDTO != null && centerMeetingDataResponseDTO.getFetchOtherDayCMTable() != null && centerMeetingDataResponseDTO.getFetchOtherDayCMTable().size() > 0) {
                                                for (FetchOtherDayCMTable fetchOtherDayCMTable : centerMeetingDataResponseDTO.getFetchOtherDayCMTable()) {
                                                    fetchOtherDayCMTable.setLoanOfficerId(staffId);
                                                }
                                                dynamicUIDao.deleteAndInsertFetchOtherDayCMDataFromServer(centerMeetingDataResponseDTO.getFetchOtherDayCMTable());

                                                // TODO: Final Result
                                                List<String> distinctCenterNames = dynamicUIDao.getAllCenterNamesFromFetchOtherDayCMTableByUserId(staffId);
                                                data.postValue(distinctCenterNames);
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(new ArrayList<>());
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(new ArrayList<>());
                                            insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(new ArrayList<>());
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(new ArrayList<>());
                                insertLog("getCenterMeetingDetailsFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(new ArrayList<>());
                insertLog("getCenterMeetingDetailsFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<String> getEligibilityDataFromServer(String centerMeetingDate, String userId) {

        final MutableLiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final EligibilityRequestDTO eligibilityRequestDTO = new EligibilityRequestDTO();
            eligibilityRequestDTO.setIMEINumber(appHelper.getIMEI());
            eligibilityRequestDTO.setProjectName(loanType);
            EligibilityRequestDTO.SpNameWithParameterClass spNameWithParameter = new EligibilityRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_ELIGIBILITY_DETAILS);
            EligibilityRequestDTO.SpParametersClass spParametersClass = new EligibilityRequestDTO.SpParametersClass();
            spParametersClass.setCMDate(centerMeetingDate); // TODO: center meeting date
            spParametersClass.setLOID(userId); // TODO: user id

            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<EligibilityRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<EligibilityRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            eligibilityRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
            executor.execute(() -> {
                String baseString = new Gson().toJson(eligibilityRequestDTO, EligibilityRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getEligibilityDataFromServer(eligibilityRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            EligibilityResponseDTO eligibilityResponseDTO = new Gson().fromJson(tableJson, EligibilityResponseDTO.class);
                                            if (eligibilityResponseDTO != null && eligibilityResponseDTO.getEligibilityTable().size() > 0) {
                                                // TODO: Delete & insert Eligibility Table
                                                dynamicUIDao.deleteAndInsertEligibilityFromServer(eligibilityResponseDTO.getEligibilityTable());
                                                // TODO: Final Result
                                                data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            insertLog("getEligibilityDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                        insertLog("getEligibilityDataFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                insertLog("getEligibilityDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });


            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(FAILURE_RESPONSE_MESSAGE);
                insertLog("getEligibilityDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<String> getBranchProductFeatureMasterDataFromServer(String userId) {

        final MutableLiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            executor.execute(() -> {

                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection
                    LogInTable logInTable = dynamicUIDao.getLoginTable(userId);
                    if (logInTable != null) {
                        final BranchProductFeatureMasterRequestDTO branchProductFeatureMasterRequestDTO = new BranchProductFeatureMasterRequestDTO();
                        branchProductFeatureMasterRequestDTO.setIMEINumber(appHelper.getIMEI());
                        branchProductFeatureMasterRequestDTO.setProjectName(loanType);
                        BranchProductFeatureMasterRequestDTO.SpNameWithParameterClass spNameWithParameter = new BranchProductFeatureMasterRequestDTO.SpNameWithParameterClass();
                        spNameWithParameter.setSpName(SP_NAME_TO_GET_BRANCH_PRODUCT_FEATURE_MASTER_DETAILS_BY_BRANCH_ID);
                        BranchProductFeatureMasterRequestDTO.SpParametersClass spParametersClass = new BranchProductFeatureMasterRequestDTO.SpParametersClass();
                        spParametersClass.setBranchID("SIF161"); // TODO: hard coded
//                        spParametersClass.setBranchID(logInTable.getBranchID()); // TODO: branchID

                        spNameWithParameter.setSpParameters(spParametersClass);
                        ArrayList<BranchProductFeatureMasterRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<BranchProductFeatureMasterRequestDTO.SpNameWithParameterClass>();
                        SpNameWithParameterList.add(spNameWithParameter);
                        branchProductFeatureMasterRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                        String baseString = new Gson().toJson(branchProductFeatureMasterRequestDTO, BranchProductFeatureMasterRequestDTO.class).replace("\\u003d", "=");
                        String k1 = SHA256Encrypt.sha256(baseString);
                        DynamicUIWebService.createService(DynamicUIWebservice.class).getBranchProductFeatureMasterDataFromServer(branchProductFeatureMasterRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                                enqueue(new Callback<ResponseBody>() {
                                    @Override
                                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                        executor.execute(() -> {
                                            if (response.isSuccessful()) {
                                                try {
                                                    String strResponse = response.body().string();
                                                    JSONObject json = new JSONObject(strResponse);
                                                    String key = json.keys().next();

                                                    String tableJson = json.get(key).toString();
                                                    BranchProductFeatureMasterResponseDTO branchProductFeatureMasterResponseDTO = new Gson().fromJson(tableJson, BranchProductFeatureMasterResponseDTO.class);
                                                    if (branchProductFeatureMasterResponseDTO != null && branchProductFeatureMasterResponseDTO.getBranchProductFeatureMasterTable().size() > 0) {
                                                        // TODO: Delete & insert BranchProductFeatureMaster Table
                                                        dynamicUIDao.deleteAndInsertBranchProductFeatureMasterFromServer(branchProductFeatureMasterResponseDTO.getBranchProductFeatureMasterTable());
                                                        // TODO: Final Result
                                                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                    } else {
                                                        // TODO: Sending result
                                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                    }
                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                    // TODO: Sending result
                                                    data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                    insertLog("getBranchProductFeatureMasterDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                }
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                insertLog("getBranchProductFeatureMasterDataFromServer", response.message(), "", "", TAG, "", "", "");
                                            }

                                        });
                                    }

                                    @Override
                                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                                        t.printStackTrace();
                                        // TODO: Sending result
                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                        insertLog("getBranchProductFeatureMasterDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                    }
                                });
                    } else {
                        // TODO: Final Result
                        data.postValue(ERROR_MESSAGE_BCID_IS_MISSING);
                    }
                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(ERROR_MESSAGE_NO_INTERNET_CONNECTION);
                }


            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                data.postValue(FAILURE_RESPONSE_MESSAGE);
                insertLog("getBranchProductFeatureMasterDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    // TODO: SEND LOG TO SERVER
    public LiveData<String> sendLOGToServer(String staffId) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(LOG_TO_SERVER_URL);

            executor.execute(() -> {

                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    List<LogTable> logTableList = dynamicUIDao.loadLOGTable();

                    // TODO: List of LOGS
                    if (logTableList.size() > 0) {

                        List<LogRequestDTO> logRequestDTOList = new ArrayList<>();
                        for (LogTable logTable : logTableList) {
                            if (logTable != null) {
                                LogRequestDTO logRequestDTO = new LogRequestDTO();

                                logRequestDTO.setClientId(logTable.getClient_id());
                                logRequestDTO.setCreatedBy(staffId);
                                String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_DDMMYYYYSMS);
                                logRequestDTO.setUniqueId(timeStamp);
                                logRequestDTO.setProjectName(PROJECT_NAME_LOS);
                                logRequestDTO.setRequestFrom("Mobile App");
                                logRequestDTO.setTrackLocation(logTable.getMethodName());
                                logRequestDTO.setTrackMessage(logTable.getMessage());
                                logRequestDTO.setParameter1(logTable.getScreen_no());
                                logRequestDTO.setParameter2(logTable.getScreen_name());
                                logRequestDTO.setParameter5(logTable.getLoan_type());
                                logRequestDTO.setParameter6(logTable.getModule_type());
                                logRequestDTO.setParameter7(logTable.getImei_number());

                                logRequestDTOList.add(logRequestDTO);
                            }
                        }

                        if (logRequestDTOList.size() > 0) {
                            DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                            List<Observable<LogResponseDTO>> requests = new ArrayList<>();

                            for (LogRequestDTO logRequestDTO : logRequestDTOList) {
                                String baseString = new Gson().toJson(logRequestDTO, LogRequestDTO.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.sendLOGToServer(logRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                            }
                            if (requests.size() > 0) {

                                // Zip all requests with the Function, which will receive the results.
                                Disposable disposable = Observable.zip(requests,
                                        new Function<Object[], List<LogResponseDTO>>() {
                                            @Override
                                            public List<LogResponseDTO> apply(Object[] objects) throws Exception {

                                                List<LogResponseDTO> logResponseDTOArrayList = new ArrayList<>();
                                                try {
                                                    if (objects != null && objects.length > 0) {
                                                        if (logRequestDTOList.size() == objects.length) {
                                                            for (int i = 0; i < logRequestDTOList.size(); i++) {
                                                                LogResponseDTO logResponseDTO = (LogResponseDTO) objects[i];
                                                                if (logResponseDTO != null &&
                                                                        logResponseDTO.getStatus().equalsIgnoreCase("1")) {

                                                                    logResponseDTOArrayList.add(logResponseDTO);
                                                                }
                                                            }
                                                        }
                                                    }

                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                }
                                                return logResponseDTOArrayList;
                                            }
                                        }).subscribe(new Consumer<List<LogResponseDTO>>() {
                                                         @Override
                                                         public void accept(List<LogResponseDTO> logResponseDTOList) throws Exception {

                                                             if (logResponseDTOList != null && logResponseDTOList.size() > 0) {
                                                                 // TODO: Delete Log tvName DB
                                                                 dynamicUIDao.deleteLogTable();
                                                             }

                                                             // TODO: Final Result
                                                             data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                         }
                                                     },
                                        // Will be triggered if any error during requests will happen
                                        new Consumer<Throwable>() {
                                            @Override
                                            public void accept(Throwable e) throws Exception {
                                                //Do something on error completion of requests
                                                Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                                // TODO: Final Result
                                                data.postValue(e.getMessage());
                                            }
                                        }
                                );
                            } else {
                                // TODO: Final Result
                                data.postValue(ERROR_MESSAGE_NO_LOGS_TO_SEND);
                            }
                        } else {
                            // TODO: Final Result
                            data.postValue(ERROR_MESSAGE_NO_LOGS_TO_SEND);
                        }
                    } else {
                        // TODO: Final Result
                        data.postValue(ERROR_MESSAGE_NO_LOGS_TO_SEND);
                    }

                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(ERROR_MESSAGE_NO_INTERNET_CONNECTION);
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();

            // TODO: Final Result
            data.postValue(ERROR_MESSAGE_EXCEPTION);
        }
        return data;
    }

    // TODO: SEND Collection TO SERVER
    public LiveData<String> sendCollectionToServer(String staffId, List<CashCollectionSummaryDTO.IndividualCenterCollection> cashCollectionSummaryList) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            executor.execute(() -> {

                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    List<CashCollectionSummaryTable> cashCollectionSummaryTableList = dynamicUIDao.getCashCollectionSummaryTableList();

                    List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCenterMeetingCollectionTableList();
                    // TODO: get list for CenterMeetingAttendanceTable
                    List<CenterMeetingAttendanceTable> centerMeetingAttendanceTableList = dynamicUIDao.getCenterMeetingAttendanceTableList();
                    // TODO: get list for CashDenominationTable
                    List<CashDenominationTable> cashDenominationTableList = dynamicUIDao.getCashDenominationTableList();
                    // TODO: get list for StaffActivityTable
                    List<StaffActivityTable> staffActivityTableList = dynamicUIDao.getStaffActivityTableList();

                    // TODO: List of cash collection
                    if (centerMeetingCollectionTableList.size() > 0 && cashCollectionSummaryTableList.size() > 0
                            && centerMeetingAttendanceTableList.size() > 0 && cashDenominationTableList.size() > 0 && staffActivityTableList.size() > 0) {

                        // TODO:  CenterMeetingCollectionDataRequestDTO
                        List<CenterMeetingCollectionDataRequestDTO> centerMeetingCollectionDataRequestDTOList = new ArrayList<>();
                        // TODO:  CenterMeetingCollectionDataRequestDTO
                        List<CashCollectionDataRequestDTO> cashCollectionDataRequestDTOList = new ArrayList<>();
                        // TODO:  CenterMeetingAttendanceDataRequestDTO
                        List<CenterMeetingAttendanceDataRequestDTO> centerMeetingAttendanceDataRequestDTOList = new ArrayList<>();
                        // TODO:  CashDenominationTableDataRequestDTO
                        List<CashDenominationTableDataRequestDTO> cashDenominationTableDataRequestDTOList = new ArrayList<>();
                        // TODO:  StaffActivityTableDataRequestDTO
                        List<StaffActivityTableDataRequestDTO> staffActivityTableDataRequestDTOList = new ArrayList<>();

                        // TODO: getting all DTOs size
                        int allDTOList = 0;
                        // TODO: maintain all DTO list
                        List<AllCenterMeetingCollectionSPMaintainDTO> allCenterMeetingCollectionSPMaintainDTOList = new ArrayList<>();
                        String strTableNameCenterMeetingCollection = "CenterMeetingCollectionTable";
                        String strTableNameCashCollectionSummary = "CashCollectionSummaryTable";
                        String strTableNameCenterMeetingAttendance = "CenterMeetingAttendanceTable";
                        String strTableNameCashDenomination = "CashDenominationTable";
                        String strTableNameStaffActivity = "StaffActivityTable";

                        for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                            if (centerMeetingCollectionTable != null) {
                                CenterMeetingCollectionDataRequestDTO centerMeetingCollectionDataRequestDTO = new CenterMeetingCollectionDataRequestDTO();

                                centerMeetingCollectionDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                                centerMeetingCollectionDataRequestDTO.setProjectName(loanType);

                                CenterMeetingCollectionDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CenterMeetingCollectionDataRequestDTO.SpNameWithParameterClass();
                                spNameWithParameter.setSpName(SP_NAME_TO_POST_CENTER_MEETING_COLLECTION_DATA);

                                spNameWithParameter.setSpParameters(centerMeetingCollectionTable);

                                ArrayList<CenterMeetingCollectionDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CenterMeetingCollectionDataRequestDTO.SpNameWithParameterClass>();
                                SpNameWithParameterList.add(spNameWithParameter);
                                centerMeetingCollectionDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                                centerMeetingCollectionDataRequestDTOList.add(centerMeetingCollectionDataRequestDTO);

                                AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCenterMeetingCollection);
                                allCenterMeetingCollectionSPMaintainDTO.setTableRefID(centerMeetingCollectionTable.getRefId());
                                allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(centerMeetingCollectionTableList.indexOf(centerMeetingCollectionTable));
                                allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                            }
                        }

                        for (CashCollectionSummaryTable cashCollectionSummaryTable : cashCollectionSummaryTableList) {
                            if (cashCollectionSummaryTable != null) {
                                CashCollectionDataRequestDTO cashCollectionDataRequestDTO = new CashCollectionDataRequestDTO();

                                cashCollectionDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                                cashCollectionDataRequestDTO.setProjectName(loanType);

                                CashCollectionDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CashCollectionDataRequestDTO.SpNameWithParameterClass();
                                spNameWithParameter.setSpName(SP_NAME_TO_POST_CASH_COLLECTION_SUMMARY_DATA);

                                spNameWithParameter.setSpParameters(cashCollectionSummaryTable);

                                ArrayList<CashCollectionDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CashCollectionDataRequestDTO.SpNameWithParameterClass>();
                                SpNameWithParameterList.add(spNameWithParameter);
                                cashCollectionDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                                cashCollectionDataRequestDTOList.add(cashCollectionDataRequestDTO);

                                AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCashCollectionSummary);
                                allCenterMeetingCollectionSPMaintainDTO.setTableRefID(cashCollectionSummaryTable.getRefId());
                                allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(cashCollectionSummaryTableList.indexOf(cashCollectionSummaryTable));
                                allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                            }
                        }

                        for (CenterMeetingAttendanceTable centerMeetingAttendanceTable : centerMeetingAttendanceTableList) {
                            if (centerMeetingAttendanceTable != null) {
                                CenterMeetingAttendanceDataRequestDTO centerMeetingAttendanceDataRequestDTO = new CenterMeetingAttendanceDataRequestDTO();

                                centerMeetingAttendanceDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                                centerMeetingAttendanceDataRequestDTO.setProjectName(loanType);

                                CenterMeetingAttendanceDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CenterMeetingAttendanceDataRequestDTO.SpNameWithParameterClass();
                                spNameWithParameter.setSpName(SP_NAME_TO_POST_CENTER_MEETING_ATTENDANCE_DATA);

                                spNameWithParameter.setSpParameters(centerMeetingAttendanceTable);

                                ArrayList<CenterMeetingAttendanceDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CenterMeetingAttendanceDataRequestDTO.SpNameWithParameterClass>();
                                SpNameWithParameterList.add(spNameWithParameter);
                                centerMeetingAttendanceDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                                centerMeetingAttendanceDataRequestDTOList.add(centerMeetingAttendanceDataRequestDTO);

                                AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCenterMeetingAttendance);
                                allCenterMeetingCollectionSPMaintainDTO.setTableRefID(centerMeetingAttendanceTable.getRefId());
                                allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(centerMeetingAttendanceTableList.indexOf(centerMeetingAttendanceTable));
                                allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                            }
                        }

                        for (CashDenominationTable cashDenominationTable : cashDenominationTableList) {
                            if (cashDenominationTable != null) {
                                CashDenominationTableDataRequestDTO cashDenominationTableDataRequestDTO = new CashDenominationTableDataRequestDTO();

                                cashDenominationTableDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                                cashDenominationTableDataRequestDTO.setProjectName(loanType);

                                CashDenominationTableDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CashDenominationTableDataRequestDTO.SpNameWithParameterClass();
                                spNameWithParameter.setSpName(SP_NAME_TO_POST_CASH_DENOMINATION_DATA);

                                spNameWithParameter.setSpParameters(cashDenominationTable);

                                ArrayList<CashDenominationTableDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CashDenominationTableDataRequestDTO.SpNameWithParameterClass>();
                                SpNameWithParameterList.add(spNameWithParameter);
                                cashDenominationTableDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                                cashDenominationTableDataRequestDTOList.add(cashDenominationTableDataRequestDTO);

                                AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCashDenomination);
                                allCenterMeetingCollectionSPMaintainDTO.setTableRefID(cashDenominationTable.getRefId());
                                allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(cashDenominationTableList.indexOf(cashDenominationTable));
                                allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                            }
                        }

                        for (StaffActivityTable staffActivityTable : staffActivityTableList) {
                            if (staffActivityTable != null) {
                                StaffActivityTableDataRequestDTO staffActivityTableDataRequestDTO = new StaffActivityTableDataRequestDTO();

                                staffActivityTableDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                                staffActivityTableDataRequestDTO.setProjectName(loanType);

                                StaffActivityTableDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new StaffActivityTableDataRequestDTO.SpNameWithParameterClass();
                                spNameWithParameter.setSpName(SP_NAME_TO_POST_STAFF_ACTIVITY_DATA);

                                spNameWithParameter.setSpParameters(staffActivityTable);

                                ArrayList<StaffActivityTableDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<StaffActivityTableDataRequestDTO.SpNameWithParameterClass>();
                                SpNameWithParameterList.add(spNameWithParameter);
                                staffActivityTableDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                                staffActivityTableDataRequestDTOList.add(staffActivityTableDataRequestDTO);

                                AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameStaffActivity);
                                allCenterMeetingCollectionSPMaintainDTO.setTableRefID(staffActivityTable.getRefId());
                                allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(staffActivityTableList.indexOf(staffActivityTable));
                                allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                            }
                        }

                        // TODO: creating all requests(centermeetingcollection, cashcollection)
                        if (centerMeetingCollectionDataRequestDTOList.size() > 0 && cashCollectionDataRequestDTOList.size() > 0
                                && centerMeetingAttendanceDataRequestDTOList.size() > 0 && cashDenominationTableDataRequestDTOList.size() > 0 && staffActivityTableDataRequestDTOList.size() > 0) {
                            // TODO: getting all DTOs size
                            allDTOList = allDTOList + centerMeetingCollectionDataRequestDTOList.size();
                            allDTOList = allDTOList + cashCollectionDataRequestDTOList.size();
                            allDTOList = allDTOList + centerMeetingAttendanceDataRequestDTOList.size();
                            allDTOList = allDTOList + cashDenominationTableDataRequestDTOList.size();
                            allDTOList = allDTOList + staffActivityTableDataRequestDTOList.size();

                            DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                            List<Observable<ResponseBody>> requests = new ArrayList<>();

                            // TODO: requests added for CenterMeetingCollectionDataRequestDTO
                            for (CenterMeetingCollectionDataRequestDTO centerMeetingCollectionDataRequestDTO : centerMeetingCollectionDataRequestDTOList) {
                                String baseString = new Gson().toJson(centerMeetingCollectionDataRequestDTO, CenterMeetingCollectionDataRequestDTO.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.sendCenterMeetingCollectionToServer(centerMeetingCollectionDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));

                            }
                            // TODO: requests added for CashCollectionDataRequestDTO
                            for (CashCollectionDataRequestDTO cashCollectionDataRequestDTO : cashCollectionDataRequestDTOList) {
                                String baseString = new Gson().toJson(cashCollectionDataRequestDTO, CashCollectionDataRequestDTO.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.sendCashCollectionToServer(cashCollectionDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                            }
                            // TODO: requests added for CenterMeetingAttendanceDataRequestDTO
                            for (CenterMeetingAttendanceDataRequestDTO centerMeetingAttendanceDataRequestDTO : centerMeetingAttendanceDataRequestDTOList) {
                                String baseString = new Gson().toJson(centerMeetingAttendanceDataRequestDTO, CenterMeetingAttendanceDataRequestDTO.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.sendCenterMeetingAttendanceToServer(centerMeetingAttendanceDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                            }
                            // TODO: requests added for CenterMeetingAttendanceDataRequestDTO
                            for (CashDenominationTableDataRequestDTO cashDenominationTableDataRequestDTO : cashDenominationTableDataRequestDTOList) {
                                String baseString = new Gson().toJson(cashDenominationTableDataRequestDTO, CashDenominationTableDataRequestDTO.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.sendCashDenominationToServer(cashDenominationTableDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                            }
                            // TODO: requests added for StaffActivityTableDataRequestDTO
                            for (StaffActivityTableDataRequestDTO staffActivityTableDataRequestDTO : staffActivityTableDataRequestDTOList) {
                                String baseString = new Gson().toJson(staffActivityTableDataRequestDTO, StaffActivityTableDataRequestDTO.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.sendStaffActivityToServer(staffActivityTableDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                            }

                            if (requests.size() > 0) {

//                                int finalAllDTOList = allDTOList;

                                // Zip all requests with the Function, which will receive the results.
                                Disposable disposable = Observable.zip(requests,
                                        new Function<Object[], List<AllCenterMeetingCollectionSPMaintainDTO>>() {
                                            @Override
                                            public List<AllCenterMeetingCollectionSPMaintainDTO> apply(Object[] objects) throws Exception {

//                                                List<ResponseBody> responseBodyArrayList = new ArrayList<>();
                                                try {
                                                    if (objects != null && objects.length > 0) {
                                                        if (allCenterMeetingCollectionSPMaintainDTOList.size() == objects.length) {
                                                            for (int i = 0; i < allCenterMeetingCollectionSPMaintainDTOList.size(); i++) {
                                                                ResponseBody responseBody = (ResponseBody) objects[i];
                                                                String strResponse = responseBody.string();
                                                                JSONObject json = new JSONObject(strResponse);
                                                                if (json.length() > 0) {
                                                                    String key = json.keys().next();

                                                                    String tableJson = json.get(key).toString();
                                                                    if (!TextUtils.isEmpty(tableJson)) {
                                                                        allCenterMeetingCollectionSPMaintainDTOList.get(i).setResponseJson(tableJson);
//                                                                        responseBodyArrayList.add(responseBody);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                }
                                                return allCenterMeetingCollectionSPMaintainDTOList;
                                            }
                                        }).subscribe(new Consumer<List<AllCenterMeetingCollectionSPMaintainDTO>>() {
                                                         @Override
                                                         public void accept(List<AllCenterMeetingCollectionSPMaintainDTO> collectionResponseDTOArrayList) throws Exception {
                                                             Log.d(TAG, "accept: " + "abc");
                                                             if (collectionResponseDTOArrayList != null && collectionResponseDTOArrayList.size() > 0) {
                                                                 boolean allSynced = true;
                                                                 for (int i = 0; i < collectionResponseDTOArrayList.size(); i++) {
                                                                     AllCenterMeetingCollectionSPMaintainDTO collectionResponseDTO = (AllCenterMeetingCollectionSPMaintainDTO) collectionResponseDTOArrayList.get(i);
                                                                     String responseJson = collectionResponseDTO.getResponseJson();
                                                                     String tableName = collectionResponseDTO.getTableName();
                                                                     int tableFieldPOS = collectionResponseDTO.getTableFieldPOS();
                                                                     String tableRefID = collectionResponseDTO.getTableRefID();
                                                                     if (!TextUtils.isEmpty(tableName) && !TextUtils.isEmpty(tableRefID) && !TextUtils.isEmpty(responseJson)) {
                                                                         if (tableName.equalsIgnoreCase(strTableNameCenterMeetingCollection)) {
                                                                             for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                                                                                 if (centerMeetingCollectionTable != null && tableRefID.equalsIgnoreCase(centerMeetingCollectionTable.getRefId())) {
                                                                                     // TODO: sync centerMeetingCollectionTable
                                                                                     dynamicUIDao.syncCenterMeetingCollectionTableByRefId(tableRefID);
                                                                                 }
                                                                             }
                                                                         } else if (tableName.equalsIgnoreCase(strTableNameCashCollectionSummary)) {
                                                                             for (CashCollectionSummaryTable cashCollectionSummaryTable : cashCollectionSummaryTableList) {
                                                                                 if (cashCollectionSummaryTable != null && tableRefID.equalsIgnoreCase(cashCollectionSummaryTable.getRefId())) {
                                                                                     // TODO: sync cashCollectionSummaryTable
                                                                                     dynamicUIDao.syncCashCollectionSummaryTableByRefId(tableRefID);
                                                                                 }
                                                                             }
                                                                         } else if (tableName.equalsIgnoreCase(strTableNameCenterMeetingAttendance)) {
                                                                             for (CenterMeetingAttendanceTable centerMeetingAttendanceTable : centerMeetingAttendanceTableList) {
                                                                                 if (centerMeetingAttendanceTable != null && tableRefID.equalsIgnoreCase(centerMeetingAttendanceTable.getRefId())) {
                                                                                     // TODO: sync centerMeetingAttendanceTable
                                                                                     dynamicUIDao.syncCenterMeetingAttendanceTableByRefId(tableRefID);
                                                                                 }
                                                                             }
                                                                         } else if (tableName.equalsIgnoreCase(strTableNameCashDenomination)) {
                                                                             for (CashDenominationTable cashDenominationTable : cashDenominationTableList) {
                                                                                 if (cashDenominationTable != null && tableRefID.equalsIgnoreCase(cashDenominationTable.getRefId())) {
                                                                                     // TODO: sync cashDenominationTable
                                                                                     dynamicUIDao.syncCashDenominationTableByRefId(tableRefID);
                                                                                 }
                                                                             }
                                                                         } else if (tableName.equalsIgnoreCase(strTableNameStaffActivity)) {
                                                                             for (StaffActivityTable staffActivityTable : staffActivityTableList) {
                                                                                 if (staffActivityTable != null && tableRefID.equalsIgnoreCase(staffActivityTable.getRefId())) {
                                                                                     // TODO: sync staffActivityTable
                                                                                     dynamicUIDao.syncStaffActivityTableByRefId(tableRefID);
                                                                                 }
                                                                             }
                                                                         }
                                                                     } else {
                                                                         allSynced = false;
                                                                     }
                                                                 }
                                                                 if (allSynced) {
                                                                     // TODO: Final Result
                                                                     data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                                 } else {
                                                                     // TODO: Final Result
                                                                     data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                                 }
                                                             } else {
                                                                 // TODO: Final Result
                                                                 data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                             }
                                                         }
                                                     },
                                        // Will be triggered if any error during requests will happen
                                        new Consumer<Throwable>() {
                                            @Override
                                            public void accept(Throwable e) throws Exception {
                                                //Do something on error completion of requests
                                                Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                                // TODO: Final Result
                                                data.postValue(e.getMessage());
                                            }
                                        }
                                );
                            } else {
                                // TODO: Final Result
                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                            }
                        } else {
                            // TODO: Final Result
                            data.postValue(FAILURE_RESPONSE_MESSAGE);
                        }
                    } else {
                        // TODO: Final Result
                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                    }

                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(ERROR_MESSAGE_NO_INTERNET_CONNECTION);
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();

            // TODO: Final Result
            data.postValue(ERROR_MESSAGE_EXCEPTION);
        }
        return data;
    }

    // TODO: SEND Collection TO SERVER
    public LiveData<String> sendCollectionToServerNew(String staffId, List<CashCollectionSummaryDTO.IndividualCenterCollection> cashCollectionSummaryList) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            executor.execute(() -> {

                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    List<CashCollectionSummaryTable> cashCollectionSummaryTableList = dynamicUIDao.getCashCollectionSummaryTableList();

                    List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCenterMeetingCollectionTableList();
                    // TODO: get list for CenterMeetingAttendanceTable
                    List<CenterMeetingAttendanceTable> centerMeetingAttendanceTableList = new ArrayList<>();
                    // TODO: get list for CashDenominationTable
                    List<CashDenominationTable> cashDenominationTableList = dynamicUIDao.getCashDenominationTableList();
                    // TODO: get list for StaffActivityTable
                    List<StaffActivityTable> staffActivityTableList = dynamicUIDao.getStaffActivityTableList();

                    List<String> centerNameList = dynamicUIDao.getDistinctCenterNameFromCenterMeetingCollectionTable();
                    if (centerNameList != null && centerNameList.size() > 0) {
                        for (String centerName : centerNameList) {
                            if (!TextUtils.isEmpty(centerName)) {
                                List<CenterMeetingAttendanceTable> centerMeetingAttendanceTableListByCenterName = dynamicUIDao.getCMAttendanceTableListByCenterName(centerName);
                                if (centerMeetingAttendanceTableListByCenterName != null && centerMeetingAttendanceTableListByCenterName.size() > 0) {
                                    centerMeetingAttendanceTableList.addAll(centerMeetingAttendanceTableListByCenterName);
                                }
                            }
                        }
                    }

                    // TODO: List of cash collection
                    if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                        // TODO: maintain all DTO list
                        List<AllCenterMeetingCollectionSPMaintainDTO> allCenterMeetingCollectionSPMaintainDTOList = new ArrayList<>();
                        String strTableNameCenterMeetingCollection = "CenterMeetingCollectionTable";
                        String strTableNameCashCollectionSummary = "CashCollectionSummaryTable";
                        String strTableNameCenterMeetingAttendance = "CenterMeetingAttendanceTable";
                        String strTableNameCashDenomination = "CashDenominationTable";
                        String strTableNameStaffActivity = "StaffActivityTable";

                        if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                            for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                                if (centerMeetingCollectionTable != null) {
                                    AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                    allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCenterMeetingCollection);
                                    allCenterMeetingCollectionSPMaintainDTO.setTableRefID(centerMeetingCollectionTable.getRefId());
                                    allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(centerMeetingCollectionTableList.indexOf(centerMeetingCollectionTable));
                                    allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                                }
                            }
                        }

                        if (cashCollectionSummaryTableList != null && cashCollectionSummaryTableList.size() > 0) {
                            for (CashCollectionSummaryTable cashCollectionSummaryTable : cashCollectionSummaryTableList) {
                                if (cashCollectionSummaryTable != null) {
                                    AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                    allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCashCollectionSummary);
                                    allCenterMeetingCollectionSPMaintainDTO.setTableRefID(cashCollectionSummaryTable.getRefId());
                                    allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(cashCollectionSummaryTableList.indexOf(cashCollectionSummaryTable));
                                    allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                                }
                            }
                        }

                        if (centerMeetingAttendanceTableList != null && centerMeetingAttendanceTableList.size() > 0) {
                            for (CenterMeetingAttendanceTable centerMeetingAttendanceTable : centerMeetingAttendanceTableList) {
                                if (centerMeetingAttendanceTable != null) {
                                    AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                    allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCenterMeetingAttendance);
                                    allCenterMeetingCollectionSPMaintainDTO.setTableRefID(centerMeetingAttendanceTable.getRefId());
                                    allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(centerMeetingAttendanceTableList.indexOf(centerMeetingAttendanceTable));
                                    allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                                }
                            }
                        }

                        if (cashDenominationTableList != null && cashDenominationTableList.size() > 0) {
                            for (CashDenominationTable cashDenominationTable : cashDenominationTableList) {
                                if (cashDenominationTable != null) {
                                    AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                    allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameCashDenomination);
                                    allCenterMeetingCollectionSPMaintainDTO.setTableRefID(cashDenominationTable.getRefId());
                                    allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(cashDenominationTableList.indexOf(cashDenominationTable));
                                    allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                                }
                            }
                        }

                        if (staffActivityTableList != null && staffActivityTableList.size() > 0) {
                            for (StaffActivityTable staffActivityTable : staffActivityTableList) {
                                if (staffActivityTable != null) {
                                    AllCenterMeetingCollectionSPMaintainDTO allCenterMeetingCollectionSPMaintainDTO = new AllCenterMeetingCollectionSPMaintainDTO();
                                    allCenterMeetingCollectionSPMaintainDTO.setTableName(strTableNameStaffActivity);
                                    allCenterMeetingCollectionSPMaintainDTO.setTableRefID(staffActivityTable.getRefId());
                                    allCenterMeetingCollectionSPMaintainDTO.setTableFieldPOS(staffActivityTableList.indexOf(staffActivityTable));
                                    allCenterMeetingCollectionSPMaintainDTOList.add(allCenterMeetingCollectionSPMaintainDTO);
                                }
                            }
                        }

                        CenterMeetingAllCollectionMainRequestDTO centerMeetingAllCollectionMainRequestDTO = new CenterMeetingAllCollectionMainRequestDTO();

                        centerMeetingAllCollectionMainRequestDTO.setIMEINumber(appHelper.getIMEI());
                        centerMeetingAllCollectionMainRequestDTO.setProjectName(loanType);

                        CenterMeetingAllCollectionMainRequestDTO.SpNameWithParameterClass spNameWithParameter = new CenterMeetingAllCollectionMainRequestDTO.SpNameWithParameterClass();
                        spNameWithParameter.setSpName(SP_NAME_TO_POST_EXPORT_STAFF_DATA_BAG);

                        CenterMeetingAllCollectionMainRequestDTO.SpParametersClass spParametersClass = new CenterMeetingAllCollectionMainRequestDTO.SpParametersClass();
                        spParametersClass.setCreatedBy(staffId); // TODO: user id

                        ArrayList<CenterMeetingAllCollectionMainRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CenterMeetingAllCollectionMainRequestDTO.SpNameWithParameterClass>();
                        SpNameWithParameterList.add(spNameWithParameter);
                        centerMeetingAllCollectionMainRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                        CenterMeetingAllCollectionTablesDataRequestDTO centerMeetingAllCollectionTablesDataRequestDTO = new CenterMeetingAllCollectionTablesDataRequestDTO();

                        centerMeetingAllCollectionTablesDataRequestDTO.setStaffId("SIF1008020");
                        centerMeetingAllCollectionTablesDataRequestDTO.setBranch("SIM3829");
                        centerMeetingAllCollectionTablesDataRequestDTO.setSOD("2020-08-20");

                        CenterMeetingAllCollectionTablesDataRequestDTO.StaffDatabag staffDatabag = new CenterMeetingAllCollectionTablesDataRequestDTO.StaffDatabag();

                        if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                            staffDatabag.setCenterMeetingCollectionTableArrayList(centerMeetingCollectionTableList);
                        }
                        if (cashCollectionSummaryTableList != null && cashCollectionSummaryTableList.size() > 0) {
                            staffDatabag.setCashCollectionSummaryTableArrayList(cashCollectionSummaryTableList);
                        }
                        if (centerMeetingAttendanceTableList != null && centerMeetingAttendanceTableList.size() > 0) {
                            staffDatabag.setCenterMeetingAttendanceTableArrayList(centerMeetingAttendanceTableList);
                        }
                        if (cashDenominationTableList != null && cashDenominationTableList.size() > 0) {
                            staffDatabag.setCashDenominationTableArrayList(cashDenominationTableList);
                        }
                        if (staffActivityTableList != null && staffActivityTableList.size() > 0) {
                            staffDatabag.setStaffActivityTableArrayList(staffActivityTableList);
                        }

                        centerMeetingAllCollectionTablesDataRequestDTO.setStaffDatabag(staffDatabag);

                        GsonBuilder builder = new GsonBuilder();
                        builder.excludeFieldsWithoutExposeAnnotation();
                        Gson gson = builder.create();

                        String request = gson.toJson(centerMeetingAllCollectionTablesDataRequestDTO, CenterMeetingAllCollectionTablesDataRequestDTO.class);
//                        String request = new Gson().toJson(centerMeetingAllCollectionTablesDataRequestDTO, CenterMeetingAllCollectionTablesDataRequestDTO.class);
                        spParametersClass.setRawCollection(request); // TODO: raw collection
//                        spParametersClass.setRawCollection(centerMeetingAllCollectionTablesDataRequestDTO.toString()); // TODO: raw collection

                        spNameWithParameter.setSpParameters(spParametersClass);
                        String baseString = new Gson().toJson(centerMeetingAllCollectionMainRequestDTO, CenterMeetingAllCollectionMainRequestDTO.class).replace("\\u003d", "=");
                        String k1 = SHA256Encrypt.sha256(baseString);
                        DynamicUIWebService.createService(DynamicUIWebservice.class).sendCenterMeetingAllCollectionTablesDataToServer(centerMeetingAllCollectionMainRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                                enqueue(new Callback<ResponseBody>() {
                                    @Override
                                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                        executor.execute(() -> {
                                            if (response.isSuccessful()) {
                                                try {
                                                    String strResponse = response.body().string();
                                                    JSONObject json = new JSONObject(strResponse);
                                                    String key = json.keys().next();

                                                    String tableJson = json.get(key).toString();
                                                    CenterMeetingAllCollectionMainResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, CenterMeetingAllCollectionMainResponseDTO.class);
                                                    if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                        String serverResponse = rawDataResponseDTO.getTable().get(0).getResponse();
                                                        if (!TextUtils.isEmpty(serverResponse) && serverResponse.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                            if (allCenterMeetingCollectionSPMaintainDTOList != null && allCenterMeetingCollectionSPMaintainDTOList.size() > 0) {
                                                                for (int i = 0; i < allCenterMeetingCollectionSPMaintainDTOList.size(); i++) {
                                                                    AllCenterMeetingCollectionSPMaintainDTO collectionResponseDTO = (AllCenterMeetingCollectionSPMaintainDTO) allCenterMeetingCollectionSPMaintainDTOList.get(i);
                                                                    String tableName = collectionResponseDTO.getTableName();
                                                                    String tableRefID = collectionResponseDTO.getTableRefID();
                                                                    if (!TextUtils.isEmpty(tableName) && !TextUtils.isEmpty(tableRefID)) {
                                                                        if (tableName.equalsIgnoreCase(strTableNameCenterMeetingCollection)) {
                                                                            for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                                                                                if (centerMeetingCollectionTable != null && tableRefID.equalsIgnoreCase(centerMeetingCollectionTable.getRefId())) {
                                                                                    // TODO: sync centerMeetingCollectionTable
                                                                                    dynamicUIDao.syncCenterMeetingCollectionTableByRefId(tableRefID);
                                                                                }
                                                                            }
                                                                        } else if (tableName.equalsIgnoreCase(strTableNameCashCollectionSummary)) {
                                                                            for (CashCollectionSummaryTable cashCollectionSummaryTable : cashCollectionSummaryTableList) {
                                                                                if (cashCollectionSummaryTable != null && tableRefID.equalsIgnoreCase(cashCollectionSummaryTable.getRefId())) {
                                                                                    // TODO: sync cashCollectionSummaryTable
                                                                                    dynamicUIDao.syncCashCollectionSummaryTableByRefId(tableRefID);
                                                                                }
                                                                            }
                                                                        } else if (tableName.equalsIgnoreCase(strTableNameCenterMeetingAttendance)) {
                                                                            for (CenterMeetingAttendanceTable centerMeetingAttendanceTable : centerMeetingAttendanceTableList) {
                                                                                if (centerMeetingAttendanceTable != null && tableRefID.equalsIgnoreCase(centerMeetingAttendanceTable.getRefId())) {
                                                                                    // TODO: sync centerMeetingAttendanceTable
                                                                                    dynamicUIDao.syncCenterMeetingAttendanceTableByRefId(tableRefID);
                                                                                }
                                                                            }
                                                                        } else if (tableName.equalsIgnoreCase(strTableNameCashDenomination)) {
                                                                            for (CashDenominationTable cashDenominationTable : cashDenominationTableList) {
                                                                                if (cashDenominationTable != null && tableRefID.equalsIgnoreCase(cashDenominationTable.getRefId())) {
                                                                                    // TODO: sync cashDenominationTable
                                                                                    dynamicUIDao.syncCashDenominationTableByRefId(tableRefID);
                                                                                }
                                                                            }
                                                                        } else if (tableName.equalsIgnoreCase(strTableNameStaffActivity)) {
                                                                            for (StaffActivityTable staffActivityTable : staffActivityTableList) {
                                                                                if (staffActivityTable != null && tableRefID.equalsIgnoreCase(staffActivityTable.getRefId())) {
                                                                                    // TODO: sync staffActivityTable
                                                                                    dynamicUIDao.syncStaffActivityTableByRefId(tableRefID);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            // TODO: Sending result
                                                            data.postValue(SUCCESS_RESPONSE_MESSAGE);
                                                        } else {
                                                            // TODO: Sending result
                                                            data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                        }

                                                    } else {
                                                        // TODO: Sending result
                                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                    }
                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                    data.postValue(FAILURE_RESPONSE_MESSAGE);
                                                }
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(FAILURE_RESPONSE_MESSAGE);
                                            }

                                        });
                                    }

                                    @Override
                                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                                        t.printStackTrace();
                                        // TODO: Sending result
                                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                                        insertLog("getBranchProductFeatureMasterDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                    }
                                });
                    } else {
                        // TODO: Final Result
                        data.postValue(FAILURE_RESPONSE_MESSAGE);
                    }

                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(ERROR_MESSAGE_NO_INTERNET_CONNECTION);
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();

            // TODO: Final Result
            data.postValue(ERROR_MESSAGE_EXCEPTION);
        }
        return data;
    }

    // TODO: GET META DATA FOR MULTIPLE SCREENS
    public LiveData<List<MasterTable>> getMetaDataForMultipleScreen(List<RawDataResponseDTO.Table> rawDataFromServerList,
                                                                    String loanType, String userId, String productId, String currentStage) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(BASE_URL);

            executor.execute(() -> {

                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    if (rawDataFromServerList.size() > 0) {
                        DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                        List<Observable<List<DynamicUITable>>> requests = new ArrayList<>();

                        // TODO: Getting screen numbers tvName raw data server table
                        List<String> screenList = dynamicUIDao.getDistinctScreenNumbersFromRawDataServerTable();

                        if (screenList != null && screenList.size() > 0) {
                            for (String screenNo : screenList) {
                                if (!TextUtils.isEmpty(screenNo) && !screenNo.equalsIgnoreCase(SCREEN_NO_ZERO)) { // TODO: Screen id should not be zero
                                    requests.add(service.getMetaDataServer(screenNo, PROJECT_ID_EL, productId,
                                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")));
                                }
                            }
                        }
                        if (requests.size() > 0) {

                            DynamicUIWebService.changeApiBaseUrl(BASE_URL);

                            // Zip all requests with the Function, which will receive the results.
                            Disposable disposable = Observable.zip(requests,
                                    new Function<Object[], Object[]>() {
                                        @Override
                                        public Object[] apply(Object[] objects) throws Exception {
                                            // TODO: Deleting & Inserting Dynamic UI Table in apply method
                                            try {
                                                if (objects != null && objects.length > 0) {

                                                    if (screenList.size() == objects.length) {
                                                        for (int i = 0; i < screenList.size(); i++) {
                                                            List<DynamicUITable> dynamicUITableList = (List<DynamicUITable>) objects[i];
                                                            if (dynamicUITableList != null &&
                                                                    dynamicUITableList.size() > 0) {

                                                                // TODO: GETTING SCREEN DETAILS BY SCREEN ID & MODULE TYPE
                                                                ScreenDetailsDTO screenDetailsDTO = getScreenDetailsByScreenId(String.valueOf(
                                                                        screenList.get(i)), "");

                                                                if (screenDetailsDTO != null && !TextUtils.isEmpty(screenDetailsDTO.getScreenName())) {

                                                                    for (DynamicUITable dynamicUITable : dynamicUITableList) {
                                                                        dynamicUITable.setScreenID(screenDetailsDTO.getScreenId());
                                                                        dynamicUITable.setScreenName(screenDetailsDTO.getScreenName());
                                                                        dynamicUITable.setLoanType(loanType);
                                                                        // TODO: Default first client id tvName raw data server list
                                                                        dynamicUITable.setClientID(rawDataFromServerList.get(0).getCustomerId());
                                                                        dynamicUITable.setUser_id(userId);
                                                                        dynamicUITable.setModuleType(screenDetailsDTO.getModuleType());
                                                                        dynamicUITable.setProductId(productId);
                                                                    }
                                                                    List<DynamicUITable> dynamicUITableListFromDB = dynamicUIDao.getTableBasedOnScreen(screenList.get(i));

                                                                    if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                                                                        // TODO: Deleting & Inserting Dynamic UI Table
                                                                        dynamicUIDao.deleteAndInsertDynamicUITable(dynamicUITableList, screenList.get(i));

                                                                        if (dynamicUITableList.size() > 0) {
                                                                            List<DuplicateDynamicUITable> duplicateDynamicUITableList = createDuplicateTable(dynamicUITableList);
                                                                            if (duplicateDynamicUITableList.size() > 0) {
                                                                                dynamicUIDao.insertAndDeleteInDuplicateTable(duplicateDynamicUITableList, screenList.get(i));
                                                                            }
                                                                        }

                                                                    } else {
                                                                        // TODO: Inserting Dynamic UI Table List
                                                                        dynamicUIDao.save(dynamicUITableList);
                                                                        if (dynamicUITableList.size() > 0) {
                                                                            List<DuplicateDynamicUITable> duplicateDynamicUITableList = createDuplicateTable(dynamicUITableList);
                                                                            if (duplicateDynamicUITableList.size() > 0) {
                                                                                dynamicUIDao.saveDuplicateTable(duplicateDynamicUITableList);
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }
                                                    }

                                                }

                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                                insertLog("getMetaDataForMultipleScreen", ex.getMessage(), "", "", TAG, "", "", "");
                                            }
                                            return objects;
                                        }
                                    }).subscribe(new Consumer<Object[]>() {
                                                     @Override
                                                     public void accept(Object[] objects) throws Exception {
                                                         // TODO: deleting rawdatatable for below screens
                                                         for (RawDataResponseDTO.Table table : rawDataFromServerList) {
                                                             if (!TextUtils.isEmpty(String.valueOf(table.getScreenId()))) {
                                                                 if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_MSME)) {
                                                                     if (String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_REFERENCE_CHECK_MSME)
                                                                             || String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_BANK_DETAILS_MSME)
                                                                             || String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_CO_APPLICANT_BANK_DETAILS_MSME)
                                                                             || String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_BUSINESS_PROOF_MSME)) {
                                                                         dynamicUIDao.deleteRawDataByScreenNoAndLoanType(String.valueOf(table.getScreenId()), table.getCustomerId(), loanType);
                                                                     }
                                                                 }
                                                             }
                                                         }
                                                         // TODO: Setting values in dynamic ui table , raw table , dynamicUiRawTable in accept method
                                                         for (RawDataResponseDTO.Table table : rawDataFromServerList) {

                                                             List<DynamicUITable> dynamicUITableListFromDB = (dynamicUIDao.getTableBasedOnScreen(String.valueOf(table.getScreenId())));
                                                             if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                                                                 // TODO: Update Client for that screen in dynamic ui table [ because different client id will be there ]
                                                                 dynamicUIDao.updateDynamicTableClientIdByScreenId(String.valueOf(table.getScreenId()), table.getCustomerId());

                                                                 try {
                                                                     // TODO: DOCUMENT UPLOAD SCREEN
                                                                     if (String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_N0_DOCUMENT_UPLOAD_MSME)) {
                                                                         // TODO: Insert Document Raw Data

                                                                         final RawDataTable rawDataTable = new RawDataTable(table.getRwas()
                                                                                 , SCREEN_N0_DOCUMENT_UPLOAD_MSME, SCREEN_NAME_DOCUMENT_UPLOAD,
                                                                                 "", table.getCustomerId(), loanType,
                                                                                 userId, MODULE_TYPE_DOCUMENTS
                                                                                 , "");

                                                                         int refId = 1;
                                                                         rawDataTable.setRef_id(refId);
                                                                         rawDataTable.setUniqueId(String.valueOf(refId));
                                                                         String rawDataTag = SCREEN_NAME_DOCUMENT_UPLOAD + "_" + refId;
                                                                         rawDataTable.setTag_name(rawDataTag);
                                                                         rawDataTable.setProductId(productId);

                                                                         dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table
                                                                     } else {
                                                                         // TODO: REMAINING ALL SCREENS [ other than document upload ]
                                                                         JSONArray jsonArray = new JSONArray(table.getRwas());
                                                                         if (jsonArray.length() > 0) {
                                                                             // TODO: Looping all screen raw data
                                                                             for (int i = 0; i < jsonArray.length(); i++) {
                                                                                 JSONObject jsonObject = jsonArray.getJSONObject(i);

                                                                                 if (jsonObject != null) {
                                                                                     if (jsonObject.has(TAG_NAME_MODULE_TYPE)) {

                                                                                         if (!TextUtils.isEmpty(jsonObject.getString(TAG_NAME_MODULE_TYPE))) {

                                                                                             // TODO: Update ModuleType for that screen in dynamic ui table
                                                                                             dynamicUIDao.updateDynamicTableModuleTypeByScreenId(
                                                                                                     String.valueOf(table.getScreenId()),
                                                                                                     jsonObject.getString(TAG_NAME_MODULE_TYPE));
                                                                                         }

                                                                                     }

                                                                                     // TODO: Latest Dynamic UI Table
                                                                                     dynamicUITableListFromDB = (dynamicUIDao.getTableBasedOnScreen(String.valueOf(table.getScreenId())));

                                                                                     // TODO: Setting dynamic UI value [ this is for initial screen display ]
                                                                                     for (DynamicUITable dynamicUITable : dynamicUITableListFromDB) {
                                                                                         if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                                                                                 || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                                                                         ) {
                                                                                             if (!dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_TEXT_LABEL)) {
                                                                                                 dynamicUITable.setVisibility(false);
                                                                                             }
                                                                                         }
                                                                                         // TODO: setting all field values by field tag
                                                                                         if (jsonObject.has(dynamicUITable.getFieldTag())) {
                                                                                             dynamicUITable.setVisibility(true);
                                                                                             if (jsonObject.has(dynamicUITable.getFieldTag())) {
                                                                                                 String value = jsonObject.getString(dynamicUITable.getFieldTag());
                                                                                                 dynamicUITable.setValue(value);
//                                                                                                 if( ! TextUtils.isEmpty(value) &&
//                                                                                                         (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_KYC_ID)
//                                                                                                  || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_RE_ENTER_KYC_ID))) {
//
//                                                                                                     DynamicUITable kycTypeObj = getObjectByTAG(TAG_NAME_KYC_TYPE , dynamicUITableListFromDB);
//                                                                                                     if( kycTypeObj !=null && ! TextUtils.isEmpty(kycTypeObj.getValue())) {
//                                                                                                         DataTypeInfo datatypeInfo = new DataTypeInfo(kycTypeObj.getValue(), dynamicUITable);
//
//                                                                                                         dynamicUITable.setLength(datatypeInfo.getLength());
//                                                                                                         dynamicUITable.setHint(datatypeInfo.getHint());
//                                                                                                         dynamicUITable.setDataType(datatypeInfo.getInputType());
//                                                                                                         dynamicUITable.setDataEntryType(datatypeInfo.getDataEntryType());
//                                                                                                         dynamicUITable.setFieldTag(datatypeInfo.getHintTag());
//                                                                                                         dynamicUITable.setValue("");
//                                                                                                         dynamicUITable.setErrorMessage("");// TODO: clearing the value once changing the spinner item
//                                                                                                     }
//                                                                                                 }
                                                                                             }
                                                                                         }

                                                                                         // TODO: address dynamic UI changes
                                                                                         if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL) ||
                                                                                                 dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {

                                                                                             if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_ADDRESS_LINE_1)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_ADDRESS_LINE_2)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_PINCODE)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_CITY)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_DISTRICT)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_STATE)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_LANDMARK)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_KYC_ID)) {
                                                                                                 DynamicUITable dynamicUITable_perAddress_same_as_kyc = getObjectByTAG(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, dynamicUITableListFromDB);

                                                                                                 if (!TextUtils.isEmpty(dynamicUITable_perAddress_same_as_kyc.getValue()) && dynamicUITable_perAddress_same_as_kyc.getValue().equalsIgnoreCase("yes")) {

                                                                                                     if (jsonObject.has(dynamicUITable.getFieldTag()) && !TextUtils.isEmpty(jsonObject.getString(dynamicUITable.getFieldTag()))) {
                                                                                                         dynamicUITable.setEditable(false);
                                                                                                     }

                                                                                                 }
                                                                                             } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_KYC_TYPE)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_PINCODE)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_CITY)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_DISTRICT)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_STATE)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_LANDMARK)
                                                                                                     || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_KYC_ID)) {
                                                                                                 DynamicUITable dynamicUITable_comAddress_same_as_kyc = getObjectByTAG(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITableListFromDB);

                                                                                                 if (!TextUtils.isEmpty(dynamicUITable_comAddress_same_as_kyc.getValue()) && dynamicUITable_comAddress_same_as_kyc.getValue().equalsIgnoreCase("yes")) {

                                                                                                     if (jsonObject.has(dynamicUITable.getFieldTag()) && !TextUtils.isEmpty(jsonObject.getString(dynamicUITable.getFieldTag()))) {
                                                                                                         dynamicUITable.setEditable(false);
                                                                                                     }

                                                                                                 }
                                                                                             }
                                                                                         }

                                                                                         // TODO: personal details dynamic UI changes
                                                                                         if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                                                                                             if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_APPLICANT_SPOUSE_NAME)) {
                                                                                                 if (!jsonObject.has(dynamicUITable.getFieldTag())) {
                                                                                                     dynamicUITable.setVisibility(false);
                                                                                                 }
                                                                                             }
                                                                                         }

                                                                                         // TODO: socio economic details dynamic UI changes
                                                                                         if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL)) {
                                                                                             if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SB_ACCOUNT_BALANCE_AMOUNT)
                                                                                                     || (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_TWO_WHEELER_ASSET_VALUE))
                                                                                                     || (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NO_OF_YEARS_OF_PURCHASE))
                                                                                                     || (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NUMBER_OF_ANIMALS))
                                                                                                     || (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PENSION_AMOUNT))
                                                                                                     || (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_INVESTMENT_VALUE))) {
                                                                                                 if (!jsonObject.has(dynamicUITable.getFieldTag())) {
                                                                                                     dynamicUITable.setVisibility(false);
                                                                                                 }
                                                                                             }
                                                                                         }

                                                                                         // TODO: co applicant personal details dynamic UI changes
                                                                                         if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                                                                                             if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COAPPLICANT_SPOUSE_NAME)) {
                                                                                                 if (!jsonObject.has(dynamicUITable.getFieldTag())) {
                                                                                                     dynamicUITable.setVisibility(false);
                                                                                                 }
                                                                                             }
                                                                                         }
                                                                                     }

                                                                                     // TODO: Update dynamic UI
                                                                                     if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {
                                                                                         dynamicUIDao.updateDynamicUITable(dynamicUITableListFromDB);
                                                                                     }

                                                                                     // TODO: Dynamic UI Obj for Save Button
                                                                                     DynamicUITable dynamicUITable = dynamicUITableListFromDB.get(dynamicUITableListFromDB.size() - 1);
                                                                                     // TODO: Dynamic UI Obj for Selected item
                                                                                     DynamicUITable dynamicUITableObjForSelectedItem = null;
                                                                                     // TODO: Check For Add Button Screens
                                                                                     if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                                                                             || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {

                                                                                         dynamicUITable = getObjectByTAG(TAG_NAME_ADD_ANOTHER_KYC_PLUS_BUTTON, dynamicUITableListFromDB);
                                                                                         dynamicUITableObjForSelectedItem = getObjectByTAG(TAG_NAME_KYC_TYPE, dynamicUITableListFromDB);
                                                                                     } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)) {

                                                                                         dynamicUITable = getObjectByTAG(TAG_NAME_ADD_ANOTHER_REFERENCE, dynamicUITableListFromDB);
                                                                                         dynamicUITableObjForSelectedItem = getObjectByTAG(TAG_NAME_FULL_NAME, dynamicUITableListFromDB);
                                                                                     }/*else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_GUARANTOR_DETAILS)) {

                                                                                         dynamicUITable = getObjectByTAG(TAG_NAME_ADD_ANOTHER_KYC_PLUS_BUTTON, dynamicUITableListFromDB);
                                                                                         dynamicUITableObjForSelectedItem = getObjectByTAG(TAG_NAME_GUARANTOR_KYC_TYPE, dynamicUITableListFromDB);
                                                                                     }*/
                                                                                     else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                                                                                         dynamicUITable = getObjectByTAG(TAG_NAME_ADD_ANOTHER_BUSINESS_PROOF_PLUS_BUTTON, dynamicUITableListFromDB);
                                                                                         dynamicUITableObjForSelectedItem = getObjectByTAG(TAG_NAME_BUSINESS_DOCUMENT_PROOF, dynamicUITableListFromDB);
                                                                                     } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                                                                                             || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                                                                                         dynamicUITable = getObjectByTAG(TAG_NAME_ADD_BANK_DETAILS_PLUS_BUTTON, dynamicUITableListFromDB);
                                                                                         dynamicUITableObjForSelectedItem = getObjectByTAG(TAG_NAME_BANK_NAME, dynamicUITableListFromDB);
                                                                                     } else {
                                                                                         dynamicUITable = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableListFromDB);
                                                                                     }

                                                                                     if (dynamicUITable != null) {

                                                                                         // TODO: Insert Raw Data Bag [ dynamicUITableObjForSelectedItem - Multiple data capture screens ]
                                                                                         if (dynamicUITableObjForSelectedItem != null && !TextUtils.isEmpty(dynamicUITableObjForSelectedItem.getValue())) {
                                                                                             RawDataTable rawDataTableToInsert = new RawDataTable(jsonObject.toString(), dynamicUITable.getScreenID(),
                                                                                                     dynamicUITable.getScreenName(), dynamicUITableObjForSelectedItem.getValue(),
                                                                                                     dynamicUITable.getClientID(), dynamicUITable.getLoanType(), dynamicUITable.getUser_id(),
                                                                                                     dynamicUITable.getModuleType(), dynamicUITable.getCoRelationID());
                                                                                             if (!TextUtils.isEmpty(rawDataTableToInsert.getScreen_name())) {

                                                                                                 if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                                                                                                     //nothing
                                                                                                     boolean exist = false;
                                                                                                     List<RawDataTable> rawDataTableList = new ArrayList<>();
                                                                                                     if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                                                                                                         rawDataTableList = dynamicUIDao.getRawDataByClientAndModuleType(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id(), rawDataTableToInsert.getModuleType());
                                                                                                     } else {
                                                                                                         rawDataTableList = dynamicUIDao.getRawDataByScreenNoAndClientId(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id());
                                                                                                     }
                                                                                                     if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                                                                                         HashMap<String, Object> hashMapToInsert = setKeyValueForObject(rawDataTableToInsert);
                                                                                                         if (hashMapToInsert != null && hashMapToInsert.size() > 0) {

                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                                                                                                     || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                                                                     String kycTypeToInsert = hashMapToInsert.get(TAG_NAME_KYC_TYPE).toString();
                                                                                                                     if (!TextUtils.isEmpty(kycTypeToInsert)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                                                                                     String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                                                                                                                     if (!TextUtils.isEmpty(kycType) && kycType.equalsIgnoreCase(kycTypeToInsert)) {
                                                                                                                                         exist = true;
                                                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                                                         rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                         dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                         break;
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }

                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                                                                                                                     || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_BANK_NAME)) {
                                                                                                                     String bankNameFromServer = hashMapToInsert.get(TAG_NAME_BANK_NAME).toString();
                                                                                                                     if (!TextUtils.isEmpty(bankNameFromServer)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
                                                                                                                                     String bankName = hashMap.get(TAG_NAME_BANK_NAME).toString();
                                                                                                                                     if (!TextUtils.isEmpty(bankName) && bankName.equalsIgnoreCase(bankNameFromServer)) {
                                                                                                                                         exist = true;
                                                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                                                         rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                         dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                         break;
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }
                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_BUSINESS_DOCUMENT_PROOF)) {
                                                                                                                     String documentProofToInsert = hashMapToInsert.get(TAG_NAME_BUSINESS_DOCUMENT_PROOF).toString();
                                                                                                                     if (!TextUtils.isEmpty(documentProofToInsert)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_BUSINESS_DOCUMENT_PROOF)) {
                                                                                                                                     String documentProof = hashMap.get(TAG_NAME_BUSINESS_DOCUMENT_PROOF).toString();
                                                                                                                                     if (!TextUtils.isEmpty(documentProof) && documentProof.equalsIgnoreCase(documentProofToInsert)) {
                                                                                                                                         exist = true;
                                                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                                                         rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                         dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                         break;
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }
                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_FULL_NAME)) {
                                                                                                                     String fullNameToInsert = hashMapToInsert.get(TAG_NAME_FULL_NAME).toString();
                                                                                                                     String referenceTypeToInsert = hashMapToInsert.get(TAG_NAME_REFERENCE_TYPE).toString();
                                                                                                                     if (!TextUtils.isEmpty(fullNameToInsert) && !TextUtils.isEmpty(referenceTypeToInsert)) {
                                                                                                                         ReferenceCheckContactDTO referenceCheckContactDTONew = refactorRawData(jsonObject.toString());//manas[18May2023]
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                                                                                                                     String fullName = hashMapToInsert.get(TAG_NAME_FULL_NAME).toString();
                                                                                                                                     String referenceType = hashMapToInsert.get(TAG_NAME_REFERENCE_TYPE).toString();
                                                                                                                                     if (!TextUtils.isEmpty(referenceType) && referenceType.equalsIgnoreCase(referenceTypeToInsert)) {
                                                                                                                                         ReferenceCheckContactDTO referenceCheckContactDTOLoop = refactorRawData(rawDataTableFromDB.getRawdata());//manas[18May2023]
                                                                                                                                         if (!TextUtils.isEmpty(fullName) && fullName.equalsIgnoreCase(fullNameToInsert)
                                                                                                                                                 && referenceCheckContactDTONew != null && referenceCheckContactDTOLoop != null
                                                                                                                                                 && referenceCheckContactDTONew.getContactNo().equalsIgnoreCase(referenceCheckContactDTOLoop.getContactNo())) {//manas[18May2023]
                                                                                                                                             exist = true;
// TODO: rawDataTableToInsert setid
                                                                                                                                             rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                             rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                             dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                             break;
                                                                                                                                         }
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }
                                                                                                         }
                                                                                                     }

                                                                                                     if (exist) {
                                                                                                         updateRawDataBag(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     } else {
                                                                                                         insertRawData(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     }
                                                                                                 } else {
                                                                                                     RawDataTable rawDataTableForSingle = null;
                                                                                                     if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL)
                                                                                                     ) {
                                                                                                         rawDataTableForSingle = dynamicUIDao.getTopRawDataByModuleType(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id(), rawDataTableToInsert.getModuleType());
                                                                                                     } else {
                                                                                                         rawDataTableForSingle = dynamicUIDao.getTopRawData(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id());
                                                                                                     }
//                                                                                                     RawDataTable rawDataTableForSingle = dynamicUIDao.getTopRawData(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id());
                                                                                                     if (rawDataTableForSingle != null) {
                                                                                                         // TODO: rawDataTableToInsert set id
                                                                                                         rawDataTableToInsert = rawDataTableForSingle;
                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                         dynamicUITable.setValue(rawDataTableForSingle.getTag_name());
                                                                                                         updateRawDataBag(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     } else {
                                                                                                         insertRawData(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     }
                                                                                                 }
                                                                                             }
                                                                                         } else {
                                                                                             // TODO: Insert Raw Data Bag [ dynamicUITable - single data capture screens ]

                                                                                             RawDataTable rawDataTableToInsert = new RawDataTable(jsonObject.toString(), dynamicUITable.getScreenID(),
                                                                                                     dynamicUITable.getScreenName(), "", dynamicUITable.getClientID(), dynamicUITable.getLoanType(), dynamicUITable.getUser_id(),
                                                                                                     dynamicUITable.getModuleType(), dynamicUITable.getCoRelationID());

                                                                                             if (!TextUtils.isEmpty(rawDataTableToInsert.getScreen_name())) {

                                                                                                 if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)
                                                                                                         || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                                                                                                     //nothing
                                                                                                     boolean exist = false;
                                                                                                     List<RawDataTable> rawDataTableList = new ArrayList<>();
                                                                                                     if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                                                                                                         rawDataTableList = dynamicUIDao.getRawDataByClientAndModuleType(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id(), rawDataTableToInsert.getModuleType());
                                                                                                     } else {
                                                                                                         rawDataTableList = dynamicUIDao.getRawDataByScreenNoAndClientId(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id());
                                                                                                     }
                                                                                                     if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                                                                                         HashMap<String, Object> hashMapToInsert = setKeyValueForObject(rawDataTableToInsert);
                                                                                                         if (hashMapToInsert != null && hashMapToInsert.size() > 0) {

                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                                                                                                     || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                                                                     String kycTypeToInsert = hashMapToInsert.get(TAG_NAME_KYC_TYPE).toString();
                                                                                                                     if (!TextUtils.isEmpty(kycTypeToInsert)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                                                                                     String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                                                                                                                     if (!TextUtils.isEmpty(kycType) && kycType.equalsIgnoreCase(kycTypeToInsert)) {
                                                                                                                                         exist = true;
                                                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                                                         rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                         dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                         break;
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }

                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                                                                                                                     || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_BANK_NAME)) {
                                                                                                                     String kycTypeToInsert = hashMapToInsert.get(TAG_NAME_BANK_NAME).toString();
                                                                                                                     if (!TextUtils.isEmpty(kycTypeToInsert)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
                                                                                                                                     String kycType = hashMap.get(TAG_NAME_BANK_NAME).toString();
                                                                                                                                     if (!TextUtils.isEmpty(kycType) && kycType.equalsIgnoreCase(kycTypeToInsert)) {
                                                                                                                                         exist = true;
                                                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                                                         rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                         dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                         break;
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }

                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_BUSINESS_DOCUMENT_PROOF)) {
                                                                                                                     String documentProofToInsert = hashMapToInsert.get(TAG_NAME_BUSINESS_DOCUMENT_PROOF).toString();
                                                                                                                     if (!TextUtils.isEmpty(documentProofToInsert)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_BUSINESS_DOCUMENT_PROOF)) {
                                                                                                                                     String documentProof = hashMap.get(TAG_NAME_BUSINESS_DOCUMENT_PROOF).toString();
                                                                                                                                     if (!TextUtils.isEmpty(documentProof) && documentProof.equalsIgnoreCase(documentProofToInsert)) {
                                                                                                                                         exist = true;
                                                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                                                         rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                         dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                         break;
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }
                                                                                                             if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)) {
                                                                                                                 if (hashMapToInsert.containsKey(TAG_NAME_FULL_NAME)) {
                                                                                                                     String fullNameToInsert = hashMapToInsert.get(TAG_NAME_FULL_NAME).toString();
                                                                                                                     String referenceTypeToInsert = hashMapToInsert.get(TAG_NAME_REFERENCE_TYPE).toString();
                                                                                                                     if (!TextUtils.isEmpty(fullNameToInsert) && !TextUtils.isEmpty(referenceTypeToInsert)) {
                                                                                                                         for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                                                                                             HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                                                                                             if (hashMap != null && hashMap.size() > 0) {
                                                                                                                                 if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                                                                                                                     String fullName = hashMapToInsert.get(TAG_NAME_FULL_NAME).toString();
                                                                                                                                     String referenceType = hashMapToInsert.get(TAG_NAME_REFERENCE_TYPE).toString();
                                                                                                                                     if (!TextUtils.isEmpty(referenceType) && referenceType.equalsIgnoreCase(referenceTypeToInsert)) {
                                                                                                                                         if (!TextUtils.isEmpty(fullName) && fullName.equalsIgnoreCase(fullNameToInsert)) {
                                                                                                                                             exist = true;
                                                                                                                                             // TODO: rawDataTableToInsert setid
                                                                                                                                             rawDataTableToInsert = rawDataTableFromDB;
                                                                                                                                             rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                                                             dynamicUITable.setValue(rawDataTableFromDB.getTag_name());
                                                                                                                                             break;
                                                                                                                                         }
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         }
                                                                                                                     }
                                                                                                                 }
                                                                                                             }
                                                                                                         }
                                                                                                     }

                                                                                                     if (exist) {
                                                                                                         updateRawDataBag(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     } else {
                                                                                                         insertRawData(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     }
                                                                                                 } else {
                                                                                                     RawDataTable rawDataTableForSingle = null;
                                                                                                     if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)
                                                                                                             || rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL)
                                                                                                     ) {
                                                                                                         rawDataTableForSingle = dynamicUIDao.getTopRawDataByModuleType(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id(), rawDataTableToInsert.getModuleType());
                                                                                                     } else {
                                                                                                         rawDataTableForSingle = dynamicUIDao.getTopRawData(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id());
                                                                                                     }
//                                                                                                     RawDataTable rawDataTableForSingle = dynamicUIDao.getTopRawData(rawDataTableToInsert.getScreen_no(), rawDataTableToInsert.getClient_id());
                                                                                                     if (rawDataTableForSingle != null) {
                                                                                                         // TODO: rawDataTableToInsert setid
                                                                                                         rawDataTableToInsert = rawDataTableForSingle;
                                                                                                         rawDataTableToInsert.setRawdata(jsonObject.toString());
                                                                                                         dynamicUITable.setValue(rawDataTableForSingle.getTag_name());
                                                                                                         updateRawDataBag(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     } else {
                                                                                                         insertRawData(rawDataTableToInsert, dynamicUITableListFromDB, dynamicUITable, true);
                                                                                                     }
                                                                                                 }
                                                                                             }

                                                                                         }

                                                                                     }

                                                                                 }
                                                                             }
                                                                         }
                                                                     }
                                                                 } catch (Exception ex) {
                                                                     ex.printStackTrace();
                                                                     insertLog("getMetaDataForMultipleScreen", ex.getMessage(), "", "", TAG, "", "", "");
                                                                 }
                                                             }
                                                             // TODO: CIBIL GENERATION SCREEN
                                                             else if (String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_GENERATE_CIBIL)) {
                                                                 // TODO: Insert CIBIL Raw Data
                                                                 JSONArray jsonArray = new JSONArray(table.getRwas());
                                                                 if (jsonArray.length() > 0) {
                                                                     // TODO: Looping cibil raw data
                                                                     for (int i = 0; i < jsonArray.length(); i++) {
                                                                         JSONObject jsonObject = jsonArray.getJSONObject(i);

                                                                         if (jsonObject != null && !TextUtils.isEmpty(jsonObject.toString()) &&
                                                                                 jsonObject.has(TAG_NAME_MODE_TYPE_IN_CIBIL) &&
                                                                                 !TextUtils.isEmpty(jsonObject.getString(TAG_NAME_MODE_TYPE_IN_CIBIL))) {

                                                                             String moduleType = jsonObject.getString(TAG_NAME_MODE_TYPE_IN_CIBIL).trim();

                                                                             RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_GENERATE_CIBIL,
                                                                                     table.getCustomerId(), moduleType);

                                                                             if (rawDataTableFromDB == null) {
                                                                                 // TODO: Insert Raw Data Table
                                                                                 RawDataTable rawDataTable = new RawDataTable(jsonObject.toString(), SCREEN_NO_GENERATE_CIBIL,
                                                                                         SCREEN_NAME_GENERATE_CIBIL, "", table.getCustomerId(), loanType,
                                                                                         userId, moduleType, "");

                                                                                 dynamicUIDao.insertRawData(rawDataTable);

                                                                                 CIBILRawDataDTO cibilRawDataDTO = new Gson().fromJson(jsonObject.toString(), CIBILRawDataDTO.class);
                                                                                 if (cibilRawDataDTO != null) {

                                                                                     CIBILTable cibilTableFromDB = dynamicUIDao.getCIBILTableByModuleType(table.getCustomerId(), moduleType);
                                                                                     if (cibilTableFromDB != null) {
                                                                                         // TODO: Update Cibil Table
                                                                                         dynamicUIDao.updateCIBILTableDataFromServer(table.getCustomerId().trim(),
                                                                                                 moduleType,
                                                                                                 cibilRawDataDTO.getDecision(), cibilRawDataDTO.getSCORE(), cibilRawDataDTO.getReason(),
                                                                                                 "", "",
                                                                                                 cibilRawDataDTO.getCreatedDate(), true);

                                                                                     } else {
                                                                                         // TODO: Insert Cibil Table [ Mobile number is missing ]
                                                                                         CIBILTable cibilTableToInsert = new CIBILTable(rawDataTable.getId(),
                                                                                                 rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                                                                                 rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                                                                                 "", table.getCustomerName(), rawDataTable.getUser_id());

                                                                                         cibilTableToInsert.setDecision(cibilRawDataDTO.getDecision());
                                                                                         cibilTableToInsert.setReason(cibilRawDataDTO.getReason());
                                                                                         cibilTableToInsert.setScore(cibilRawDataDTO.getSCORE());
                                                                                         cibilTableToInsert.setTimestamp(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                                                                                         cibilTableToInsert.setCBChecked(true);

                                                                                         dynamicUIDao.insertCIBILTable(cibilTableToInsert);

                                                                                     }
                                                                                 }

                                                                             } else {
                                                                                 // TODO: Update Raw Data Table
                                                                                 dynamicUIDao.updateRawDataBag(SCREEN_NO_GENERATE_CIBIL, rawDataTableFromDB.getId(), jsonObject.toString());

                                                                                 CIBILRawDataDTO cibilRawDataDTO = new Gson().fromJson(jsonObject.toString(), CIBILRawDataDTO.class);

                                                                                 CIBILTable cibilTableFromDB = dynamicUIDao.
                                                                                         getCIBILTableByModuleType(rawDataTableFromDB.getClient_id(), moduleType);
                                                                                 if (cibilTableFromDB != null && cibilRawDataDTO != null) {
                                                                                     dynamicUIDao.updateCIBILTableDataFromServer(cibilTableFromDB.getClient_id(), cibilTableFromDB.getModuleType(),
                                                                                             cibilRawDataDTO.getDecision(), cibilRawDataDTO.getSCORE(), cibilRawDataDTO.getReason(),
                                                                                             cibilTableFromDB.getApplicationId(), cibilTableFromDB.getSolutionSetInstanceId(),
                                                                                             cibilTableFromDB.getTimestamp(), true);
                                                                                 }
                                                                             }
                                                                         }
                                                                     }

                                                                 }
                                                             }
                                                             // TODO: CIBIL GENERATION SCREEN
                                                             else if (String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_GENERATE_CIBIL_AHL)) {
                                                                 // TODO: Insert CIBIL Raw Data
                                                                 JSONArray jsonArray = new JSONArray(table.getRwas());
                                                                 if (jsonArray.length() > 0) {
                                                                     // TODO: Looping cibil raw data
                                                                     for (int i = 0; i < jsonArray.length(); i++) {
                                                                         JSONObject jsonObject = jsonArray.getJSONObject(i);

                                                                         if (jsonObject != null && !TextUtils.isEmpty(jsonObject.toString()) &&
                                                                                 jsonObject.has(TAG_NAME_MODE_TYPE_IN_CIBIL) &&
                                                                                 !TextUtils.isEmpty(jsonObject.getString(TAG_NAME_MODE_TYPE_IN_CIBIL))) {

                                                                             String moduleType = jsonObject.getString(TAG_NAME_MODE_TYPE_IN_CIBIL).trim();

                                                                             RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_GENERATE_CIBIL,
                                                                                     table.getCustomerId(), moduleType);

                                                                             if (rawDataTableFromDB == null) {
                                                                                 // TODO: Insert Raw Data Table
                                                                                 RawDataTable rawDataTable = new RawDataTable(jsonObject.toString(), SCREEN_NO_GENERATE_CIBIL_AHL,
                                                                                         SCREEN_NAME_GENERATE_CIBIL, "", table.getCustomerId(), loanType,
                                                                                         userId, moduleType, "");

                                                                                 dynamicUIDao.insertRawData(rawDataTable);

                                                                                 CIBILRawDataDTO cibilRawDataDTO = new Gson().fromJson(jsonObject.toString(), CIBILRawDataDTO.class);
                                                                                 if (cibilRawDataDTO != null) {

                                                                                     CIBILTable cibilTableFromDB = dynamicUIDao.getCIBILTableByModuleType(table.getCustomerId(), moduleType);
                                                                                     if (cibilTableFromDB != null) {
                                                                                         // TODO: Update Cibil Table
                                                                                         dynamicUIDao.updateCIBILTableDataFromServer(table.getCustomerId().trim(),
                                                                                                 moduleType,
                                                                                                 cibilRawDataDTO.getDecision(), cibilRawDataDTO.getSCORE(), cibilRawDataDTO.getReason(),
                                                                                                 "", "",
                                                                                                 cibilRawDataDTO.getCreatedDate(), true);

                                                                                     } else {
                                                                                         // TODO: Insert Cibil Table [ Mobile number is missing ]
                                                                                         CIBILTable cibilTableToInsert = new CIBILTable(rawDataTable.getId(),
                                                                                                 rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                                                                                 rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                                                                                 "", table.getCustomerName(), rawDataTable.getUser_id());

                                                                                         cibilTableToInsert.setDecision(cibilRawDataDTO.getDecision());
                                                                                         cibilTableToInsert.setReason(cibilRawDataDTO.getReason());
                                                                                         cibilTableToInsert.setScore(cibilRawDataDTO.getSCORE());
                                                                                         cibilTableToInsert.setTimestamp(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                                                                                         cibilTableToInsert.setCBChecked(true);

                                                                                         dynamicUIDao.insertCIBILTable(cibilTableToInsert);

                                                                                     }
                                                                                 }

                                                                             } else {
                                                                                 // TODO: Update Raw Data Table
                                                                                 dynamicUIDao.updateRawDataBag(SCREEN_NO_GENERATE_CIBIL_AHL, rawDataTableFromDB.getId(), jsonObject.toString());

                                                                                 CIBILRawDataDTO cibilRawDataDTO = new Gson().fromJson(jsonObject.toString(), CIBILRawDataDTO.class);

                                                                                 CIBILTable cibilTableFromDB = dynamicUIDao.
                                                                                         getCIBILTableByModuleType(rawDataTableFromDB.getClient_id(), moduleType);
                                                                                 if (cibilTableFromDB != null && cibilRawDataDTO != null) {
                                                                                     dynamicUIDao.updateCIBILTableDataFromServer(cibilTableFromDB.getClient_id(), cibilTableFromDB.getModuleType(),
                                                                                             cibilRawDataDTO.getDecision(), cibilRawDataDTO.getSCORE(), cibilRawDataDTO.getReason(),
                                                                                             cibilTableFromDB.getApplicationId(), cibilTableFromDB.getSolutionSetInstanceId(),
                                                                                             cibilTableFromDB.getTimestamp(), true);
                                                                                 }
                                                                             }
                                                                         }
                                                                     }

                                                                 }
                                                             }

                                                             //  TODO: CIBIL GENERATION SCREEN PHL

                                                             else if (String.valueOf(table.getScreenId()).equalsIgnoreCase(SCREEN_NO_GENERATE_CIBIL_PHL)) {
                                                                 // TODO: Insert CIBIL Raw Data
                                                                 JSONArray jsonArray = new JSONArray(table.getRwas());
                                                                 if (jsonArray.length() > 0) {
                                                                     // TODO: Looping cibil raw data
                                                                     for (int i = 0; i < jsonArray.length(); i++) {
                                                                         JSONObject jsonObject = jsonArray.getJSONObject(i);

                                                                         if (jsonObject != null && !TextUtils.isEmpty(jsonObject.toString()) &&
                                                                                 jsonObject.has(TAG_NAME_MODE_TYPE_IN_CIBIL) &&
                                                                                 !TextUtils.isEmpty(jsonObject.getString(TAG_NAME_MODE_TYPE_IN_CIBIL))) {

                                                                             String moduleType = jsonObject.getString(TAG_NAME_MODE_TYPE_IN_CIBIL).trim();

                                                                             RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_GENERATE_CIBIL,
                                                                                     table.getCustomerId(), moduleType);

                                                                             if (rawDataTableFromDB == null) {
                                                                                 // TODO: Insert Raw Data Table
                                                                                 RawDataTable rawDataTable = new RawDataTable(jsonObject.toString(), SCREEN_NO_GENERATE_CIBIL_PHL,
                                                                                         SCREEN_NAME_GENERATE_CIBIL, "", table.getCustomerId(), loanType,
                                                                                         userId, moduleType, "");

                                                                                 dynamicUIDao.insertRawData(rawDataTable);

                                                                                 CIBILRawDataDTO cibilRawDataDTO = new Gson().fromJson(jsonObject.toString(), CIBILRawDataDTO.class);
                                                                                 if (cibilRawDataDTO != null) {

                                                                                     CIBILTable cibilTableFromDB = dynamicUIDao.getCIBILTableByModuleType(table.getCustomerId(), moduleType);
                                                                                     if (cibilTableFromDB != null) {
                                                                                         // TODO: Update Cibil Table
                                                                                         dynamicUIDao.updateCIBILTableDataFromServer(table.getCustomerId().trim(),
                                                                                                 moduleType,
                                                                                                 cibilRawDataDTO.getDecision(), cibilRawDataDTO.getSCORE(), cibilRawDataDTO.getReason(),
                                                                                                 "", "",
                                                                                                 cibilRawDataDTO.getCreatedDate(), true);

                                                                                     } else {
                                                                                         // TODO: Insert Cibil Table [ Mobile number is missing ]
                                                                                         CIBILTable cibilTableToInsert = new CIBILTable(rawDataTable.getId(),
                                                                                                 rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                                                                                 rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                                                                                 "", table.getCustomerName(), rawDataTable.getUser_id());

                                                                                         cibilTableToInsert.setDecision(cibilRawDataDTO.getDecision());
                                                                                         cibilTableToInsert.setReason(cibilRawDataDTO.getReason());
                                                                                         cibilTableToInsert.setScore(cibilRawDataDTO.getSCORE());
                                                                                         cibilTableToInsert.setTimestamp(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                                                                                         cibilTableToInsert.setCBChecked(true);

                                                                                         dynamicUIDao.insertCIBILTable(cibilTableToInsert);

                                                                                     }
                                                                                 }

                                                                             } else {
                                                                                 // TODO: Update Raw Data Table
                                                                                 dynamicUIDao.updateRawDataBag(SCREEN_NO_GENERATE_CIBIL_PHL, rawDataTableFromDB.getId(), jsonObject.toString());

                                                                                 CIBILRawDataDTO cibilRawDataDTO = new Gson().fromJson(jsonObject.toString(), CIBILRawDataDTO.class);

                                                                                 CIBILTable cibilTableFromDB = dynamicUIDao.
                                                                                         getCIBILTableByModuleType(rawDataTableFromDB.getClient_id(), moduleType);
                                                                                 if (cibilTableFromDB != null && cibilRawDataDTO != null) {
                                                                                     dynamicUIDao.updateCIBILTableDataFromServer(cibilTableFromDB.getClient_id(), cibilTableFromDB.getModuleType(),
                                                                                             cibilRawDataDTO.getDecision(), cibilRawDataDTO.getSCORE(), cibilRawDataDTO.getReason(),
                                                                                             cibilTableFromDB.getApplicationId(), cibilTableFromDB.getSolutionSetInstanceId(),
                                                                                             cibilTableFromDB.getTimestamp(), true);
                                                                                 }
                                                                             }
                                                                         }
                                                                     }

                                                                 }
                                                             }


                                                         }
                                                         // TODO: set false to needsToCaptureFromServer in masterTable
                                                         if (!TextUtils.isEmpty(rawDataFromServerList.get(0).getCustomerId())) {
                                                             MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataFromServerList.get(0).getCustomerId());
                                                             if (masterTable != null) {
                                                                 // TODO: ALREADY EXISTING CLIENT IN MASTER TABLE
                                                                 dynamicUIDao.updateMasterTableDataNeedsToCaptureFromServer(masterTable.getId(), false);
                                                             }
                                                         }
                                                         // TODO: Final Result
                                                         data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, currentStage, loanType));
                                                     }
                                                 },
                                    // Will be triggered if any error during requests will happen
                                    new Consumer<Throwable>() {
                                        @Override
                                        public void accept(Throwable e) throws Exception {
                                            //Do something on error completion of requests
                                            Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                            // TODO: Final Result
                                            data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, currentStage, loanType));

                                            insertLog("getMetaDataForMultipleScreen", e.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    }
                            );
                        } else {
                            // TODO: Final Result
                            data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, currentStage, loanType));
                        }
                    } else {
                        // TODO: Final Result
                        data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, currentStage, loanType));
                    }


                } else {
                    Log.d(TAG, "Internet Not Available");
                    // TODO: Final Result
                    data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, currentStage, loanType));
                    insertLog("getMetaDataForMultipleScreen", "Internet Not Available", "", "", TAG, "", "", "");
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                // TODO: Final Result
                data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, currentStage, loanType));

                insertLog("getMetaDataForMultipleScreen", ex.getMessage(), "", "", TAG, "", "", "");
            });

        }
        return data;
    }
    private ReferenceCheckContactDTO refactorRawData(String rawData) {
        ReferenceCheckContactDTO referenceCheckContactDTO = null;
        if (rawData != null && !TextUtils.isEmpty(rawData)) {
            try {
                JSONObject jsonObject = new JSONObject(rawData);
                String fullName = jsonObject.optString(TAG_NAME_FULL_NAME, "");
                String contactNo = jsonObject.optString(TAG_NAME_CONTACT_NO, "");
                if (TextUtils.isEmpty(contactNo)) {
                    contactNo = jsonObject.optString(TAG_NAME_CONTACT_NO_1, "");
                }
                referenceCheckContactDTO = new ReferenceCheckContactDTO(fullName, contactNo);
            } catch (JSONException err) {
                Log.d("Error", err.toString());
            }
        }
        return referenceCheckContactDTO;
    }

    private String writeResponseBodyToDisk(ResponseBody body, String fileName) {
        try {
            // todo change the file location/name according to your needs

            String[] fileArray = fileName.split("_");

            if (fileArray.length > 0 && !TextUtils.isEmpty(fileArray[0])) {
                String clientId = fileArray[0];
                String fullFilePath = Environment.getExternalStorageDirectory()
                        .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/" + clientId + "/" + fileName;

                String appFolderPath = Environment.getExternalStorageDirectory()
                        .getAbsolutePath() + "/" + APP_FOLDER + "/";
                String imageUploadFolderPath = Environment.getExternalStorageDirectory()
                        .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/";
                String clientIdFolderPath = Environment.getExternalStorageDirectory()
                        .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/" + clientId + "/";

                File root = new File(appFolderPath);
                if (!root.exists()) {
                    root.mkdirs();
                }
                File imageUploadFolder = new File(imageUploadFolderPath);
                if (!imageUploadFolder.exists()) {
                    imageUploadFolder.mkdirs();
                }
                File clientIdFolder = new File(clientIdFolderPath);
                if (!clientIdFolder.exists()) {
                    clientIdFolder.mkdirs();
                }

                File futureStudioIconFile = new File(fullFilePath);

                InputStream inputStream = null;
                OutputStream outputStream = null;

                try {
                    byte[] fileReader = new byte[4096];

                    long fileSize = body.contentLength();
                    long fileSizeDownloaded = 0;

                    inputStream = body.byteStream();
                    outputStream = new FileOutputStream(futureStudioIconFile);

                    while (true) {
                        int read = inputStream.read(fileReader);

                        if (read == -1) {
                            break;
                        }

                        outputStream.write(fileReader, 0, read);

                        fileSizeDownloaded += read;

                        Log.d("File Download: ", fileSizeDownloaded + " of " + fileSize);
                    }

                    outputStream.flush();

                    return fullFilePath;
                } catch (IOException e) {
                    e.getMessage();
                    insertLog("writeResponseBodyToDisk", e.getMessage(), "", "", TAG, "", "", "");
                    return null;
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }

                    if (outputStream != null) {
                        outputStream.close();
                    }
                }
            } else {
                return null;
            }
        } catch (IOException e) {
            e.getMessage();
            insertLog("writeResponseBodyToDisk", e.getMessage(), "", "", TAG, "", "", "");
            return null;
        }
    }

    public LiveData<List<StageDetailsTable>> getMyStages(String userId, String productId, String loanType, String branchId, String branchGSTCode) {
        final MutableLiveData<List<StageDetailsTable>> data = new MutableLiveData<>();

        try {
            DynamicUIWebService.changeApiBaseUrl(STAGE_URL);

            executor.execute(() -> {

                if (appHelper.isNetworkAvailable()) { // TODO: Checking internet connection

                    DynamicUIWebService.createService(DynamicUIWebservice.class).getMyStages(userId, productId,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""))
                            .enqueue(new Callback<List<StageDetailsTable>>() {
                                @Override
                                public void onResponse(Call<List<StageDetailsTable>> call, Response<List<StageDetailsTable>> response) {
                                    Log.e("TAG", "STAGE LIST REFRESHED FROM NETWORK");
                                    executor.execute(() -> {
                                        List<StageDetailsTable> stageDetailsTableList = response.body();
                                        if (stageDetailsTableList != null && stageDetailsTableList.size() > 0) {
                                            // TODO: Delete & Insert Stage List
                                            dynamicUIDao.deleteAndInsertStageList(stageDetailsTableList);

                                            for (StageDetailsTable stageDetailsTable : stageDetailsTableList) {
                                                if (stageDetailsTable != null && !TextUtils.isEmpty(stageDetailsTable.getCustomerUniqueId())) {

                                                    MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(stageDetailsTable.getCustomerUniqueId());
                                                    if (masterTable != null) {
                                                        // TODO: ALREADY EXISTING CLIENT IN MASTER TABLE but final status should not be pending
                                                        /*if (!TextUtils.isEmpty(masterTable.getFinalStatus()) &&
                                                                !masterTable.getFinalStatus().equalsIgnoreCase(FINAL_STATUS_PENDING)) {
                                                            // TODO: SEND BACK
                                                            dynamicUIDao.updateMasterTableSendBackDetails(masterTable.getId(),
                                                                    stageDetailsTable.getCurrentStageName(), stageDetailsTable.getActionId(),
                                                                    stageDetailsTable.getCurrentStage(), APPLICATION_STATUS_SEND_BACK,
                                                                    FINAL_STATUS_PENDING,
                                                                    false, false, userId, stageDetailsTable.getRemark(),
                                                                    true);
                                                        }*/
                                                        dynamicUIDao.updateMasterTableSendBackDetails(masterTable.getId(),
                                                                stageDetailsTable.getCurrentStageName(), stageDetailsTable.getActionId(),
                                                                stageDetailsTable.getCurrentStage(), APPLICATION_STATUS_SEND_BACK,
                                                                FINAL_STATUS_PENDING,
                                                                false, false, userId, stageDetailsTable.getRemark(),
                                                                true);
                                                    } else {
                                                        // TODO: NEW CLIENT ID [ NOT EXIST IN MASTER TABLE ]
                                                        // TODO: INSERTING NEW CLIENT IN MASTER TABLE

                                                        MasterTable masterTableToInsert = new MasterTable();
                                                        masterTableToInsert.setClientId(stageDetailsTable.getCustomerUniqueId());
                                                        masterTableToInsert.setCurrentStage(stageDetailsTable.getCurrentStageName());
                                                        masterTableToInsert.setRemarks(stageDetailsTable.getRemark());
                                                        masterTableToInsert.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                        masterTableToInsert.setFinalStatus(FINAL_STATUS_PENDING);
                                                        masterTableToInsert.setSync(true);
                                                        masterTableToInsert.setLoan_type(loanType); // TODO: LOAN TYPE
                                                        masterTableToInsert.setAllDataCaptured(false);
                                                        masterTableToInsert.setBranchId(branchId);
                                                        masterTableToInsert.setBranchGSTcode(branchGSTCode);
                                                        masterTableToInsert.setCreatedBy(userId); // TODO: STAFF ID
                                                        masterTableToInsert.setReviewBy(userId);
                                                        masterTableToInsert.setDataNeedsToCaptureFromServer(true);// TODO: data needs to capture true
                                                        ApplicationStatusTable applicationStatusTable = dynamicUIDao.getApplicationStatusByClientId(stageDetailsTable.getCustomerUniqueId());
                                                        if (applicationStatusTable != null && !TextUtils.isEmpty(applicationStatusTable.getClientName())) {
                                                            masterTableToInsert.setClientName(applicationStatusTable.getClientName());
                                                        }
                                                        String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                                        masterTableToInsert.setCreated_date(TimestampConverter.toDate(dateTime));

                                                        dynamicUIDao.insertAndDeleteMasterTable(masterTableToInsert, stageDetailsTable.getCustomerUniqueId());
                                                    }

                                                }
                                            }

                                            // TODO: Sending Final Result
                                            List<StageDetailsTable> stageDetailsTableListResult = dynamicUIDao.loadStageTableDetails();
                                            data.postValue(stageDetailsTableListResult);
                                        } else {
                                            // TODO: Sending Final Result
                                            List<StageDetailsTable> emptyStageList = new ArrayList<>();
                                            data.postValue(emptyStageList);
                                        }
                                    });
                                }

                                @Override
                                public void onFailure(Call<List<StageDetailsTable>> call, Throwable t) {
                                    try {
                                        executor.execute(() -> {
                                            // TODO: Sending Final Result
                                            List<StageDetailsTable> emptyStageList = new ArrayList<>();
                                            data.postValue(emptyStageList);

                                            insertLog("getMyStage", t.getMessage(), "", "", TAG, "", "", "");

                                        });

                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            });
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                // TODO: Sending Final Result
                List<StageDetailsTable> emptyStageList = new ArrayList<>();
                data.postValue(emptyStageList);

                insertLog("getMyStage", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<List<DynamicUITable>> postPlannerDataToServer(PlannerTable plannerTable, String screenNumber) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            if (plannerTable != null) {

                final PlannerDataRequestDTO plannerDataRequestDTO = new PlannerDataRequestDTO();
                plannerDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                plannerDataRequestDTO.setProjectName(loanType);
                plannerDataRequestDTO.setUserId(plannerTable.getStaffId());
                plannerDataRequestDTO.setProjectName(PROJECT_NAME_LOS);

                PlannerDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new PlannerDataRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_POST_PLANNER_DATA_SINGLE);
                PlannerDataRequestDTO.SpParametersClass spParametersClass = new PlannerDataRequestDTO.SpParametersClass();

                spParametersClass.setActivityRefNum(plannerTable.getClientId());
                spParametersClass.setBranchId(plannerTable.getBranchId());
                spParametersClass.setStart_Lat(plannerTable.getStartLat());
                spParametersClass.setStart_Long(plannerTable.getStartLong());
                spParametersClass.setEnd_Lat(plannerTable.getEndLat());
                spParametersClass.setEnd_Long(plannerTable.getEndLong());
                if (TextUtils.isEmpty(plannerTable.getDistance())) {
                    spParametersClass.setTotalDistance(plannerTable.getDistance());
                } else {
                    spParametersClass.setTotalDistance("0.0"); // TODO: Hardcoded Distance
                }
                String ownVehicle = "";
                if (plannerTable.isTravelWithOwnVehicle()) {
                    ownVehicle = "Y";
                } else {
                    ownVehicle = "N";
                }
                spParametersClass.setOwnVehical(ownVehicle);
                String vehicleType = "";
                if (plannerTable.isVehicleType()) {
                    vehicleType = "TW";
                } else {
                    vehicleType = "FW";
                }
                spParametersClass.setTypeOfVehical(vehicleType);

                spParametersClass.setPurpose(plannerTable.getPurposeOfVisit());
                spParametersClass.setUserId(plannerTable.getStaffId());
                spParametersClass.setAccompaniedId(plannerTable.getEmployeeId());
                spParametersClass.setApplicationId(plannerTable.getApplicationId());// TODO: set application id here
                spParametersClass.setFreeText1(plannerTable.getShopName());// TODO: Shop name
                spParametersClass.setFreeText2(plannerTable.getEmployeeName());// TODO: EMP name
                spParametersClass.setFreeText3(plannerTable.getDesignation());// TODO: Designation
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<PlannerDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<PlannerDataRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                plannerDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(plannerDataRequestDTO, PlannerDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).PlannerDataToServer(plannerDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();
                                            String tableJson = json.get(key).toString();
                                            PlannerDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, PlannerDataResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                Log.d(TAG, "raw data tvName server");
                                                List<PlannerDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                    List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                    for (PlannerDataResponseDTO.Table table : rawDataResponseDTOList) {

                                                        if (!TextUtils.isEmpty(table.getResult()) && table.getResult().equalsIgnoreCase("Success")) {
                                                            dynamicUIDao.updatePlannerDataForSyncByClientId(plannerTable.getClientId());

                                                        }

                                                    }
                                                }

                                            }
                                            ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            insertLog("postPlannerDataToServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                executor.execute(() -> {
                                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));

                                    insertLog("postPlannerDataToServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } else {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> postSalesToolDataToServer(SalesToolTable salesToolTable, String screenNumber) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                    SCREEN_NAME_SALES_TOOL, salesToolTable.getClientId(), salesToolTable.getLoan_type());

            if (rawDataTable != null) {

                final SalesToolPostDataRequestDTO salesToolPostDataRequestDTO = new SalesToolPostDataRequestDTO();
                salesToolPostDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                salesToolPostDataRequestDTO.setProjectName(loanType);

                SalesToolPostDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new SalesToolPostDataRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_POST_SALES_TOOL_DATA_SINGLE);
                SalesToolPostDataRequestDTO.SpParametersClass spParametersClass = new SalesToolPostDataRequestDTO.SpParametersClass();
                spParametersClass.setClientId(salesToolTable.getClientId());
                spParametersClass.setCreatedBy(salesToolTable.getCreatedBy());
                spParametersClass.setClientName(salesToolTable.getClientName());
                spParametersClass.setAgeRange(salesToolTable.getAgeRange());
                spParametersClass.setCityOfResidence(salesToolTable.getCityOfResidence());
                spParametersClass.setResidentType(salesToolTable.getResidentType());
                spParametersClass.setResidentStability(salesToolTable.getResidentStability());
                spParametersClass.setFirmName(salesToolTable.getFirmName());
                spParametersClass.setFirmType(salesToolTable.getFirmType());
                spParametersClass.setBusinessType(salesToolTable.getBusinessType());
                spParametersClass.setBusinessPlace(salesToolTable.getBusinessPlace());
                spParametersClass.setYearsInBusiness(salesToolTable.getYearsInBusiness());
                spParametersClass.setOwnAPlot(salesToolTable.getOwnAPlot());
                spParametersClass.setIncomeProofAvailable(salesToolTable.getIncomeProofAvailable());
                spParametersClass.setItrNoOfYears(salesToolTable.getItrNoOfYears());
                spParametersClass.setMonthlyBusinessTurnOverrange(salesToolTable.getMonthlyBusinessTurnOverrange());
                spParametersClass.setAnyExistingLoanRunning(salesToolTable.getAnyExistingLoanRunning());
                spParametersClass.setTypeOfLoan(salesToolTable.getTypeOfLoan());
                spParametersClass.setLookingFor(salesToolTable.getLookingFor());
                spParametersClass.setTypeOfSecurity(salesToolTable.getTypeOfSecurity());
                spParametersClass.setSecurityOwnership(salesToolTable.getSecurityOwnership());
                spParametersClass.setRequestedAmount(salesToolTable.getRequestedAmount());
                spParametersClass.setComfortableEmi(salesToolTable.getComfortableEmi());
                spParametersClass.setTenure(salesToolTable.getTenure());
                spParametersClass.setTotalSales(salesToolTable.getTotalSales());
                spParametersClass.setTotalPurchase(salesToolTable.getTotalPurchase());
                spParametersClass.setRentOfBusinessPremise(salesToolTable.getRentOfBusinessPremise());
                spParametersClass.setLabour_ElectricityCost(salesToolTable.getLabour_ElectricityCost());
                spParametersClass.setTotalExpense(salesToolTable.getTotalExpense());
                spParametersClass.setNetBusinessIncome(salesToolTable.getNetBusinessIncome());
                spParametersClass.setIncomeFromOthersource(salesToolTable.getIncomeFromOthersource());
                spParametersClass.setMonthlyHouseholdExpenses(salesToolTable.getMonthlyHouseholdExpenses());
                spParametersClass.setMonthlyEMI(salesToolTable.getMonthlyEMI());
                spParametersClass.setTotalMonthlySurplus(salesToolTable.getTotalMonthlySurplus());
                spParametersClass.setDebtServiceRatio(salesToolTable.getDebtServiceRatio());
                spParametersClass.setEmi_NBS(salesToolTable.getEmi_NBS());
                spParametersClass.setFinalEMI_Eligibility(salesToolTable.getFinalEMI_Eligibility());
                spParametersClass.setApplicationAmount(salesToolTable.getApplicationAmount());
                spParametersClass.setAmountbasis_FinalEmiEligibility(salesToolTable.getAmountbasis_FinalEmiEligibility());
                spParametersClass.setFinalAmount(salesToolTable.getFinalAmount());
                spParametersClass.setBranchId(salesToolTable.getBranchId());
                spParametersClass.setBranchGSTCode(salesToolTable.getBranchGSTCode());
                spParametersClass.setScore(salesToolTable.getScore());
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<SalesToolPostDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<SalesToolPostDataRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                salesToolPostDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                GsonBuilder builder = new GsonBuilder();
                builder.excludeFieldsWithoutExposeAnnotation();
                Gson gson = builder.create();

                String request = gson.toJson(salesToolTable, SalesToolTable.class);
                Log.e("Sales Table json", " " + request);
                String baseString = new Gson().toJson(salesToolPostDataRequestDTO, SalesToolPostDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).SalesToolDataToServer(salesToolPostDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            SalesToolPostDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, SalesToolPostDataResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                Log.d(TAG, "raw data tvName server");
                                                List<SalesToolPostDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                    List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                    for (SalesToolPostDataResponseDTO.Table table : rawDataResponseDTOList) {

                                                        if (!TextUtils.isEmpty(table.getResult()) && table.getResult().equalsIgnoreCase("Success")) {
                                                            dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
                                                            dynamicUIDao.updateSalesToolDataForSyncByClientId(salesToolTable.getClientId());

                                                            // TODO: insert master Table
                                                            if (salesToolTable.getResidentType().equalsIgnoreCase(RADIO_BUTTON_ITEM_RENTED)
                                                                    && salesToolTable.getBusinessPlace().equalsIgnoreCase(RADIO_BUTTON_ITEM_RENTED)
                                                                    && salesToolTable.getOwnAPlot().equalsIgnoreCase("NO")) {
                                                                //no need to insert master table record
                                                            } else {
                                                                MasterTable masterTable = new MasterTable();
                                                                masterTable.setClientId(salesToolTable.getClientId());
                                                                masterTable.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                                masterTable.setRemarks("");
                                                                masterTable.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                                masterTable.setFinalStatus(FINAL_STATUS_PENDING);
                                                                masterTable.setSync(false);
                                                                masterTable.setLoan_type(rawDataTable.getLoan_type()); // TODO: LOAN TYPE
                                                                masterTable.setAllDataCaptured(false);
                                                                masterTable.setBranchId(salesToolTable.getBranchId());
                                                                masterTable.setBranchGSTcode(salesToolTable.getBranchGSTCode());
                                                                masterTable.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                                                masterTable.setReviewBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                                                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_DD_MM_YYYY2);
                                                                masterTable.setCreated_date(TimestampConverter.toDate(dateTime));

                                                                masterTable.setClientName(salesToolTable.getClientName());
                                                                masterTable.setPhoneNo(salesToolTable.getMobileNo());
                                                                masterTable.setLoan_amount(salesToolTable.getRequestedAmount());

                                                                dynamicUIDao.insertAndDeleteMasterTable(masterTable, rawDataTable.getClient_id());
                                                            }
                                                        }

                                                    }
                                                }

                                            }
                                            ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            insertLog("postSalesToolDataToServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                executor.execute(() -> {
                                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));

                                    insertLog("postSalesToolDataToServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } else {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
            }


        });
        return data;
    }


    public LiveData<List<DynamicUITable>> postColdCallDataToServer(ColdCallTable coldCallTable, String screenNumber) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                    SCREEN_NAME_COLD_CALLING, coldCallTable.getClientId(), coldCallTable.getLoan_type());

            if (rawDataTable != null) {

                final ColdCallDataRequestDTO coldCallDataRequestDTO = new ColdCallDataRequestDTO();
                coldCallDataRequestDTO.setIMEINumber(appHelper.getIMEI());

                ColdCallDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new ColdCallDataRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_POST_COLD_CALL_DATA_SINGLE);
                ColdCallDataRequestDTO.SpParametersClass spParametersClass = new ColdCallDataRequestDTO.SpParametersClass();
                spParametersClass.setBusinessName(coldCallTable.getBusinessName());
                spParametersClass.setClientId(coldCallTable.getClientId());
                spParametersClass.setClientName(coldCallTable.getClientName());
                spParametersClass.setCreatedBy(coldCallTable.getCreatedBy());
                spParametersClass.setInterestedInLoan(coldCallTable.getInterestedInLoan());
                spParametersClass.setLat(coldCallTable.getLat());
                spParametersClass.setLong(coldCallTable.getLong());
                spParametersClass.setMarketName(coldCallTable.getMarketName());
                spParametersClass.setMobileNo(coldCallTable.getMobileNo());
                // TODO: Added new fields
                spParametersClass.setPincode(coldCallTable.getPincode());
                spParametersClass.setComments(coldCallTable.getComments());
                spParametersClass.setCallTimeStamp(coldCallTable.getCallTimeStamp());
                spParametersClass.setProductId(coldCallTable.getProductId());

                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<ColdCallDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<ColdCallDataRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                coldCallDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(coldCallDataRequestDTO, ColdCallDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);

                DynamicUIWebService.createService(DynamicUIWebservice.class).ColdCallDataToServer(coldCallDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json != null && json.keys() != null && json.length() != 0) {
                                                String key = json.keys().next();

                                                String tableJson = json.get(key).toString();
                                                ColdCallDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, ColdCallDataResponseDTO.class);
                                                if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                    Log.d(TAG, "raw data tvName server");
                                                    List<ColdCallDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                    if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                        List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                        for (ColdCallDataResponseDTO.Table table : rawDataResponseDTOList) {

                                                            if (!TextUtils.isEmpty(table.getResult()) && table.getResult().equalsIgnoreCase("Success")) {
                                                                dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
                                                                dynamicUIDao.updateColdCallDataForSyncByClientId(coldCallTable.getClientId());
                                                                // TODO: insert Lead Table
                                                                if (coldCallTable.getInterestedInLoan() == 1) {
                                                                    if (coldCallTable.getWhen().equalsIgnoreCase(RADIO_BUTTON_WHEN_ITEM_NOW)) {
                                                                        LeadTable leadTable = new LeadTable();
//                                                            leadTable.setBusinessName(coldCallTable.getBusinessName());
                                                                        leadTable.setClientId(coldCallTable.getClientId());
                                                                        leadTable.setClientName(coldCallTable.getClientName());
                                                                        leadTable.setCreatedBy(coldCallTable.getCreatedBy());
                                                                        String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                                                        leadTable.setCreated_date(dateTime);
//                                                            leadTable.setInterestedInLoan(coldCallTable.getInterestedInLoan());
//                                                            leadTable.setLat(coldCallTable.getLat());
//                                                            leadTable.setLong(coldCallTable.getLong());
//                                                                    leadTable.setMarketName(coldCallTable.getMarketName());
                                                                        leadTable.setMobileNo(coldCallTable.getMobileNo());
                                                                        leadTable.setLoan_type(coldCallTable.getLoan_type());
                                                                        leadTable.setIsDataCaptured(false);
                                                                        leadTable.setIsPremium(coldCallTable.getIsPremium());

                                                                        dynamicUIDao.insertLeadTable(leadTable);
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }

                                                }
                                                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                            } else {
                                                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            insertLog("postColdCallDataToServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                executor.execute(() -> {
                                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));

                                    insertLog("postColdCallDataToServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } else {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> postCollectionDataToServer(CollectionTable collectionTable, String screenNumber) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();

        //  DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                    SCREEN_NAME_COLLECTION, collectionTable.getClientId(), collectionTable.getLoanType());

            if (rawDataTable != null) {
                final CollectionDataRequestDTO collectionDataRequestDTO = new CollectionDataRequestDTO();
                collectionDataRequestDTO.setIMEINumber(appHelper.getIMEI());

                CollectionDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new CollectionDataRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_POST_COLD_CALL_DATA_SINGLE);
                CollectionDataRequestDTO.SpParametersClass spParametersClass = new CollectionDataRequestDTO.SpParametersClass();
               /* spParametersClass.setClientId(collectionTable.getClientId());
                spParametersClass.setClientName(collectionTable.getClientName());
                spParametersClass.setCreatedBy(collectionTable.getCreatedBy());
                */// TODO: to be add remaining fields based on service

                // TODO: update Request and response DTOs
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<CollectionDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CollectionDataRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                collectionDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

                // TODO: To be delete for testing
//                dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
//                dynamicUIDao.updateCollectionDataForSyncByClientId(collectionTable.getClientId());
//                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));


               /* DynamicUIWebService.createService(DynamicUIWebservice.class).CollectionDataToServer(collectionDataRequestDTO,
                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            CollectionDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, CollectionDataResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                Log.d(TAG, "raw data tvName server");
                                                List<CollectionDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                    List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                    for (CollectionDataResponseDTO.Table table : rawDataResponseDTOList) {

                                                        if (!TextUtils.isEmpty(table.getResult()) && table.getResult().equalsIgnoreCase("Success")) {
                                                            dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
                                                            dynamicUIDao.updateCollectionDataForSyncByClientId(collectionTable.getClientId());

                                                        }

                                                    }
                                                }

                                            }
                                            ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                        } catch (Exception ex) {


                                            ex.printStackTrace();
                                        }
                                    } else {
                                        // TODO: Sending result
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                executor.execute(() -> {
                                    // TODO: to be delete
                                        dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
                                        dynamicUIDao.updateCollectionDataForSyncByClientId(collectionTable.getClientId());



                                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                });
                            }
                        });*/
            } else {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> postSubmittedDataForCollection(SubmitDataTable submitDataTables, SubmitDataDTO submitDataDTO, String screenNumber, CollectionTable collectionTable) {

        final LiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                        SCREEN_NAME_COLLECTION, collectionTable.getClientId(), collectionTable.getLoanType());

                if (rawDataTable != null) {
                    DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_LEAD);

                }

                if (rawDataTable != null) {
                    JsonParser jsonParser = new JsonParser();
                    JsonObject jsonObject = (JsonObject) jsonParser.parse(rawDataTable.getRawdata());
                    JsonArray jsonArrayRawData = new JsonArray();
                    jsonArrayRawData.add(jsonObject);

                    submitDataTables.setRawData(rawDataTable.getRawdata());
                    submitDataDTO.setRawData(jsonArrayRawData);

                    List<String> stringList = new ArrayList<>();

                    stringList.add(rawDataTable.getRawdata());

                    submitDataTables.setRawData(stringList.toString());
                    submitDataTables.setProductId(rawDataTable.getProductId());// TODO: PRODUCT ID
                    submitDataTables.setEntityId("1031");
                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                    submitDataDTO.setRawData(jsonArrayStringList);
                    submitDataDTO.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                    submitDataDTO.setEntityId("1031");

                    String request = new Gson().toJson(submitDataTables, SubmitDataTable.class);
                    submitDataTables.setRequest(request);
                    submitDataDTO.setRequest(request);

                    String baseString = new Gson().toJson(submitDataDTO, SubmitDataDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);

                    DynamicUIWebService.createService(DynamicUIWebservice.class).postDataToServer(submitDataDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<String>() {
                                @Override
                                public void onResponse(Call<String> call, Response<String> response) {
                                    Log.e("TAG", "DATA SUBMITTED TO SERVER");
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            String serverResponse = response.body();
                                            submitDataTables.setResponse(serverResponse);
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataTables);

//                                            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COLLECTION)) {
//
//                                                dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
//                                                dynamicUIDao.updateCollectionDataForSyncByClientId(collectionTable.getClientId());
//
//
//                                            } else {
//                                                dynamicUIDao.updateRawDataForSync(screenNumber);
//                                            }
                                        } else {
                                            // TODO:  show something went wrong
                                            String serverResponse = response.body();
                                            submitDataTables.setResponse(serverResponse);
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataTables);
                                        }

                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    });
                                }

                                @Override
                                public void onFailure(Call<String> call, Throwable t) {
                                    executor.execute(() -> {
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                        insertLog("postSubmittedDataForCollection", t.getMessage(), "", "", TAG, "", "", "");
                                    });

                                }
                            });
                } else {
                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));

                insertLog("postSubmittedDataForCollection", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }


    // TODO: ONLY FOR FOR LEAD WE ARE USING THIS
    public LiveData<List<DynamicUITable>> postSubmittedDataForColdLead(SubmitDataTable submitDataTables, SubmitDataDTO submitDataDTO, String screenNumber, LeadTable leadTable) {

        final LiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                        SCREEN_NAME_LEAD, leadTable.getClientId(), leadTable.getLoan_type());

                if (rawDataTable != null) {

                    if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) && rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {

                        DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_LEAD);
                    } else {

                        DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL);
                    }
                }

                if (rawDataTable != null) {
                    submitDataTables.setRawData(rawDataTable.getRawdata());
                    JsonParser jsonParser = new JsonParser();
                    JsonObject jsonObject = (JsonObject) jsonParser.parse(rawDataTable.getRawdata());
                    JsonArray jsonArrayRawData = new JsonArray();
                    jsonArrayRawData.add(jsonObject);
                    submitDataDTO.setRawData(jsonArrayRawData);
                    submitDataDTO.setEntityId("1031");

                    List<String> stringList = new ArrayList<>();
                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                            || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                    ) {
                        // TODO: Need to check the raw data table and add it into list
                        List<RawDataTable> rawDataTableList = dynamicUIDao.loadRawData(screenNumber);
                        if (rawDataTableList != null) {
//                    submitDataTables.getRawData().clear(); // TODO: Clearing all raw data list first
                            for (RawDataTable rawdataTable : rawDataTableList) {
                                if (rawdataTable != null && !TextUtils.isEmpty(rawdataTable.getRawdata())) {
                                    stringList.add(rawdataTable.getRawdata());
                                    submitDataTables.setRawData(stringList.toString());
                                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                    submitDataDTO.setRawData(jsonArrayStringList);
                                }
                            }
                        }
                    } else {
                        stringList.add(rawDataTable.getRawdata());
                    }
                    submitDataTables.setRawData(stringList.toString());
                    submitDataTables.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                    submitDataTables.setEntityId("1031");
                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                    submitDataDTO.setRawData(jsonArrayStringList);
                    submitDataDTO.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID

                    String request = new Gson().toJson(submitDataTables, SubmitDataTable.class);
                    submitDataTables.setRequest(request);
                    submitDataDTO.setRequest(request);

                    String baseString = new Gson().toJson(submitDataDTO, SubmitDataDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).postDataToServer(submitDataDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<String>() {
                                @Override
                                public void onResponse(Call<String> call, Response<String> response) {
                                    Log.e("TAG", "DATA SUBMITTED TO SERVER");
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            String serverResponse = response.body();
                                            submitDataTables.setResponse(serverResponse);
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataTables);

                                            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {

                                                dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
                                                dynamicUIDao.updateLeadDataForSyncByClientId(leadTable.getClientId());


                                                // TODO: insert master Table
                                                // TODO: for MSME only we are inserting data in to sales tool table else master table

                                                MasterTable masterTable = new MasterTable();
                                                masterTable.setClientId(rawDataTable.getClient_id());
                                                masterTable.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                masterTable.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                masterTable.setFinalStatus(FINAL_STATUS_PENDING);
                                                masterTable.setSync(false);
                                                masterTable.setLoan_type(rawDataTable.getLoan_type()); // TODO: LOAN TYPE
                                                masterTable.setAllDataCaptured(false);
                                                masterTable.setBranchId(submitDataTables.getBCID());
                                                masterTable.setBranchGSTcode(submitDataTables.getBCBRID());
                                                masterTable.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                                masterTable.setReviewBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_DD_MM_YYYY2);
                                                masterTable.setCreated_date(TimestampConverter.toDate(dateTime));
                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);


                                                if (hashMap != null && hashMap.size() > 0) {
                                                    if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                        masterTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                    }
                                                    if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                                        masterTable.setPhoneNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                                                    }
                                                    if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                                        masterTable.setLoan_amount(hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString());
                                                    }
                                                    dynamicUIDao.insertAndDeleteMasterTable(masterTable, rawDataTable.getClient_id());
                                                }


                                            } else {
                                                dynamicUIDao.updateRawDataForSync(screenNumber);
                                            }
                                        } else {
                                            // TODO:  show something went wrong
                                            String serverResponse = response.body();
                                            submitDataTables.setResponse(serverResponse);
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataTables);
                                        }
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    });
                                }

                                @Override
                                public void onFailure(Call<String> call, Throwable t) {
                                    executor.execute(() -> {
                                        ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));

                                        insertLog("postSubmittedDataForColdLead", t.getMessage(), "", "", TAG, "", "", "");
                                    });

                                }
                            });
                } else {
                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                insertLog("postSubmittedDataForColdLead", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    // TODO: ONLY FOR FOR LEAD WE ARE USING THIS
    public LiveData<List<DynamicUITable>> postSubmittedLiveData(SubmitDataTable submitDataTables, SubmitDataDTO submitDataDTO, String submittedValues, String screenNumber, RawDataTable rawDataTable) {

        final LiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        try {

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) && rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {

                DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_LEAD);
            } else {

                DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL);
            }

            executor.execute(() -> {

                List<String> stringList = new ArrayList<>();
                JsonParser jsonParser = new JsonParser();
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                ) {
                    // TODO: Need to check the raw data table and add it into list
                    List<RawDataTable> rawDataTableList = dynamicUIDao.loadRawData(screenNumber);
                    if (rawDataTableList != null) {
//                    submitDataTables.getRawData().clear(); // TODO: Clearing all raw data list first
                        for (RawDataTable rawdataTable : rawDataTableList) {
                            if (rawdataTable != null && !TextUtils.isEmpty(rawdataTable.getRawdata())) {
                                stringList.add(rawdataTable.getRawdata());
                                submitDataTables.setRawData(stringList.toString());
                                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                submitDataDTO.setRawData(jsonArrayStringList);
                            }
                        }
                    }
                } else {
                    stringList.add(submittedValues);
                }
                submitDataTables.setRawData(stringList.toString());
                submitDataTables.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                submitDataTables.setEntityId("1031");


                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                submitDataDTO.setRawData(jsonArrayStringList);
                submitDataDTO.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                submitDataDTO.setEntityId("1031");

                String request = new Gson().toJson(submitDataTables, SubmitDataTable.class);
                submitDataTables.setRequest(request);
                submitDataDTO.setRequest(request);
                String baseString = new Gson().toJson(submitDataDTO, SubmitDataDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).postDataToServer(submitDataDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<String>() {
                            @Override
                            public void onResponse(Call<String> call, Response<String> response) {
                                Log.e("TAG", "DATA SUBMITTED TO SERVER");
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        String serverResponse = response.body();
                                        submitDataTables.setResponse(serverResponse);
                                        submitDataDTO.setResponse(serverResponse);
                                        dynamicUIDao.saveResponseData(submitDataTables);

                                        if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {

                                            dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());

                                            MasterTable masterTable = new MasterTable();
                                            masterTable.setClientId(rawDataTable.getClient_id());
                                            masterTable.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                            masterTable.setApplicationStatus(APPLICATION_STATUS_NEW);
                                            masterTable.setFinalStatus(FINAL_STATUS_PENDING);
                                            masterTable.setSync(false);
                                            masterTable.setLoan_type(rawDataTable.getLoan_type()); // TODO: LOAN TYPE
                                            masterTable.setAllDataCaptured(false);
                                            masterTable.setBranchId(submitDataTables.getBCID());
                                            masterTable.setBranchGSTcode(submitDataTables.getBCBRID());
                                            masterTable.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                            masterTable.setReviewBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                            String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                            masterTable.setCreated_date(TimestampConverter.toDate(dateTime));
                                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);


                                            if (hashMap != null && hashMap.size() > 0) {
                                                if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                    masterTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                }
                                                if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                                    masterTable.setPhoneNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                                                }
                                        /*if (hashMap.containsKey(TAG_NAME_TYPE_OF_LOAN)) {
                                            masterTable.setLoan_type(hashMap.get(TAG_NAME_TYPE_OF_LOAN).toString());
                                        }*/
                                                if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                                    masterTable.setLoan_amount(hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString());
                                                }
                                                if (hashMap.containsKey(TAG_NAME_INTERESTED_IN_LOAN)) {
                                                    String interestedInLoan = hashMap.get(TAG_NAME_INTERESTED_IN_LOAN).toString();
                                                    if (!TextUtils.isEmpty(interestedInLoan) && interestedInLoan.equalsIgnoreCase("yes")) {
                                                        dynamicUIDao.insertAndDeleteMasterTable(masterTable, rawDataTable.getClient_id());
                                                    }

                                                }
                                            }
                                        } else {
                                            dynamicUIDao.updateRawDataForSync(screenNumber);
                                        }
                                    } else {
                                        // TODO:  show something went wrong
                                        String serverResponse = response.body();
                                        submitDataTables.setResponse(serverResponse);
                                        submitDataDTO.setResponse(serverResponse);
                                        dynamicUIDao.saveResponseData(submitDataTables);

                                        insertLog("postSubmittedLiveData", serverResponse, "", "", TAG, "", "", "");
                                    }
                                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                });
                            }

                            @Override
                            public void onFailure(Call<String> call, Throwable t) {
                                executor.execute(() -> {
                                    ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                                    insertLog("postSubmittedLiveData", t.getMessage(), "", "", TAG, "", "", "");
                                });

                            }
                        });
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                ((MutableLiveData<List<DynamicUITable>>) data).postValue(dynamicUIDao.loadUpdatedDataNew(screenNumber));
                insertLog("postSubmittedLiveData", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    // TODO: THIS IS FOR FOR ALL SCREENS
    public LiveData<String> postSubmittedAllScreensLiveData(String screenData, String screenNumber, String productId,String userId,String screenName,String moduleType) {

        final LiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(PRE_SUBMIT_DATA);

            executor.execute(() -> {

                final InsertRawDataRequest insertRawDataRequest = new InsertRawDataRequest();
                final SubmitDataDTO submitDataDTO = new SubmitDataDTO();
                insertRawDataRequest.setActionName("N/A");
                if(loanType.equalsIgnoreCase(LOAN_NAME_EL)){
                    if(currentStage != null && currentStage.equalsIgnoreCase("Document Execution")){
                        // TODO: STAGE ID 148 MEANS RBL OPS OR DISBUSMENT
                        insertRawDataRequest.setStageId(148);
                    }else {
                        // TODO: STAGE ID 0 MEANS  PD STAGE
                        insertRawDataRequest.setStageId(0);
                    }
                }else {
                    List<RawDataTable> cibilStatusrawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(SCREEN_NAME_CIBIL_STATUS, CLIENT_ID, MODULE_TYPE_GENERATE_CIBIL);
                    CibilResponseModel cibilResponseModel = null;
                    if (cibilStatusrawDataTableList != null && cibilStatusrawDataTableList.size() > 0) {
                        for (RawDataTable datalist : cibilStatusrawDataTableList) {
                            String rawData = datalist.getRawdata();
                            cibilResponseModel = new Gson().fromJson(rawData, CibilResponseModel.class);
                        }
                        if (currentStage != null && currentStage.equalsIgnoreCase("Document Execution")) {
                            // TODO: STAGE ID 172 MEANS  OPS STAGE
                            insertRawDataRequest.setStageId(172);
                        } else {
                            if (cibilResponseModel != null && cibilResponseModel.getIsAccepctOrDecline().equalsIgnoreCase("0")) {
                                // TODO: STAGE ID 0 MEANS  PD STAGE
                                insertRawDataRequest.setStageId(0);
                            } else {
                                if (cibilResponseModel != null && cibilResponseModel.getFlag().equalsIgnoreCase("P")) {
                                    // TODO: STAGE ID 170 MEANS  RBL SCANCTION
                                    insertRawDataRequest.setStageId(0);
                                } else {
                                    insertRawDataRequest.setStageId(0);
                                }
                            }
                        }
                    }
                }
                if (loanType.equalsIgnoreCase(LOAN_NAME_EL)) {
                    insertRawDataRequest.setWorkflowId(20);
                    insertRawDataRequest.setProductId("26");
                } else if (loanType.equalsIgnoreCase(LOAN_NAME_TWL)) {
                    insertRawDataRequest.setWorkflowId(19);
                    insertRawDataRequest.setProductId("25");
                }
                insertRawDataRequest.setRoleId("4001");
                insertRawDataRequest.setFieldId(0);

                List<String> stringList = new ArrayList<>();
                JsonParser jsonParser = new JsonParser();
                if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)
                        /*||screenName.equalsIgnoreCase(SCREEN_NAME_GUARANTOR_DETAILS)*/) {
                    // TODO: Need to check the raw data table and add it into list
                    List<RawDataTable> rawDataTableList = dynamicUIDao.loadRawDataFromClientId(screenNumber, CLIENT_ID);
                    if (rawDataTableList != null) {
                        for (RawDataTable rawdataTable : rawDataTableList) {
                            if (rawdataTable != null && !TextUtils.isEmpty(rawdataTable.getRawdata())) {
                                stringList.add(rawdataTable.getRawdata());
                                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                byte[] byteArrayPassword = stringList.toString().getBytes();
                                String  submittedValues = Base64.encodeToString(byteArrayPassword, Base64.DEFAULT);
                                insertRawDataRequest.setRawDataBag(submittedValues);
                            }
                        }
                    }
                } else if (screenName.equalsIgnoreCase(SCREEN_NAME_CPV)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_POSIDEX)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_RAMP)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_VKYC_UP_STREAM)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_DELINQUENCY)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_DEDUPE)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_RAT)
                        ||screenName.equalsIgnoreCase(SCREEN_NAME_GENERATE_CIBIL)) {
                    // TODO: Need to check the raw data table and add it into list
                    List<RawDataTable> rawDataTableList = dynamicUIDao.loadRawDataFromClientId(screenNumber, CLIENT_ID);
                    if (rawDataTableList != null) {
                        for (RawDataTable rawdataTable : rawDataTableList) {
                            if (rawdataTable != null && !TextUtils.isEmpty(rawdataTable.getRawdata())) {
                                stringList.add(rawdataTable.getRawdata());
                                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                byte[] byteArrayPassword = stringList.toString().getBytes();
                                String  submittedValues = Base64.encodeToString(byteArrayPassword, Base64.DEFAULT);
                                insertRawDataRequest.setRawDataBag(submittedValues);
                            }
                        }
                    }
                }else if(screenName.equalsIgnoreCase(SCREEN_NAME_DOCUMENT_UPLOAD)){
                    byte[] value = screenData.toString().getBytes();
                    String  submittedValues = Base64.encodeToString(value, Base64.DEFAULT);
                    insertRawDataRequest.setRawDataBag(submittedValues);
                }else  {
                    stringList.add(screenData);
                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                    byte[] value = jsonArrayStringList.toString().getBytes();
                    String  submittedValues = Base64.encodeToString(value, Base64.DEFAULT);
                    insertRawDataRequest.setRawDataBag(submittedValues);
                }
                insertRawDataRequest.setCreatedBy(userId);
                insertRawDataRequest.setModuleId("APP");
                insertRawDataRequest.setScreenId(Integer.valueOf(screenNumber));
                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(CLIENT_ID);
                if(masterTable != null && !TextUtils.isEmpty(masterTable.getBranchGSTcode())&&!TextUtils.isEmpty(masterTable.getBranchGSTcode())){
                    insertRawDataRequest.setBCBRID(masterTable.getBranchGSTcode());
                    insertRawDataRequest.setBCID(masterTable.getBranchId());
                }else {
                    if(!TextUtils.isEmpty(branchGSTcode)){
                        insertRawDataRequest.setBCBRID(branchGSTcode);}else {
                        insertRawDataRequest.setBCBRID(branchId);}
                    insertRawDataRequest.setBCID(branchId);
                }
                insertRawDataRequest.setProjectId("1");
                insertRawDataRequest.setUniqueid(CLIENT_ID);
                String baseString = new Gson().toJson(insertRawDataRequest, InsertRawDataRequest.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).insertpostALLDataToServer(insertRawDataRequest,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<String>() {
                            @Override
                            public void onResponse(Call<String> call, Response<String> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        // postSubmitStatus(CLIENT_ID, response.body());
                                        ((MutableLiveData<String>) data).postValue(response.body());
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<String> call, Throwable t) {
                                executor.execute(() -> {
                                });

                            }
                        });
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
            });
        }
        return data;
    }

    public LiveData<SubmitDataTable> syncDataToServer(SubmitDataTable submitDataTables, SubmitDataDTO submitDataDTO, String submittedValues,
                                                      String screenNumber, RawDataTable rawDataTable) {

        final LiveData<SubmitDataTable> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL);

            executor.execute(() -> {

                List<String> stringList = new ArrayList<>();
                JsonParser jsonParser = new JsonParser();
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                ) {
                    // TODO: Need to check the raw data table and add it into list
                    List<RawDataTable> rawDataTableList = dynamicUIDao.loadRawData(screenNumber);
                    if (rawDataTableList != null) {
                        for (RawDataTable rawdataTable : rawDataTableList) {
                            if (rawdataTable != null && !TextUtils.isEmpty(rawdataTable.getRawdata())) {
                                stringList.add(rawdataTable.getRawdata());
                                submitDataTables.setRawData(stringList.toString());
                                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                submitDataDTO.setRawData(jsonArrayStringList);
                            }
                        }
                    }
                } else {
                    stringList.add(submittedValues);
                }
                submitDataTables.setRawData(stringList.toString());
                submitDataTables.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                submitDataDTO.setRawData(jsonArrayStringList);
                submitDataDTO.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                submitDataDTO.setEntityId("1031");

                submitDataTables.setEntityId("1031");

                String request = new Gson().toJson(submitDataTables, SubmitDataTable.class);
                submitDataTables.setRequest(request);
                submitDataDTO.setRequest(request);
                String baseString = new Gson().toJson(submitDataDTO, SubmitDataDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).postDataToServer(submitDataDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).enqueue(new Callback<String>() {
                            @Override
                            public void onResponse(Call<String> call, Response<String> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        String serverResponse = response.body();
                                        submitDataTables.setResponse(serverResponse);
                                        submitDataDTO.setResponse(serverResponse);
                                        dynamicUIDao.saveResponseData(submitDataTables);

                                        if (!TextUtils.isEmpty(serverResponse) && serverResponse.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                            dynamicUIDao.updateRawDataForSyncById(screenNumber, rawDataTable.getId());
                                        }

                                    } else {
                                        // TODO: 20-04-2019 show something went wrong
                                        String serverResponse = response.body();
                                        submitDataTables.setResponse(serverResponse);
                                        submitDataDTO.setResponse(serverResponse);
                                        dynamicUIDao.saveResponseData(submitDataTables);
                                        insertLog("syncDataToServer", serverResponse, "", "", TAG, "", "", "");
                                    }
                                    ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(screenNumber,
                                            rawDataTable.getUser_id(), rawDataTable.getClient_id()));
                                });
                            }

                            @Override
                            public void onFailure(Call<String> call, Throwable t) {
                                ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(screenNumber,
                                        rawDataTable.getUser_id(), rawDataTable.getClient_id()));
                                insertLog("syncDataToServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncDataToServer", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    public LiveData<SubmitDataTable> syncSingleVillageSurveyData(VillageSurveyTable villageSurveyTable) {

        final LiveData<SubmitDataTable> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_LEAD);

            executor.execute(() -> {

                RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                        SCREEN_NAME_VILLAGE_SURVEY, villageSurveyTable.getVillageId(), villageSurveyTable.getLoan_type());

                if (rawDataTable != null) {

                    final SubmitDataTable submitDataTable = new SubmitDataTable();
                    submitDataTable.setScreenId(rawDataTable.getScreen_no());
                    submitDataTable.setUniqueID(rawDataTable.getClient_id());
                    submitDataTable.setApplicationId(rawDataTable.getClient_id());
                    submitDataTable.setIMEINumber(appHelper.getIMEI());
                    submitDataTable.setBCBRID(villageSurveyTable.getBranchGSTcode());
                    submitDataTable.setBCID(villageSurveyTable.getBranchId());
                    submitDataTable.setCreatedBy(rawDataTable.getUser_id());
                    submitDataTable.setStageId(STAGE_ID_ZERO); // TODO: STAGE ID ZERO
                    submitDataTable.setEntityId("1031");
                    ArrayList<String> stringArrayList = new ArrayList<>();
                    stringArrayList.add(rawDataTable.getRawdata());
                    submitDataTable.setRawData(rawDataTable.getRawdata());
                    // TODO: 22-12-2020 submit DTO
                    final SubmitDataDTO submitDataDTO = new SubmitDataDTO();
                    submitDataDTO.setScreenId(rawDataTable.getScreen_no());
                    submitDataDTO.setUniqueID(rawDataTable.getClient_id());
                    submitDataDTO.setApplicationId(rawDataTable.getClient_id());
                    submitDataDTO.setIMEINumber(appHelper.getIMEI());
                    submitDataDTO.setBCBRID(villageSurveyTable.getBranchGSTcode());
                    submitDataDTO.setBCID(villageSurveyTable.getBranchId());
                    submitDataDTO.setCreatedBy(rawDataTable.getUser_id());
                    submitDataDTO.setEntityId("1031");
                    submitDataDTO.setStageId(STAGE_ID_ZERO); // TODO: STAGE ID ZERO
                    JsonParser jsonParser = new JsonParser();
                    JsonObject jsonObject = (JsonObject) jsonParser.parse(rawDataTable.getRawdata());
                    JsonArray jsonArrayRawData = new JsonArray();
                    jsonArrayRawData.add(jsonObject);
                    submitDataDTO.setRawData(jsonArrayRawData);

                    List<String> stringList = new ArrayList<>();
                    stringList.add(rawDataTable.getRawdata());
                    submitDataTable.setRawData(stringList.toString());
                    submitDataTable.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID
                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                    submitDataDTO.setRawData(jsonArrayStringList);
                    submitDataDTO.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID

                    String request = new Gson().toJson(submitDataTable, SubmitDataTable.class);
                    submitDataTable.setRequest(request);
                    submitDataDTO.setRequest(request);
                    String baseString = new Gson().toJson(submitDataDTO, SubmitDataDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).postDataToServer(submitDataDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).enqueue(new Callback<String>() {
                                @Override
                                public void onResponse(Call<String> call, Response<String> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            String serverResponse = response.body();
                                            submitDataTable.setResponse(serverResponse);
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataTable);

                                            if (!TextUtils.isEmpty(serverResponse) && serverResponse.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                dynamicUIDao.updateRawDataForSyncById(rawDataTable.getScreen_no(), rawDataTable.getId());

                                                // TODO: Update village survey table status
                                                dynamicUIDao.updateVillageSurveyTableSyncAndStatus(true, FINAL_STATUS_SUBMITTED, villageSurveyTable.getId());
                                            }

                                        } else {
                                            // TODO: 20-04-2019 show something went wrong
                                            String serverResponse = response.body();
                                            submitDataTable.setResponse(serverResponse);
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataTable);

                                            insertLog("syncSingleVillageSurveyData", serverResponse, "", "", TAG, "", "", "");
                                        }
                                        ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(rawDataTable.getScreen_no(),
                                                rawDataTable.getUser_id(), rawDataTable.getClient_id()));
                                    });
                                }

                                @Override
                                public void onFailure(Call<String> call, Throwable t) {
                                    ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(rawDataTable.getScreen_no(),
                                            rawDataTable.getUser_id(), rawDataTable.getClient_id()));

                                    insertLog("syncSingleVillageSurveyData", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });
                } else {
                    // TODO: Raw data null
                    ((MutableLiveData<SubmitDataTable>) data).postValue(new SubmitDataTable());
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncSingleVillageSurveyData", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }
    public LiveData<SubmitDataTable> syncSingleCenterCreationData(CenterCreationTable centerCreationTable) {

        final LiveData<SubmitDataTable> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_JLG);

            executor.execute(() -> {

                RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(
                        SCREEN_NAME_CENTER_CREATION, centerCreationTable.getCenterId(), centerCreationTable.getLoan_type());

                if (rawDataTable != null) {

                    final SubmitDataTable submitDataDTO = new SubmitDataTable();
                    submitDataDTO.setScreenId(rawDataTable.getScreen_no());
                    submitDataDTO.setUniqueID(rawDataTable.getClient_id());
                    submitDataDTO.setApplicationId(rawDataTable.getClient_id());
                    submitDataDTO.setIMEINumber(appHelper.getIMEI());
                    submitDataDTO.setBCBRID(centerCreationTable.getBranchGSTcode());
                    submitDataDTO.setBCID(centerCreationTable.getBranchId());
                    submitDataDTO.setCreatedBy(rawDataTable.getUser_id());
                    submitDataDTO.setStageId(STAGE_ID_ZERO); // TODO: STAGE ID ZERO
                    ArrayList<String> stringArrayList = new ArrayList<>();
                    stringArrayList.add(rawDataTable.getRawdata());
                    submitDataDTO.setRawData(rawDataTable.getRawdata());

                    List<String> stringList = new ArrayList<>();
                    stringList.add(rawDataTable.getRawdata());
                    submitDataDTO.setRawData(stringList.toString());
                    submitDataDTO.setProductId(rawDataTable.getProductId()); // TODO: PRODUCT ID

                    String request = new Gson().toJson(submitDataDTO, SubmitDataTable.class);
                    submitDataDTO.setRequest(request);
                    String baseString = new Gson().toJson(submitDataDTO, SubmitDataTable.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).postSingleDataToServerJLG(submitDataDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1)
                            .enqueue(new Callback<String>() {
                                @Override
                                public void onResponse(Call<String> call, Response<String> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            String serverResponse = response.body();
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataDTO);

                                            if (!TextUtils.isEmpty(serverResponse) && serverResponse.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                dynamicUIDao.updateRawDataForSyncById(rawDataTable.getScreen_no(), rawDataTable.getId());

                                                // TODO: Update center creation table status
                                                dynamicUIDao.updateCenterCreationTableSyncAndStatus(true, FINAL_STATUS_SUBMITTED,
                                                        centerCreationTable.getId());
                                            }

                                        } else {
                                            // TODO: show something went wrong
                                            String serverResponse = response.body();
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataDTO);

                                            insertLog("syncSingleCenterCreationData", serverResponse, "", "", TAG, "", "", "");
                                        }
                                        ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(rawDataTable.getScreen_no(),
                                                rawDataTable.getUser_id(), rawDataTable.getClient_id()));
                                    });
                                }

                                @Override
                                public void onFailure(Call<String> call, Throwable t) {
                                    executor.execute(() -> {
                                        ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(rawDataTable.getScreen_no(),
                                                rawDataTable.getUser_id(), rawDataTable.getClient_id()));

                                        insertLog("syncSingleCenterCreationData", t.getMessage(), "", "", TAG, "", "", "");
                                    });
                                }
                            });
                } else {
                    executor.execute(() -> {
                        // TODO: Raw data null
                        ((MutableLiveData<SubmitDataTable>) data).postValue(new SubmitDataTable());
                    });
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncSingleCenterCreationData", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }
    public LiveData<String> syncGRTData(List<GRTTable> grtTableList) {

        final LiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_JLG);

            executor.execute(() -> {

                GRTTable grtTable = grtTableList.get(0);

                // TODO: Root Json Array List
                List<GRTJsonDTO> grtJsonDTOList = new ArrayList<>();

                // TODO: Center Detail Object
                GRTJsonDTO grtJsonDTO = new GRTJsonDTO();
                grtJsonDTOList.add(grtJsonDTO);
                // TODO: Group Detail List
                List<GRTJsonDTO.GroupDetail> groupDetailDtoList = new ArrayList<>();
                // TODO: Customer Detail List
                List<GRTJsonDTO.CustomerDetail> customerDetailDtoList = new ArrayList<>();
                // TODO: Loan Detail List
                List<GRTJsonDTO.LoanDetail> loanDetailDtoList = new ArrayList<>();


                LogInTable logInTable = dynamicUIDao.getLoginTable(grtTable.getCreatedBy());

                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterID(grtTable.getCenterId(),
                        grtTable.getLoan_type());
                if (centerCreationTable != null) {
                    grtJsonDTO.setCenterId(centerCreationTable.getCenterId());
                    grtJsonDTO.setCenterName(centerCreationTable.getCenterName());
                    String formationDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
                    if (!TextUtils.isEmpty(formationDate)) {
                        grtJsonDTO.setFormationDate(formationDate);
                    }
                    grtJsonDTO.setMaximumIndividuals(40);
                    grtJsonDTO.setMeetingTime("08:00:00");
                    grtJsonDTO.setAddressLine1("NA");
                    grtJsonDTO.setPinCode("721136");
                    grtJsonDTO.setBranchCode(centerCreationTable.getBranchId());
                    grtJsonDTO.setPrimaryContact("Ali Hussain");
                    grtJsonDTO.setPhoneNo("8056195511");
                    grtJsonDTO.setSecondaryContact("Seeta");
                    grtJsonDTO.setSecondaryphoneNo("9710381069");

                    if (logInTable != null && !TextUtils.isEmpty(logInTable.getUsername())) {
                        grtJsonDTO.setServicingAgent(centerCreationTable.getCreatedBy() + "-" + logInTable.getUsername());
                        grtJsonDTO.setOperatingRegionCode(logInTable.getBranchID());
                    }
                }

                List<GroupTable> groupTableList = dynamicUIDao.getDistinctGroupTable(grtTable.getCenterId());
                if (groupTableList != null && groupTableList.size() > 0) {
                    for (GroupTable groupTable : groupTableList) {

                        // TODO: Group Detail
                        GRTJsonDTO.GroupDetail groupDetailDto = new GRTJsonDTO.GroupDetail();
                        groupDetailDtoList.add(groupDetailDto);
                        grtJsonDTO.setGroupDetailList(groupDetailDtoList);

                        groupDetailDto.setGroupId(groupTable.getGroupId());
                        groupDetailDto.setGroupName(groupTable.getGroupName());
                        groupDetailDto.setCenterId(groupTable.getCenterId());
                        groupDetailDto.setCenterName(groupTable.getCenterName());
                        groupDetailDto.setGroupType("2");
                        groupDetailDto.setMinNumber(4);
                        groupDetailDto.setMaxNumber(20);
                        String formationDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
                        if (!TextUtils.isEmpty(formationDate)) {
                            groupDetailDto.setFormationDate(formationDate);
                        }
                        groupDetailDto.setMeetingTime("10:00:00");
                        groupDetailDto.setMeetingFrequency("Monthly");
                        groupDetailDto.setDistanceFromBranch(5);
                        groupDetailDto.setBranchCode(groupTable.getBranchId());
                        groupDetailDto.setOperatingRegionCode(groupTable.getBranchId());

                        List<GroupTable> groupTableMemberList = dynamicUIDao.getGroupTableListByGroupId(groupTable.getCenterId(),
                                groupTable.getLoan_type(), groupTable.getGroupId());
                        if (groupTableMemberList != null && groupTableMemberList.size() > 0) {
                            for (GroupTable groupTableMember : groupTableMemberList) {

                                // TODO: Customer Detail
                                GRTJsonDTO.CustomerDetail customerDetailDto = new GRTJsonDTO.CustomerDetail();
                                customerDetailDtoList.add(customerDetailDto);
                                groupDetailDto.setCustomerDetailList(customerDetailDtoList);

                                // TODO: Loan Detail
                                GRTJsonDTO.LoanDetail loanDetailDto = new GRTJsonDTO.LoanDetail();
                                loanDetailDtoList.add(loanDetailDto);
                                customerDetailDto.setLoanDetailList(loanDetailDtoList);

                                RawDataTable applicantRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable personalRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_PERSONAL_DETAIL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable socioRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable bankRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_BANK_DETAILS,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable loanRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable nomineeRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_NOMINEE_DETAIL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());

                                customerDetailDto.setClientId(groupTableMember.getClientId());
                                customerDetailDto.setCenterId(groupTableMember.getCenterId());
                                customerDetailDto.setGroupId(groupTableMember.getGroupId());
                                customerDetailDto.setClientName(groupTableMember.getClientName());
                                customerDetailDto.setBranchCode(groupTableMember.getBranchId());
                                customerDetailDto.setOperatingRegionCode(groupTableMember.getBranchId());
                                customerDetailDto.setBCBranchCode(groupTableMember.getBranchId());
                                customerDetailDto.setCBcheck("0"); // TODO: Always success
                                customerDetailDto.setCardIssuanceFlag("0");
                                if (logInTable != null && !TextUtils.isEmpty(logInTable.getUsername())) {
                                    customerDetailDto.setCollector(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    customerDetailDto.setApprover(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    customerDetailDto.setBarcodeNo(groupTableMember.getCreatedBy() + logInTable.getUsername());
                                }

                                loanDetailDto.setLoanId(groupTableMember.getClientId());
                                loanDetailDto.setClientId(groupTableMember.getClientId());
                                loanDetailDto.setCenterId(groupTableMember.getCenterId());
                                loanDetailDto.setGroupId(groupTableMember.getGroupId());
                                loanDetailDto.setBCBranchCode(groupTableMember.getBranchId());
                                loanDetailDto.setInsuranceFlag("IF1");
                                loanDetailDto.setLoanCycle("1");
                                loanDetailDto.setMinor("1");
                                if (logInTable != null && !TextUtils.isEmpty(logInTable.getUsername())) {
                                    loanDetailDto.setCollector(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    loanDetailDto.setApprover(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    loanDetailDto.setBarcodeNo(groupTableMember.getCreatedBy() + logInTable.getUsername());
                                }

                                String startDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
                                if (!TextUtils.isEmpty(startDate)) {
                                    loanDetailDto.setLoanStartDate(startDate);
                                    loanDetailDto.setRepaymentStartDate(startDate);
                                    loanDetailDto.setExpectedDisbursalDate(startDate);
                                }
                                loanDetailDto.setRepaymentFrequency("monthly");

                                if (applicantRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(applicantRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                            String value = hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setClientName(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                            String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAddressLine1(value);
                                                loanDetailDto.setAddress1(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                            String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAddressLine2(value);
                                                loanDetailDto.setAddress2(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                            String value = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAddressLine3(value);
                                                loanDetailDto.setAddress3(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                            String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setPin(value);
                                                loanDetailDto.setPinCode(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_STATE)) {
                                            String value = hashMap.get(TAG_NAME_STATE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setState(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_CITY)) {
                                            String value = hashMap.get(TAG_NAME_CITY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setCity(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_CONTAINS_DOB)) {
                                            String value = hashMap.get(TAG_NAME_CONTAINS_DOB).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setDateOfBirth(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_GENDER)) {
                                            String value = hashMap.get(TAG_NAME_GENDER).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setGender(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                            String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAadharNo(value);
                                                customerDetailDto.setVoterId("");
                                            }
                                        }
                                    }
                                }

                                if (personalRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(personalRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                            String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setMobileNo(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_SPOUSE_NAME)) {
                                            String value = hashMap.get(TAG_NAME_SPOUSE_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setSpouseName(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
                                            String value = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setMaritalStatus(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_SPOUSE_DATE_OF_BIRTH)) {
                                            String value = hashMap.get(TAG_NAME_SPOUSE_DATE_OF_BIRTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setSpouseDOB(value);
                                            }
                                        }
                                    }
                                }

                                if (socioRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(socioRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NATIONALITY)) {
                                            String value = hashMap.get(TAG_NAME_NATIONALITY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setNationality(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_RELIGION)) {
                                            String value = hashMap.get(TAG_NAME_RELIGION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setReligion(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_MOTHER_TONGUE)) {
                                            String value = hashMap.get(TAG_NAME_MOTHER_TONGUE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setMotherTongue(value);
                                                customerDetailDto.setLanguage(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LANGUAGE)) {
                                            String value = hashMap.get(TAG_NAME_LANGUAGE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setLanguage(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_HEALTH)) {
                                            String value = hashMap.get(TAG_NAME_HEALTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setHealth(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_EDUCATION)) {
                                            String value = hashMap.get(TAG_NAME_APPLICANT_EDUCATION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setEducationalQualification(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_OCCUPATION)) {
                                            String value = hashMap.get(TAG_NAME_OCCUPATION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setOccupation(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY)) {
                                            String value = hashMap.get(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setCategory(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_SOCIAL_STATUS)) {
                                            String value = hashMap.get(TAG_NAME_SOCIAL_STATUS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setCaste(value);
                                            }
                                        }
                                    }
                                }

                                if (bankRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(bankRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
                                            String value = hashMap.get(TAG_NAME_BANK_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setBANKNAME(value);
                                                loanDetailDto.setBankName(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
                                            String value = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setBANK_AC_NO(value);
                                                loanDetailDto.setBankAccountNo(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_BRANCH_NAME)) {
                                            String value = hashMap.get(TAG_NAME_BRANCH_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setBANK_BRANCH_NAME(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_IFSC_CODE)) {
                                            String value = hashMap.get(TAG_NAME_IFSC_CODE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setIFSCCode(value);
                                            }
                                        }
                                    }
                                }

                                if (nomineeRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(nomineeRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_FULL_NAME)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_FULL_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setNomineeName(value);
                                                loanDetailDto.setNomineeName(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_DATE_OF_BIRTH)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_DATE_OF_BIRTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setDOB(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_AGE)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_AGE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setNomineeAge(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_GENDER)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_GENDER).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setGender(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_STATE)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_STATE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setState(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_CITY)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_CITY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setCity(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_PINCODE)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_PINCODE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setPinCode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setNomineeRelationship(value);
                                                loanDetailDto.setRelation(value);
                                            }
                                        }
                                    }
                                }

                                if (loanRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(loanRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LOAN_PRODUCT)) {
                                            String value = hashMap.get(TAG_NAME_LOAN_PRODUCT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanProductCode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LEAD_LOAN_PRODUCT)) {
                                            String value = hashMap.get(TAG_NAME_LEAD_LOAN_PRODUCT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanProductCode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_PURPOSE)) {
                                            String value = hashMap.get(TAG_NAME_PURPOSE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanPurpose(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                            String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanAmount(Integer.parseInt(value));
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LOAN_TENURE_IN_MONTHS)) {
                                            String value = hashMap.get(TAG_NAME_LOAN_TENURE_IN_MONTHS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setNoOfInstallments(Integer.parseInt(value));
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_MODE_OF_DISBURSEMENT)) {
                                            String value = hashMap.get(TAG_NAME_MODE_OF_DISBURSEMENT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setDisbursementMode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_REPAYMENT_FREQUENCY)) {
                                            String value = hashMap.get(TAG_NAME_REPAYMENT_FREQUENCY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setRepaymentFrequency(value);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Type type = new TypeToken<List<GRTJsonDTO>>() {
                }.getType();
                String grtJsonArray = new Gson().toJson(grtJsonDTOList, type);
                if (grtTable != null && !TextUtils.isEmpty(grtJsonArray.toString())) {

                    final SubmitDataTable submitDataDTO = new SubmitDataTable();
                    submitDataDTO.setScreenId(SCREEN_NO_GRT_JLG); // TODO: GRT - Dummy screen id -249
                    submitDataDTO.setUniqueID(grtTable.getCenterId());
                    submitDataDTO.setApplicationId(grtTable.getCenterId());
                    submitDataDTO.setIMEINumber(appHelper.getIMEI());
                    submitDataDTO.setBCBRID(grtTable.getBranchGSTcode());
                    submitDataDTO.setBCID(grtTable.getBranchId());
                    submitDataDTO.setCreatedBy(grtTable.getCreatedBy());
                    submitDataDTO.setStageId(STAGE_ID_ZERO); // TODO: STAGE ID ZERO

                    submitDataDTO.setRawData(grtJsonArray.toString());
                    submitDataDTO.setProductId(PRODUCT_ID_JLG); // TODO: PRODUCT ID

                    String request = new Gson().toJson(submitDataDTO, SubmitDataTable.class);
                    submitDataDTO.setRequest(request);
                    String baseString = new Gson().toJson(submitDataDTO, SubmitDataTable.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).postSingleDataToServerJLG(submitDataDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1)
                            .enqueue(new Callback<String>() {
                                @Override
                                public void onResponse(Call<String> call, Response<String> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            String serverResponse = response.body();
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataDTO);

                                            if (!TextUtils.isEmpty(serverResponse) && serverResponse.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                for (GRTTable grtTable : grtTableList) {
                                                    // TODO: Update GRT table status
                                                    dynamicUIDao.updateGRTTableSyncAndStatus(true, FINAL_STATUS_APPROVED,
                                                            grtTable.getId());
                                                }

                                            }

                                            // TODO: Final Result ==> Success Case
                                            ((MutableLiveData<String>) data).postValue(serverResponse);

                                        } else {
                                            // TODO: show something went wrong
                                            String serverResponse = response.body();
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataDTO);

                                            insertLog("syncGRTData", serverResponse, "", "", TAG, "", "", "");

                                            // TODO: Final Result ==> Failure Case
                                            ((MutableLiveData<String>) data).postValue(serverResponse);
                                        }

                                    });
                                }

                                @Override
                                public void onFailure(Call<String> call, Throwable t) {
                                    // TODO: Final Result ==> Failure Case
                                    ((MutableLiveData<String>) data).postValue("");

                                    insertLog("syncGRTData", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });
                } else {
                    // TODO: Final Result ==> Failure Case
                    ((MutableLiveData<String>) data).postValue("");
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncGRTData", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }

    // TODO: Validations based on product feature table
    public LiveData<String> validateGRT(List<GRTTable> grtTableList, String centerId) {

        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                // TODO: Step 1 : Check Attendance done or not
                boolean isAttendanceDone = false;
                List<GRTAttendanceTable> grtAttendanceTableList = dynamicUIDao.getGRTAttendanceTable(centerId);
                if (grtAttendanceTableList != null && grtAttendanceTableList.size() > 0) {
                    for (GRTAttendanceTable grtAttendanceTable : grtAttendanceTableList) {
                        if (grtAttendanceTable != null && grtAttendanceTable.isAttendance()) {
                            isAttendanceDone = true;
                            break;
                        }
                    }
                }

                if (!isAttendanceDone) {
                    // TODO: Send error tvMobNo
                    data.postValue(ERROR_MESSAGE_CYCLE_TWO_ATTENTDANCE_NOT_DONE);
                    return;
                }


            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("syncGRTData", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }

    public LiveData<SubmitDataTable> syncLoanDetailsToBCM(LoanTable loanTable) {

        final LiveData<SubmitDataTable> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_JLG);

            executor.execute(() -> {

                // TODO: Root Json Array List
                List<GRTJsonDTO> grtJsonDTOList = new ArrayList<>();

                // TODO: Center Detail Object
                GRTJsonDTO grtJsonDTO = new GRTJsonDTO();
                grtJsonDTOList.add(grtJsonDTO);
                // TODO: Group Detail List
                List<GRTJsonDTO.GroupDetail> groupDetailDtoList = new ArrayList<>();
                // TODO: Customer Detail List
                List<GRTJsonDTO.CustomerDetail> customerDetailDtoList = new ArrayList<>();
                // TODO: Loan Detail List
                List<GRTJsonDTO.LoanDetail> loanDetailDtoList = new ArrayList<>();


                LogInTable logInTable = dynamicUIDao.getLoginTable(loanTable.getCreatedBy());

                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterID(loanTable.getCenterId(),
                        loanTable.getLoan_type());
                if (centerCreationTable != null) {
                    grtJsonDTO.setCenterId(centerCreationTable.getCenterId());
                    grtJsonDTO.setCenterName(centerCreationTable.getCenterName());
                    String formationDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
                    if (!TextUtils.isEmpty(formationDate)) {
                        grtJsonDTO.setFormationDate(formationDate);
                    }

                    // TODO: ALL HARDCODED VALUES
                    grtJsonDTO.setMaximumIndividuals(40);
                    grtJsonDTO.setMeetingTime("08:00:00");
                    grtJsonDTO.setAddressLine1("NA");
                    grtJsonDTO.setPinCode("721136");
                    grtJsonDTO.setBranchCode(centerCreationTable.getBranchId());
                    grtJsonDTO.setPrimaryContact("Ali Hussain");
                    grtJsonDTO.setPhoneNo("8056195511");
                    grtJsonDTO.setSecondaryContact("Seeta");
                    grtJsonDTO.setSecondaryphoneNo("9710381069");

                    if (logInTable != null && !TextUtils.isEmpty(logInTable.getUsername())) {
                        grtJsonDTO.setServicingAgent(centerCreationTable.getCreatedBy() + "-" + logInTable.getUsername());
                        grtJsonDTO.setOperatingRegionCode(logInTable.getBranchID());
                    }
                }

                List<GroupTable> groupTableList = dynamicUIDao.getDistinctGroupTable(loanTable.getCenterId());
                if (groupTableList != null && groupTableList.size() > 0) {
                    for (GroupTable groupTable : groupTableList) {

                        // TODO: Group Detail
                        GRTJsonDTO.GroupDetail groupDetailDto = new GRTJsonDTO.GroupDetail();
                        groupDetailDtoList.add(groupDetailDto);
                        grtJsonDTO.setGroupDetailList(groupDetailDtoList);

                        groupDetailDto.setGroupId(groupTable.getGroupId());
                        groupDetailDto.setGroupName(groupTable.getGroupName());
                        groupDetailDto.setCenterId(groupTable.getCenterId());
                        groupDetailDto.setCenterName(groupTable.getCenterName());
                        groupDetailDto.setGroupType("2");
                        groupDetailDto.setMinNumber(4);
                        groupDetailDto.setMaxNumber(20);
                        String formationDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
                        if (!TextUtils.isEmpty(formationDate)) {
                            groupDetailDto.setFormationDate(formationDate);
                        }
                        groupDetailDto.setMeetingTime("10:00:00");
                        groupDetailDto.setMeetingFrequency("Monthly");
                        groupDetailDto.setDistanceFromBranch(5);
                        groupDetailDto.setBranchCode(groupTable.getBranchId());
                        groupDetailDto.setOperatingRegionCode(groupTable.getBranchId());

                        List<GroupTable> groupTableMemberList = dynamicUIDao.getGroupTableListByGroupId(groupTable.getCenterId(),
                                groupTable.getLoan_type(), groupTable.getGroupId());
                        if (groupTableMemberList != null && groupTableMemberList.size() > 0) {
                            for (GroupTable groupTableMember : groupTableMemberList) {

                                // TODO: Customer Detail
                                GRTJsonDTO.CustomerDetail customerDetailDto = new GRTJsonDTO.CustomerDetail();
                                customerDetailDtoList.add(customerDetailDto);
                                groupDetailDto.setCustomerDetailList(customerDetailDtoList);

                                // TODO: Loan Detail
                                GRTJsonDTO.LoanDetail loanDetailDto = new GRTJsonDTO.LoanDetail();
                                loanDetailDtoList.add(loanDetailDto);
                                customerDetailDto.setLoanDetailList(loanDetailDtoList);

                                RawDataTable applicantRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable personalRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_PERSONAL_DETAIL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable socioRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable bankRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_BANK_DETAILS,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable loanRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());
                                RawDataTable nomineeRawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_NOMINEE_DETAIL,
                                        groupTableMember.getClientId(), groupTableMember.getLoan_type());

                                customerDetailDto.setClientId(groupTableMember.getClientId());
                                customerDetailDto.setCenterId(groupTableMember.getCenterId());
                                customerDetailDto.setGroupId(groupTableMember.getGroupId());
                                customerDetailDto.setClientName(groupTableMember.getClientName());
                                customerDetailDto.setBranchCode(groupTableMember.getBranchId());
                                customerDetailDto.setOperatingRegionCode(groupTableMember.getBranchId());
                                customerDetailDto.setBCBranchCode(groupTableMember.getBranchId());
                                customerDetailDto.setCBcheck("0"); // TODO: Always success
                                customerDetailDto.setCardIssuanceFlag("0");
                                if (logInTable != null && !TextUtils.isEmpty(logInTable.getUsername())) {
                                    customerDetailDto.setCollector(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    customerDetailDto.setApprover(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    customerDetailDto.setBarcodeNo(groupTableMember.getCreatedBy() + logInTable.getUsername());
                                }

                                loanDetailDto.setLoanId(groupTableMember.getClientId());
                                loanDetailDto.setClientId(groupTableMember.getClientId());
                                loanDetailDto.setCenterId(groupTableMember.getCenterId());
                                loanDetailDto.setGroupId(groupTableMember.getGroupId());
                                loanDetailDto.setBCBranchCode(groupTableMember.getBranchId());
                                loanDetailDto.setInsuranceFlag("IF1");
                                loanDetailDto.setLoanCycle("1");
                                loanDetailDto.setMinor("1");
                                if (logInTable != null && !TextUtils.isEmpty(logInTable.getUsername())) {
                                    loanDetailDto.setCollector(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    loanDetailDto.setApprover(groupTableMember.getCreatedBy() + "-" + logInTable.getUsername());
                                    loanDetailDto.setBarcodeNo(groupTableMember.getCreatedBy() + logInTable.getUsername());
                                }

                                String startDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
                                if (!TextUtils.isEmpty(startDate)) {
                                    loanDetailDto.setLoanStartDate(startDate);
                                    loanDetailDto.setRepaymentStartDate(startDate);
                                    loanDetailDto.setExpectedDisbursalDate(startDate);
                                }
                                loanDetailDto.setRepaymentFrequency("monthly");

                                if (applicantRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(applicantRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                            String value = hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setClientName(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                            String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAddressLine1(value);
                                                loanDetailDto.setAddress1(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                            String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAddressLine2(value);
                                                loanDetailDto.setAddress2(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                            String value = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAddressLine3(value);
                                                loanDetailDto.setAddress3(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                            String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setPin(value);
                                                loanDetailDto.setPinCode(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_STATE)) {
                                            String value = hashMap.get(TAG_NAME_STATE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setState(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_CITY)) {
                                            String value = hashMap.get(TAG_NAME_CITY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setCity(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_CONTAINS_DOB)) {
                                            String value = hashMap.get(TAG_NAME_CONTAINS_DOB).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setDateOfBirth(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_GENDER)) {
                                            String value = hashMap.get(TAG_NAME_GENDER).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setGender(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                            String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setAadharNo(value);
                                                customerDetailDto.setVoterId("");
                                            }
                                        }
                                    }
                                }

                                if (personalRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(personalRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                            String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setMobileNo(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_SPOUSE_NAME)) {
                                            String value = hashMap.get(TAG_NAME_SPOUSE_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setSpouseName(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
                                            String value = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setMaritalStatus(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_SPOUSE_DATE_OF_BIRTH)) {
                                            String value = hashMap.get(TAG_NAME_SPOUSE_DATE_OF_BIRTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setSpouseDOB(value);
                                            }
                                        }
                                    }
                                }

                                if (socioRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(socioRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NATIONALITY)) {
                                            String value = hashMap.get(TAG_NAME_NATIONALITY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setNationality(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_RELIGION)) {
                                            String value = hashMap.get(TAG_NAME_RELIGION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setReligion(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_MOTHER_TONGUE)) {
                                            String value = hashMap.get(TAG_NAME_MOTHER_TONGUE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setMotherTongue(value);
                                                customerDetailDto.setLanguage(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LANGUAGE)) {
                                            String value = hashMap.get(TAG_NAME_LANGUAGE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setLanguage(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_HEALTH)) {
                                            String value = hashMap.get(TAG_NAME_HEALTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setHealth(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_EDUCATION)) {
                                            String value = hashMap.get(TAG_NAME_APPLICANT_EDUCATION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setEducationalQualification(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_OCCUPATION)) {
                                            String value = hashMap.get(TAG_NAME_OCCUPATION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setOccupation(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY)) {
                                            String value = hashMap.get(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setCategory(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_SOCIAL_STATUS)) {
                                            String value = hashMap.get(TAG_NAME_SOCIAL_STATUS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setCaste(value);
                                            }
                                        }
                                    }
                                }

                                if (bankRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(bankRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
                                            String value = hashMap.get(TAG_NAME_BANK_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setBANKNAME(value);
                                                loanDetailDto.setBankName(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
                                            String value = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setBANK_AC_NO(value);
                                                loanDetailDto.setBankAccountNo(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_BRANCH_NAME)) {
                                            String value = hashMap.get(TAG_NAME_BRANCH_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setBANK_BRANCH_NAME(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_IFSC_CODE)) {
                                            String value = hashMap.get(TAG_NAME_IFSC_CODE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setIFSCCode(value);
                                            }
                                        }
                                    }
                                }

                                if (nomineeRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(nomineeRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_FULL_NAME)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_FULL_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setNomineeName(value);
                                                loanDetailDto.setNomineeName(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_DATE_OF_BIRTH)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_DATE_OF_BIRTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setDOB(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_AGE)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_AGE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setNomineeAge(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_GENDER)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_GENDER).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setGender(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_STATE)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_STATE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setState(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_CITY)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_CITY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setCity(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_PINCODE)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_PINCODE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setPinCode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                            String value = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                customerDetailDto.setNomineeRelationship(value);
                                                loanDetailDto.setRelation(value);
                                            }
                                        }
                                    }
                                }

                                if (loanRawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(loanRawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LOAN_PRODUCT)) {
                                            String value = hashMap.get(TAG_NAME_LOAN_PRODUCT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanProductCode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_PURPOSE)) {
                                            String value = hashMap.get(TAG_NAME_PURPOSE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanPurpose(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                            String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setLoanAmount(Integer.parseInt(value));
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_LOAN_TENURE_IN_MONTHS)) {
                                            String value = hashMap.get(TAG_NAME_LOAN_TENURE_IN_MONTHS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setNoOfInstallments(Integer.parseInt(value));
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_MODE_OF_DISBURSEMENT)) {
                                            String value = hashMap.get(TAG_NAME_MODE_OF_DISBURSEMENT).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setDisbursementMode(value);
                                            }
                                        }
                                    }
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_REPAYMENT_FREQUENCY)) {
                                            String value = hashMap.get(TAG_NAME_REPAYMENT_FREQUENCY).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                loanDetailDto.setRepaymentFrequency(value);
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }

                Type type = new TypeToken<List<GRTJsonDTO>>() {
                }.getType();
                String grtJsonArray = new Gson().toJson(grtJsonDTOList, type);
                if (loanTable != null && !TextUtils.isEmpty(grtJsonArray.toString())) {

                    final SubmitDataTable submitDataDTO = new SubmitDataTable();
                    submitDataDTO.setScreenId(SCREEN_NO_GRT_JLG); // TODO: GRT - Dummy screen id -249
                    submitDataDTO.setUniqueID(loanTable.getCenterId());
                    submitDataDTO.setApplicationId(loanTable.getCenterId());
                    submitDataDTO.setIMEINumber(appHelper.getIMEI());
                    submitDataDTO.setBCBRID(loanTable.getBranchGSTcode());
                    submitDataDTO.setBCID(loanTable.getBranchId());
                    submitDataDTO.setCreatedBy(loanTable.getCreatedBy());
                    submitDataDTO.setStageId(STAGE_ID_ZERO); // TODO: STAGE ID ZERO

                    submitDataDTO.setRawData(grtJsonArray.toString());
                    submitDataDTO.setProductId(PRODUCT_ID_JLG); // TODO: PRODUCT ID

                    String request = new Gson().toJson(submitDataDTO, SubmitDataTable.class);
                    submitDataDTO.setRequest(request);
                    String baseString = new Gson().toJson(submitDataDTO, SubmitDataTable.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).postSingleDataToServerJLG(submitDataDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1)
                            .enqueue(new Callback<String>() {
                                @Override
                                public void onResponse(Call<String> call, Response<String> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            String serverResponse = response.body();
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataDTO);

                                            if (!TextUtils.isEmpty(serverResponse) && serverResponse.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {

                                                // TODO: Update Loan table status [ SUCCESS ]
                                                dynamicUIDao.updateMemberLoanDetailTableSync(true,
                                                        loanTable.getId());

                                            } else {
                                                // TODO: Update Loan table status [ FAILED ]
                                                dynamicUIDao.updateMemberLoanDetailTableSync(false,
                                                        loanTable.getId());
                                            }

                                        } else {
                                            // TODO: show something went wrong
                                            String serverResponse = response.body();
                                            submitDataDTO.setResponse(serverResponse);
                                            dynamicUIDao.saveResponseData(submitDataDTO);

                                            insertLog("syncLoanDetailsToBCM", serverResponse, "", "", TAG, "", "", "");
                                        }

                                        ((MutableLiveData<SubmitDataTable>) data).postValue(dynamicUIDao.loadSubmitDataTable(
                                                SCREEN_NO_GRT_JLG,
                                                loanTable.getCreatedBy(), loanTable.getClientId()));
                                    });
                                }

                                @Override
                                public void onFailure(Call<String> call, Throwable t) {
                                    // TODO: Raw data null
                                    ((MutableLiveData<SubmitDataTable>) data).postValue(new SubmitDataTable());

                                    insertLog("syncLoanDetailsToBCM", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });
                } else {
                    // TODO: Raw data null
                    ((MutableLiveData<SubmitDataTable>) data).postValue(new SubmitDataTable());
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncLoanDetailsToBCM", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }

    public LiveData<String> syncCGTData(List<CGTTable> cgtTwoCompletedList) {

        final LiveData<String> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            executor.execute(() -> {

                List<CGTRequestDTO> cgtRequestDTOList = new ArrayList<>();
                List<LoanTable> loanTableList = new ArrayList<>();
                List<HouseVerificationTable> houseVerificationTableList = new ArrayList<>();
                List<GroupTable> groupTableList = new ArrayList<>();

                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterId(cgtTwoCompletedList.get(0).getCenterId(),
                        cgtTwoCompletedList.get(0).getCreatedBy(), cgtTwoCompletedList.get(0).getLoan_type());

                if (centerCreationTable != null) {
                    // TODO: Creating CGT Request DTO
                    CGTRequestDTO cgtRequestDTO = new CGTRequestDTO();
                    cgtRequestDTO.setCenterId(centerCreationTable.getCenterId());
                    cgtRequestDTO.setCenterName(centerCreationTable.getCenterName());
                    cgtRequestDTO.setVillageName(centerCreationTable.getVillageName());
                    cgtRequestDTO.setVillageId(centerCreationTable.getVillageId());
                    cgtRequestDTO.setZoneName(centerCreationTable.getZoneName());
                    cgtRequestDTO.setAreaName(centerCreationTable.getAreaName());
                    cgtRequestDTO.setCreatedBy(centerCreationTable.getCreated_date());
                    cgtRequestDTO.setCreated_date(centerCreationTable.getCreated_date());
                    cgtRequestDTO.setBranchId(centerCreationTable.getBranchId());
                    cgtRequestDTO.setBranchGSTcode(centerCreationTable.getBranchGSTcode());
                    cgtRequestDTO.setNoOfMembers(centerCreationTable.getNoOfMembers());

                    cgtRequestDTOList.add(cgtRequestDTO);
                    if (cgtTwoCompletedList != null && cgtTwoCompletedList.size() > 0) {

                        // TODO: Removing absent users
                        cgtTwoCompletedList.clear();
                        // TODO: All member list based on cycle 2 attendance
//                        List<HouseVerificationTable> houseVerificationTableList=new ArrayList<>();
                        List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT2_OnlyPresent(centerCreationTable.getCenterId());
                        if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                            for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                                CGTTable cgtTableByClientId = dynamicUIDao.getCGTTableByClientId(cgtAttendanceTable.getClientId());
                                if (cgtTableByClientId != null) {
                                    cgtTwoCompletedList.add(cgtTableByClientId);
                                }
                            }
                        }

                        cgtRequestDTO.setCgtTableList(cgtTwoCompletedList);
                        cgtRequestDTO.setLoanTableList(loanTableList);
                        cgtRequestDTO.setHouseVerificationTableList(houseVerificationTableList);
                        cgtRequestDTO.setGroupTableList(groupTableList);

                        for (CGTTable cgtTable : cgtTwoCompletedList) {
                            HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByLoanId(cgtTable.getClientId(),
                                    cgtTable.getLoanId());
                            if (houseVerificationTable != null) {
                                houseVerificationTableList.add(houseVerificationTable);
                            }
                            LoanTable loanTable = dynamicUIDao.getLoanTableByLoanId(cgtTable.getClientId(), cgtTable.getLoanId());
                            if (loanTable != null) {
                                loanTableList.add(loanTable);
                            }
                            GroupTable groupTable = dynamicUIDao.getGroupTableByClientId(cgtTable.getClientId());
                            if (groupTable != null) {
                                groupTableList.add(groupTable);
                            }

                        }

                        List<CGTAttendanceTable> cgtAttendanceTableListByCenter = dynamicUIDao.getCGTAttendanceByCenterName(centerCreationTable.getCenterName());
                        if (cgtAttendanceTableListByCenter != null && cgtAttendanceTableListByCenter.size() > 0) {
                            cgtRequestDTO.setCgtAttendanceTableList(cgtAttendanceTableListByCenter);
                        }
                    }


                    Type type = new TypeToken<List<CenterCreationTable>>() {
                    }.getType();
                    GsonBuilder builder = new GsonBuilder();
                    builder.excludeFieldsWithoutExposeAnnotation();
                    Gson gson = builder.create();
                    String cgtJsonArray = gson.toJson(cgtRequestDTOList, type);

                    if (!TextUtils.isEmpty(cgtJsonArray)) {

                        final CGTServiceRequestDTO rawDataRequestDTO = new CGTServiceRequestDTO();
                        rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                        CGTServiceRequestDTO.SpNameWithParameterClass spNameWithParameter = new CGTServiceRequestDTO.SpNameWithParameterClass();
                        spNameWithParameter.setSpName(SP_NAME_TO_CGT_BULK_INSERT);
                        CGTServiceRequestDTO.SpParametersClass spParametersClass = new CGTServiceRequestDTO.SpParametersClass();
                        spParametersClass.setRawCGT(cgtJsonArray); // TODO: CGT Raw Data
                        spParametersClass.setUserId(centerCreationTable.getCreatedBy()); // TODO: User id
                        spNameWithParameter.setSpParameters(spParametersClass);
                        ArrayList<CGTServiceRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CGTServiceRequestDTO.SpNameWithParameterClass>();
                        SpNameWithParameterList.add(spNameWithParameter);
                        rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                        String baseString = new Gson().toJson(rawDataRequestDTO, CGTServiceRequestDTO.class).replace("\\u003d", "=");
                        String k1 = SHA256Encrypt.sha256(baseString);
                        DynamicUIWebService.createService(DynamicUIWebservice.class).syncCGTDataToServer(rawDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                                enqueue(new Callback<ResponseBody>() {
                                    @Override
                                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                        executor.execute(() -> {

                                            if (response.isSuccessful()) {
                                                try {
                                                    String strResponse = response.body().string();
                                                    JSONObject json = new JSONObject(strResponse);
                                                    String key = json.keys().next();

                                                    String tableJson = json.get(key).toString();
                                                    CGTServiceResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, CGTServiceResponseDTO.class);
                                                    if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                        Log.d(TAG, "raw data tvName server =======> " + new Gson().toJson(rawDataResponseDTO));
                                                        String responseMessage = rawDataResponseDTO.getTable().get(0).getResponseMessage();
                                                        Log.d(TAG, "responseMessage =======> " + responseMessage);

                                                        if (!TextUtils.isEmpty(responseMessage) && responseMessage.equalsIgnoreCase("Success")) {
                                                            // TODO: Update cgt table status
                                                            for (CGTTable cgtTable : cgtTwoCompletedList) {
                                                                dynamicUIDao.updateCGTTableSyncAndStatus(true, FINAL_STATUS_SUBMITTED,
                                                                        cgtTable.getId());
                                                            }

                                                            // TODO: Final result : Success
                                                            ((MutableLiveData<String>) data).postValue(SUCCESS_RESPONSE_MESSAGE);
                                                        } else {
                                                            // TODO: Final result : Failure
                                                            ((MutableLiveData<String>) data).postValue(responseMessage);
                                                        }

                                                    }
                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                    // TODO: Final result : Failure
                                                    ((MutableLiveData<String>) data).postValue("");
                                                    insertLog("syncCGTData", ex.getMessage(), "", "", TAG, "", "", "");
                                                }
                                            } else {
                                                // TODO: Final result : Failure
                                                ((MutableLiveData<String>) data).postValue("");
                                                insertLog("syncCGTData", response.message(), "", "", TAG, "", "", "");
                                            }

                                        });
                                    }

                                    @Override
                                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                                        // TODO: Final result : Failure
                                        ((MutableLiveData<String>) data).postValue(t.getLocalizedMessage());

                                        insertLog("syncCGTData", t.getMessage(), "", "", TAG, "", "", "");
                                    }
                                });
                    } else {
                        // TODO: Final result : Failure
                        ((MutableLiveData<String>) data).postValue("");
                    }
                } else {
                    // TODO: Final result : Failure
                    ((MutableLiveData<String>) data).postValue("");
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("syncCGTData", ex.getMessage(), "", "", TAG, "", "", "");
            // TODO: Final result : Failure
            ((MutableLiveData<String>) data).postValue("");
        }

        return data;
    }

    public LiveData<MasterTable> syncAllScreenByClient(MasterTable masterTable) {

        final LiveData<MasterTable> data = new MutableLiveData<>();

        try {

            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL);

            executor.execute(() -> {

                // TODO: SET ERROR MESSAGE AS SYNC FAILED
                dynamicUIDao.updateMasterTableResponse(ERROR_MESSAGE_SYNC_FAILED,
                        masterTable.getClientId(), masterTable.getLoan_type());

                List<SubmitDataTable> submitDataTableList = new ArrayList<>();
                List<SubmitDataDTO> submitDataDTOList = new ArrayList<>();

                List<String> moduleTypeList = dynamicUIDao.getDistinctModuleType(masterTable.getClientId());

                if (moduleTypeList != null && moduleTypeList.size() > 0) {
                    for (String moduleType : moduleTypeList) {
                        List<String> screenNoList = dynamicUIDao.getDistinctScreenNumbers(masterTable.getClientId(),
                                moduleType);
                        if (screenNoList != null && screenNoList.size() > 0) {
                            for (String screenNo : screenNoList) {
                                if(screenNo.equalsIgnoreCase(SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL)) {
                                    List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByScreenNoAndClientId(screenNo, masterTable.getClientId());
                                    if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                        List<String> stringList = new ArrayList<>();
                                        final SubmitDataTable submitDataTable = new SubmitDataTable();
                                        final SubmitDataDTO submitDataDTO = new SubmitDataDTO();
                                        for (int i = 0; i < rawDataTableList.size(); i++) {
                                            RawDataTable rawDataTable = rawDataTableList.get(i);
                                            if (!rawDataTable.isSync()) {

                                                if (i == 0) {
                                                    submitDataTable.setScreenId(rawDataTable.getScreen_no());
                                                    submitDataTable.setScreenName(rawDataTable.getScreen_name());
                                                    submitDataTable.setUniqueID(rawDataTable.getClient_id());
                                                    submitDataTable.setApplicationId(rawDataTable.getClient_id());
                                                    submitDataTable.setIMEINumber(appHelper.getIMEI());
                                                    submitDataTable.setBCBRID(masterTable.getBranchGSTcode());
                                                    submitDataTable.setBCID(masterTable.getBranchId());
                                                    // TODO: 22-12-2020 submitDTO
                                                    submitDataDTO.setScreenId(rawDataTable.getScreen_no());
                                                    submitDataDTO.setScreenName(rawDataTable.getScreen_name());
                                                    submitDataDTO.setUniqueID(rawDataTable.getClient_id());
                                                    submitDataDTO.setApplicationId(rawDataTable.getClient_id());
                                                    submitDataDTO.setIMEINumber(appHelper.getIMEI());
                                                    submitDataDTO.setBCBRID(masterTable.getBranchGSTcode());
                                                    submitDataDTO.setBCID(masterTable.getBranchId());
                                                    LogInTable logInTable = dynamicUIDao.getLoginTable(rawDataTable.getUser_id());
                                                    if (logInTable != null) {
                                                        submitDataTable.setBCBRID(logInTable.getBranchGSTCode());
                                                        submitDataTable.setBCID(String.valueOf(logInTable.getBCID()));
                                                        submitDataTable.setRoleId(String.valueOf(logInTable.getRoleId()));
                                                        // TODO: 22-12-2020 submit DTO
                                                        submitDataDTO.setBCBRID(logInTable.getBranchGSTCode());
                                                        submitDataDTO.setBCID(String.valueOf(logInTable.getBCID()));
                                                        submitDataDTO.setRoleId(String.valueOf(logInTable.getRoleId()));
                                                    }
                                                    submitDataTable.setCreatedBy(masterTable.getReviewBy()); // TODO: STAFF ID
                                                    submitDataTable.setModuleType(rawDataTable.getModuleType());
                                                    //submitDataTable.setStageId(String.valueOf(masterTable.getCurrentStageId())); // TODO: STAGE ID
                                                    //submitDataTable.setCurrentStageId(masterTable.getCurrentStageId()); // TODO: STAGE ID
                                                    submitDataTable.setActionName(String.valueOf(masterTable.getActionId())); // TODO: ACTION ID
                                                    // submitDataTable.setRemarks(masterTable.getRemarks()); // TODO: REMARKS

                                                    submitDataDTO.setCreatedBy(masterTable.getReviewBy()); // TODO: STAFF ID
                                                    submitDataDTO.setModuleType(rawDataTable.getModuleType());
                                                    //submitDataDTO.setStageId(String.valueOf(masterTable.getCurrentStageId())); // TODO: STAGE ID
                                                    //submitDataDTO.setCurrentStageId(masterTable.getCurrentStageId()); // TODO: STAGE ID

                                                    if (loanType.equalsIgnoreCase(LOAN_NAME_EL)) {
                                                        if (currentStage != null && currentStage.equalsIgnoreCase("Document Execution")) {
                                                            // TODO: STAGE ID 148 MEANS RBL OPS OR DiSBUSMENT
                                                            submitDataDTO.setStageId("148"); // TODO: STAGE ID
                                                            submitDataDTO.setCurrentStageId(148); // TODO: STAGE ID
                                                            submitDataTable.setStageId("148"); // TODO: STAGE ID
                                                            submitDataTable.setCurrentStageId(148); // TODO: STAGE ID
                                                        } else {
                                                            // TODO: STAGE ID 0 MEANS  PD STAGE
                                                            submitDataDTO.setStageId("0"); // TODO: STAGE ID
                                                            submitDataDTO.setCurrentStageId(0); // TODO: STAGE ID
                                                            submitDataTable.setStageId("0"); // TODO: STAGE ID
                                                            submitDataTable.setCurrentStageId(0); // TODO: STAGE ID
                                                        }
                                                    } else {
                                                        List<RawDataTable> cibilStatusrawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(SCREEN_NAME_CIBIL_STATUS, rawDataTable.getClient_id(), MODULE_TYPE_GENERATE_CIBIL);

                                                        CibilResponseModel cibilResponseModel = null;
                                                        if (cibilStatusrawDataTableList != null && cibilStatusrawDataTableList.size() > 0) {
                                                            for (RawDataTable datalist : cibilStatusrawDataTableList) {
                                                                String rawData = datalist.getRawdata();
                                                                cibilResponseModel = new Gson().fromJson(rawData, CibilResponseModel.class);
                                                            }
                                                            if (currentStage != null && currentStage.equalsIgnoreCase("Document Execution")) {
                                                                // TODO: STAGE ID 172 MEANS  OPS STAGE
                                                                submitDataDTO.setStageId("172"); // TODO: STAGE ID
                                                                submitDataDTO.setCurrentStageId(172); // TODO: STAGE ID
                                                                submitDataTable.setStageId("172"); // TODO: STAGE ID
                                                                submitDataTable.setCurrentStageId(172); // TODO: STAGE ID
                                                            } else {
                                                                if (cibilResponseModel != null && cibilResponseModel.getIsAccepctOrDecline().equalsIgnoreCase("0")) {
                                                                    // TODO: STAGE ID 0 MEANS  PD STAGE
                                                                    submitDataDTO.setStageId("0"); // TODO: STAGE ID
                                                                    submitDataDTO.setCurrentStageId(0); // TODO: STAGE ID
                                                                    submitDataTable.setStageId("0"); // TODO: STAGE ID
                                                                    submitDataTable.setCurrentStageId(0); // TODO: STAGE ID
                                                                } else {
                                                                    if (cibilResponseModel != null && cibilResponseModel.getFlag().equalsIgnoreCase("P")) {
                                                                        // TODO: STAGE ID 170 MEANS  RBL SCANCTION
                                                                        submitDataDTO.setStageId("0"); // TODO: STAGE ID
                                                                        submitDataDTO.setCurrentStageId(0); // TODO: STAGE ID
                                                                        submitDataTable.setStageId("0"); // TODO: STAGE ID
                                                                        submitDataTable.setCurrentStageId(0); // TODO: STAGE ID
                                                                    } else {
                                                                        submitDataDTO.setStageId("0"); // TODO: STAGE ID
                                                                        submitDataDTO.setCurrentStageId(0); // TODO: STAGE ID
                                                                        submitDataTable.setStageId("0"); // TODO: STAGE ID
                                                                        submitDataTable.setCurrentStageId(0); // TODO: STAGE ID
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }


                                                    submitDataDTO.setActionName(String.valueOf(masterTable.getActionId())); // TODO: ACTION ID
                                                    //submitDataDTO.setRemarks(masterTable.getRemarks()); // TODO: REMARKS

                                                    if (!TextUtils.isEmpty(masterTable.getLoan_type()) && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_IL); // TODO: WORKFLOW ID IL
                                                        submitDataTable.setProductId(PRODUCT_ID_IL); // TODO: PRODUCT ID IL
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_IL); // TODO: WORKFLOW ID IL
                                                        submitDataDTO.setProductId(PRODUCT_ID_IL); // TODO: PRODUCT ID IL
                                                    } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                            && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_MSME); // TODO: WORKFLOW ID MSME
                                                        submitDataTable.setProductId(PRODUCT_ID_MSME); // TODO: PRODUCT ID MSME
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_MSME); // TODO: WORKFLOW ID MSME
                                                        submitDataDTO.setProductId(PRODUCT_ID_MSME); // TODO: PRODUCT ID MSME
                                                    } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                            && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_JLG); // TODO: WORKFLOW ID JLG
                                                        submitDataTable.setProductId(PRODUCT_ID_JLG); // TODO: PRODUCT ID JLG
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_JLG); // TODO: WORKFLOW ID JLG
                                                        submitDataDTO.setProductId(PRODUCT_ID_JLG); // TODO: PRODUCT ID JLG
                                                    } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                            && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_PHL); // TODO: WORKFLOW ID PHL
                                                        submitDataTable.setProductId(PRODUCT_ID_PHL); // TODO: PRODUCT ID PHL
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_PHL); // TODO: WORKFLOW ID PHL
                                                        submitDataDTO.setProductId(PRODUCT_ID_PHL); // TODO: PRODUCT ID PHL
                                                    } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                            && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_TWL); // TODO: WORKFLOW ID TWL
                                                        submitDataTable.setProductId(PRODUCT_ID_TWL); // TODO: PRODUCT ID TWL
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_TWL); // TODO: WORKFLOW ID TWL
                                                        submitDataDTO.setProductId(PRODUCT_ID_TWL); // TODO: PRODUCT ID TWL
                                                    } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                            && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_EL); // TODO: WORKFLOW ID PHL
                                                        submitDataTable.setProductId(PRODUCT_ID_EL); // TODO: PRODUCT ID PHL
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_EL); // TODO: WORKFLOW ID PHL
                                                        submitDataDTO.setProductId(PRODUCT_ID_EL); // TODO: PRODUCT ID PHL
                                                    } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                            && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {

                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_AHL); // TODO: WORKFLOW ID AHL
                                                        submitDataTable.setProductId(PRODUCT_ID_AHL); // TODO: PRODUCT ID AHL
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_AHL); // TODO: WORKFLOW ID AHL
                                                        submitDataDTO.setProductId(PRODUCT_ID_AHL); // TODO: PRODUCT ID AHL
                                                    } else {
                                                        submitDataTable.setWorkflowId(WORKFLOW_ID_TWL); // TODO: WORKFLOW ID PHL
                                                        submitDataTable.setProductId(PRODUCT_ID_TWL); // TODO: PRODUCT ID PHL
                                                        submitDataDTO.setWorkflowId(WORKFLOW_ID_TWL); // TODO: WORKFLOW ID PHL
                                                        submitDataDTO.setProductId(PRODUCT_ID_TWL); // TODO: PRODUCT ID PHL
                                                    }
                                                }
                                                JsonParser jsonParser = new JsonParser();
                                                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_DOCUMENT_UPLOAD)) {
                                                    submitDataTable.setRawData(rawDataTable.getRawdata());
//                                                JsonObject jsonObject = (JsonObject)jsonParser.parse(rawDataTable.getRawdata());
//                                                JsonArray jsonArrayRawData=new JsonArray();
//                                                jsonArrayRawData.add(jsonObject);
                                                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(rawDataTable.getRawdata());
                                                    submitDataDTO.setRawData(jsonArrayStringList);
                                                } else {
                                                    stringList.add(rawDataTable.getRawdata());
                                                    submitDataTable.setRawData(stringList.toString());
                                                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                                    submitDataDTO.setRawData(jsonArrayStringList);
                                                }
                                            }
                                        }

                                        if (submitDataTableList.size() > 0) {
                                            boolean alreadyExist = false;
                                            for (SubmitDataTable dataTable : submitDataTableList) {
                                                if (dataTable.getScreenId().equalsIgnoreCase(submitDataTable.getScreenId())) {
                                                    alreadyExist = true;
                                                    break;
                                                }
                                            }
                                            if (!alreadyExist) {
                                                submitDataTableList.add(submitDataTable);
                                                submitDataDTOList.add(submitDataDTO);
                                            }
                                        } else {
                                            submitDataTableList.add(submitDataTable);
                                            submitDataDTOList.add(submitDataDTO);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (submitDataTableList.size() > 0) {
                    // TODO: Setting request xml value
                    for (SubmitDataTable submitDataTable : submitDataTableList) {
                        String request = new Gson().toJson(submitDataTable, SubmitDataTable.class);
                        submitDataTable.setRequest(request);
                    }

                    dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, masterTable.getClientId());

                    // TODO: Setting request xml value as empty
                    for (SubmitDataTable submitDataTable : submitDataTableList) {
                        submitDataTable.setRequest("");
                    }

                    try {
                        DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                        List<Observable<String>> requests = new ArrayList<>();


                        // Make a collection of all requests you need to call at once, there can be any number of requests, not only 3. You can have 2 or 5, or 100.
                        for (SubmitDataDTO submitDataDTO : submitDataDTOList) {
                            String baseString = new Gson().toJson(submitDataDTO, SubmitDataDTO.class).replace("\\u003d", "=");
                            String k1 = SHA256Encrypt.sha256(baseString);
                            requests.add(service.postDataToServerRXJAVA(submitDataDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                        }
                        // Zip all requests with the Function, which will receive the results.
                        Disposable disposable = Observable.zip(requests,
                                new Function<Object[], List<SubmitDataTable>>() {
                                    @Override
                                    public List<SubmitDataTable> apply(Object[] objects) throws Exception {
                                        try {
                                            if (objects != null && objects.length > 0) {
                                                if (submitDataTableList.size() == objects.length) {
                                                    for (int i = 0; i < submitDataTableList.size(); i++) {
                                                        SubmitDataTable submitDataTable = submitDataTableList.get(i);
                                                        submitDataTable.setResponse(objects[i].toString());
                                                        SubmitDataDTO submitDataDTO = submitDataDTOList.get(i);
                                                        submitDataDTO.setResponse(objects[i].toString());
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("syncAllScreenByClient", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                        return submitDataTableList;
                                    }
                                }).subscribe(new Consumer<List<SubmitDataTable>>() {
                                                 @Override
                                                 public void accept(List<SubmitDataTable> submitDataTableList) throws Exception {
                                                     if (submitDataTableList != null && submitDataTableList.size() > 0) {

                                                         dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, masterTable.getClientId());

                                                         boolean allGotSuccess = false;

                                                         for (SubmitDataTable submitDataTable : submitDataTableList) {
                                                             if (!TextUtils.isEmpty(submitDataTable.getResponse()) &&
                                                                     submitDataTable.getResponse().equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                                 allGotSuccess = true;
                                                             } else {
                                                                 allGotSuccess = false;
                                                                 // TODO: SET ERROR MESSAGE AS WHATEVER GETTING FROM SERVER
                                                                 dynamicUIDao.updateMasterTableResponse(submitDataTable.getResponse(),
                                                                         masterTable.getClientId(), masterTable.getLoan_type());

                                                                 insertLog("syncAllScreenByClient", submitDataTable.getResponse(), "", "", TAG, "", "", "");

                                                                 break;
                                                             }
                                                         }

                                                         if (allGotSuccess) {
                                                             dynamicUIDao.updateMasterTableSync(true, masterTable.getId());
                                                             // TODO: SET MESSAGE AS SYNC SUCCESS
                                                             dynamicUIDao.updateMasterTableResponse(ERROR_MESSAGE_SYNC_SUCCESS,
                                                                     masterTable.getClientId(), masterTable.getLoan_type());

                                                             // TODO: CLEAR DOCUMENT TABLE AGAINST CLINT ID
//                                                             dynamicUIDao.deleteDocumentFromTableByClientId(masterTable.getClientId());
////
////                                                             // TODO: DELETE DOCUMENT FOLDER FROM LOCAL STORAGE
//                                                             String clientFolderName=Environment.getExternalStorageDirectory()
//                                                                     .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/" + DB_SUB_FOLDER + "/" + masterTable.getClientId() + "/";
//                                                             File clientFolder=new File(clientFolderName);
//                                                             if(clientFolder.exists()){
//                                                                 clientFolder.delete();
//                                                             }
                                                         } else {
                                                             dynamicUIDao.updateMasterTableSync(false, masterTable.getId());
                                                             // TODO: SET ERROR MESSAGE AS SYNC FAILED
                                                             MasterTable masterTableFromDB = dynamicUIDao.getMasterTableByClientId(masterTable.getClientId());
                                                             if (masterTableFromDB != null) {
                                                                 if (TextUtils.isEmpty(masterTable.getResponse()) ||
                                                                         masterTableFromDB.getResponse().equalsIgnoreCase(ERROR_MESSAGE_CAPTURE_ALL_DETAILS)) {
                                                                     // TODO: Hardcoded Response tvMobNo
                                                                     dynamicUIDao.updateMasterTableResponse(ERROR_MESSAGE_SYNC_FAILED,
                                                                             masterTable.getClientId(), masterTable.getLoan_type());
                                                                 }
                                                             }
                                                         }
                                                     } else {
                                                         dynamicUIDao.updateMasterTableSync(false, masterTable.getId());
                                                     }

                                                     MasterTable masterTableResult = dynamicUIDao.getMasterTableDetailById(masterTable.getId());
                                                     ((MutableLiveData<MasterTable>) data).postValue(masterTableResult);
                                                 }
                                             },
                                // Will be triggered if any error during requests will happen
                                new Consumer<Throwable>() {
                                    @Override
                                    public void accept(Throwable e) throws Exception {
                                        //Do something on error completion of requests
                                        Log.d(TAG, "Consumer Exception ==> " + e.toString());

                                        // TODO: SET ERROR MESSAGE AS WHATEVER GETTING FROM SERVER
                                        dynamicUIDao.updateMasterTableResponse(e.getMessage(),
                                                masterTable.getClientId(), masterTable.getLoan_type());

                                        dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, masterTable.getClientId());

                                        dynamicUIDao.updateMasterTableSync(false, masterTable.getId());

                                        ((MutableLiveData<MasterTable>) data).postValue(dynamicUIDao.getMasterTableDetailById(masterTable.getId()));

                                        insertLog("syncAllScreenByClient", e.getMessage(), "", "", TAG, "", "", "");
                                    }
                                }
                        );

                    } catch (Exception ex) {
                        ex.printStackTrace();

                        insertLog("syncAllScreenByClient", ex.getMessage(), "", "", TAG, "", "", "");
                    }
                } else {
                    Log.d(TAG, "Empty list");
                    ((MutableLiveData<MasterTable>) data).postValue(dynamicUIDao.getMasterTableDetailById(masterTable.getId()));

                }

            });

        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncAllScreenByClient", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }

    public LiveData<MultipleSyncResponseDTO> syncAllScreenDataForMultipleClient(List<CGTTable> cgtTwoCompletedList) {

        final LiveData<MultipleSyncResponseDTO> data = new MutableLiveData<>();
        try {

//            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL);
            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_JLG);

            executor.execute(() -> {

                if (cgtTwoCompletedList != null && cgtTwoCompletedList.size() > 0) {

                    List<SubmitDataTable> submitDataTableList = new ArrayList<>();

                    for (CGTTable cgtTable : cgtTwoCompletedList) {

                        MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(cgtTable.getClientId());

                        // TODO: Setting submit table list
                        setSubmitDataList(masterTable, submitDataTableList);
                    }

                    if (submitDataTableList.size() > 0) {
                        // TODO: Setting request xml value
                        for (SubmitDataTable submitDataTable : submitDataTableList) {
                            // TODO: Delete And Insert Submit Data Table
                            dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, submitDataTable.getApplicationId());
                        }

                        try {
                            DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                            List<Observable<String>> requests = new ArrayList<>();

                            // Make a collection of all requests you need to call at once, there can be any number of requests, not only 3. You can have 2 or 5, or 100.
                            for (SubmitDataTable submitDataTable : submitDataTableList) {
                                String baseString = new Gson().toJson(submitDataTable, SubmitDataTable.class).replace("\\u003d", "=");
                                String k1 = SHA256Encrypt.sha256(baseString);
                                requests.add(service.postDataToServerJLG(submitDataTable, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                            }
                            // Zip all requests with the Function, which will receive the results.
                            Disposable disposable = Observable.zip(requests, new Function<Object[], List<SubmitDataTable>>() {
                                        @Override
                                        public List<SubmitDataTable> apply(Object[] objects) throws Exception {
                                            try {
                                                if (objects != null && objects.length > 0) {
                                                    if (submitDataTableList.size() == objects.length) {
                                                        for (int i = 0; i < submitDataTableList.size(); i++) {
                                                            SubmitDataTable submitDataTable = submitDataTableList.get(i);
                                                            submitDataTable.setResponse(objects[i].toString());
                                                        }
                                                    }
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();

                                                insertLog("syncAllScreenDataForMultipleClient", ex.getMessage(), "", "", TAG, "", "", "");
                                            }
                                            return submitDataTableList;
                                        }
                                    }).subscribe(new Consumer<List<SubmitDataTable>>() {
                                                     @Override
                                                     public void accept(List<SubmitDataTable> submitDataTableList) throws Exception {
                                                         if (submitDataTableList != null && submitDataTableList.size() > 0) {

                                                             for (SubmitDataTable submitDataTable : submitDataTableList) {

                                                                 MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(submitDataTable.getApplicationId());
                                                                 if (masterTable != null) {
                                                                     // TODO: Delete And Insert Submit Data Table
                                                                     dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, masterTable.getClientId());

                                                                     if (!TextUtils.isEmpty(submitDataTable.getResponse()) &&
                                                                             submitDataTable.getResponse().equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {

                                                                         // TODO: SET MESSAGE AS SYNC SUCCESS
                                                                         dynamicUIDao.updateMasterTableResponseAndSync(submitDataTable.getResponse(),
                                                                                 masterTable.getClientId(), masterTable.getLoan_type(), true);

                                                                     } else {
                                                                         // TODO: SET ERROR MESSAGE AS WHATEVER GETTING FROM SERVER
                                                                         dynamicUIDao.updateMasterTableResponseAndSync(submitDataTable.getResponse(),
                                                                                 masterTable.getClientId(), masterTable.getLoan_type(), false);

                                                                         insertLog("syncAllScreenDataForMultipleClient", submitDataTable.getResponse(), "", "", TAG, "", "", "");

                                                                         // TODO: Sending Final Result
                                                                         MultipleSyncResponseDTO multipleSyncResponseDTO = new MultipleSyncResponseDTO();
                                                                         multipleSyncResponseDTO.setValid(false);
                                                                         String message = "Data Sync Failed For " + masterTable.getClientId() + "  \n" +
                                                                                 submitDataTable.getResponse();
                                                                         multipleSyncResponseDTO.setResponseMsg(message);
                                                                         ((MutableLiveData<MultipleSyncResponseDTO>) data).postValue(multipleSyncResponseDTO);
                                                                         return;
                                                                     }
                                                                 } else {
                                                                     // TODO: Sending Final Result
                                                                     MultipleSyncResponseDTO multipleSyncResponseDTO = new MultipleSyncResponseDTO();
                                                                     multipleSyncResponseDTO.setValid(false);
                                                                     String message = "Data Sync Failed For " + submitDataTable.getApplicationId() + "  \n" +
                                                                             submitDataTable.getResponse();
                                                                     multipleSyncResponseDTO.setResponseMsg(message);
                                                                     ((MutableLiveData<MultipleSyncResponseDTO>) data).postValue(multipleSyncResponseDTO);
                                                                     return;
                                                                 }
                                                             }

                                                         }

                                                         // TODO: Sending Final Result [ Success ]
                                                         MultipleSyncResponseDTO multipleSyncResponseDTO = new MultipleSyncResponseDTO();
                                                         multipleSyncResponseDTO.setValid(true);
                                                         multipleSyncResponseDTO.setResponseMsg(SUCCESS_RESPONSE_MESSAGE);
                                                         ((MutableLiveData<MultipleSyncResponseDTO>) data).postValue(multipleSyncResponseDTO);
                                                         return;
                                                     }
                                                 },
                                    // Will be triggered if any error during requests will happen
                                    new Consumer<Throwable>() {
                                        @Override
                                        public void accept(Throwable e) throws Exception {
                                            //Do something on error completion of requests
                                            Log.d(TAG, "Consumer Exception ==> " + e.toString());

                                            insertLog("syncAllScreenDataForMultipleClient", e.getMessage(), "", "", TAG, "", "", "");

                                            // TODO: Need to check this condition [ if we add this it will update for all client ]
//                                            for (SubmitDataTable submitDataTable : submitDataTableList) {
//
//                                                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(submitDataTable.getApplicationId());
//                                                if (masterTable != null) {
//                                                    // TODO: SET ERROR MESSAGE AS WHATEVER GETTING FROM SERVER
//                                                    dynamicUIDao.updateMasterTableResponse(e.getMessage(),
//                                                            masterTable.getClientId(), masterTable.getLoan_type());
//
//                                                    dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, masterTable.getClientId());
//
//                                                    dynamicUIDao.updateMasterTableSync(false, masterTable.getId());
//
//                                                }
//                                            }

                                            // TODO: Sending Final Result
                                            MultipleSyncResponseDTO multipleSyncResponseDTO = new MultipleSyncResponseDTO();
                                            multipleSyncResponseDTO.setValid(false);
                                            multipleSyncResponseDTO.setResponseMsg(e.getMessage());
                                            ((MutableLiveData<MultipleSyncResponseDTO>) data).postValue(multipleSyncResponseDTO);
                                        }
                                    }
                            );

                        } catch (Exception ex) {
                            ex.printStackTrace();

                            insertLog("syncAllScreenDataForMultipleClient", ex.getMessage(), "", "", TAG, "", "", "");
                        }
                    } else {
                        Log.d(TAG, "Empty list");
                        insertLog("syncAllScreenDataForMultipleClient", "Empty list", "", "", TAG, "", "", "");

                        // TODO: Sending Final Result
                        MultipleSyncResponseDTO multipleSyncResponseDTO = new MultipleSyncResponseDTO();
                        multipleSyncResponseDTO.setValid(false);
                        multipleSyncResponseDTO.setResponseMsg(ERROR_MESSAGE_SYNC_FAILED);
                        ((MutableLiveData<MultipleSyncResponseDTO>) data).postValue(multipleSyncResponseDTO);

                    }

                }

            });

        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncAllScreenDataForMultipleClient", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }

    private void setSubmitDataList(MasterTable masterTable, List<SubmitDataTable> submitDataTableList) {
        try {
            if (masterTable != null) {

                // TODO: SET ERROR MESSAGE AS SYNC FAILED
                dynamicUIDao.updateMasterTableResponse(ERROR_MESSAGE_SYNC_FAILED,
                        masterTable.getClientId(), masterTable.getLoan_type());

                List<String> moduleTypeList = dynamicUIDao.getDistinctModuleType(masterTable.getClientId());

                if (moduleTypeList != null && moduleTypeList.size() > 0) {
                    for (String moduleType : moduleTypeList) {
                        List<String> screenNoList = dynamicUIDao.getDistinctScreenNumbers(masterTable.getClientId(),
                                moduleType);
                        if (screenNoList != null && screenNoList.size() > 0) {
                            for (String screenNo : screenNoList) {
                                List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByScreenNoAndClientId(screenNo,
                                        masterTable.getClientId());
                                if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                    List<String> stringList = new ArrayList<>();
                                    final SubmitDataTable submitDataDTO = new SubmitDataTable();
                                    for (int i = 0; i < rawDataTableList.size(); i++) {
                                        RawDataTable rawDataTable = rawDataTableList.get(i);
                                        if (!rawDataTable.isSync()) {

                                            if (i == 0) {
                                                submitDataDTO.setScreenId(rawDataTable.getScreen_no());
                                                submitDataDTO.setScreenName(rawDataTable.getScreen_name());
                                                submitDataDTO.setUniqueID(rawDataTable.getClient_id());
                                                submitDataDTO.setApplicationId(rawDataTable.getClient_id());
                                                submitDataDTO.setIMEINumber(appHelper.getIMEI());
                                                submitDataDTO.setBCBRID(masterTable.getBranchGSTcode());
                                                submitDataDTO.setBCID(masterTable.getBranchId());
                                                LogInTable logInTable = dynamicUIDao.getLoginTable(rawDataTable.getUser_id());
                                                if (logInTable != null) {
                                                    submitDataDTO.setBCBRID(logInTable.getBranchGSTCode());
                                                    submitDataDTO.setBCID(String.valueOf(logInTable.getBCID()));
                                                    submitDataDTO.setRoleId(String.valueOf(logInTable.getRoleId()));
                                                }
                                                submitDataDTO.setCreatedBy(masterTable.getReviewBy()); // TODO: STAFF ID
                                                submitDataDTO.setModuleType(rawDataTable.getModuleType());
                                                submitDataDTO.setStageId(String.valueOf(masterTable.getCurrentStageId())); // TODO: STAGE ID
                                                submitDataDTO.setCurrentStageId(masterTable.getCurrentStageId()); // TODO: STAGE ID
                                                submitDataDTO.setActionName(String.valueOf(masterTable.getActionId())); // TODO: ACTION ID
                                                //submitDataDTO.setRemarks(masterTable.getRemarks()); // TODO: REMARKS

                                                if (!TextUtils.isEmpty(masterTable.getLoan_type()) && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_IL); // TODO: WORKFLOW ID IL
                                                    submitDataDTO.setProductId(PRODUCT_ID_IL); // TODO: PRODUCT ID IL
                                                } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                        && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_MSME); // TODO: WORKFLOW ID MSME
                                                    submitDataDTO.setProductId(PRODUCT_ID_MSME); // TODO: PRODUCT ID MSME
                                                } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                        && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_JLG); // TODO: WORKFLOW ID JLG
                                                    submitDataDTO.setProductId(PRODUCT_ID_JLG); // TODO: PRODUCT ID JLG
                                                } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                        && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_PHL); // TODO: WORKFLOW ID PHL
                                                    submitDataDTO.setProductId(PRODUCT_ID_PHL); // TODO: PRODUCT ID PHL
                                                } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                        && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_TWL); // TODO: WORKFLOW ID TWL
                                                    submitDataDTO.setProductId(PRODUCT_ID_TWL); // TODO: PRODUCT ID TWL
                                                } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                        && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_EL); // TODO: WORKFLOW ID PHL
                                                    submitDataDTO.setProductId(PRODUCT_ID_EL); // TODO: PRODUCT ID PHL
                                                } else if (!TextUtils.isEmpty(masterTable.getLoan_type())
                                                        && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_AHL); // TODO: WORKFLOW ID AHL
                                                    submitDataDTO.setProductId(PRODUCT_ID_AHL); // TODO: PRODUCT ID AHL
                                                } else {
                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_TWL); // TODO: WORKFLOW ID PHL
                                                    submitDataDTO.setProductId(PRODUCT_ID_TWL); // TODO: PRODUCT ID PHL
                                                }
                                            }

                                            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_DOCUMENT_UPLOAD)) {
                                                submitDataDTO.setRawData(rawDataTable.getRawdata());
                                            } else {
                                                stringList.add(rawDataTable.getRawdata());
                                                submitDataDTO.setRawData(stringList.toString());
                                            }
                                        }
                                    }

                                    if (submitDataTableList.size() > 0) {
                                        boolean alreadyExist = false;
                                        for (SubmitDataTable submitDataTable : submitDataTableList) {
                                            if (submitDataTable.getScreenId().equalsIgnoreCase(submitDataDTO.getScreenId())) {
                                                alreadyExist = true;
                                                break;
                                            }
                                        }
                                        if (!alreadyExist) {
                                            submitDataTableList.add(submitDataDTO);
                                        }
                                    } else {
                                        submitDataTableList.add(submitDataDTO);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public LiveData<LoanTable> syncMemberLoanApplicationDetail(LoanTable loanTable) {

        final LiveData<LoanTable> data = new MutableLiveData<>();

        try {

            DynamicUIWebService.changeApiBaseUrl(SUBMIT_DATA_POST_URL_JLG);

            executor.execute(() -> {

                // TODO: SET ERROR MESSAGE AS SYNC FAILED
                dynamicUIDao.updateMemberLoanDetailTableResponse(ERROR_MESSAGE_SYNC_FAILED, loanTable.getId());

                List<SubmitDataTable> submitDataTableList = new ArrayList<>();

                List<String> moduleTypeList = dynamicUIDao.getDistinctModuleType(loanTable.getClientId());

                if (moduleTypeList != null && moduleTypeList.size() > 0) {
                    for (String moduleType : moduleTypeList) {
                        List<String> screenNoList = dynamicUIDao.getDistinctScreenNumbers(loanTable.getClientId(),
                                moduleType);
                        if (screenNoList != null && screenNoList.size() > 0) {
                            for (String screenNo : screenNoList) {
                                List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByScreenNoAndClientId(screenNo,
                                        loanTable.getClientId());
                                if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                    List<String> stringList = new ArrayList<>();
                                    final SubmitDataTable submitDataDTO = new SubmitDataTable();
                                    for (int i = 0; i < rawDataTableList.size(); i++) {
                                        RawDataTable rawDataTable = rawDataTableList.get(i);
                                        if (!rawDataTable.isSync()) {

                                            if (i == 0) {
                                                submitDataDTO.setScreenId(rawDataTable.getScreen_no());
                                                submitDataDTO.setScreenName(rawDataTable.getScreen_name());
                                                submitDataDTO.setUniqueID(rawDataTable.getClient_id());
                                                submitDataDTO.setApplicationId(rawDataTable.getClient_id());
                                                submitDataDTO.setIMEINumber(appHelper.getIMEI());
                                                submitDataDTO.setBCBRID(loanTable.getBranchGSTcode());
                                                submitDataDTO.setBCID(loanTable.getBranchId());
                                                submitDataDTO.setCreatedBy(loanTable.getCreatedBy()); // TODO: STAFF ID
                                                submitDataDTO.setModuleType(rawDataTable.getModuleType());
//                                                submitDataDTO.setStageId("0"); // TODO: STAGE ID
//                                                submitDataDTO.setCurrentStageId(0); // TODO: STAGE ID
//                                                submitDataDTO.setActionName(String.valueOf(loanTable.getActionId())); // TODO: ACTION ID
                                                // submitDataDTO.setRemarks(loanTable.getRemarks()); // TODO: REMARKS

                                                if (!TextUtils.isEmpty(loanTable.getLoan_type()) && loanTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_IL); // TODO: WORKFLOW ID IL
                                                    submitDataDTO.setProductId(PRODUCT_ID_IL); // TODO: PRODUCT ID IL
                                                } else if (!TextUtils.isEmpty(loanTable.getLoan_type())
                                                        && loanTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME)) {

//                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_MSME); // TODO: WORKFLOW ID MSME
                                                    submitDataDTO.setProductId(PRODUCT_ID_MSME); // TODO: PRODUCT ID MSME
                                                } else if (!TextUtils.isEmpty(loanTable.getLoan_type())
                                                        && loanTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {

                                                    submitDataDTO.setWorkflowId(WORKFLOW_ID_JLG); // TODO: WORKFLOW ID JLG
                                                    submitDataDTO.setProductId(PRODUCT_ID_JLG); // TODO: PRODUCT ID JLG
                                                }

                                            }

                                            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_DOCUMENT_UPLOAD)) {
                                                submitDataDTO.setRawData(rawDataTable.getRawdata());
                                            } else {
                                                stringList.add(rawDataTable.getRawdata());
                                                submitDataDTO.setRawData(stringList.toString());
                                            }
                                        }
                                    }

                                    if (submitDataTableList.size() > 0) {
                                        boolean alreadyExist = false;
                                        for (SubmitDataTable submitDataTable : submitDataTableList) {
                                            if (submitDataTable.getScreenId().equalsIgnoreCase(submitDataDTO.getScreenId())) {
                                                alreadyExist = true;
                                                break;
                                            }
                                        }
                                        if (!alreadyExist) {
                                            submitDataTableList.add(submitDataDTO);
                                        }
                                    } else {
                                        submitDataTableList.add(submitDataDTO);
                                    }
                                }
                            }
                        }
                    }
                }

                if (submitDataTableList.size() > 0) {
                    // TODO: Setting request xml
                    for (SubmitDataTable submitDataTable : submitDataTableList) {
                        String request = new Gson().toJson(submitDataTable, SubmitDataTable.class);
                        submitDataTable.setRequest(request);
                    }

                    dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, loanTable.getClientId());

                    try {
                        DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                        List<Observable<String>> requests = new ArrayList<>();


                        // Make a collection of all requests you need to call at once, there can be any number of requests, not only 3. You can have 2 or 5, or 100.
                        for (SubmitDataTable submitDataTable : submitDataTableList) {
                            String baseString = new Gson().toJson(submitDataTable, SubmitDataTable.class).replace("\\u003d", "=");
                            String k1 = SHA256Encrypt.sha256(baseString);
                            requests.add(service.postDataToServerJLG(submitDataTable, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1));
                        }
                        // Zip all requests with the Function, which will receive the results.
                        Disposable disposable = Observable.zip(requests,
                                new Function<Object[], List<SubmitDataTable>>() {
                                    @Override
                                    public List<SubmitDataTable> apply(Object[] objects) throws Exception {
                                        try {
                                            if (objects != null && objects.length > 0) {
                                                if (submitDataTableList.size() == objects.length) {
                                                    for (int i = 0; i < submitDataTableList.size(); i++) {
                                                        SubmitDataTable submitDataTable = submitDataTableList.get(i);
                                                        submitDataTable.setResponse(objects[i].toString());
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            insertLog("syncMemberLoanApplicationDetail", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                        return submitDataTableList;
                                    }
                                }).subscribe(new Consumer<List<SubmitDataTable>>() {
                                                 @Override
                                                 public void accept(List<SubmitDataTable> submitDataTableList) throws Exception {
                                                     if (submitDataTableList != null && submitDataTableList.size() > 0) {

                                                         dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, loanTable.getClientId());

                                                         boolean allGotSuccess = false;

                                                         for (SubmitDataTable submitDataTable : submitDataTableList) {
                                                             if (!TextUtils.isEmpty(submitDataTable.getResponse()) &&
                                                                     submitDataTable.getResponse().equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                                 allGotSuccess = true;
                                                             } else {
                                                                 allGotSuccess = false;
                                                                 // TODO: SET ERROR MESSAGE AS WHATEVER GETTING FROM SERVER
                                                                 dynamicUIDao.updateMemberLoanDetailTableResponse(submitDataTable.getResponse(),
                                                                         loanTable.getId());
                                                                 break;
                                                             }
                                                         }

                                                         if (allGotSuccess) {
                                                             dynamicUIDao.updateMemberLoanDetailTableSync(true, loanTable.getId());
                                                             // TODO: SET MESSAGE AS SYNC SUCCESS
                                                             dynamicUIDao.updateMemberLoanDetailTableResponse(ERROR_MESSAGE_SYNC_SUCCESS,
                                                                     loanTable.getId());

                                                             // TODO: CLEAR DOCUMENT TABLE AGAINST CLINT ID
//                                                             dynamicUIDao.deleteDocumentFromTableByClientId(masterTable.getClientId());
////
////                                                             // TODO: DELETE DOCUMENT FOLDER FROM LOCAL STORAGE
//                                                             String clientFolderName=Environment.getExternalStorageDirectory()
//                                                                     .getAbsolutePath() + "/" + APP_FOLDER + "/" + IMAGE_UPLOAD_FOLDER_NAME + "/" + DB_SUB_FOLDER + "/" + masterTable.getClientId() + "/";
//                                                             File clientFolder=new File(clientFolderName);
//                                                             if(clientFolder.exists()){
//                                                                 clientFolder.delete();
//                                                             }
                                                         } else {
                                                             dynamicUIDao.updateMemberLoanDetailTableSync(false, loanTable.getId());
                                                             // TODO: SET ERROR MESSAGE AS SYNC FAILED
                                                             dynamicUIDao.updateMemberLoanDetailTableResponse(ERROR_MESSAGE_SYNC_FAILED,
                                                                     loanTable.getId());
                                                         }
                                                     } else {
                                                         dynamicUIDao.updateMemberLoanDetailTableSync(false, loanTable.getId());
                                                     }

                                                     LoanTable loanTableResult = dynamicUIDao.getMemberLoanDetailById(loanTable.getId());
                                                     ((MutableLiveData<LoanTable>) data).postValue(loanTableResult);
                                                 }
                                             },
                                // Will be triggered if any error during requests will happen
                                new Consumer<Throwable>() {
                                    @Override
                                    public void accept(Throwable e) throws Exception {
                                        //Do something on error completion of requests
                                        Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                        // TODO: SET ERROR MESSAGE AS WHATEVER GETTING FROM SERVER
                                        dynamicUIDao.updateMemberLoanDetailTableResponse(e.getMessage(),
                                                loanTable.getId());

                                        dynamicUIDao.insertAndDeleteSubmitDataTable(submitDataTableList, loanTable.getClientId());

                                        dynamicUIDao.updateMemberLoanDetailTableSync(false, loanTable.getId());

                                        ((MutableLiveData<LoanTable>) data).postValue(dynamicUIDao.getMemberLoanDetailById(loanTable.getId()));

                                        insertLog("syncMemberLoanApplicationDetail", e.getMessage(), "", "", TAG, "", "", "");
                                    }
                                }
                        );

                    } catch (Exception ex) {
                        ex.printStackTrace();

                        insertLog("syncMemberLoanApplicationDetail", ex.getMessage(), "", "", TAG, "", "", "");
                    }
                } else {
                    Log.d(TAG, "Empty list");
                    ((MutableLiveData<LoanTable>) data).postValue(dynamicUIDao.getMemberLoanDetailById(loanTable.getId()));

                }

            });

        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("syncMemberLoanApplicationDetail", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }


    public LiveData<MasterTable> updateMasterTableStatusNew(MasterTable masterTable, String status) {
        final MutableLiveData<MasterTable> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                // TODO: condition to check all screen details are entered or not
                boolean allDataCaptured = true; // TODO: Initially it will be true
                boolean allModuleExist = false; // TODO: Initially it will be false
                boolean allModuleCoapplicantExist = false; // TODO: Initially it will be false
                String message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;

                // TODO: default values
                String[] APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN = null;
                List<RawDataTable>  applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, masterTable.getClientId(), MODULE_TYPE_APPLICANT, masterTable.getLoan_type());
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, masterTable.getClientId(), masterTable.getLoan_type());
                int applicantAgeValue=0;
                String outSideIndia = "", earningCapacityOfStudent = "";
                APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN = APPLICANT_MODULE_NAME_LIST;
                String[] APPLICANT_TAB_SCREEN_NAMES = null;
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE) || hashMap.containsKey(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                            String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                            if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP)
                                    || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                APPLICANT_TAB_SCREEN_NAMES = APPLICANT_TAB_SCREEN_NAMES_BUSINESS_IL;
                            } else {
                                APPLICANT_TAB_SCREEN_NAMES = APPLICANT_TAB_SCREEN_NAMES_IL;
                            }
                        }
                    }
                }
                String[] CO_APPLICANT_TAB_SCREEN_NAMES = CO_APPLICANT_TAB_SCREEN_NAMES_IL;
                // TODO: set values based on loan type

                if (!TextUtils.isEmpty(masterTable.getLoan_type()) && masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                    // TODO: LEAD RAW DATA
                    //RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, masterTable.getClientId(), masterTable.getLoan_type());
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_APPLICATION_ENTER_AGE)) {
                                    applicantAgeValue = Integer.valueOf(hashMap.get(TAG_NAME_APPLICATION_ENTER_AGE).toString());
                                }

                                if (hashMap.containsKey(TAG_NAME_EARNING_CAPACITY_OF_STUDENT)) {
                                    earningCapacityOfStudent = hashMap.get(TAG_NAME_EARNING_CAPACITY_OF_STUDENT).toString();
                                }
                                if (hashMap.containsKey(TAG_NAME_PROPOSED_INSTITUTE_WITHIN_INDIA_OUTSIDE_INDIA)) {
                                    outSideIndia =hashMap.get(TAG_NAME_PROPOSED_INSTITUTE_WITHIN_INDIA_OUTSIDE_INDIA).toString();
                                }
                            if(applicantAgeValue <= 18 || outSideIndia.equalsIgnoreCase(TAG_NAME_OUTSIDE_INDIA) || earningCapacityOfStudent.equalsIgnoreCase("No")){
                                APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN = APPLICANT_MODULE_NAME_LIST_OUT_SIDE_INDIA;
                            }else {
                                APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN = APPLICANT_MODULE_NAME_LIST;
                            }
                            /*if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP)
                                        || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {

                                } else {
                                    if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                        APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN = APPLICANT_MODULE_NAME_LIST;
                                    } else if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_CASH_SALARIED)
                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_BANK_SALARIED)
                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SALARIED)) {
                                        APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN = APPLICANT_MODULE_NAME_LIST_PHL;
                                    }
                                }

                            }*/
                        }
                    }
                }

                // TODO: GET DISTINCT MODULE TYPE

                List<String> distinctModuleType = dynamicUIDao.getDistinctModuleType(masterTable.getClientId());

                if (distinctModuleType != null && distinctModuleType.size() > 0) {

                    if (!TextUtils.isEmpty(masterTable.getCurrentStage())
                            && masterTable.getCurrentStage().equalsIgnoreCase(CURRENT_STAGE_APPLICATION)) { // TODO: APPLICATION STAGE
                        for (String mod : APPLICANT_MODULE_NAME_LIST_BASED_ON_LOAN) { // TODO: APPLICANT MODULE LIST

                            for (String moduleType : distinctModuleType) {
                                if (mod.equalsIgnoreCase(moduleType)) {
                                    allModuleExist = true;
                                    break;
                                } else {
                                    if(mod.equalsIgnoreCase(MODULE_TYPE_CO_APPLICANT+1)){
                                        allModuleCoapplicantExist=true;
                                    }
                                    allModuleExist = false;
                                }
                            }

                            if (!allModuleExist) {
                                break;
                            }
                        }

                    }

                    if (allModuleExist) {
                        parentLoop:
                        for (String moduleType : distinctModuleType) {
                            if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) { // TODO: APPLICANT
                                for (String screenName : APPLICANT_TAB_SCREEN_NAMES) {
                                    List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenName(screenName, masterTable.getClientId());

                                    if (rawDataTableList.size() == 0) {
                                        // TODO: 12-08-2020 APPLICANT BANK DETAILS ARE MANDATORY FOR THIS APK VERSION 5.1.2 AS PER BUSINESS TEAM REQUIREMENT
//                                        if (!screenName.equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)) {
                                        allDataCaptured = false;
                                        message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS.replace("ALL SCREEN", screenName);
                                        break parentLoop;
//                                        }
                                    } else {

                                        if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                                            boolean idProof = false;
                                            boolean signatureProof = false;

                                            for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                if (hashMap != null && hashMap.size() > 0) {
                                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                                        String proofType = getProofType(kycType);
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_ID_CUM_ADDRESS_PROOF)) {
                                                            idProof = true;
                                                        }
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_SIGNATURE_PROOF)) {
                                                            signatureProof = true;
                                                        }
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_ID_CUM_SIGNATURE_PROOF)) {
                                                            idProof = true;
                                                            signatureProof = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            /*if (!idProof) {
                                                allDataCaptured = false;
                                                message = ERROR_MESSAGE_ID_PROOF_MISSING.replace("KYC SCREEN", screenName);
                                                break parentLoop;
                                            }*/
                                            /*else if (!signatureProof) {
                                                allDataCaptured = false;
                                                tvMobNo = ERROR_MESSAGE_SIGNATURE_PROOF_MISSING.replace("KYC SCREEN", screenName);
                                                break parentLoop;
                                            }*/
                                        } else if (screenName.equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)) {
                                            if (rawDataTableList.size() < 2) {
                                                allDataCaptured = false;
                                                message = ERROR_MESSAGE_AT_LEAST_TWO_REFERENCES;
                                                break parentLoop;
                                            }
                                        }
                                    }
                                }

                            } else if (moduleType.contains(MODULE_TYPE_CO_APPLICANT)) { // TODO: CO APPLICANT (note : contains)

                                for (String screenName : CO_APPLICANT_TAB_SCREEN_NAMES) {

                                    List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(screenName,
                                            masterTable.getClientId(), moduleType);

                                    if (rawDataTableList.size() == 0) {
                                        if (!screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                                            allDataCaptured = false;
                                            message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS.replace("ALL SCREEN", screenName);
                                            break parentLoop;
                                        }
                                    } else {

                                        if (screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {

                                            for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                if (hashMap != null && hashMap.size() > 0) {
                                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                                        String proofType = getProofType(kycType);
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_ID_CUM_ADDRESS_PROOF)) {
                                                        }
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_SIGNATURE_PROOF)) {
                                                        }
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_ID_CUM_SIGNATURE_PROOF)) {
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            /*if (!idProof) {
                                                allDataCaptured = false;
                                                message = ERROR_MESSAGE_ID_PROOF_MISSING.replace("KYC SCREEN", moduleType);
                                                break parentLoop;
                                            }*/
                                           /* else if (!signatureProof) {
                                                allDataCaptured = false;
                                                tvMobNo = ERROR_MESSAGE_SIGNATURE_PROOF_MISSING.replace("KYC SCREEN", moduleType);
                                                break parentLoop;
                                            }*/
                                        }
                                    }
                                }

                            }
                        } // TODO: parent loop ending
                    } else {
                        if(currentStage!=null&&!currentStage.equalsIgnoreCase("Document Execution")) {
                            allDataCaptured = false;
                            if (allModuleCoapplicantExist == true) {
                                message = ERROR_MESSAGE_CAPTURE_COAPPLICANT_SCREEN_DETAILS;
                            } else {
                                message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;
                            }
                        }
                    }
                } else {
                    allDataCaptured = false;
                    message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;
                }
                if (allDataCaptured) {

                    dynamicUIDao.updateMasterTableAllDataCaptured(true, message, masterTable.getId());

                    // TODO: DOCUMENT UPLOAD VALIDATION
                    // TODO: Commented for v9.1.2 production release
//                    if (!masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
//                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadSubHeader(masterTable.getClientId(),
//                                masterTable.getLoan_type(), true);
//                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
//                            boolean alldocumentsuploaded = true; // TODO: Initially it will be true
//                            String documentName = "";
//
//                            // TODO: Checking all documents are uploaded or not
//                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
//                                // TODO: Non Mandatory Documents
//                                if (!documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_BILLS)
//                                        && !documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_BANK_STATEMENT)
//                                        && !documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_OTHERS)
//                                ) {
//                                    if (!documentUploadTable.isDocument_status()) {
//                                        alldocumentsuploaded = false;
//                                        documentName = documentUploadTable.getFull_display_name();
//                                        break;
//                                    }
//                                }
//                            }
//                            if (!alldocumentsuploaded) {
//                                message = documentName + ERROR_MESSAGE_NOT_UPLOADED;
//                                dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
//                            }
//
//                        } else {
//                            // TODO: Document Not Uploaded
//                            message = "Document" + ERROR_MESSAGE_NOT_UPLOADED;
//                            dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
//                        }
//                    }

                    // TODO: OTP VALIDATION
                    if (!masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                        List<OTPVerificationTable> otpTableList = dynamicUIDao.getOTPTableList(masterTable.getClientId(), masterTable.getLoan_type());
                        if (otpTableList != null && otpTableList.size() > 0) {
                            boolean allOTPVerified = true; // TODO: Initially it will be true
                            String otpName = masterTable.getClientName();
                            for (OTPVerificationTable otpVerificationTable : otpTableList) {
                                if (!otpVerificationTable.isOTPVerified()) {
                                    allOTPVerified = false;
                                    otpName = otpVerificationTable.getName();
                                    break;
                                }
                            }
                            if (!allOTPVerified) {
                                message = ERROR_MESSAGE_OTP_NOT_VERIFIED + otpName;
                                if (loanType.equalsIgnoreCase(LOAN_NAME_EL) || loanType.equalsIgnoreCase(LOAN_NAME_TWL)) {
                                    dynamicUIDao.updateMasterTableAllDataCaptured(true, message, masterTable.getId());
                                } else {
                                    dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
                                }
                            }
                        } else {
                            // TODO: OTP Not Verified
                            message = ERROR_MESSAGE_OTP_NOT_VERIFIED;
                            if (loanType.equalsIgnoreCase(LOAN_NAME_TWL) || loanType.equalsIgnoreCase(LOAN_NAME_EL)) {
                                dynamicUIDao.updateMasterTableAllDataCaptured(true, message, masterTable.getId());
                            } else {
                                dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
                            }
                        }
                    }
                    // TODO: CIBIL VALIDATION
                    if (!masterTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                         List<CIBILTable> cibilTableList = dynamicUIDao.getCIBILTableList(masterTable.getClientId(), masterTable.getLoan_type());
                        if (cibilTableList != null && cibilTableList.size() > 0) {
                            boolean allCIBILVerified = true; // TODO: Initially it will be true
                            String cibilClientName = masterTable.getClientName();
                            for (CIBILTable cibilTable : cibilTableList) {
                                if (!cibilTable.isCBChecked()) {
                                    allCIBILVerified = false;
                                    cibilClientName = cibilTable.getName();
                                    break;
                                }
                            }
                            // TODO: CIBIL VALIDATION REMOVE FOR CLIENT REQUIRMENT
                            if (!allCIBILVerified) {
                                message = ERROR_MESSAGE_CIBIL_GENERATION_PENDING + cibilClientName;
                                dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
                            }
                        } else {
                            // TODO: CIBIL VALIDATION REMOVE FOR CLIENT REQUIRMENT
                            // TODO: CIBIL Not Generated
                            message = ERROR_MESSAGE_CIBIL_GENERATION_PENDING;
                            dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
                        }

                    }

                } else {
                    dynamicUIDao.updateMasterTableAllDataCaptured(false, message, masterTable.getId());
                }

                // TODO: ENABLE ONLY FOR TESTING
//                dynamicUIDao.updateMasterTableAllDataCaptured(true, tvMobNo, masterTable.getId());

                MasterTable masterTable1 = dynamicUIDao.getMasterTableDetailById(masterTable.getId());
                if (masterTable1 != null && masterTable1.isAllDataCaptured()) {
                    dynamicUIDao.updateMasterTableStatus(status, masterTable.getRemarks(), masterTable.getId());
                }

                MasterTable masterTableResult = dynamicUIDao.getMasterTableDetailById(masterTable.getId());
                data.postValue(masterTableResult);
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                MasterTable masterTableResult = dynamicUIDao.getMasterTableDetailById(masterTable.getId());
                data.postValue(masterTableResult);

                insertLog("updateMasterTableStatusNew", ex.getMessage(), "", "", TAG, "", "", "");
            });

        }

        return data;
    }
      public LiveData<LoanTable> updateMemberLoanDetailTableStatus(LoanTable loanTable, String status) {
        final MutableLiveData<LoanTable> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                // TODO: condition to check all screen details are entered or not
                boolean allDataCaptured = true; // TODO: Initially it will be true
                boolean allModuleExist = false; // TODO: Initially it will be false
                String message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;
                String[] APPLICANT_TAB_SCREEN_NAMES = APPLICANT_TAB_SCREEN_NAMES_JLG;
                String[] LOAN_PROPOSAL_WITH_NOMINEE_MODULE_SCREEN_NAMES = LOAN_PROPOSAL_WITH_NOMINEE_MODULE_SCREEN_NAMES_JLG;

                // TODO: GET DISTINCT MODULE TYPE

                List<String> distinctModuleType = dynamicUIDao.getDistinctModuleType(loanTable.getClientId());

                if (distinctModuleType != null && distinctModuleType.size() > 0) {


                    if (allModuleExist) {
                        parentLoop:
                        for (String moduleType : distinctModuleType) {
                            if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) { // TODO: APPLICANT
                                for (String screenName : APPLICANT_TAB_SCREEN_NAMES) {
                                    List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenName(screenName, loanTable.getClientId());

                                    if (rawDataTableList.size() == 0) {
                                        allDataCaptured = false;
                                        message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS.replace("ALL SCREEN", screenName);
                                        break parentLoop;
                                    } else {
                                        if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                                            boolean idProof = false;
                                            boolean signatureProof = false;

                                            for (RawDataTable rawDataTableFromDB : rawDataTableList) {
                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableFromDB);
                                                if (hashMap != null && hashMap.size() > 0) {
                                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                                        String proofType = getProofType(kycType);
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_ID_CUM_ADDRESS_PROOF)) {
                                                            idProof = true;
                                                        }
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_SIGNATURE_PROOF)) {
                                                            signatureProof = true;
                                                        }
                                                        if (!TextUtils.isEmpty(proofType) &&
                                                                proofType.contains(PROOF_TYPE_SPINNER_ITEM_ID_CUM_SIGNATURE_PROOF)) {
                                                            idProof = true;
                                                            signatureProof = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                           /* if (!idProof) {
                                                allDataCaptured = false;
                                                message = ERROR_MESSAGE_ID_PROOF_MISSING.replace("KYC SCREEN", screenName);
                                                break parentLoop;
                                            }*/

                                        }
                                    }
                                }

                            } else if (!loanType.equalsIgnoreCase(LOAN_NAME_EL) && moduleType.equalsIgnoreCase(MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE)) { // TODO: LOAN PROPOSAL WITH NOMINEE

                                for (String screenName : LOAN_PROPOSAL_WITH_NOMINEE_MODULE_SCREEN_NAMES) {
                                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(screenName,
                                            loanTable.getClientId(), moduleType);

                                   /* if (rawDataTable == null) {
                                        allDataCaptured = false;
                                        message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS.replace("ALL SCREEN", screenName);
                                        break parentLoop;
                                    }*/
                                }

                            }
                        } // TODO: parent loop ending
                    } else {
                        allDataCaptured = false;
                        message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;
                    }
                } else {
                    allDataCaptured = false;
                    message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;
                }
                if (allDataCaptured) {

                    dynamicUIDao.updateMemberLoanDetailAllDataCaptured(true, message, loanTable.getId());

                    // TODO: DOCUMENT UPLOAD VALIDATION
                    List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadSubHeader(loanTable.getClientId(),
                            loanTable.getLoan_type(), true);
                    if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
                        boolean alldocumentsuploaded = true; // TODO: Initially it will be true
                        String documentName = "";

                        // TODO: Checking all documents are uploaded or not
                        for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
                            // TODO: Non Mandatory Documents
                            if (!documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_BILLS)
                                    && !documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_BANK_STATEMENT)
                                    && !documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_OTHERS)) {
                                if (!documentUploadTable.isDocument_status()) {
                                    alldocumentsuploaded = false;
                                    documentName = documentUploadTable.getFull_display_name();
                                    break;
                                }
                            }
                        }
                        if (!alldocumentsuploaded) {
                            message = documentName + ERROR_MESSAGE_NOT_UPLOADED;
                            dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                        }

                    } else {
                        // TODO: Document Not Uploaded
                        message = "Document" + ERROR_MESSAGE_NOT_UPLOADED;
                        dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                    }

                } else {
                    dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                }

                // TODO: ENABLE ONLY FOR TESTING
//                dynamicUIDao.updateMemberLoanDetailAllDataCaptured(true, tvMobNo, masterTable.getId());

                LoanTable memberLoanDetailFromDB = dynamicUIDao.getMemberLoanDetailById(loanTable.getId());
                if (memberLoanDetailFromDB != null && memberLoanDetailFromDB.isAllDataCaptured()) {
                    dynamicUIDao.updateMemberLoanDetailTableStatus(status, loanTable.getRemarks(), loanTable.getId());
                }

                LoanTable loanTableResult = dynamicUIDao.getMemberLoanDetailById(loanTable.getId());
                data.postValue(loanTableResult);
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {

                LoanTable loanTableResult = dynamicUIDao.getMemberLoanDetailById(loanTable.getId());
                data.postValue(loanTableResult);

                insertLog("updateMemberLoanDetailTableStatus", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<MasterTable> updateMasterTableStatusForRejectAndSendback(MasterTable masterTable, String finalStatusRejected) {
        final MutableLiveData<MasterTable> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {
                MasterTable masterTable1 = dynamicUIDao.getMasterTableDetailById(masterTable.getId());
                if (masterTable1 != null) {
                    dynamicUIDao.updateMasterTableStatus(finalStatusRejected, masterTable.getRemarks(), masterTable.getId());
                }

                MasterTable masterTableResult = dynamicUIDao.getMasterTableDetailById(masterTable.getId());
                data.postValue(masterTableResult);
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("updateMasterTableStatusForRejectAndSendback", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }


    public LiveData<List<MasterTable>> updateMasterTableFromPD(MasterTable masterTable, String status, String actionName) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {
                dynamicUIDao.updateMasterTableStatus(status, masterTable.getRemarks(), masterTable.getId());
                List<StageDetailsTable> stageDetailsTableList = dynamicUIDao.getActionID(masterTable.getClientId());
                if (stageDetailsTableList != null && stageDetailsTableList.size() > 0) {
                    for (StageDetailsTable stageDetailsTable : stageDetailsTableList) {
                        if (actionName.equalsIgnoreCase(stageDetailsTable.getActionName())) {
                            int actionId = stageDetailsTable.getActionId();
                            dynamicUIDao.updateMasterTableActionId(actionId, masterTable.getId());
                            break;
                        }
                    }
                }
                data.postValue(dynamicUIDao.getMasterTableByCurrentStage(masterTable.getReviewBy(), CURRENT_STAGE_PD, masterTable.getLoan_type()));
            });
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("updateMasterTableFromPD", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }


    public LiveData<List<RawDataResponseDTO.Table>> getRawDataFromServerForMultipleCustomer(RawDataRequestDTO rawDataRequestDTO, String userId,
                                                                                            String loanType) {
        final LiveData<List<RawDataResponseDTO.Table>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
            executor.execute(() -> {
                List<StageDetailsTable> stageDetailsTableList = dynamicUIDao.getDistinctClientIDFromStageTable();

                if (stageDetailsTableList != null && stageDetailsTableList.size() > 0) {

                    String clientIds = "";
                    for (StageDetailsTable stageDetailsTable : stageDetailsTableList) {
                        MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(stageDetailsTable.getCustomerUniqueId());
                        if (masterTable != null && masterTable.getCurrentStage().equalsIgnoreCase(CURRENT_STAGE_PD) &&
                                !masterTable.getFinalStatus().equalsIgnoreCase(FINAL_STATUS_PENDING)) {
                            if (!TextUtils.isEmpty(clientIds)) {
                                clientIds = clientIds + "," + stageDetailsTable.getCustomerUniqueId();
                            } else {
                                clientIds = stageDetailsTable.getCustomerUniqueId();
                            }
                        }
                    }
                    if (!TextUtils.isEmpty(clientIds)) {
                        rawDataRequestDTO.getSpNameWithParameter().get(0).getSpParameters().setCustomerIdsCommaSeperated(clientIds);
                        String baseString = new Gson().toJson(rawDataRequestDTO, RawDataRequestDTO.class).replace("\\u003d", "=");
                        String k1 = SHA256Encrypt.sha256(baseString);
                        DynamicUIWebService.createService(DynamicUIWebservice.class).rawDataFromServer(rawDataRequestDTO,
                                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                                enqueue(new Callback<ResponseBody>() {
                                    @Override
                                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                        executor.execute(() -> {
                                            if (response.isSuccessful()) {
                                                try {
                                                    String strResponse = response.body().string();
                                                    JSONObject json = new JSONObject(strResponse);
                                                    String key = json.keys().next();

                                                    String tableJson = json.get(key).toString();
                                                    RawDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, RawDataResponseDTO.class);
                                                    if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {

                                                        List<RawDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                        if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {

                                                            List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                            for (RawDataResponseDTO.Table table : rawDataResponseDTOList) {
                                                                RawDataFromServerTable rawDataFromServerTable = new RawDataFromServerTable();
                                                                rawDataFromServerTable.setSerialNo(table.getSerialNo());
                                                                if (!TextUtils.isEmpty(table.getWorkFlowName())) {
                                                                    rawDataFromServerTable.setWorkFlowName(table.getWorkFlowName());
                                                                }
                                                                if (!TextUtils.isEmpty(table.getCustomerId())) {
                                                                    rawDataFromServerTable.setCustomerId(table.getCustomerId());
                                                                }
                                                                if (!TextUtils.isEmpty(table.getCustomerName())) {
                                                                    rawDataFromServerTable.setCustomerName(table.getCustomerName());
                                                                }
                                                                if (!TextUtils.isEmpty(table.getREQUESTEDLOANAMOUNT())) {
                                                                    rawDataFromServerTable.setREQUESTEDLOANAMOUNT(table.getREQUESTEDLOANAMOUNT());
                                                                }
                                                                if (!TextUtils.isEmpty(table.getCreatedOn())) {
                                                                    rawDataFromServerTable.setCreatedOn(table.getCreatedOn());
                                                                }
                                                                if (!TextUtils.isEmpty(table.getRwas())) {
                                                                    rawDataFromServerTable.setRwas(table.getRwas());
                                                                }
                                                                if (!TextUtils.isEmpty(String.valueOf(table.getScreenId()))) {
                                                                    rawDataFromServerTable.setScreenId(String.valueOf(table.getScreenId()));
                                                                }

                                                                rawDataFromServerTableList.add(rawDataFromServerTable);

                                                            }
                                                            if (rawDataFromServerTableList.size() > 0) {
                                                                dynamicUIDao.deleteAndInsertRawDataFromServer(rawDataFromServerTableList);
                                                            }

                                                            // TODO: Update Master Table status
                                                            for (StageDetailsTable stageDetailsTable : stageDetailsTableList) {

                                                                dynamicUIDao.updateMasterTableStatusByClientId(FINAL_STATUS_PENDING,
                                                                        stageDetailsTable.getCurrentStageName(),
                                                                        stageDetailsTable.getCurrentStage(),
                                                                        stageDetailsTable.getCustomerUniqueId(), userId,
                                                                        false,
                                                                        false,
                                                                        stageDetailsTable.getRemark());
                                                            }


                                                            // TODO: Sending result ( success )
                                                            ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(rawDataResponseDTO.getTable());
                                                        }
                                                    } else {
                                                        // TODO: Sending result
                                                        ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());
                                                    }
                                                } catch (Exception ex) {
                                                    ex.printStackTrace();
                                                    // TODO: Sending result
                                                    ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());
                                                }
                                            } else {
                                                // TODO: Sending result
                                                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());
                                            }

                                        });
                                    }

                                    @Override
                                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                                        t.printStackTrace();
                                        // TODO: Sending result
                                        ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                        insertLog("getRawDataFromServerForMultipleCustomer", t.getMessage(), "", "", TAG, "", "", "");
                                    }
                                });
                    } else {
                        // TODO: Sending result
                        ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());
                    }
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                insertLog("getRawDataFromServerForMultipleCustomer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<MasterTable> getMasterTableByClientId(String clientId) {

        final LiveData<MasterTable> data = new MutableLiveData<>();

        try {
            executor.execute(() -> {
                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(clientId);
                if (masterTable != null) {
                    ((MutableLiveData<MasterTable>) data).postValue(masterTable);
                } else {
                    ((MutableLiveData<MasterTable>) data).postValue(masterTable);
                }
            });

        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("getMasterTableByClientId", ex.getMessage(), "", "", TAG, "", "", "");
        }

        return data;
    }

    public LiveData<List<RawDataResponseDTO.Table>> getRawDataFromServerForSingleCustomerApplication(String clientId, String userId,
                                                                                                     String loanType, String productId,
                                                                                                     String connectionString) {

        final LiveData<List<RawDataResponseDTO.Table>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            executor.execute(() -> {

                // TODO: **************** ALL HARDCODED VALUES *********************
                String RoleId = "8005";
                String ProjectId = PROJECT_ID_EL;
                int AllSrc = 1;
                LogInTable logInTable = dynamicUIDao.getLoginTable(userId);
                if (logInTable != null && logInTable.getRoleId() != 0) {
                    RoleId = String.valueOf(logInTable.getRoleId());
                }

                final RawDataRequestDTO rawDataRequestDTO = new RawDataRequestDTO();
                rawDataRequestDTO.setConnectionString(connectionString); // TODO: Connection String
                rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                RawDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new RawDataRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_GET_RAW_DATA);
                RawDataRequestDTO.SpParametersClass spParametersClass = new RawDataRequestDTO.SpParametersClass();
                if (!TextUtils.isEmpty(connectionString) && connectionString.equalsIgnoreCase(SERVICE_CONNECTION_STRING_AUDIT)) {
                    spParametersClass.setRoleId(RoleId); // TODO: role id
                    spParametersClass.setProjectId(ProjectId); // TODO: project id
                    spParametersClass.setProductId(productId); // TODO: product id
                    spParametersClass.setAllSrc(AllSrc); // TODO: Allsrc
                    spParametersClass.setCustomerIdsCommaSeperated(clientId); // TODO: Client Id

                    spNameWithParameter.setSpName(SP_NAME_TO_GET_RAW_DATA); // TODO: SP - MSME
                } else if (!TextUtils.isEmpty(connectionString) && connectionString.equalsIgnoreCase(SERVICE_CONNECTION_STRING_JLG)) {
                    spParametersClass.setUniqueId(clientId); // TODO: client id
                    spParametersClass.setUserId(userId); // TODO: staff id
                    spParametersClass.setRole(RoleId); // TODO: product id

                    spNameWithParameter.setSpName(SP_NAME_TO_GET_RAW_DATA_JLG);// TODO: SP - JLG
                }
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<RawDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<RawDataRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(rawDataRequestDTO, RawDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).rawDataFromServer(rawDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            RawDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, RawDataResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {

                                                List<RawDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {

                                                    List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                    for (RawDataResponseDTO.Table table : rawDataResponseDTOList) {
                                                        RawDataFromServerTable rawDataFromServerTable = new RawDataFromServerTable();
                                                        rawDataFromServerTable.setSerialNo(table.getSerialNo());
                                                        if (!TextUtils.isEmpty(table.getWorkFlowName())) {
                                                            rawDataFromServerTable.setWorkFlowName(table.getWorkFlowName());
                                                        }
                                                        if (!TextUtils.isEmpty(table.getCustomerId())) {
                                                            rawDataFromServerTable.setCustomerId(table.getCustomerId());
                                                        }
                                                        if (!TextUtils.isEmpty(table.getCustomerName())) {
                                                            rawDataFromServerTable.setCustomerName(table.getCustomerName());
                                                        }
                                                        if (!TextUtils.isEmpty(table.getREQUESTEDLOANAMOUNT())) {
                                                            rawDataFromServerTable.setREQUESTEDLOANAMOUNT(table.getREQUESTEDLOANAMOUNT());
                                                        }
                                                        if (!TextUtils.isEmpty(table.getCreatedOn())) {
                                                            rawDataFromServerTable.setCreatedOn(table.getCreatedOn());
                                                        }
                                                        if (!TextUtils.isEmpty(table.getRwas())) {
                                                            rawDataFromServerTable.setRwas(table.getRwas());
                                                          /*  if(String.valueOf(table.getScreenId())!=null&&String.valueOf(table.getScreenId()).equalsIgnoreCase("739")){
                                                                RawDataTable rawDataFromDB = dynamicUIDao.getRawDataByScreenNoTopOne(String.valueOf(table.getScreenId()), CLIENT_ID, "TWL");
                                                               // postSubmittedAllScreensLiveData(table.getRwas(), SCREEN_N0_DOCUMENT_UPLOAD_PHL,"", userId,SCREEN_NAME_DOCUMENT_UPLOAD,MODULE_TYPE_DOCUMENTS);
                                                                if (rawDataFromDB != null) {
                                                                    // TODO: Update Raw DatarawDataFromDB.setRawdata(table.getRwas());
                                                                    dynamicUIDao.updateRawDataBag(rawDataFromDB.getScreen_no(), rawDataFromDB.getId(), table.getRwas()); // TODO: update json in raw data table
                                                                }
                                                            }
                                                    */
                                                        }
                                                        if (!TextUtils.isEmpty(String.valueOf(table.getScreenId()))) {
                                                            rawDataFromServerTable.setScreenId(String.valueOf(table.getScreenId()));
                                                        }
                                                        rawDataFromServerTableList.add(rawDataFromServerTable);

                                                    }
                                                    if (rawDataFromServerTableList.size() > 0) {
                                                        dynamicUIDao.deleteAndInsertRawDataFromServer(rawDataFromServerTableList);
                                                    }

                                                    // TODO: Sending result ( success )
                                                    ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(rawDataResponseDTO.getTable());
                                                }
                                            } else {
                                                // TODO: Sending result
                                                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Sending result
                                            ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                            insertLog("getRawDataFromServerForSingleCustomerApplication", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        // TODO: Sending result
                                        ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                        insertLog("getRawDataFromServerForSingleCustomerApplication", response.message(), "", "", TAG, "", "", "");
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Sending result
                                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                insertLog("getRawDataFromServerForSingleCustomerApplication", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                insertLog("getRawDataFromServerForSingleCustomerApplication", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<List<RawDataResponseDTO.Table>> getRawDataFromServerForSingleCustomer(String clientId, String userId,
                                                                                          String loanType, String productId) {

        final LiveData<List<RawDataResponseDTO.Table>> data = new MutableLiveData<>();
        try {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            // TODO: **************** ALL HARDCODED VALUES *********************
            String RoleId = "8005";
            String ProjectId = "1";
            int AllSrc = 1;

            final RawDataRequestDTO rawDataRequestDTO = new RawDataRequestDTO();
            rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            RawDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new RawDataRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_RAW_DATA);
            RawDataRequestDTO.SpParametersClass spParametersClass = new RawDataRequestDTO.SpParametersClass();
            spParametersClass.setRoleId(RoleId); // TODO: role id
            spParametersClass.setProjectId(ProjectId); // TODO: project id
            spParametersClass.setProductId(productId); // TODO: product id
            spParametersClass.setAllSrc(AllSrc); // TODO: Allsrc
            spParametersClass.setCustomerIdsCommaSeperated(clientId); // TODO: Client Id
            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<RawDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<RawDataRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            executor.execute(() -> {
                // TODO: Check Master table existing or not
                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(clientId);

                if (masterTable == null) {
                    String baseString = new Gson().toJson(rawDataRequestDTO, RawDataRequestDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).rawDataFromServer(rawDataRequestDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<ResponseBody>() {
                                @Override
                                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            try {
                                                String strResponse = response.body().string();
                                                JSONObject json = new JSONObject(strResponse);
                                                String key = json.keys().next();

                                                String tableJson = json.get(key).toString();
                                                RawDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, RawDataResponseDTO.class);
                                                if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {

                                                    List<RawDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                    if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {

                                                        List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                        for (RawDataResponseDTO.Table table : rawDataResponseDTOList) {
                                                            RawDataFromServerTable rawDataFromServerTable = new RawDataFromServerTable();
                                                            rawDataFromServerTable.setSerialNo(table.getSerialNo());
                                                            if (!TextUtils.isEmpty(table.getWorkFlowName())) {
                                                                rawDataFromServerTable.setWorkFlowName(table.getWorkFlowName());
                                                            }
                                                            if (!TextUtils.isEmpty(table.getCustomerId())) {
                                                                rawDataFromServerTable.setCustomerId(table.getCustomerId());
                                                            }
                                                            if (!TextUtils.isEmpty(table.getCustomerName())) {
                                                                rawDataFromServerTable.setCustomerName(table.getCustomerName());
                                                            }
                                                            if (!TextUtils.isEmpty(table.getREQUESTEDLOANAMOUNT())) {
                                                                rawDataFromServerTable.setREQUESTEDLOANAMOUNT(table.getREQUESTEDLOANAMOUNT());
                                                            }
                                                            if (!TextUtils.isEmpty(table.getCreatedOn())) {
                                                                rawDataFromServerTable.setCreatedOn(table.getCreatedOn());
                                                            }
                                                            if (!TextUtils.isEmpty(table.getRwas())) {
                                                                rawDataFromServerTable.setRwas(table.getRwas());
                                                            }
                                                            if (!TextUtils.isEmpty(String.valueOf(table.getScreenId()))) {
                                                                rawDataFromServerTable.setScreenId(String.valueOf(table.getScreenId()));
                                                            }

                                                            rawDataFromServerTableList.add(rawDataFromServerTable);

                                                        }
                                                        if (rawDataFromServerTableList.size() > 0) {
                                                            dynamicUIDao.deleteAndInsertRawDataFromServer(rawDataFromServerTableList);
                                                        }

                                                        // TODO: Insert Master Table
                                                        MasterTable masterTableToInsert = new MasterTable();
                                                        masterTableToInsert.setClientId(clientId);
                                                        if (!TextUtils.isEmpty(rawDataFromServerTableList.get(0).getCustomerName())) {
                                                            masterTableToInsert.setClientName(rawDataFromServerTableList.get(0).getCustomerName());
                                                        }
                                                        if (!TextUtils.isEmpty(rawDataFromServerTableList.get(0).getREQUESTEDLOANAMOUNT())) {
                                                            masterTableToInsert.setLoan_amount(rawDataFromServerTableList.get(0).getREQUESTEDLOANAMOUNT());
                                                        }

                                                        masterTableToInsert.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                        masterTableToInsert.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                        masterTableToInsert.setFinalStatus(FINAL_STATUS_NEW);
                                                        masterTableToInsert.setSync(false);
                                                        masterTableToInsert.setLoan_type(loanType); // TODO: LOAN TYPE
                                                        masterTableToInsert.setAllDataCaptured(false);
                                                        LogInTable logInTable = dynamicUIDao.getLoginTable(userId);
                                                        if (logInTable != null) {
                                                            masterTableToInsert.setBranchId(logInTable.getBranchID());
                                                            masterTableToInsert.setBranchGSTcode(logInTable.getBranchGSTCode());
                                                        }
                                                        masterTableToInsert.setCreatedBy(userId); // TODO: STAFF ID
                                                        masterTableToInsert.setReviewBy(userId); // TODO: STAFF ID
                                                        String dateTime = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD);
                                                        masterTableToInsert.setCreated_date(TimestampConverter.toDate(dateTime));

                                                        dynamicUIDao.insertAndDeleteMasterTable(masterTableToInsert, clientId);

                                                        // TODO: Sending result ( success )
                                                        ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(rawDataResponseDTO.getTable());
                                                    }
                                                } else {
                                                    // TODO: Sending result
                                                    ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                                // TODO: Sending result
                                                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                                insertLog("getRawDataFromServerForSingleCustomer", ex.getMessage(), "", "", TAG, "", "", "");
                                            }
                                        } else {
                                            // TODO: Sending result
                                            ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                            insertLog("getRawDataFromServerForSingleCustomer", response.message(), "", "", TAG, "", "", "");
                                        }

                                    });
                                }

                                @Override
                                public void onFailure(Call<ResponseBody> call, Throwable t) {
                                    t.printStackTrace();
                                    // TODO: Sending result
                                    ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                                    insertLog("getRawDataFromServerForSingleCustomer", t.getMessage(), "", "", TAG, "", "", "");
                                }
                            });
                } else {
                    // TODO: Sending result
                    ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();

            executor.execute(() -> {
                // TODO: Sending result
                ((MutableLiveData<List<RawDataResponseDTO.Table>>) data).postValue(new ArrayList<>());

                insertLog("getRawDataFromServerForSingleCustomer", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }

        return data;
    }

    public LiveData<List<DynamicUITable>> updateDynamicUITable(List<DynamicUITable> viewParametersList, String screenName) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(screenName) != null);
            if (dataExist) {
                try {
                    dynamicUIDao.updateDynamicUITable(viewParametersList);
                    data.postValue(dynamicUIDao.loadUpdatedDataNew(screenName));

                } catch (Exception ex) {
                    ex.printStackTrace();

                    insertLog("updateDynamicUITable", ex.getMessage(), "", "", TAG, "", "", "");
                }
            }
        });
//        return  dynamicUIDao.loadUpdatedData(screenName);
        return data;
    }

    public LiveData<List<MasterTable>> getMasterTableByUserIdAndLoanType(String userId, String loanType) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<MasterTable> masterTableList = dynamicUIDao.getMasterTableByUserIdAndLoanTypeByTop300(userId, loanType);
                data.postValue(masterTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<LoanTable>> getLoanTableByClientId(String clientId) {
        final MutableLiveData<List<LoanTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<LoanTable> loanTableList = dynamicUIDao.getLoanTableListByClientId(clientId);
                data.postValue(loanTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<LoanTable>> getLoanTableByCenterId(String centerId, CGTTable cgtTable) {
        final MutableLiveData<List<LoanTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtTable != null) {
                    if (cgtTable.isCycleOneCompleted()) {
                        // TODO: All member list based on cycle 2 attendance
                        List<LoanTable> loanTableList = new ArrayList<>();
                        List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT2_OnlyPresent(centerId);
                        if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                            for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                                LoanTable loanTable = dynamicUIDao.getLoanTableByLoanId(cgtAttendanceTable.getClientId(),
                                        cgtAttendanceTable.getLoanId());
                                if (loanTable != null) {
                                    loanTableList.add(loanTable);
                                }
                            }
                        }

                        // TODO: Final Result
                        data.postValue(loanTableList);
                    } else {
                        // TODO: All member list based on cycle 1 attendance
                        List<LoanTable> loanTableList = new ArrayList<>();
                        List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT1_OnlyPresent(centerId);
                        if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                            for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                                LoanTable loanTable = dynamicUIDao.getLoanTableByLoanId(cgtAttendanceTable.getClientId(),
                                        cgtAttendanceTable.getLoanId());
                                if (loanTable != null) {
                                    loanTableList.add(loanTable);
                                }
                            }
                        }

                        // TODO: Final Result
                        data.postValue(loanTableList);
                    }
                } else {
                    // TODO: All clients in the center
                    List<LoanTable> loanTableList = dynamicUIDao.getLoanTableListByCenterId(centerId);
                    data.postValue(loanTableList);
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<MasterTable>> getMasterTableDetailsByCenter(CenterCreationTable centerCreationTable) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (centerCreationTable != null) {
                    List<MasterTable> masterTableList = dynamicUIDao.getMasterTableDetailsByCenter(centerCreationTable.getCreatedBy(),
                            centerCreationTable.getLoan_type(), centerCreationTable.getCenterId());
                    data.postValue(masterTableList);
                } else {
                    data.postValue(new ArrayList<>());
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<LoanTable>> getLoanTableDetailsByCenter(CenterCreationTable centerCreationTable) {
        final MutableLiveData<List<LoanTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (centerCreationTable != null) {
                    List<LoanTable> loanTableList = dynamicUIDao.getLoanTableDetailsByCenter(centerCreationTable.getCreatedBy(),
                            centerCreationTable.getLoan_type(), centerCreationTable.getCenterId(), true);
                    data.postValue(loanTableList);
                } else {
                    data.postValue(new ArrayList<>());
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }


    public LiveData<List<MasterTable>> getMasterTableByCenterId(CGTTable cgtTable) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<MasterTable> masterTableList = dynamicUIDao.getMasterTableByCenterId(cgtTable.getCenterId(),
                        cgtTable.getLoan_type());

                data.postValue(masterTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<MasterTable>> getMasterTableByClientId(String clientId,String loanType) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<MasterTable> masterTableList = dynamicUIDao.getMasterTableByClientId(clientId,
                        loanType);

                data.postValue(masterTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }


    public LiveData<List<CGTTable>> getCGTTableByCenterId(CenterCreationTable centerCreationTable) {
        final MutableLiveData<List<CGTTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableListByCenterId(centerCreationTable.getCenterId(),
                        centerCreationTable.getLoan_type());

                data.postValue(cgtTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }


    public LiveData<List<CGTTable>> getCGTTableForDropOut(CenterCreationTable centerCreationTable) {
        final MutableLiveData<List<CGTTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableForDropOut(centerCreationTable.getCenterId(),
                        centerCreationTable.getLoan_type(), false);

                data.postValue(cgtTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<MasterTable>> getMasterTableByCGTTable(CGTTable cgtTable, String action, String groupName) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<MasterTable> masterTableList = dynamicUIDao.getMasterTableByCenterId(cgtTable.getCenterId(),
                        cgtTable.getLoan_type());

                if (masterTableList != null && masterTableList.size() > 0) {

                    if (!TextUtils.isEmpty(action) && action.equalsIgnoreCase(ACTION_VIEW_GROUP_MEMBERS)) {

                        List<MasterTable> masterTableListFiltered = new ArrayList<>();

                        List<GroupTable> groupTableList = dynamicUIDao.getGroupTableListByGroupName(cgtTable.getCenterId(),
                                cgtTable.getLoan_type(), groupName);

                        if (groupTableList != null && groupTableList.size() > 0) {
                            for (GroupTable groupTable : groupTableList) {
                                for (int i = 0; i < masterTableList.size(); i++) {
                                    if (masterTableList.get(i).getCenterId().equalsIgnoreCase(groupTable.getCenterId())
                                            && masterTableList.get(i).getClientName().equalsIgnoreCase(groupTable.getClientName())) {
                                        masterTableListFiltered.add(masterTableList.get(i));
                                    }
                                }
                            }
                        }

                        data.postValue(masterTableListFiltered);
                    } else if (!TextUtils.isEmpty(action) && action.equalsIgnoreCase(ACTION_VIEW_REMAINING_MEMBERS)) {
                        List<MasterTable> masterTableListFiltered = masterTableList;
                        List<GroupTable> groupTableList = dynamicUIDao.getGroupTableList(cgtTable.getCenterId(), cgtTable.getLoan_type());
                        if (groupTableList != null && groupTableList.size() > 0) {
                            for (GroupTable groupTable : groupTableList) {
                                for (int i = 0; i < masterTableList.size(); i++) {
                                    if (masterTableList.get(i).getCenterId().equalsIgnoreCase(groupTable.getCenterId())
                                            && masterTableList.get(i).getClientName().equalsIgnoreCase(groupTable.getClientName())) {
                                        masterTableListFiltered.remove(i);
                                    }
                                }
                            }
                        }

                        data.postValue(masterTableListFiltered);
                    } else {
                        data.postValue(masterTableList);
                    }
                } else {
                    data.postValue(masterTableList);
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<VillageSurveyTable>> getVillageSurveyTable(String userId, String loanType) {
        final MutableLiveData<List<VillageSurveyTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<VillageSurveyTable> villageSurveyTableList = dynamicUIDao.getVillageSurveyTable(userId, loanType);
                data.postValue(villageSurveyTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<String>> getVillageList(String userId, String loanType) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctVillageNames = dynamicUIDao.getDistinctVillageNamesFromVillageSurveyTable(userId, loanType);
                data.postValue(distinctVillageNames);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<String> updateCallTimeStamp(String clientId) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                String timeStamp = appHelper.getCurrentDateTime(DATE_TIME_FORMAT);
                dynamicUIDao.updateColdCallDataForCallTimeByClientId(clientId, timeStamp);
                data.postValue(SUCCESS_RESPONSE_MESSAGE);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<String>> getAllCenterNamesFromCenterMeetingTable(String userId) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctCenterNames = dynamicUIDao.getAllCenterNamesFromCenterMeetingTable(userId);
                data.postValue(distinctCenterNames);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<String>> getAllCenterNamesFromCenterMeetingTableByCenterMeetingDate(String userId, String centerMeetingDate) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctCenterNames = dynamicUIDao.getAllCenterNamesFromCenterMeetingTableByCenterMeetingDate(userId, centerMeetingDate);
                data.postValue(distinctCenterNames);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<String>> getAllCenterNamesFromFetchOtherDayCMTableByUserId(String userId) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctCenterNames = dynamicUIDao.getAllCenterNamesFromFetchOtherDayCMTableByUserId(userId);
                data.postValue(distinctCenterNames);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<String>> getGroupsFromCenterMeetingTable(String userId, String centerName) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctGroups = dynamicUIDao.getDistinctGroupsFromCenterMeetingTable(userId, centerName);
                data.postValue(distinctGroups);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<String>> getHeadersFromEligibilityTable() {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctProductCodes = dynamicUIDao.getDistinctProductCodesFromEligibilityTable();
                data.postValue(distinctProductCodes);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<EligibilityByGroupDTO>> getMembersFromCenterMeetingTable(String userId, String centerName) {
        final MutableLiveData<List<EligibilityByGroupDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<EligibilityByGroupDTO> eligibilityByGroupDTOList = new ArrayList<>();
                List<List<EligibilityTable>> listOfEligibilityProductList = new ArrayList<>();

                List<String> clientIdList = dynamicUIDao.getDistinctClientIdsFromCenterMeetingTable(userId, centerName);

                if (clientIdList != null && clientIdList.size() > 0) {
                    for (String clientId : clientIdList) {
                        List<EligibilityTable> eligibilityTableList = dynamicUIDao.getEligibilityTableList(clientId);
                        if (eligibilityTableList != null && eligibilityTableList.size() > 0) {
                            listOfEligibilityProductList.add(eligibilityTableList);

                        }
                    }

                    if (listOfEligibilityProductList.size() > 0) {
                        for (List<EligibilityTable> eligibilityTableList : listOfEligibilityProductList) {
                            if (eligibilityTableList.size() > 0) {
                                String groupName = dynamicUIDao.getCenterMeetingGroupNameByClientId(eligibilityTableList.get(0).getCustomerId());
                                if (!TextUtils.isEmpty(groupName)) {
                                    if (eligibilityByGroupDTOList.size() > 0) {
                                        boolean isGroupExist = false;
                                        for (EligibilityByGroupDTO eligibilityByGroupDTO : eligibilityByGroupDTOList) {
                                            if (eligibilityByGroupDTO.getGroupName().equalsIgnoreCase(groupName)) {
                                                // TODO: Same group
                                                List<List<EligibilityTable>> listOfEligibilityProductListTemp =
                                                        eligibilityByGroupDTO.getListOfEligibilityProductList();
                                                listOfEligibilityProductListTemp.add(eligibilityTableList);

                                                eligibilityByGroupDTO.setListOfEligibilityProductList(listOfEligibilityProductListTemp);

                                                isGroupExist = true;
                                                break;
                                            }
                                        }

                                        if (!isGroupExist) {

                                            EligibilityByGroupDTO eligibilityByGroupDTO = new EligibilityByGroupDTO();
                                            eligibilityByGroupDTO.setGroupName(groupName);
                                            List<List<EligibilityTable>> listOfEligibilityProductListTemp = new ArrayList<>();
                                            listOfEligibilityProductListTemp.add(eligibilityTableList);
                                            eligibilityByGroupDTO.setListOfEligibilityProductList(listOfEligibilityProductListTemp);

                                            eligibilityByGroupDTOList.add(eligibilityByGroupDTO);
                                        }
                                    } else {
                                        // TODO: New group
                                        EligibilityByGroupDTO eligibilityByGroupDTO = new EligibilityByGroupDTO();
                                        eligibilityByGroupDTO.setGroupName(groupName);
                                        List<List<EligibilityTable>> listOfEligibilityProductListTemp = new ArrayList<>();
                                        listOfEligibilityProductListTemp.add(eligibilityTableList);
                                        eligibilityByGroupDTO.setListOfEligibilityProductList(listOfEligibilityProductListTemp);

                                        eligibilityByGroupDTOList.add(eligibilityByGroupDTO);
                                    }
                                }
                            }
                        }
                    }

                }

                data.postValue(eligibilityByGroupDTOList);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<CenterMeetingAttendanceDTO>> getMembersFromCenterMeetingTableForAttendance(String userId, String centerName) {
        final MutableLiveData<List<CenterMeetingAttendanceDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<CenterMeetingAttendanceDTO> centerMeetingAttendanceDTOList = new ArrayList<>();
                List<String> groupList = dynamicUIDao.getDistinctGroupsFromCenterMeetingTable(userId, centerName);

                if (groupList != null && groupList.size() > 0) {
                    for (String groupName : groupList) {
                        List<CenterMeetingTable> centerMeetingTableList = dynamicUIDao.getMembersFromCenterMeetingTableForAttendance(groupName);
                        if (centerMeetingTableList != null && centerMeetingTableList.size() > 0) {
                            List<CenterMeetingAttendanceTable> centerMeetingAttendanceTableList = new ArrayList<>();
                            for (CenterMeetingTable centerMeetingTable : centerMeetingTableList) {

                                CenterMeetingAttendanceTable centerMeetingAttendanceTableFromDB = dynamicUIDao.
                                        getCenterMeetingAttendanceTableByClientId(centerMeetingTable.getCustomerId());

                                if (centerMeetingAttendanceTableFromDB != null) {
                                    // TODO: Already Existing Customer
                                    centerMeetingAttendanceTableFromDB.setId(0);

                                    centerMeetingAttendanceTableList.add(centerMeetingAttendanceTableFromDB);
                                } else {
                                    // TODO: New Customer
                                    CenterMeetingAttendanceTable centerMeetingAttendanceTable = new CenterMeetingAttendanceTable();
                                    Date dateTime = TimestampConverter.toDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_HH_MM_SS_SSS2));
                                    centerMeetingAttendanceTable.setCustomerID(centerMeetingTable.getCustomerId());
                                    centerMeetingAttendanceTable.setCustomerName(centerMeetingTable.getCustomerName());
                                    centerMeetingAttendanceTable.setCenterId(centerMeetingTable.getCenterId());
                                    centerMeetingAttendanceTable.setCenterName(centerMeetingTable.getCenterName());
                                    centerMeetingAttendanceTable.setAttentance(false);
                                    centerMeetingAttendanceTable.setDateTime(dateTime);
                                    centerMeetingAttendanceTable.setSync(false);
                                    centerMeetingAttendanceTable.setSyncDateTime(dateTime);
                                    centerMeetingAttendanceTable.setStaffId(userId);

                                    String timeStamp = new SimpleDateFormat("yyMMddHHmmssSSS",
                                            Locale.getDefault()).format(new Date());
                                    String EMP_LAST_5_DIGIT = userId.substring(3);
                                    String REF_ID = EMP_LAST_5_DIGIT + timeStamp;
                                    centerMeetingAttendanceTable.setRefId(REF_ID);

                                    centerMeetingAttendanceTableList.add(centerMeetingAttendanceTable);
                                }
                            }

                            CenterMeetingAttendanceDTO centerMeetingAttendanceDTO = new CenterMeetingAttendanceDTO();
                            centerMeetingAttendanceDTO.setGroupName(groupName);
                            centerMeetingAttendanceDTO.setCenterMeetingAttendanceTableList(centerMeetingAttendanceTableList);
                            centerMeetingAttendanceDTOList.add(centerMeetingAttendanceDTO);

                        }
                    }

                }

                data.postValue(centerMeetingAttendanceDTOList);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<CMPhotoTable> getPhotoFromCMCaptionPhotoTable(String userId, String centerName) {
        final MutableLiveData<CMPhotoTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                CMPhotoTable cmCaptionPhotoTableDB = dynamicUIDao.getTopCMCaptionData(centerName);

                data.postValue(cmCaptionPhotoTableDB);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(null);
            }
        });
        return data;
    }

    public LiveData<List<String>> getGroupListForCollection(String userId, String centerName) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> groupList = dynamicUIDao.getDistinctGroupsFromCenterMeetingTable(userId, centerName);

                data.postValue(groupList);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

//    public LiveData<List<String>> getGroupListForCollectionByCollectionType(String userId, String centerName, String collectionType) {
//        final MutableLiveData<List<String>> data = new MutableLiveData<>();
//        executor.execute(() -> {
//            try {
//                List<String> groupList = dynamicUIDao.getDistinctGroupsFromCenterMeetingTableByCollectionType(userId, centerName, collectionType);
//                data.postValue(groupList);
//
//            } catch (Exception ex) {
//                ex.printStackTrace();
//
//                data.postValue(new ArrayList<>());
//            }
//        });
//        return data;
//    }

    public LiveData<List<String>> getGroupListForCollectionByIsDigitalPayment(String userId, String centerName, boolean isDigitalPayment) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> groupList = dynamicUIDao.getDistinctGroupsFromCMCollectionTableByCollectionType(userId, centerName, isDigitalPayment);
                data.postValue(groupList);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<String> getCMDateFromCMTableByCenterName(String centerName) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                String centerMeetingDate = dynamicUIDao.getCenterMeetingDateFromCenterMeetingTableByCenterName(centerName);
                data.postValue(centerMeetingDate);
            } catch (Exception ex) {
                ex.printStackTrace();
                data.postValue(null);
            }
        });
        return data;
    }

    public LiveData<List<TodayCollectionScheduledTable>> getTodayCollectionScheduledList(String userId, Date cmDate) {
        final MutableLiveData<List<TodayCollectionScheduledTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<TodayCollectionScheduledTable> todayCollectionScheduledTableList = new ArrayList<>();
                List<String> distinctCenterNames = dynamicUIDao.getAllCenterNamesFromCenterMeetingTable(userId);

                if (distinctCenterNames != null && distinctCenterNames.size() > 0) {

                    for (String centerName : distinctCenterNames) {
                        TodayCollectionScheduledTable todayCollectionScheduledTable = new TodayCollectionScheduledTable();

                        int centerDue = dynamicUIDao.getTotalDueByCenterNameFromCenterMeetingTable(centerName);
                        String centerMeetingDate = dynamicUIDao.getCenterMeetingDateFromCenterMeetingTableByCenterName(centerName);
                        String centerMeetingTime = dynamicUIDao.getCenterMeetingTimeFromCenterMeetingTableByCenterName(centerName);
                        List<CenterMeetingTable> centerMeetingTableList = dynamicUIDao.getDistinctMembersFromCMTableByCenter(centerName);

                        boolean isAllSynced = false;
                        boolean isAllSaved = false;

                        List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCenterName(centerName);
                        if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                            for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                                if (centerMeetingCollectionTable.isSync()) {
                                    isAllSynced = true;
                                    isAllSaved = true;
                                } else {
                                    isAllSynced = false;
                                    isAllSaved = true;
                                    break;
                                }
                            }
                        }

                        todayCollectionScheduledTable.setCenterName(centerName);
                        todayCollectionScheduledTable.setTotal_Due(centerDue);
                        todayCollectionScheduledTable.setCenterMeetingDate(centerMeetingDate);
                        todayCollectionScheduledTable.setCenterMeetingTime(centerMeetingTime);
                        if (centerMeetingTableList != null && centerMeetingTableList.size() > 0) {
                            todayCollectionScheduledTable.setMembersCount(String.valueOf(centerMeetingTableList.size()));
                        }
                        if (isAllSynced) {
                            todayCollectionScheduledTable.setSync(true);
                            todayCollectionScheduledTable.setStatus("Uploaded");
                            int centerTotalCollection = dynamicUIDao.getTotalCollectionByCenterName(centerName);

                            int centerTotalSavingCollection = 0;
                            List<CenterMeetingCollectionTable> centerMeetingCollectionTableListByCustomerName = dynamicUIDao.getCenterMeetingCollectionTableListByCenterNameAndCustomerName(centerName);
                            if (centerMeetingCollectionTableListByCustomerName != null && centerMeetingCollectionTableListByCustomerName.size() > 0) {
                                for (CenterMeetingCollectionTable centerMeetingCollectionTableCustomer : centerMeetingCollectionTableListByCustomerName) {
                                    if (centerMeetingCollectionTableCustomer.isConfirm() && centerMeetingCollectionTableCustomer.isSavingsConfirm()) {
                                        centerTotalSavingCollection = centerTotalSavingCollection + centerMeetingCollectionTableCustomer.getSavingsCollection();
                                    }
                                }
                            }
                            centerTotalCollection = centerTotalCollection + centerTotalSavingCollection;
                            todayCollectionScheduledTable.setCollectedAmount(centerTotalCollection);

                        } else {
                            todayCollectionScheduledTable.setSync(false);
                            if (isAllSaved) {
                                todayCollectionScheduledTable.setStatus("Saved");
                            } else {
                                todayCollectionScheduledTable.setStatus("Pending");
                            }
                            int centerTotalCollection = dynamicUIDao.getTotalCollectionByCenterName(centerName);

                            int centerTotalSavingCollection = 0;
                            List<CenterMeetingCollectionTable> centerMeetingCollectionTableListByCustomerName = dynamicUIDao.getCenterMeetingCollectionTableListByCenterNameAndCustomerName(centerName);
                            if (centerMeetingCollectionTableListByCustomerName != null && centerMeetingCollectionTableListByCustomerName.size() > 0) {
                                for (CenterMeetingCollectionTable centerMeetingCollectionTableCustomer : centerMeetingCollectionTableListByCustomerName) {
                                    if (centerMeetingCollectionTableCustomer.isConfirm() && centerMeetingCollectionTableCustomer.isSavingsConfirm()) {
                                        centerTotalSavingCollection = centerTotalSavingCollection + centerMeetingCollectionTableCustomer.getSavingsCollection();
                                    }
                                }
                            }
                            centerTotalCollection = centerTotalCollection + centerTotalSavingCollection;
                            todayCollectionScheduledTable.setCollectedAmount(centerTotalCollection);
//                            todayCollectionScheduledTable.setCollectedAmount(0);
                        }

                        todayCollectionScheduledTableList.add(todayCollectionScheduledTable);

                    }
                }
                data.postValue(todayCollectionScheduledTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<CashCollectionSummaryDTO> getCashCollectionSummaryList(String userId, Date cmDate) {
        final MutableLiveData<CashCollectionSummaryDTO> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                CashCollectionSummaryDTO cashCollectionSummaryDTO = new CashCollectionSummaryDTO();
                List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.
                        getDistinctCenterMeetingCollectionTableListByIsSaved(userId, true);
//                        getDistinctCenterMeetingCollectionTableListByCMDateWithIsSaved(cmDate,true);
//                        getDistinctCenterMeetingCollectionTableListByCMDate(cmDate);

                if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
//                    int overAllTotalDueCollection = dynamicUIDao.getTotalDueByCMDate(cmDate);
//                    int overAllTotalCashCollection = dynamicUIDao.getTotalCashCollectionByCMDate(cmDate);
//                    int overAllTotalDigitalCollection = dynamicUIDao.getTotalDigitalCollectionByCMDate(cmDate);
//                    int overAllTotalSavingCollection = dynamicUIDao.getTotalSavingCollectionByCMDate(cmDate);

                    int overAllTotalDueCollection = dynamicUIDao.getTotalDueByIsSaved(userId);
//                    int overAllTotalCashCollection = dynamicUIDao.getTotalCashCollectionByIsSaved();
                    int overAllTotalCashCollection = dynamicUIDao.getTotalCashCollectionByIsSavedAndConfirm(userId);
                    int overAllTotalCashCollectionSyncFalse = dynamicUIDao.getTotalCashCollectionByIsSavedAndConfirmSyncFalse(userId);
                    int overAllTotalDigitalCollection = dynamicUIDao.getTotalDigitalCollectionByIsSaved(userId);
                    int overAllTotalSavingCollection = 0;
                    int overAllTotalSavingCollectionSyncFalse = 0;
                    for (CenterMeetingCollectionTable centerMeetingCollectionTableFromDB : centerMeetingCollectionTableList) {
                        List<CenterMeetingCollectionTable> centerMeetingCollectionTableListByCustomerName = dynamicUIDao.getCenterMeetingCollectionTableListByCenterNameAndCustomerName(centerMeetingCollectionTableFromDB.getCenterName());
                        if (centerMeetingCollectionTableListByCustomerName != null && centerMeetingCollectionTableListByCustomerName.size() > 0) {
                            for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableListByCustomerName) {
                                if (centerMeetingCollectionTable.isConfirm() && centerMeetingCollectionTable.isSavingsConfirm()) {
                                    overAllTotalSavingCollection = overAllTotalSavingCollection + centerMeetingCollectionTable.getSavingsCollection();
                                    if (!centerMeetingCollectionTable.isSync()) {
                                        overAllTotalSavingCollectionSyncFalse = overAllTotalSavingCollectionSyncFalse + centerMeetingCollectionTable.getSavingsCollection();
                                    }
                                }
                            }
                        }
                    }
//                    int overAllTotalSavingCollection = dynamicUIDao.getTotalSavingCollectionByIsSaved();

//                    overAllTotalCashCollection = overAllTotalCashCollection + overAllTotalSavingCollection;
                    overAllTotalCashCollectionSyncFalse = overAllTotalCashCollectionSyncFalse + overAllTotalSavingCollectionSyncFalse;

//                    int overAllTotalCollection = overAllTotalCashCollection + overAllTotalDigitalCollection;
//                    int overAllTotalCollection = overAllTotalCashCollection ;
                    int overAllTotalCollection = overAllTotalCashCollection + overAllTotalSavingCollection;
                    int overAllTotalCollectionSyncFalse = overAllTotalCashCollectionSyncFalse;

                    cashCollectionSummaryDTO.setCollectionDate(cmDate);
                    cashCollectionSummaryDTO.setOverAllTotalDueCollection(overAllTotalDueCollection);
                    cashCollectionSummaryDTO.setOverAllTotalCashCollection(overAllTotalCashCollection);
                    cashCollectionSummaryDTO.setOverAllTotalSavingsCollection(overAllTotalSavingCollection);
                    cashCollectionSummaryDTO.setOverAllTotalDigitalCollection(overAllTotalDigitalCollection);
                    cashCollectionSummaryDTO.setOverAllTotalCollection(overAllTotalCollection);
                    cashCollectionSummaryDTO.setOverAllTotalCollectionSyncFalse(overAllTotalCollectionSyncFalse);

                    List<CashCollectionSummaryDTO.IndividualCenterCollection> individualCenterCollectionList = new ArrayList<>();
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                        CashCollectionSummaryDTO.IndividualCenterCollection individualCenterCollection = new CashCollectionSummaryDTO.IndividualCenterCollection();
                        CashCollectionSummaryTable cashCollectionSummaryTable = new CashCollectionSummaryTable();

                        String centerName = centerMeetingCollectionTable.getCenterName();
                        individualCenterCollection.setCenterName(centerName);
                        individualCenterCollection.setCollectionDate(cmDate);

                        int centerDue = dynamicUIDao.getTotalDueByCenterName(centerName);
                        int centerCashCollection = dynamicUIDao.getTotalCashCollectionByCenterName(centerName);
                        int centerDigitalCollection = dynamicUIDao.getTotalDigitalCollectionByCenterName(centerName);
//                        int centerTotalCollection = dynamicUIDao.getTotalCollectionByCenterName(centerName);
                        int centerTotalSavingCollection = 0;
                        List<CenterMeetingCollectionTable> centerMeetingCollectionTableListByCustomerName = dynamicUIDao.getCenterMeetingCollectionTableListByCenterNameAndCustomerName(centerName);
                        if (centerMeetingCollectionTableListByCustomerName != null && centerMeetingCollectionTableListByCustomerName.size() > 0) {
                            for (CenterMeetingCollectionTable centerMeetingCollectionTableCustomer : centerMeetingCollectionTableListByCustomerName) {
                                if (centerMeetingCollectionTableCustomer.isConfirm() && centerMeetingCollectionTableCustomer.isSavingsConfirm()) {
                                    centerTotalSavingCollection = centerTotalSavingCollection + centerMeetingCollectionTableCustomer.getSavingsCollection();
                                }
                            }
                        }
//                        int centerTotalSavingCollection = dynamicUIDao.getTotalSavingCollectionByCenterName(centerName);
//                        centerCashCollection = centerCashCollection + centerTotalSavingCollection;
//                        int centerTotalCollection = centerCashCollection + centerDigitalCollection;
//                        int centerTotalCollection = centerCashCollection ;
                        int centerTotalCollection = centerCashCollection + centerTotalSavingCollection;
                        individualCenterCollection.setCenterDue(centerDue);
                        individualCenterCollection.setCenterCashCollection(centerCashCollection);
                        individualCenterCollection.setCenterSavingsCollection(centerTotalSavingCollection);
                        individualCenterCollection.setCenterDigitalCollection(centerDigitalCollection);
                        individualCenterCollection.setCenterTotalCollection(centerTotalCollection);

                        cashCollectionSummaryTable.setCenterName(centerName);
                        cashCollectionSummaryTable.setStaffId(userId);
                        cashCollectionSummaryTable.setCollectionDate(cmDate);
                        cashCollectionSummaryTable.setCenterDue(centerDue);
                        cashCollectionSummaryTable.setCashCollection(centerCashCollection);
                        cashCollectionSummaryTable.setSavingsCollection(centerTotalSavingCollection);
                        cashCollectionSummaryTable.setDigitalCollection(centerDigitalCollection);
                        cashCollectionSummaryTable.setTotalCollection(centerTotalCollection);

                        String timeStamp = new SimpleDateFormat("yyMMddHHmmssSSS",
                                Locale.getDefault()).format(new Date());
                        String EMP_LAST_5_DIGIT = userId.substring(3);
                        String REF_ID = EMP_LAST_5_DIGIT + timeStamp;
                        cashCollectionSummaryTable.setRefId(REF_ID);

                        CashCollectionSummaryTable cashCollectionSummaryTableFromDB = dynamicUIDao.
                                getCenterMeetingCashCollectionTableByCenterName(centerName, cmDate);


                        if (cashCollectionSummaryTableFromDB != null) {
                            individualCenterCollection.setCenterConfirm(cashCollectionSummaryTableFromDB.isConfirm());
                            individualCenterCollection.setCenterSync(cashCollectionSummaryTableFromDB.isSync());
                            // TODO: update  cashCollectionSummaryTable when total collection not equal
                            if (cashCollectionSummaryTableFromDB.getTotalCollection() != cashCollectionSummaryTable.getTotalCollection()) {
                                cashCollectionSummaryTable.setId(cashCollectionSummaryTableFromDB.getId());
                                cashCollectionSummaryTable.setSync(false);
                                dynamicUIDao.updateCenterMeetingCashCollectionTable(cashCollectionSummaryTable);
                            }
                        } else {
                            // TODO: Insert into center meeting cash collection table
                            dynamicUIDao.insertCenterMeetingCashCollectionTable(cashCollectionSummaryTable);
                        }

                        individualCenterCollectionList.add(individualCenterCollection);

                    }

                    cashCollectionSummaryDTO.setIndividualCenterCollectionList(individualCenterCollectionList);
                    // TODO: validation to check uploaded or not
                    boolean isSyncDone = dynamicUIDao.checkCMCollectionSync(false);
                    if (isSyncDone) {
                        cashCollectionSummaryDTO.setUpload(false);
                    } else {
                        cashCollectionSummaryDTO.setUpload(true);
                    }
//                    List<CashCollectionSummaryTable> cashCollectionSummaryTableList = dynamicUIDao.getCashCollectionSummaryTableForUploadedOrNot();
//                    if (cashCollectionSummaryTableList != null && cashCollectionSummaryTableList.size() > 0) {
//                        boolean isSyncDone = dynamicUIDao.checkCollectionSummarySync(false);
//                        if (isSyncDone) {
//                            cashCollectionSummaryDTO.setUpload(false);
//                        } else {
//                            cashCollectionSummaryDTO.setUpload(true);
//                        }
//                    } else {
//                        cashCollectionSummaryDTO.setUpload(false);
//                    }
                }

                data.postValue(cashCollectionSummaryDTO);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new CashCollectionSummaryDTO());
            }
        });
        return data;
    }


    public LiveData<CashCollectionSummaryDTO> getCashCollectionSummaryListByCollectionType(String userId, Date cmDate, String collectionType, String centerNameForUploadedOrNot) {
        final MutableLiveData<CashCollectionSummaryDTO> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                CashCollectionSummaryDTO cashCollectionSummaryDTO = new CashCollectionSummaryDTO();
                List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.
                        getDistinctCenterMeetingCollectionTableListByCMDate(cmDate);
//                        getDistinctCenterMeetingCollectionTableListByCMDateAndCollectionType(cmDate, collectionType);

                if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                    int overAllTotalDueCollection = dynamicUIDao.getTotalDueByCMDate(cmDate);
                    int overAllTotalCashCollection = dynamicUIDao.getTotalCashCollectionByCMDate(cmDate);
                    int overAllTotalDigitalCollection = dynamicUIDao.getTotalDigitalCollectionByCMDate(cmDate);
                    int overAllTotalCollection = dynamicUIDao.getTotalCollectionByCMDate(cmDate);
                    List<CashCollectionSummaryTable> cashCollectionSummaryTableList = dynamicUIDao.getCashCollectionSummaryTableForUploadedOrNotByCenterName(centerNameForUploadedOrNot, cmDate);
                    if (cashCollectionSummaryTableList != null && cashCollectionSummaryTableList.size() > 0) {
                        boolean isSyncDone = dynamicUIDao.checkCollectionSummarySync(false);
                        if (isSyncDone) {
                            cashCollectionSummaryDTO.setUpload(false);
                        } else {
                            cashCollectionSummaryDTO.setUpload(true);
                        }
                    } else {
                        cashCollectionSummaryDTO.setUpload(false);
                    }
                    cashCollectionSummaryDTO.setCollectionDate(cmDate);
                    cashCollectionSummaryDTO.setOverAllTotalDueCollection(overAllTotalDueCollection);
                    cashCollectionSummaryDTO.setOverAllTotalCashCollection(overAllTotalCashCollection);
                    cashCollectionSummaryDTO.setOverAllTotalDigitalCollection(overAllTotalDigitalCollection);
                    cashCollectionSummaryDTO.setOverAllTotalCollection(overAllTotalCollection);

                    List<CashCollectionSummaryDTO.IndividualCenterCollection> individualCenterCollectionList = new ArrayList<>();
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                        CashCollectionSummaryDTO.IndividualCenterCollection individualCenterCollection = new CashCollectionSummaryDTO.IndividualCenterCollection();
                        CashCollectionSummaryTable cashCollectionSummaryTable = new CashCollectionSummaryTable();

                        String centerName = centerMeetingCollectionTable.getCenterName();
                        individualCenterCollection.setCenterName(centerName);
                        individualCenterCollection.setCollectionDate(cmDate);

                        int centerDue = dynamicUIDao.getTotalDueByCenterName(centerName);
                        int centerCashCollection = dynamicUIDao.getTotalCashCollectionByCenterName(centerName);
                        int centerDigitalCollection = dynamicUIDao.getTotalDigitalCollectionByCenterName(centerName);
                        int centerTotalCollection = dynamicUIDao.getTotalCollectionByCenterName(centerName);
                        individualCenterCollection.setCenterDue(centerDue);
                        individualCenterCollection.setCenterCashCollection(centerCashCollection);
                        individualCenterCollection.setCenterDigitalCollection(centerDigitalCollection);
                        individualCenterCollection.setCenterTotalCollection(centerTotalCollection);

                        cashCollectionSummaryTable.setCenterName(centerName);
                        cashCollectionSummaryTable.setStaffId(userId);
                        cashCollectionSummaryTable.setCollectionDate(cmDate);
                        cashCollectionSummaryTable.setCenterDue(centerDue);
                        cashCollectionSummaryTable.setCashCollection(centerCashCollection);
                        cashCollectionSummaryTable.setDigitalCollection(centerDigitalCollection);
                        cashCollectionSummaryTable.setTotalCollection(centerTotalCollection);

                        String timeStamp = new SimpleDateFormat("yyMMddHHmmssSSS",
                                Locale.getDefault()).format(new Date());
                        String EMP_LAST_5_DIGIT = userId.substring(3);
                        String REF_ID = EMP_LAST_5_DIGIT + timeStamp;
                        cashCollectionSummaryTable.setRefId(REF_ID);

                        CashCollectionSummaryTable cashCollectionSummaryTableFromDB = dynamicUIDao.
                                getCenterMeetingCashCollectionTableByCenterName(centerName, cmDate);


                        if (cashCollectionSummaryTableFromDB != null) {
                            individualCenterCollection.setCenterConfirm(cashCollectionSummaryTableFromDB.isConfirm());
                        } else {
                            // TODO: Insert into center meeting cash collection table
                            dynamicUIDao.insertCenterMeetingCashCollectionTable(cashCollectionSummaryTable);
                        }

                        individualCenterCollectionList.add(individualCenterCollection);

                    }

                    cashCollectionSummaryDTO.setIndividualCenterCollectionList(individualCenterCollectionList);
                }

                data.postValue(cashCollectionSummaryDTO);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new CashCollectionSummaryDTO());
            }
        });
        return data;
    }


    public LiveData<CashDenominationTable> getCashDenominationTable(String userId, Date cmDate) {
        final MutableLiveData<CashDenominationTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {

                CashDenominationTable cashDenominationTable = dynamicUIDao.getCashDenominationTable(userId, cmDate);

                data.postValue(cashDenominationTable);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(null);
            }
        });
        return data;
    }

    public LiveData<List<EMIDetailsDTO>> getEMIDetailsForCollection(String customerId) {
        final MutableLiveData<List<EMIDetailsDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {

                List<EMIDetailsDTO> emiDetailsDTOList = new ArrayList<>();

                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getCenterMeetingCollectionTableList(customerId);

                if (centerMeetingCollectionTableListFromDB != null && centerMeetingCollectionTableListFromDB.size() > 0) {
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableListFromDB) {

                        EMIDetailsDTO emiDetailsDTO = new EMIDetailsDTO();
                        emiDetailsDTO.setLAN(centerMeetingCollectionTable.getLoanID());
                        emiDetailsDTO.setEMI(centerMeetingCollectionTable.getEMI());
                        emiDetailsDTO.setTotalDue(centerMeetingCollectionTable.getTotalDue());
//                        emiDetailsDTO.setCollection(centerMeetingCollectionTable.getCollectedAmount());
                        emiDetailsDTO.setCollection(centerMeetingCollectionTable.getCashCollectedAmount());
                        emiDetailsDTO.setCustomerId(centerMeetingCollectionTable.getCustomerId());
                        emiDetailsDTO.setCustomerName(centerMeetingCollectionTable.getCustomerName());
                        emiDetailsDTO.setMemberRelationName(centerMeetingCollectionTable.getMemberRelationName());
                        emiDetailsDTO.setArrearReason(centerMeetingCollectionTable.getReason());
                        // TODO: set payment staus and sms trigger for digital collection
                        emiDetailsDTO.setSmsTriggered(centerMeetingCollectionTable.isSmsTriggered());
                        emiDetailsDTO.setPaymentStatus(centerMeetingCollectionTable.isPaymentStatus());
                        emiDetailsDTO.setPTPDate(centerMeetingCollectionTable.getPTPDate());
                        emiDetailsDTO.setPaidByOtherMember(centerMeetingCollectionTable.isPaidByOtherMember());

                        CenterMeetingTable centerMeetingTable = dynamicUIDao.getCenterMeetingTableByLoanId(centerMeetingCollectionTable.getLoanID());
                        if (centerMeetingTable != null) {
                            emiDetailsDTO.setProductCode(centerMeetingTable.getProduct());
                            emiDetailsDTO.setCurrent_Installment(centerMeetingTable.getCurrent_Installment());
                            emiDetailsDTO.setTotal_Installment(centerMeetingTable.getTotal_Installment());
                        }

                        emiDetailsDTOList.add(emiDetailsDTO);
                    }
                }

                data.postValue(emiDetailsDTOList);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<EMIDetailsDTO>> getEMIDetailsForDigitalCollection(String customerId) {
        final MutableLiveData<List<EMIDetailsDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {

                List<EMIDetailsDTO> emiDetailsDTOList = new ArrayList<>();

                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getCenterMeetingCollectionTableList(customerId);

                if (centerMeetingCollectionTableListFromDB != null && centerMeetingCollectionTableListFromDB.size() > 0) {
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableListFromDB) {

                        EMIDetailsDTO emiDetailsDTO = new EMIDetailsDTO();
                        emiDetailsDTO.setLAN(centerMeetingCollectionTable.getLoanID());
                        emiDetailsDTO.setEMI(centerMeetingCollectionTable.getEMI());
                        emiDetailsDTO.setTotalDue(centerMeetingCollectionTable.getTotalDue());
                        emiDetailsDTO.setCollection(centerMeetingCollectionTable.getDigitalCollectedAmount());
                        emiDetailsDTO.setCustomerId(centerMeetingCollectionTable.getCustomerId());
                        emiDetailsDTO.setCustomerName(centerMeetingCollectionTable.getCustomerName());
                        emiDetailsDTO.setMemberRelationName(centerMeetingCollectionTable.getMemberRelationName());
                        emiDetailsDTO.setArrearReason(centerMeetingCollectionTable.getReason());
                        // TODO: set payment staus and sms trigger for digital collection
                        emiDetailsDTO.setSmsTriggered(centerMeetingCollectionTable.isSmsTriggered());
                        emiDetailsDTO.setPaymentStatus(centerMeetingCollectionTable.isPaymentStatus());

                        CenterMeetingTable centerMeetingTable = dynamicUIDao.getCenterMeetingTableByLoanId(centerMeetingCollectionTable.getLoanID());
                        if (centerMeetingTable != null) {
                            emiDetailsDTO.setProductCode(centerMeetingTable.getProduct());
                            emiDetailsDTO.setCurrent_Installment(centerMeetingTable.getCurrent_Installment());
                            emiDetailsDTO.setTotal_Installment(centerMeetingTable.getTotal_Installment());
                        }

                        emiDetailsDTOList.add(emiDetailsDTO);
                    }
                }

                data.postValue(emiDetailsDTOList);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<CenterMeetingCollectionTable>> getMembersFromCenterMeetingTableForCollectionGroupWise(String groupName, String collectionType) {
        final MutableLiveData<List<CenterMeetingCollectionTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {

                List<CenterMeetingTable> centerMeetingTableList = dynamicUIDao.getMembersFromCenterMeetingTableForCollection(groupName);
//                List<CenterMeetingTable> centerMeetingTableList = dynamicUIDao.getMembersFromCenterMeetingTableForCollectionByCollectionType(groupName, collectionType);
                if (centerMeetingTableList != null && centerMeetingTableList.size() > 0) {
                    for (CenterMeetingTable centerMeetingTable : centerMeetingTableList) {
                        CenterMeetingCollectionTable centerMeetingCollectionTableFromDB = dynamicUIDao.getCenterMeetingCollectionTableByLoanId(centerMeetingTable.getLoanAccountNumber());
                        if (centerMeetingCollectionTableFromDB == null) {
//                             TODO: New Loan
                            CenterMeetingCollectionTable centerMeetingCollectionTable = new CenterMeetingCollectionTable();
                            Date dateTime = DateTimeConverter.toDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_HH_MM_SS_SSS2));
                            centerMeetingCollectionTable.setLoanID(centerMeetingTable.getLoanAccountNumber());
                            centerMeetingCollectionTable.setCustomerId(centerMeetingTable.getCustomerId());
                            centerMeetingCollectionTable.setCustomerName(centerMeetingTable.getCustomerName());
                            centerMeetingCollectionTable.setCenterId(centerMeetingTable.getCenterId());
                            centerMeetingCollectionTable.setCenterName(centerMeetingTable.getCenterName());
                            centerMeetingCollectionTable.setGroupId(centerMeetingTable.getGroupId());
                            centerMeetingCollectionTable.setGroupName(centerMeetingTable.getGroupName());
                            centerMeetingCollectionTable.setEMI(centerMeetingTable.getEMI_Amount());
                            centerMeetingCollectionTable.setTotalDue(centerMeetingTable.getTotal_Due());
                            centerMeetingCollectionTable.setSavingsCollection(centerMeetingTable.getSavingsCollection());
                            centerMeetingCollectionTable.setCollectionType(centerMeetingTable.getCollectionType());
                            int totalCollectedAmt = centerMeetingTable.getTotal_Due();
                            centerMeetingCollectionTable.setCollectedAmount(totalCollectedAmt);
                            centerMeetingCollectionTable.setCashCollectedAmount(totalCollectedAmt);
//                            centerMeetingCollectionTable.setDigitalCollectedAmount(totalCollectedAmt);
                            centerMeetingCollectionTable.setDigitalPayment(false);
                            centerMeetingCollectionTable.setCollectionDateTime(dateTime);

                            // TODO: CM Date
//                            centerMeetingCollectionTable.setCMDate(centerMeetingCollectionTableFromDB.getCMDate());
//                            String cmDateFromCalendar = DUMMY_CENTER_MEETING_DATE; // TODO: Hardcoded date
//                            Date cmDate = TimestampConverter.toDate(cmDateFromCalendar);
//                            Date cmDate = TimestampConverter.toDate(centerMeetingTable.getCenterMeetingDate());
                            Date cmDate = TimestampConverter.toDate(appHelper.convertDateToGivenDateFormat(centerMeetingTable.getCenterMeetingDate(), DATE_FORMAT_YYYYMMDD, DATE_FORMAT_YYYY_MM_DD));
                            Date dueDate = TimestampConverter.toDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD));
                            centerMeetingCollectionTable.setCMDate(cmDate);
                            centerMeetingCollectionTable.setDueDate(dueDate);//present duedate null tvName centerMeetingTable
                            centerMeetingCollectionTable.setCenterMeetingTime(centerMeetingTable.getCenterMeetingTime());
                            centerMeetingCollectionTable.setMemberRelationName(centerMeetingTable.getMemberRelationName());

                            centerMeetingCollectionTable.setSaved(false);
                            centerMeetingCollectionTable.setSync(false);
                            centerMeetingCollectionTable.setStaffId(centerMeetingTable.getLoanOfficerId());

                            String timeStamp = new SimpleDateFormat("yyMMddHHmmssSSS",
                                    Locale.getDefault()).format(new Date());
                            String EMP_LAST_5_DIGIT = centerMeetingTable.getLoanOfficerId().substring(3);
                            String REF_ID = EMP_LAST_5_DIGIT + timeStamp;
                            centerMeetingCollectionTable.setRefId(REF_ID);

                            // TODO: Inserting into center meeting collection table
                            dynamicUIDao.insertCenterMeetingCollectionTable(centerMeetingCollectionTable);
                        }
                    }
                }

                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getDistinctMembersFromCenterMeetingCollectionTable(groupName);
//                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getDistinctMembersFromCenterMeetingCollectionTableByCollectionType(groupName, collectionType);

                data.postValue(centerMeetingCollectionTableListFromDB);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<CenterMeetingCollectionTable>> getMembersFromCenterMeetingTableForCollectionCenterWise(String centerName, String collectionType) {
        final MutableLiveData<List<CenterMeetingCollectionTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
//                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getDistinctMembersFromCMCollectionTableByCenterAndCollectionType(centerName, collectionType);
                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getDistinctMembersFromCMCollectionTableByCenter(centerName);

                data.postValue(centerMeetingCollectionTableListFromDB);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<CenterMeetingCollectionTable>> getMembersFromCMCollectionTableForDigitalCollectionGroupWise(String groupName) {
        final MutableLiveData<List<CenterMeetingCollectionTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getDistinctMembersFromCMCollectionTableByDigitalPayment(groupName, true);

                data.postValue(centerMeetingCollectionTableListFromDB);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }


    public LiveData<Integer> getTotalEMIForCollection(String customerId) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                int totalEMI = dynamicUIDao.getTotalEMIByClientId(customerId);
                data.postValue(totalEMI);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<Integer> getTotalDueForCollection(String customerId) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                int totalDue = dynamicUIDao.getTotalDueByClientId(customerId);
                data.postValue(totalDue);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<Integer> getTotalSavingsCollection(String customerId) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                int totalSavingsCollection = dynamicUIDao.getTotalSavingByClientId(customerId);
                data.postValue(totalSavingsCollection);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }


    public LiveData<Integer> getTotalPaidAmtFromCollection(String customerId) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                int totalAmtPaid = dynamicUIDao.getTotalCashAmtPaidByClientId(customerId);

                data.postValue(totalAmtPaid);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<Integer> getTotalPaidAmtFromDigitalCollection(String customerId) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                int totalAmtPaid = dynamicUIDao.getTotalDigitalAmtPaidByClientId(customerId);

                data.postValue(totalAmtPaid);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<Integer> confirmCenterMeetingCollection(CenterMeetingCollectionTable centerMeetingCollectionTable, boolean isChecked, boolean isSavingsConfirmed) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                // TODO: Update Center Meeting Collection [ confirm amt ]
                dynamicUIDao.updateCenterMeetingCollectionByClientId(centerMeetingCollectionTable.getCustomerId(), isChecked);
                // TODO: update confirm count in cm collection table based on customer
                int confirmCount = 0;
                int confirmCountFromDB = dynamicUIDao.getConfirmCountByClientId(centerMeetingCollectionTable.getCustomerId());
                if (isChecked) {
                    confirmCountFromDB = confirmCountFromDB + 1;
                } else {
                    confirmCountFromDB = confirmCountFromDB - 1;
                }
                dynamicUIDao.updateCountInCMCollectionByClientId(centerMeetingCollectionTable.getCustomerId(), confirmCountFromDB);

                if (isChecked) {
                    List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCustomerId(centerMeetingCollectionTable.getCustomerId());
                    if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                        for (CenterMeetingCollectionTable cmCollectionForCustomer : centerMeetingCollectionTableList) {
                            if (!TextUtils.isEmpty(cmCollectionForCustomer.getCustomerId()) && !TextUtils.isEmpty(cmCollectionForCustomer.getLoanID())) {
                                int CollectedAmount = dynamicUIDao.getCollectedAmountByClientIdAndLoanId(cmCollectionForCustomer.getCustomerId(), cmCollectionForCustomer.getLoanID());
                                dynamicUIDao.updateCashDigitalAmountByClientIdAndLoanId(CollectedAmount, 0, centerMeetingCollectionTable.getCustomerId(), cmCollectionForCustomer.getLoanID());
                            }
                        }
                    }
                }

                int totalAmtPaid = dynamicUIDao.getTotalCashAmtPaidByClientId(centerMeetingCollectionTable.getCustomerId());
                int totalSavings = dynamicUIDao.getTotalSavingByClientId(centerMeetingCollectionTable.getCustomerId());
                int totalCollectedAmt = totalAmtPaid;
                if (isSavingsConfirmed) {
                    totalCollectedAmt = totalAmtPaid + totalSavings;
                }
                data.postValue(totalCollectedAmt);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<Integer> confirmDigitalCenterMeetingCollection(CenterMeetingCollectionTable centerMeetingCollectionTable, boolean isChecked, boolean isSavingsConfirmed) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                // TODO: Update Center Meeting Collection [ digital payment amt ]
                dynamicUIDao.updateDigitalInCMCollectionByClientId(centerMeetingCollectionTable.getCustomerId(), isChecked);
                // TODO: update confirm count in cm collection table based on customer
                int confirmCount = 0;
                int confirmCountFromDB = dynamicUIDao.getConfirmCountByClientId(centerMeetingCollectionTable.getCustomerId());
                if (isChecked) {
                    confirmCountFromDB = confirmCountFromDB + 1;
                } else {
                    confirmCountFromDB = confirmCountFromDB - 1;
                }
                dynamicUIDao.updateCountInCMCollectionByClientId(centerMeetingCollectionTable.getCustomerId(), confirmCountFromDB);

                if (isChecked) {
                    List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCustomerId(centerMeetingCollectionTable.getCustomerId());
                    if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                        for (CenterMeetingCollectionTable cmCollectionForCustomer : centerMeetingCollectionTableList) {
                            if (!TextUtils.isEmpty(cmCollectionForCustomer.getCustomerId()) && !TextUtils.isEmpty(cmCollectionForCustomer.getLoanID())) {
                                int CollectedAmount = dynamicUIDao.getCollectedAmountByClientIdAndLoanId(cmCollectionForCustomer.getCustomerId(), cmCollectionForCustomer.getLoanID());
                                dynamicUIDao.updateCashDigitalAmountByClientIdAndLoanId(0, CollectedAmount, centerMeetingCollectionTable.getCustomerId(), cmCollectionForCustomer.getLoanID());
                            }
                        }
                    }
                }

                int totalAmtPaid = dynamicUIDao.getTotalCashAmtPaidByClientId(centerMeetingCollectionTable.getCustomerId());
                int totalSavings = dynamicUIDao.getTotalSavingByClientId(centerMeetingCollectionTable.getCustomerId());
                int totalCollectedAmt = totalAmtPaid;
                if (isSavingsConfirmed) {
                    totalCollectedAmt = totalAmtPaid + totalSavings;
                }
                data.postValue(totalCollectedAmt);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<Integer> confirmSavingsCollection(CenterMeetingCollectionTable centerMeetingCollectionTable, boolean isChecked) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                // TODO: Update Savings Collection [ confirm savings amt ]

//                dynamicUIDao.updateSavingsCollectionByClientId(customerId, isChecked);
                if (isChecked) {
                    dynamicUIDao.updateSavingsCollectionByLoanId(centerMeetingCollectionTable.getLoanID(), isChecked, centerMeetingCollectionTable.getSavingsCollection());
                } else {
                    dynamicUIDao.updateSavingsCollectionByLoanId(centerMeetingCollectionTable.getLoanID(), isChecked, 0);
                }
//                dynamicUIDao.updateSavingsCollectionByLoanId(centerMeetingCollectionTable.getLoanID(), isChecked);

                int totalAmtPaid = dynamicUIDao.getTotalCashAmtPaidByClientId(centerMeetingCollectionTable.getCustomerId());
                int totalSavings = dynamicUIDao.getTotalSavingByClientId(centerMeetingCollectionTable.getCustomerId());
                int totalCollectedAmt = totalAmtPaid;
                if (isChecked) {
                    totalCollectedAmt = totalAmtPaid + totalSavings;
                }
                data.postValue(totalCollectedAmt);

            } catch (Exception ex) {
                ex.printStackTrace();

                data.postValue(0);
            }
        });
        return data;
    }

    public LiveData<List<List<EligibilityTable>>> getEligibilityTableByGroupName(String groupName) {
        final MutableLiveData<List<List<EligibilityTable>>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<List<EligibilityTable>> villageSurveyTableList = new ArrayList<>();

                data.postValue(villageSurveyTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<CenterCreationTable>> getCenterCreationTable(String userId, String loanType) {
        final MutableLiveData<List<CenterCreationTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<CenterCreationTable> centerCreationTableList = dynamicUIDao.getCenterCreationTable(userId, loanType);
                data.postValue(centerCreationTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<FetchOtherDayCollectionTable>> getFetchOtherDayCollectionTable(String userId) {
        final MutableLiveData<List<FetchOtherDayCollectionTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<FetchOtherDayCollectionTable> fetchOtherDayCollectionTableList = dynamicUIDao.getFetchOtherDayCollectionTable(userId);
                data.postValue(fetchOtherDayCollectionTableList);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<CenterCreationTable> getCenterCreationTableByGRT(GRTTable grtTable) {
        final MutableLiveData<CenterCreationTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterId(
                        grtTable.getCenterId(), grtTable.getCreatedBy(), grtTable.getLoan_type());
                data.postValue(centerCreationTable);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<CenterCreationTable> getCenterCreationTableByMemberLoanTable(LoanTable loanTable) {
        final MutableLiveData<CenterCreationTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterId(
                        loanTable.getCenterId(), loanTable.getCreatedBy(), loanTable.getLoan_type());
                data.postValue(centerCreationTable);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<CenterCreationTable> getCenterCreationTableByCenterId(String userId, String loanType, String centerId) {
        final MutableLiveData<CenterCreationTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterId(
                        centerId, userId, loanType);
                data.postValue(centerCreationTable);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<String> approveGRT(List<GRTTable> grtTableList) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (grtTableList != null && grtTableList.size() > 0) {

                    String memberName = "";

                    // TODO: STEP 1 : Check Loan Application done or not
//                    boolean isLoanApplicationDone = true;
//
//                    for (GRTTable grtTable : grtTableList) {
//                        if (!grtTable.isGrtRejected() && !grtTable.isSync()) {
//                            LoanTable loanTable = dynamicUIDao.getLoanTableByLoanId(grtTable.getClientId(), grtTable.getLoanId());
//                            if (loanTable != null && loanTable.isSync()) {
//                                isLoanApplicationDone = true;
//                            } else {
//                                isLoanApplicationDone = false;
//                                memberName = grtTable.getClientName();
//                                break;
//                            }
//
//                        }
//                    }
//
//                    if (!isLoanApplicationDone) {
//                        // TODO: Return Error tvMobNo
//                        data.postValue(ERROR_MESSAGE_SUBMIT_AND_SYNC_LOAN_APPLICATION + " for [" + memberName + "]");
//                        return;
//                    }

                    // TODO: STEP 2 : House verification done or not
                    boolean isHouseVerificationDone = true;
                    for (GRTTable grtTable : grtTableList) {
                        if (!grtTable.isGrtRejected() && !grtTable.isSync()) {
                            HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByLoanId(grtTable.getClientId(),
                                    grtTable.getLoanId());
                            if (houseVerificationTable != null && houseVerificationTable.isHouseVerification()) {
                                isHouseVerificationDone = true;
                            } else {
                                isHouseVerificationDone = false;
                                memberName = grtTable.getClientName();
                                break;
                            }

                        }
                    }

                    if (!isHouseVerificationDone) {
                        // TODO: Return Error tvMobNo
                        data.postValue(ERROR_MESSAGE_HOUSE_VERIFICATION_PENDING + " for [" + memberName + "]");
                        return;
                    }


                    // TODO: STEP 3 : Group Formation done or not
//                    boolean isGroupFormationDone = true;
//                    for (GRTTable grtTable : grtTableList) {
//                        if (!grtTable.isGrtRejected() && !grtTable.isSync()) {
//                            GroupTable groupTable = dynamicUIDao.getGroupTableByClientId(grtTable.getClientId());
//                            if (groupTable != null) {
//                                isGroupFormationDone = true;
//                            } else {
//                                isGroupFormationDone = false;
//                                memberName = grtTable.getClientName();
//                                break;
//                            }
//
//                        }
//                    }
//
//                    if (!isGroupFormationDone) {
//                        // TODO: Return Error tvMobNo
//                        data.postValue(ERROR_MESSAGE_GROUP_FORMATION_PENDING + " for [" + memberName + "]");
//                        return;
//                    }

                    // TODO: STEP 4 : Check All got success or not
                    if (/*isLoanApplicationDone &&*/ isHouseVerificationDone /*&& isGroupFormationDone*/) {

                        for (GRTTable grtTable : grtTableList) {
                            if (!grtTable.isGrtRejected() && !grtTable.isSync()) {
                                // TODO: Update GRT Table Final Status [ Approved ]
                                dynamicUIDao.updateGRTTableStatus(FINAL_STATUS_APPROVED, grtTable.getId());
                            }
                        }

                        // TODO: Return Success tvMobNo
                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                    } else {
                        // TODO: Return Error tvMobNo
                        data.postValue(ERROR_MESSAGE_UNABLE_TO_SUMBMIT_DATA);
                    }

                } else {
                    // TODO: Return Error tvMobNo
                    data.postValue(ERROR_MESSAGE_UNABLE_TO_SUMBMIT_DATA);
                }

            } catch (Exception ex) {
                ex.printStackTrace();

                executor.execute(() -> {
                    // TODO: Return Error tvMobNo
                    data.postValue(ERROR_MESSAGE_UNABLE_TO_SUMBMIT_DATA);

                    insertLog("approveGRT", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }
        });
        return data;
    }


//    public LiveData<List<HouseVerificationTable>> getHouseVerificationTable(CGTTable cgtTable, GRTTable grtTable) {
//        final MutableLiveData<List<HouseVerificationTable>> data = new MutableLiveData<>();
//        executor.execute(() -> {
//            try {
//
//                List<HouseVerificationTable> houseVerificationTableList = new ArrayList<>();
//                // TODO: CGT HOUSE VERIFICATION
//                if (cgtTable != null) {
//                    if (cgtTable.isCycleOneCompleted()) {
//
//                        List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableByCGTCycle(cgtTable.getCenterId(),
//                                true, false);
//
//                        if (cgtTableList != null && cgtTableList.size() > 0) {
//                            for (CGTTable cgtTableFromDB : cgtTableList) {
//                                if (cgtTableFromDB.isCycleTwoAttendance()) { // TODO: Checking cycle 2 Attendance
//                                    HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByLoanId(cgtTableFromDB.getClientId(),
//                                            cgtTableFromDB.getLoanId());
//                                    if (houseVerificationTable != null) {
//                                        houseVerificationTableList.add(houseVerificationTable);
//                                        if (houseVerificationTable.isHouseVerification()) {
//                                            dynamicUIDao.updateCGTTableHouseVerificationById(true, cgtTableFromDB.getId());
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    } else {
//                        List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableByCGTCycle(cgtTable.getCenterId(),
//                                false, false);
//
//                        if (cgtTableList != null && cgtTableList.size() > 0) {
//                            for (CGTTable cgtTableFromDB : cgtTableList) {
//                                if (cgtTableFromDB.isCycleOneAttendance()) { // TODO: Checking cycle 1 Attendance
//                                    HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByLoanId(cgtTableFromDB.getClientId(),
//                                            cgtTableFromDB.getLoanId());
//                                    if (houseVerificationTable != null) {
//                                        houseVerificationTableList.add(houseVerificationTable);
//                                        if (houseVerificationTable.isHouseVerification()) {
//                                            dynamicUIDao.updateCGTTableHouseVerificationById(true, cgtTableFromDB.getId());
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//
//                // TODO: GRT HOUSE VERIFICATION
//                else if (grtTable != null) {
//                    houseVerificationTableList = dynamicUIDao.getHouseVerificationTable(grtTable.getCenterId(),
//                            grtTable.getLoan_type());
//                }
//                data.postValue(houseVerificationTableList);
//
//
//            } catch (Exception ex) {
//                ex.printStackTrace();
//
//                insertLog("getHouseVerificationTable", ex.getMessage(), "", "", TAG, "", "", "");
//
//            }
//        });
//        return data;
//    }

    public LiveData<List<HouseVerificationTable>> getHouseVerificationTable(String centerId, String loanType, CGTTable cgtTable) {
        final MutableLiveData<List<HouseVerificationTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtTable != null) {
                    if (cgtTable.isCycleOneCompleted()) {
                        // TODO: All member list based on cycle 2 attendance
                        List<HouseVerificationTable> houseVerificationTableList = new ArrayList<>();
                        List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT2_OnlyPresent(centerId);
                        if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                            for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                                HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByClientId(cgtAttendanceTable.getClientId());
                                if (houseVerificationTable != null) {
                                    houseVerificationTableList.add(houseVerificationTable);
                                }
                            }
                        }

                        // TODO: Final Result
                        data.postValue(houseVerificationTableList);
                    } else {
                        // TODO: All member list based on cycle 1 attendance
                        List<HouseVerificationTable> houseVerificationTableList = new ArrayList<>();
                        List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT1_OnlyPresent(centerId);
                        if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                            for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                                HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByClientId(cgtAttendanceTable.getClientId());
                                if (houseVerificationTable != null) {
                                    houseVerificationTableList.add(houseVerificationTable);
                                }
                            }
                        }

                        // TODO: Final Result
                        data.postValue(houseVerificationTableList);
                    }
                } else {
                    // TODO: All member list in the center
                    List<HouseVerificationTable> houseVerificationTableList = dynamicUIDao.getHouseVerificationTable(centerId,
                            loanType);
                    data.postValue(houseVerificationTableList);
                }
            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("getHouseVerificationTable", ex.getMessage(), "", "", TAG, "", "", "");

            }
        });
        return data;
    }


    public LiveData<HouseVerificationTable> removeHousePhoto(HouseVerificationTable houseVerificationTable) {
        final MutableLiveData<HouseVerificationTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                File file = new File(houseVerificationTable.getFile_path());
                if (file.delete()) {
                    houseVerificationTable.setHouseVerification(false);
                    houseVerificationTable.setHousePhotoUploaded(false);
                    houseVerificationTable.setFile_name("");
                    houseVerificationTable.setFile_path("");
                }
                dynamicUIDao.updateHouseVerificationTable(houseVerificationTable);

                HouseVerificationTable updatedHouseVerification = dynamicUIDao.getHouseVerificationDetailById(houseVerificationTable.getId());
                data.postValue(updatedHouseVerification);

            } catch (Exception ex) {
                ex.printStackTrace();
                executor.execute(() -> {
                    data.postValue(null);

                    insertLog("removeHousePhoto", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }
        });
        return data;
    }

    public LiveData<CMPhotoTable> removeCaptionPhoto(CMPhotoTable cmCaptionPhotoTable) {
        final MutableLiveData<CMPhotoTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
//                File file = new File(cmCaptionPhotoTable.getFile_path());
//                if (file.delete()) {
////                    houseVerificationTable.setHouseVerification(false);
////                    houseVerificationTable.setHousePhotoUploaded(false);
//                    cmCaptionPhotoTable.setFile_name("");
//                    cmCaptionPhotoTable.setFile_path("");
//                }
                cmCaptionPhotoTable.setFile_name("");
                cmCaptionPhotoTable.setFile_path("");
                data.postValue(cmCaptionPhotoTable);

            } catch (Exception ex) {
                ex.printStackTrace();
                executor.execute(() -> {
                    data.postValue(null);

                    insertLog("removeHousePhoto", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }
        });
        return data;
    }

    public LiveData<CGTTable> saveActivitiesData(CGTTable cgtTable) {
        final MutableLiveData<CGTTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtTable != null && cgtTable.isCycleOneCompleted()) {
                    List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableByCGTCycle(cgtTable.getCenterId(),
                            true, false);
                    // TODO: Update CGT TWO Activities
                    for (CGTTable cgtTableFromDB : cgtTableList) {
                        dynamicUIDao.updateCGTTableActivitiesData(cgtTable.isActivity1(), cgtTable.isActivity2(), cgtTable.isActivity3(), cgtTableFromDB.getId());
                    }
                } else {
                    // TODO: Update CGT ONE Activities
                    List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableByCGTCycle(cgtTable.getCenterId(),
                            false, false);
                    for (CGTTable cgtTableFromDB : cgtTableList) {
                        dynamicUIDao.updateCGTTableActivitiesData(cgtTable.isActivity1(), cgtTable.isActivity2(), cgtTable.isActivity3(), cgtTableFromDB.getId());
                    }

                }

                CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                data.postValue(cgtTableFromDB);

            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("saveActivitiesData", ex.getMessage(), "", "", TAG, "", "", "");
            }
        });
        return data;
    }

    public LiveData<CGTTable> updateCGTTable(CGTTable cgtTable) {
        final MutableLiveData<CGTTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {

                dynamicUIDao.updateCGTTable(cgtTable);

                CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                data.postValue(cgtTableFromDB);

            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("updateCGTTable", ex.getMessage(), "", "", TAG, "", "", "");
            }
        });
        return data;
    }

    public LiveData<List<List<CGTTable>>> getCGTTable(String userId, String loanType) {
        final MutableLiveData<List<List<CGTTable>>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctCenterIdList = dynamicUIDao.getDistinctCenterIdFromCGTTable(userId, loanType);
                if (distinctCenterIdList != null && distinctCenterIdList.size() > 0) {
                    List<List<CGTTable>> listOfCGTTableList = new ArrayList<>();
                    for (String cetnerId : distinctCenterIdList) {
                        List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableListByCenterId(cetnerId,
                                loanType);
                        if (cgtTableList != null && cgtTableList.size() > 0) {
                            listOfCGTTableList.add(cgtTableList);
                        }

                    }
                    // TODO: Final Result
                    data.postValue(listOfCGTTableList);

                } else {
                    data.postValue(new ArrayList<>());
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }


    public LiveData<List<List<GRTTable>>> getGRTTable(String userId, String loanType) {
        final MutableLiveData<List<List<GRTTable>>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctCenterIdList = dynamicUIDao.getDistinctCenterIdFromGRTTable(userId, loanType);
                if (distinctCenterIdList != null && distinctCenterIdList.size() > 0) {
                    List<List<GRTTable>> listOfGRTTableList = new ArrayList<>();
                    for (String centerId : distinctCenterIdList) {
                        List<GRTTable> cgtTableList = dynamicUIDao.getGRTTableByCenterID(centerId,
                                loanType);
                        if (cgtTableList != null && cgtTableList.size() > 0) {
                            listOfGRTTableList.add(cgtTableList);
                        }

                    }
                    // TODO: Final Result
                    data.postValue(listOfGRTTableList);

                } else {
                    data.postValue(new ArrayList<>());
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }


    public LiveData<List<CGTTable>> getCGTTableByCGTCycle(String cgtCycle, String centerId) {
        final MutableLiveData<List<CGTTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtCycle.equalsIgnoreCase(CGT_1)) {
                    List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableByCGTCycle(centerId,
                            false, false);
                    data.postValue(cgtTableList);
                } else if (cgtCycle.equalsIgnoreCase(CGT_2)) {
                    List<CGTTable> cgtTableList = dynamicUIDao.getCGTTableByCGTCycle(centerId,
                            true, false);
                    data.postValue(cgtTableList);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }


    public LiveData<List<CGTAttendanceTable>> getCGTAttendanceTable(String cgtCycle, String centerId) {
        final MutableLiveData<List<CGTAttendanceTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtCycle.equalsIgnoreCase(CGT_1)) {
                    // TODO: CGT 1 ATTENDANCE
                    List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT1(centerId);
                    data.postValue(cgtAttendanceTableList);
                } else {
                    // TODO: CGT 2 ATTENDANCE
                    List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT2(centerId);
                    data.postValue(cgtAttendanceTableList);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<GRTAttendanceTable>> getGRTAttendanceTable(String centerId) {
        final MutableLiveData<List<GRTAttendanceTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                // TODO: CRT ATTENDANCE
                List<GRTAttendanceTable> grtAttendanceTableList = dynamicUIDao.getGRTAttendanceTable(centerId);
                data.postValue(grtAttendanceTableList);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<CGTTable>> updateCGTStartSession(String cgtCycle, String centerId, List<CGTTable> cgtTableList) {
        final MutableLiveData<List<CGTTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtCycle.equalsIgnoreCase(CGT_1)) {
                    String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS);
                    if (!TextUtils.isEmpty(timeStamp)) {
                        if (cgtTableList != null && cgtTableList.size() > 0) {
                            for (CGTTable cgtTable : cgtTableList) {
                                // TODO: Update Cycle one start session
                                dynamicUIDao.updateCycleOneStartSessionCGTTable(timeStamp, cgtTable.getId());
                            }
                        }
                    }
                    List<CGTTable> cgtTableListFromDB = dynamicUIDao.getCGTTableByCGTCycle(centerId,
                            false, false);
                    data.postValue(cgtTableListFromDB);
                } else if (cgtCycle.equalsIgnoreCase(CGT_2)) {
                    String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS);
                    if (!TextUtils.isEmpty(timeStamp)) {
                        if (cgtTableList != null && cgtTableList.size() > 0) {
                            for (CGTTable cgtTable : cgtTableList) {
                                // TODO: Update Cycle two start session
                                dynamicUIDao.updateCycleTwoStartSessionCGTTable(timeStamp, cgtTable.getId());
                            }
                        }
                    }
                    List<CGTTable> cgtTableListFromDB = dynamicUIDao.getCGTTableByCGTCycle(centerId,
                            true, false);
                    data.postValue(cgtTableListFromDB);
                }
            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("updateCGTStartSession", ex.getMessage(), "", "", TAG, "", "", "");
            }
        });
        return data;
    }


    public LiveData<String> updateCGTEndSession(String cgtCycle, String centerId, List<CGTTable> cgtTableList) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (cgtCycle.equalsIgnoreCase(CGT_1)) {


                    // TODO: Removing absent users
                    cgtTableList.clear();
                    // TODO: All member list based on cycle 1 attendance
//                        List<HouseVerificationTable> houseVerificationTableList=new ArrayList<>();
                    List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT1_OnlyPresent(centerId);
                    if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                        for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                            CGTTable cgtTableByClientId = dynamicUIDao.getCGTTableByClientId(cgtAttendanceTable.getClientId());
                            if (cgtTableByClientId != null) {
                                cgtTableList.add(cgtTableByClientId);
                            }
                        }
                    }

                    // TODO: STEP 1 ==> Check session started or not
                    boolean isSessionStarted = true;
                    for (CGTTable cgtTable : cgtTableList) {
                        CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                        if (cgtTableFromDB != null) {
                            if (TextUtils.isEmpty(cgtTableFromDB.getCycleOneStartSession())) {
                                isSessionStarted = false;
                                break;
                            }
                        }
                    }

                    if (!isSessionStarted) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_START_CYCLE_ONE);
                        return;
                    }

                    // TODO: STEP 2 ==> Attendance done or not
                    boolean isAttendanceDone = false;
                    List<CGTAttendanceTable> cgtAttendanceTableListByCenter = dynamicUIDao.getCGTAttendanceByCenterId(centerId);
                    if (cgtAttendanceTableListByCenter != null && cgtAttendanceTableListByCenter.size() > 0) {
                        for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableListByCenter) {
                            if (cgtAttendanceTable != null && cgtAttendanceTable.isCGT1Attendance()) {
                                isAttendanceDone = true;
                                break;
                            }
                        }
                    }

                    if (!isAttendanceDone) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_CYCLE_ONE_ATTENTDANCE_NOT_DONE);
                        return;
                    }

                    // TODO: STEP 3 ==> House Verification done or not
                    boolean isHouseVerificationDone = true;
                    for (CGTTable cgtTable : cgtTableList) {
                        CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                        if (cgtTableFromDB != null) {
                            HouseVerificationTable houseVerificationTable = dynamicUIDao.getHouseVerificationByLoanId(cgtTable.getClientId(),
                                    cgtTable.getLoanId());
                            if (houseVerificationTable != null && houseVerificationTable.isHouseVerification()) {
                                isHouseVerificationDone = true;
                                dynamicUIDao.updateCGTTableHouseVerificationById(true, cgtTable.getId());

                            } else {
                                isHouseVerificationDone = false;
                                break;
                            }
                        }
                    }

                    if (!isHouseVerificationDone) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_CYCLE_ONE_HOUSE_VERIFICATION_NOT_DONE);
                        return;
                    }
                    // TODO: STEP 4 ==> Check one or two activities done or not
                    boolean isActivitiesDone = true;
                    for (CGTTable cgtTable : cgtTableList) {
                        CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                        if (cgtTableFromDB != null) {
                            if (cgtTableFromDB.isActivity1()) {
                                isActivitiesDone = true;
                            } else {
                                isActivitiesDone = false;
                                break;
                            }
                        }
                    }

                    if (!isActivitiesDone) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_CYCLE_ONE_ACTIVITIES_NOT_DONE);
                        return;
                    }

                    // TODO: STEP 5 ==> All Data Captured or not
                    // TODO: condition to check all screen details are entered or not
                    boolean allDataCaptured = true; // TODO: Initially it will be true
                    boolean allModuleExist = false; // TODO: Initially it will be false
                    for (CGTTable cgtTable : cgtTableList) {
                        CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                        if (cgtTableFromDB != null) {
                            LoanTable loanTable = dynamicUIDao.getLoanTableByLoanId(cgtTable.getClientId(),
                                    cgtTable.getLoanId());

                            String message = ERROR_MESSAGE_CAPTURE_ALL_DETAILS;


                            // TODO: GET DISTINCT MODULE TYPE

                            List<String> distinctModuleType = dynamicUIDao.getDistinctModuleType(loanTable.getClientId());

                            if (allDataCaptured) {

                                dynamicUIDao.updateMemberLoanDetailAllDataCaptured(true, message, loanTable.getId());

                                // TODO: DOCUMENT UPLOAD VALIDATION
                                List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadSubHeader(loanTable.getClientId(),
                                        loanTable.getLoan_type(), true);
                                if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
                                    boolean alldocumentsuploaded = true; // TODO: Initially it will be true
                                    String documentName = "";

                                    // TODO: Checking all documents are uploaded or not
                                    for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
                                        // TODO: Non Mandatory Documents
                                        if (!documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_BILLS)
                                                && !documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_BANK_STATEMENT)
                                                && !documentUploadTable.getDocument_name().equalsIgnoreCase(DOCUMENT_NAME_OTHERS)
                                        ) {
                                            if (!documentUploadTable.isDocument_status()) {
                                                alldocumentsuploaded = false;
                                                documentName = documentUploadTable.getFull_display_name();
                                                break;
                                            }
                                        }
                                    }
                                    if (!alldocumentsuploaded) {
                                        message = documentName + ERROR_MESSAGE_NOT_UPLOADED;
                                        dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                                        // TODO: Send error tvMobNo
                                        data.postValue(message);
                                        return;
                                    }

                                } else {
                                    // TODO: Document Not Uploaded
                                    message = "Document" + ERROR_MESSAGE_NOT_UPLOADED + "[ " + loanTable.getClientName() + " ]";
                                    dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                                    // TODO: Send error tvMobNo
                                    data.postValue(message);
                                    return;
                                }


                                // TODO: OTP VALIDATION
                                List<OTPVerificationTable> otpTableList = dynamicUIDao.getOTPTableList(loanTable.getClientId(), loanTable.getLoan_type());
                                if (otpTableList != null && otpTableList.size() > 0) {
                                    boolean allOTPVerified = true; // TODO: Initially it will be true
                                    String otpName = loanTable.getClientName();
                                    for (OTPVerificationTable otpVerificationTable : otpTableList) {
                                        if (!otpVerificationTable.isOTPVerified()) {
                                            allOTPVerified = false;
                                            otpName = otpVerificationTable.getName();
                                            break;
                                        }
                                    }
                                    if (!allOTPVerified) {
                                        message = ERROR_MESSAGE_OTP_NOT_VERIFIED + otpName;
                                        dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                                        // TODO: Send error tvMobNo
                                        data.postValue(message);
                                        return;
                                    }
                                } else {
                                    // TODO: OTP Not Verified
                                    message = ERROR_MESSAGE_OTP_NOT_VERIFIED;
                                    dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());
                                    // TODO: Send error tvMobNo
                                    data.postValue(message);
                                    return;
                                }
                            } else {
                                dynamicUIDao.updateMemberLoanDetailAllDataCaptured(false, message, loanTable.getId());

                                // TODO: Send error tvMobNo
                                data.postValue(message);
                                return;
                            }

                            // TODO: ENABLE ONLY FOR TESTING
//                dynamicUIDao.updateMemberLoanDetailAllDataCaptured(true, tvMobNo, masterTable.getId());

                            LoanTable memberLoanDetailFromDB = dynamicUIDao.getMemberLoanDetailById(loanTable.getId());
                            if (memberLoanDetailFromDB != null && memberLoanDetailFromDB.isAllDataCaptured()) {
                                dynamicUIDao.updateMemberLoanDetailTableStatus(FINAL_STATUS_SUBMITTED, loanTable.getRemarks(), loanTable.getId());
                            }
                        }
                    }


                    // TODO: Final Step
                    if (isSessionStarted && isAttendanceDone && isHouseVerificationDone && isActivitiesDone && allDataCaptured) {
                        for (CGTTable cgtTable : cgtTableList) {
                            // TODO: Update Cycle one end session
                            String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS);
                            dynamicUIDao.updateCycleOneEndSessionCGTTable(timeStamp, true,
                                    true, cgtTable.getId());
                        }

                        // TODO: Send Success tvMobNo
                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                    }

                } else if (cgtCycle.equalsIgnoreCase(CGT_2)) {
                    // TODO: *************** Cycle Two END Session Validation **************

                    // TODO: Removing absent users
                    cgtTableList.clear();
                    // TODO: All member list based on cycle 2 attendance
//                        List<HouseVerificationTable> houseVerificationTableList=new ArrayList<>();
                    List<CGTAttendanceTable> cgtAttendanceTableList = dynamicUIDao.getCGTAttendanceTableForCGT2_OnlyPresent(centerId);
                    if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {
                        for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                            CGTTable cgtTableByClientId = dynamicUIDao.getCGTTableByClientId(cgtAttendanceTable.getClientId());
                            if (cgtTableByClientId != null) {
                                cgtTableList.add(cgtTableByClientId);
                            }
                        }
                    }

                    // TODO: STEP 1 ==> Check session started or not
                    boolean isSessionStarted = true;
                    for (CGTTable cgtTable : cgtTableList) {
                        CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                        if (cgtTableFromDB != null) {
                            if (TextUtils.isEmpty(cgtTableFromDB.getCycleTwoStartSession())) {
                                isSessionStarted = false;
                                break;
                            }
                        }
                    }

                    if (!isSessionStarted) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_START_CYCLE_TWO);
                        return;
                    }

                    // TODO: STEP 2 ==> Attendance done or not
                    boolean isAttendanceDone = false;
                    List<CGTAttendanceTable> cgtAttendanceTableListByCenter = dynamicUIDao.getCGTAttendanceByCenterId(centerId);
                    if (cgtAttendanceTableListByCenter != null && cgtAttendanceTableListByCenter.size() > 0) {
                        for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableListByCenter) {
                            if (cgtAttendanceTable != null && cgtAttendanceTable.isCGT2Attendance()) {
                                isAttendanceDone = true;
                                break;
                            }
                        }
                    }

                    if (!isAttendanceDone) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_CYCLE_TWO_ATTENTDANCE_NOT_DONE);
                        return;
                    }

                    // TODO: STEP 3 ==> Check all 3 activities done or not
                    boolean isActivitiesDone = true;
                    for (CGTTable cgtTable : cgtTableList) {
                        CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                        if (cgtTableFromDB != null) {
                            if (cgtTableFromDB.isActivity1() && cgtTableFromDB.isActivity2() && cgtTableFromDB.isActivity3()) {
                                isActivitiesDone = true;
                            } else {
                                isActivitiesDone = false;
                                break;
                            }
                        }
                    }

                    if (!isActivitiesDone) {
                        // TODO: Send error tvMobNo
                        data.postValue(ERROR_MESSAGE_CYCLE_TWO_ACTIVITIES_NOT_DONE);
                        return;
                    }

                    // TODO: STEP 4 ==> Check Group Formation done or not
                    boolean isGroupFormationDone = true;
                    String memberName = "";
                    for (CGTTable cgtTable : cgtTableList) {
                        if (!cgtTable.isCgtRejected() && !cgtTable.isSync()) {
                            GroupTable groupTable = dynamicUIDao.getGroupTableByClientId(cgtTable.getClientId());
                            if (groupTable != null) {
                                isGroupFormationDone = true;
                            } else {
                                isGroupFormationDone = false;
                                memberName = cgtTable.getClientName();
                                break;
                            }

                        }
                    }

                    if (!isGroupFormationDone) {
                        // TODO: Return Error tvMobNo
                        data.postValue(ERROR_MESSAGE_GROUP_FORMATION_PENDING + " for [" + memberName + "]");
                        return;
                    }

                    if (isSessionStarted && isAttendanceDone && isActivitiesDone && isGroupFormationDone) {
                        for (CGTTable cgtTable : cgtTableList) {
                            CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableById(cgtTable.getId());
                            if (cgtTableFromDB != null) {
                                // TODO: Update Cycle one end session
                                String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS);
                                dynamicUIDao.updateCycleTwoEndSessionCGTTable(timeStamp,
                                        true, cgtTable.getId());
                            }
                        }

                        // TODO: Send Success tvMobNo
                        data.postValue(SUCCESS_RESPONSE_MESSAGE);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Send error tvMobNo
                data.postValue(ERROR_MESSAGE_UNABLE_TO_UPDATE_SESSION);

                insertLog("updateCGTEndSession", ex.getMessage(), "", "", TAG, "", "", "");
            }
        });
        return data;
    }

    public LiveData<List<CGTFromServerResponseDTO.Table>> getCGTDataFromServer(String branchGSTCcode, String userId, String loanType) {
        final MutableLiveData<List<CGTFromServerResponseDTO.Table>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final CGTFromServerRequestDTO cgtFromServerRequestDTO = new CGTFromServerRequestDTO();
                cgtFromServerRequestDTO.setIMEINumber(appHelper.getIMEI());
                CGTFromServerRequestDTO.SpNameWithParameterClass spNameWithParameter = new CGTFromServerRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_CGT_DATA_FROM_SERVER);
                CGTFromServerRequestDTO.SpParametersClass spParametersClass = new CGTFromServerRequestDTO.SpParametersClass();
                spParametersClass.setUserId(userId); // TODO: Staff Id
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<CGTFromServerRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CGTFromServerRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                cgtFromServerRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(cgtFromServerRequestDTO, CGTFromServerRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getCGTDataFromServer(cgtFromServerRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            CGTFromServerResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, CGTFromServerResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                Log.d(TAG, "raw data from server");
                                                List<CGTFromServerResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                                if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                    CGTFromServerResponseDTO.Table table = rawDataResponseDTOList.get(0);

                                                    // TODO: CGT DETAIL
                                                    try {
                                                        Type type = new TypeToken<List<CGTTable>>() {
                                                        }.getType();
                                                        List<CGTTable> cgtTableList = new Gson().fromJson(table.getRawDataCGT(), type);
                                                        if (cgtTableList != null && cgtTableList.size() > 0) {

                                                            // TODO: Insert CGT Table & Center Creation Table
                                                            for (CGTTable cgtTable : cgtTableList) {

                                                                // TODO: Insert Center Creation Table
                                                                CenterCreationTable centerCreationTableFromDB = dynamicUIDao.getCenterCreationTableByCenterId(
                                                                        cgtTable.getCenterId(), userId, loanType);
                                                                if (centerCreationTableFromDB == null) {
                                                                    // TODO: Insert Center Creation Table
                                                                    CenterCreationTable centerCreationTable = new CenterCreationTable();
                                                                    centerCreationTable.setCreatedBy(userId);
                                                                    centerCreationTable.setVillageId(cgtTable.getVillageId());
                                                                    centerCreationTable.setVillageName(cgtTable.getVillageName());
                                                                    centerCreationTable.setCenterName(cgtTable.getCenterName());
                                                                    centerCreationTable.setCenterId(cgtTable.getCenterId());
//                                                               centerCreationTable.setAreaName(cgtTable.getAreaName());
//                                                               centerCreationTable.setZoneName(cgtTable.getZoneName());
                                                                    centerCreationTable.setBranchId(cgtTable.getBranchId());
                                                                    centerCreationTable.setBranchGSTcode(cgtTable.getBranchGSTcode());
                                                                    centerCreationTable.setCreated_date(cgtTable.getCreated_date());
                                                                    centerCreationTable.setLoan_type(LOAN_NAME_JLG);
                                                                    centerCreationTable.setNoOfMembers(cgtTableList.size());
                                                                    // TODO: insert into center creation table
                                                                    dynamicUIDao.insertCenterCreationTable(centerCreationTable);

                                                                }

                                                                CGTTable cgtTableFromDB = dynamicUIDao.getCGTTableByLoanId(
                                                                        cgtTable.getLoanId(), cgtTable.getClientId());
                                                                if (cgtTableFromDB == null) {
                                                                    cgtTable.setCreatedBy(userId);
                                                                    cgtTable.setLoan_type(loanType);
                                                                    // TODO: Inserting CGT Table
                                                                    dynamicUIDao.insertCGTTable(cgtTable);
                                                                }

                                                                // TODO: Creating GRT Table
                                                                GRTTable grtTable = new GRTTable();
                                                                grtTable.setAllDataCaptured(false);
                                                                grtTable.setBranchGSTcode(cgtTable.getBranchGSTcode());
                                                                grtTable.setBranchId(cgtTable.getBranchId());
                                                                grtTable.setCenterId(cgtTable.getCenterId());
                                                                grtTable.setCenterName(cgtTable.getCenterName());
                                                                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_DD_MM_YYYY2);
                                                                grtTable.setCreated_date(dateTime);
                                                                grtTable.setCreatedBy(userId);
                                                                grtTable.setGroupFormation(false);
                                                                grtTable.setHouseVerification(false);
                                                                grtTable.setAllDataCaptured(false);
                                                                grtTable.setLoan_type(cgtTable.getLoan_type());
                                                                grtTable.setMemberDetailVerification(false);
                                                                grtTable.setStatus(FINAL_STATUS_PENDING);
                                                                grtTable.setSync(false);
                                                                grtTable.setVillageId(cgtTable.getVillageId());
                                                                grtTable.setVillageName(cgtTable.getVillageName());
                                                                grtTable.setLoanId(cgtTable.getLoanId());
                                                                grtTable.setLoanProduct(cgtTable.getLoanProduct());
                                                                grtTable.setLoanProductCode(cgtTable.getLoanProductCode());
                                                                grtTable.setClientId(cgtTable.getClientId());
                                                                grtTable.setClientName(cgtTable.getClientName());
                                                                grtTable.setPhoneNo(cgtTable.getPhoneNo());
                                                                grtTable.setExistingCustomer(cgtTable.isExistingCustomer());

                                                                GRTTable grtTableFromDB = dynamicUIDao.getGRTTableByLoanId(cgtTable.getCenterId(), cgtTable.getLoanId());
                                                                if (grtTableFromDB == null) {
                                                                    // TODO: Insert GRT Table
                                                                    dynamicUIDao.insertGRTTable(grtTable);
                                                                }

                                                                // TODO: Creating GRT Attendance Table
                                                                GRTAttendanceTable grtAttendanceTable = new GRTAttendanceTable();
                                                                grtAttendanceTable.setLoanId(cgtTable.getLoanId());
                                                                grtAttendanceTable.setClientId(cgtTable.getClientId());
                                                                grtAttendanceTable.setClientName(cgtTable.getClientName());
                                                                grtAttendanceTable.setCenterId(cgtTable.getCenterId());
                                                                grtAttendanceTable.setCenterName(cgtTable.getCenterName());
                                                                grtAttendanceTable.setCreatedBy(userId);
                                                                grtAttendanceTable.setCreatedDate(dateTime);

                                                                GRTAttendanceTable grtAttendanceTableFromDB = dynamicUIDao.getGRTAttendanceTableByLoanId(cgtTable.getCenterId(), cgtTable.getLoanId());
                                                                if (grtAttendanceTableFromDB == null) {
                                                                    // TODO: Insert GRT Attendance Table
                                                                    dynamicUIDao.insertGRTAttendanceTable(grtAttendanceTable);
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception ex) {
                                                        ex.printStackTrace();
                                                    }

                                                    // TODO: GROUP DETAIL
                                                    try {
                                                        Type type = new TypeToken<List<GroupTable>>() {
                                                        }.getType();
                                                        List<GroupTable> groupTableList = new Gson().fromJson(table.getRawDataGroup(), type);
                                                        if (groupTableList != null && groupTableList.size() > 0) {
                                                            // TODO: Insert Group Table
                                                            for (GroupTable groupTable : groupTableList) {
                                                                GroupTable groupTableFromDB = dynamicUIDao.getGroupTableByClientId(groupTable.getClientId());
                                                                if (groupTableFromDB == null) {
                                                                    groupTable.setCreatedBy(userId);
                                                                    groupTable.setLoan_type(loanType);
                                                                    dynamicUIDao.insertGroupTable(groupTable);
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception ex) {
                                                        ex.printStackTrace();
                                                    }

                                                    // TODO: HOUSE VERIFICATION DETAIL
                                                    try {
                                                        Type type = new TypeToken<List<LoanTable>>() {
                                                        }.getType();
                                                        List<LoanTable> loanTableList = new Gson().fromJson(table.getRawDataLoanRequest(), type);
                                                        if (loanTableList != null && loanTableList.size() > 0) {
                                                            // TODO: Insert Loan Table
                                                            for (LoanTable loanTable : loanTableList) {
                                                                LoanTable loanTableFromDB = dynamicUIDao.getLoanTableByLoanId(
                                                                        loanTable.getClientId(), loanTable.getLoanId());
                                                                if (loanTableFromDB == null) {
                                                                    loanTable.setCreatedBy(userId);
                                                                    loanTable.setFinalStatus(FINAL_STATUS_PENDING);
                                                                    loanTable.setLoan_type(loanType);
                                                                    loanTable.setSync(false);
                                                                    dynamicUIDao.insertLoanTable(loanTable);

                                                                }
                                                            }

                                                            // TODO: Insert Master Table
                                                            for (LoanTable loanTable : loanTableList) {
                                                                MasterTable masterTableFromDB = dynamicUIDao.getMasterTableByClientId(loanTable.getClientId());

                                                                if (masterTableFromDB == null) {
                                                                    MasterTable masterTableToInsert = new MasterTable();
                                                                    masterTableToInsert.setClientId(loanTable.getClientId());
                                                                    masterTableToInsert.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                                    masterTableToInsert.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                                    masterTableToInsert.setFinalStatus(FINAL_STATUS_PENDING);
                                                                    masterTableToInsert.setSync(false);
                                                                    masterTableToInsert.setDataNeedsToCaptureFromServer(true);// TODO: Data needs to capture from server
                                                                    masterTableToInsert.setLoan_type(loanType); // TODO: LOAN TYPE
                                                                    masterTableToInsert.setAllDataCaptured(false);

                                                                    masterTableToInsert.setCenterId(loanTable.getCenterId());
                                                                    masterTableToInsert.setCenterName(loanTable.getCenterName());
                                                                    masterTableToInsert.setBranchId(loanTable.getBranchId());
                                                                    masterTableToInsert.setBranchGSTcode(loanTable.getBranchGSTcode());
                                                                    LogInTable logInTable = dynamicUIDao.getLoginTable(userId);
                                                                    if (loanTable != null) {
                                                                        if (!TextUtils.isEmpty(logInTable.getBranchID())) {
                                                                            masterTableToInsert.setBranchId(logInTable.getBranchID());
                                                                        }
                                                                        if (!TextUtils.isEmpty(logInTable.getBranchGSTCode())) {
                                                                            masterTableToInsert.setBranchGSTcode(logInTable.getBranchGSTCode());
                                                                        }
                                                                    }
                                                                    masterTableToInsert.setCreatedBy(userId); // TODO: STAFF ID
                                                                    masterTableToInsert.setReviewBy(userId); // TODO: STAFF ID
                                                                    String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                                                    masterTableToInsert.setCreated_date(TimestampConverter.toDate(dateTime));

                                                                    // TODO: Insert Master Table
                                                                    dynamicUIDao.insertAndDeleteMasterTable(masterTableToInsert, loanTable.getClientId());
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception ex) {
                                                        ex.printStackTrace();
                                                    }

                                                    // TODO: HOUSE VERIFICATION DETAIL
                                                    try {
                                                        Type type = new TypeToken<List<HouseVerificationTable>>() {
                                                        }.getType();
                                                        List<HouseVerificationTable> houseVerificationTableList = new Gson().fromJson(table.getRawDataHouse(), type);
                                                        if (houseVerificationTableList != null && houseVerificationTableList.size() > 0) {
                                                            // TODO: Insert House Verification Table
                                                            for (HouseVerificationTable houseVerificationTable : houseVerificationTableList) {
                                                                HouseVerificationTable houseVerificationTableFromDB = dynamicUIDao.getHouseVerificationByLoanId(
                                                                        houseVerificationTable.getClientId(), houseVerificationTable.getLoanId());
                                                                if (houseVerificationTableFromDB == null) {
                                                                    houseVerificationTable.setCreatedBy(userId);
                                                                    houseVerificationTable.setLoan_type(loanType);
                                                                    houseVerificationTable.setHouseVerification(false);
                                                                    dynamicUIDao.insertHouseVerificationTable(houseVerificationTable);
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception ex) {
                                                        ex.printStackTrace();
                                                    }

                                                    // TODO: Final result [SUCCESS]
                                                    data.postValue(rawDataResponseDTOList);
                                                } else {
                                                    // TODO: Final result
                                                    data.postValue(new ArrayList<>());
                                                }

                                            } else {
                                                // TODO: Final result
                                                data.postValue(new ArrayList<>());
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            // TODO: Final result
                                            data.postValue(new ArrayList<>());

                                            insertLog("getCGTDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                executor.execute(() -> {
                                    // TODO: Final result
                                    data.postValue(new ArrayList<>());

                                    insertLog("getCGTDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });

            } catch (Exception ex) {
                ex.printStackTrace();
                executor.execute(() -> {
                    // TODO: Final result
                    data.postValue(new ArrayList<>());

                    insertLog("getCGTDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }
        });
        return data;
    }

    public LiveData<List<List<GroupTable>>> getGroupTable(CGTTable cgtTable) {
        final MutableLiveData<List<List<GroupTable>>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> distinctGroupNameList = dynamicUIDao.getDistinctGroupNames(cgtTable.getCenterId(), cgtTable.getLoan_type());
                if (distinctGroupNameList != null && distinctGroupNameList.size() > 0) {
                    List<List<GroupTable>> listOfGroupList = new ArrayList<>();
                    for (String groupName : distinctGroupNameList) {
                        List<GroupTable> groupTableList = dynamicUIDao.getGroupTableListByGroupName(cgtTable.getCenterId(),
                                cgtTable.getLoan_type(), groupName);
                        if (groupTableList != null && groupTableList.size() > 0) {
                            listOfGroupList.add(groupTableList);
                        }

                    }
                    // TODO: Final Result
                    data.postValue(listOfGroupList);

                } else {
                    data.postValue(new ArrayList<>());
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<RawDataTable> getRawDataByAdditionalColumn(DynamicUITable dynamicUITable) {
        final MutableLiveData<RawDataTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(dynamicUITable.getScreenName()
                        , dynamicUITable.getClientID(),
                        dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());
                data.postValue(rawDataTable);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<RawDataTable> getRawDataByScreenNameAndModuleType(DynamicUITable dynamicUITable) {
        final MutableLiveData<RawDataTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(dynamicUITable.getScreenName()
                        , dynamicUITable.getClientID(), dynamicUITable.getModuleType(), dynamicUITable.getLoanType());
                if (rawDataTableList != null && rawDataTableList.size() > 0) {
                    // TODO: Success Case
                    data.postValue(rawDataTableList.get(0));

                } else {
                    // TODO: Failure Case
                    data.postValue(null);
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<MasterTable>> getWorkflowHistory(String userId, String loanType) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                DynamicUIWebService.changeApiBaseUrl(WORKFLOW_URL);

                executor.execute(() -> {

                    List<String> clientIdList = dynamicUIDao.getClientsFromMasterTable(userId, loanType);

                    if (clientIdList != null && clientIdList.size() > 0) {
                        DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                        List<Observable<List<WorkflowResponseDTO>>> requests = new ArrayList<>();

                        for (String clientId : clientIdList) {
                            requests.add(service.getWorkflowHistory(clientId,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")));
                        }
                        if (requests.size() > 0) {

                            // Zip all requests with the Function, which will receive the results.
                            Disposable disposable = Observable.zip(requests,
                                    new Function<Object[], List<MasterTable>>() {
                                        @Override
                                        public List<MasterTable> apply(Object[] objects) throws Exception {

                                            try {
                                                if (objects != null && objects.length > 0) {
                                                    if (clientIdList.size() == objects.length) {
                                                        for (int i = 0; i < clientIdList.size(); i++) {
                                                            List<WorkflowResponseDTO> workflowResponseDTOList =
                                                                    (List<WorkflowResponseDTO>) objects[i];
                                                            if (workflowResponseDTOList != null &&
                                                                    workflowResponseDTOList.size() > 0) {

                                                                WorkflowResponseDTO workflowResponseDTO = workflowResponseDTOList.get(0);
                                                                // TODO: Update current stage tvName workflow
                                                                if (workflowResponseDTO != null) {

                                                                    // TODO: HARDCODED CURRENT STAGE ID ( Needs to check )
                                                                    dynamicUIDao.updateMasterTableStatusByClientId(FINAL_STATUS_SUBMITTED,
                                                                            workflowResponseDTO.getStageName(),
                                                                            0,
                                                                            clientIdList.get(i), userId,
                                                                            true,
                                                                            true,
                                                                            workflowResponseDTO.getComment());
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            } catch (Exception ex) {
                                                ex.printStackTrace();

                                                insertLog("getWorkflowHistory", ex.getMessage(), "", "", TAG, "", "", "");
                                            }

                                            return dynamicUIDao.getMasterTableByUserIdAndLoanTypeByTop300(userId, loanType);
                                        }
                                    }).subscribe(new Consumer<List<MasterTable>>() {
                                                     @Override
                                                     public void accept(List<MasterTable> masterTableList) throws Exception {
                                                         // TODO: Final Result
                                                         data.postValue(masterTableList);
                                                     }
                                                 },
                                    // Will be triggered if any error during requests will happen
                                    new Consumer<Throwable>() {
                                        @Override
                                        public void accept(Throwable e) throws Exception {
                                            //Do something on error completion of requests
                                            Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                            // TODO: Final Result
                                            List<MasterTable> masterTableList = dynamicUIDao.getMasterTableByUserIdAndLoanTypeByTop300(userId, loanType);
                                            data.postValue(masterTableList);

                                            insertLog("getWorkflowHistory", e.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    }
                            );
                        } else {
                            // TODO: Final Result
                            List<MasterTable> masterTableList = dynamicUIDao.getMasterTableByUserIdAndLoanTypeByTop300(userId, loanType);
                            data.postValue(masterTableList);
                        }
                    }


                });
            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("getWorkflowHistory", ex.getMessage(), "", "", TAG, "", "", "");
            }


        });
        return data;
    }

    public LiveData<List<MasterTable>> getMasterTableDetailForPD(String userId, String loanType) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                data.postValue(dynamicUIDao.getMasterTableByCurrentStage(userId, CURRENT_STAGE_PD, loanType));

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> getDataForChildFragment(String screenID, String screenName, String loanType, String projectId, String moduleId, String clientId, String userId) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(screenID) != null);
            if (dataExist) {
                try {
                    data.postValue(dynamicUIDao.loadUpdatedDataNew(screenID));

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
//        return  dynamicUIDao.loadUpdatedData(screenName);
        return data;
    }

    public LiveData<List<DynamicUITable>> deleteAndInsertNewRecord(List<DynamicUITable> viewParametersList, String screenName) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getMetaDataByScreenName(screenName, viewParametersList.get(0).getLoanType()) != null);
            if (dataExist) {
                try {
                    dynamicUIDao.deleteDynamicTableByScreenName(screenName);
                    removeAllId(viewParametersList);
                    dynamicUIDao.save(viewParametersList);
                    data.postValue(dynamicUIDao.getMetaDataByScreenName(screenName, viewParametersList.get(0).getLoanType()));

                } catch (Exception ex) {
                    ex.printStackTrace();

                    insertLog("deleteAndInsertNewRecord", ex.getMessage(), "", "", TAG, "", "", "");
                }
            }
        });
//        return  dynamicUIDao.loadUpdatedData(screenName);
        return data;
    }

    public void deleteAndInsertNewRecordInTable(List<DynamicUITable> viewParametersList, String screenName) {
//        executor.execute(() -> {
        boolean dataExist = (dynamicUIDao.getTableBasedOnScreenName(screenName) != null);
        if (dataExist) {
            try {
                dynamicUIDao.deleteDynamicTableByScreenName(screenName);
                removeAllId(viewParametersList);
                dynamicUIDao.save(viewParametersList);

            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("deleteAndInsertNewRecordInTable", ex.getMessage(), "", "", TAG, "", "", "");
            }
        }
//        });
    }

    // TODO: LOG IN SERVICE CALL
    public LiveData<LoginResponseDTO> logInService(String userId, String password) {
        final MutableLiveData<LoginResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(LOGIN_URL);

            final LoginRequestDTO loginRequestDTO = new LoginRequestDTO();
            loginRequestDTO.setUserID(userId);
            loginRequestDTO.setPassword(password);

            executor.execute(() -> {
                DynamicUIWebService.createService(DynamicUIWebservice.class).logInService(loginRequestDTO).enqueue(new Callback<LoginResponseDTO>() {
                    @Override
                    public void onResponse(Call<LoginResponseDTO> call, Response<LoginResponseDTO> response) {
                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                        executor.execute(() -> {
                            if (response.isSuccessful()) {
                                LoginResponseDTO loginResponseDTO = response.body();
                                Log.d(TAG, "onResponse  ==> " + loginResponseDTO);

                                if (loginResponseDTO != null && loginResponseDTO.getLogInTable() != null
                                        && loginResponseDTO.getLogInTable().getErrorCode() == 0) {
                                    // TODO: LOGIN SUCCESS

                                    Log.d(TAG, "onResponse ==>Login Success");

                                    LogInTable logInTable = loginResponseDTO.getLogInTable();
                                    if (logInTable != null) {
                                        // TODO: Delete & Insert Login Table
                                        RoleNameTable roleNameTable = dynamicUIDao.getSelectedRolename(true);

                                        if (roleNameTable != null) {
                                            logInTable.setRoleName(roleNameTable.getRolename());
                                            logInTable.setRoleId(Integer.parseInt(roleNameTable.getRoleId()));

                                        }
                                        logInTable.setUserID(userId);

                                        dynamicUIDao.deleteAndInsertLoginTable(logInTable);
                                    }

                                }

                                data.postValue(loginResponseDTO);
                            } else {
                                data.postValue(new LoginResponseDTO());

                                insertLog("logInService", response.message(), "", "", TAG, "", "", "");
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<LoginResponseDTO> call, Throwable t) {
                        Log.d(TAG, "onFailure ==> " + t.getMessage());
                        data.postValue(new LoginResponseDTO());

                        insertLog("logInService", t.getMessage(), "", "", TAG, "", "", "");
                    }
                });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            data.postValue(new LoginResponseDTO());

            insertLog("logInService", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    // TODO: LOG OUT SERVICE CALL
    public LiveData<LogOutResponseDTO> logOutService(String userId) {
        final MutableLiveData<LogOutResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(LOGOUT_URL);

            final LogOutRequestDTO logOutRequestDTO = new LogOutRequestDTO();
            logOutRequestDTO.setUserID(userId);

            executor.execute(() -> {
                String baseString = new Gson().toJson(logOutRequestDTO, LogOutRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);

                DynamicUIWebService.createService(DynamicUIWebservice.class)
                        .logOutService(logOutRequestDTO, appHelper.getSharedPrefObj().getString(USER_API_KEY, ""), k1)
                        .enqueue(new Callback<LogOutResponseDTO>() {
                            @Override
                            public void onResponse(Call<LogOutResponseDTO> call, Response<LogOutResponseDTO> response) {
                                Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        LogOutResponseDTO logOutResponseDTO = response.body();
                                        Log.d(TAG, "onResponse  ==> " + logOutResponseDTO);

                                        data.postValue(logOutResponseDTO);
                                    } else {
                                        Log.d(TAG, "onResponse ==> " + response.code());
                                        data.postValue(new LogOutResponseDTO());

                                        insertLog("logOutService", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<LogOutResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                data.postValue(new LogOutResponseDTO());

                                insertLog("logOutService", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            data.postValue(new LogOutResponseDTO());

            insertLog("logOutService", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }

    // TODO: UPLOAD ZIP FOLDER SERVICE CALL
    public LiveData<String> uploadZipFolder(String userId, String filePath, String fileName, String loanType) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(LOGOUT_URL);

            final LogOutRequestDTO logOutRequestDTO = new LogOutRequestDTO();
            logOutRequestDTO.setUserID(userId);

            executor.execute(() -> {
                String url = DOCUMENT_UPLOAD_URL; // TODO: Document Upload URL
                Log.i(TAG, "URL FOR IMAGE UPLOADING-------> " + url);
                File file = new File(filePath);

                final String tag = "tag"; // TODO: Hardcoded value
                String fileExtension = filePath.substring
                        (filePath.lastIndexOf(".") + 1).toUpperCase();

                RequestBody rbClientId = RequestBody.create(MediaType.parse("multipart/form-data"), userId);
                RequestBody rbFileName = RequestBody.create(MediaType.parse("multipart/form-data"), fileName);
                RequestBody rbExtension = RequestBody.create(MediaType.parse("multipart/form-data"), fileExtension);
                RequestBody rbFileType = RequestBody.create(MediaType.parse("multipart/form-data"), IMAGE_UPLOAD_FOLDER_NAME + "\\" + tag); // TODO: 29-03-2019 Hardcoded

                RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);

                String productType = "";
                if (!TextUtils.isEmpty(loanType) &&
                        loanType.equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {
                    productType = "IL";
                } else {
                    productType = loanType;
                }
                RequestBody rbProductType = RequestBody.create(MediaType.parse("multipart/form-data"),
                        productType);

                MultipartBody.Part multiPart = MultipartBody.Part.createFormData("UploadedFile", fileName, rbFile);

                DynamicUIWebService.createService(DynamicUIWebservice.class)
                        .uploadZipFolderToServer(url, rbClientId, rbFileName, rbExtension,
                                rbFileType, rbProductType, multiPart,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""))
                        .enqueue(new Callback<String>() {
                            @Override
                            public void onResponse(Call<String> call, Response<String> response) {
                                Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        String responseFromServer = response.body();
                                        Log.d(TAG, "onResponse  ==> " + responseFromServer);

                                        data.postValue(responseFromServer);
                                    } else {
                                        Log.d(TAG, "onResponse ==> " + response.code());
                                        data.postValue("");

                                        insertLog("uploadZipFolder", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<String> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                data.postValue("");

                                insertLog("uploadZipFolder", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            data.postValue("");

            insertLog("uploadZipFolder", ex.getMessage(), "", "", TAG, "", "", "");
        }
        return data;
    }


    // TODO: GET BEARER TOKEN SERVICE CALL
    public LiveData<BearerTokenResponseDTO> getBearerToken(BearerTokenRequestDTO bearerTokenRequestDTO) {
        final MutableLiveData<BearerTokenResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(BEARER_TOKEN_URL);

            executor.execute(() -> {
                String baseString = new Gson().toJson(bearerTokenRequestDTO, BearerTokenRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getBearerToken(bearerTokenRequestDTO, k1).enqueue(new Callback<BearerTokenResponseDTO>() {
                    @Override
                    public void onResponse(Call<BearerTokenResponseDTO> call, Response<BearerTokenResponseDTO> response) {
                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                        executor.execute(() -> {
                            if (response.isSuccessful()) {
                                BearerTokenResponseDTO bearerTokenResponseDTO = response.body();
                                Log.d(TAG, "onResponse  ==> " + bearerTokenResponseDTO);

                                data.postValue(bearerTokenResponseDTO);
                            } else {
                                // TODO: Failure Case
                                data.postValue(new BearerTokenResponseDTO());
                                insertLog("getBearerToken", response.message(), "", "", TAG, "", "", "");
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<BearerTokenResponseDTO> call, Throwable t) {
                        Log.d(TAG, "onFailure ==> " + t.getMessage());
                        executor.execute(() -> {
                            data.postValue(new BearerTokenResponseDTO());

                            insertLog("getBearerToken", t.getMessage(), "", "", TAG, "", "", "");
                        });
                    }
                });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new BearerTokenResponseDTO());

                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    // TODO: RESET PASSWORD SERVICE CALL
    public LiveData<ResetPasswordResponseDTO> resetPasswordServiceCall(ResetPasswordRequestDTO resetPasswordRequestDTO) {
        final MutableLiveData<ResetPasswordResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RESET_PASSWORD_URL);

            executor.execute(() -> {
                String baseString = new Gson().toJson(resetPasswordRequestDTO, ResetPasswordRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                // TODO: HARD CODED TOKEN FOR RESET PASSWORD
                DynamicUIWebService.createService(DynamicUIWebservice.class).
                        resetPasswordServiceCall(resetPasswordRequestDTO, RESET_PASSWORD_TOKEN, k1)
                        .enqueue(new Callback<ResetPasswordResponseDTO>() {
                            @Override
                            public void onResponse(Call<ResetPasswordResponseDTO> call, Response<ResetPasswordResponseDTO> response) {
                                Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        ResetPasswordResponseDTO resetPasswordResponseDTO = response.body();
                                        Log.d(TAG, "onResponse  ==> " + resetPasswordResponseDTO);

                                        data.postValue(resetPasswordResponseDTO);
                                    } else {

                                        // TODO: Failure case
                                        data.postValue(new ResetPasswordResponseDTO());
                                        insertLog("resetPasswordServiceCall", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResetPasswordResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new ResetPasswordResponseDTO());

                                    insertLog("resetPasswordServiceCall", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new ResetPasswordResponseDTO());

                insertLog("resetPasswordServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }


    // TODO: CHANGE PASSWORD SERVICE CALL
    public LiveData<List<ChangePasswordResponseDTO>> changePasswordServiceCall(ChangePasswordRequestDTO changePasswordRequestDTO) {
        final MutableLiveData<List<ChangePasswordResponseDTO>> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(CHANGE_PASSWORD_URL);

            executor.execute(() -> {
                String baseString = new Gson().toJson(changePasswordRequestDTO, ChangePasswordRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).changePasswordServiceCall(changePasswordRequestDTO,
                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).enqueue(new Callback<List<ChangePasswordResponseDTO>>() {
                    @Override
                    public void onResponse(Call<List<ChangePasswordResponseDTO>> call, Response<List<ChangePasswordResponseDTO>> response) {
                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                        executor.execute(() -> {
                            if (response.isSuccessful()) {
                                List<ChangePasswordResponseDTO> changePasswordResponseDTO = response.body();
                                Log.d(TAG, "onResponse  ==> " + changePasswordResponseDTO);

                                data.postValue(changePasswordResponseDTO);
                            } else {

                                // TODO: Failure case
                                data.postValue(new ArrayList<>());
                                insertLog("changePasswordServiceCall", response.message(), "", "", TAG, "", "", "");
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<List<ChangePasswordResponseDTO>> call, Throwable t) {
                        Log.d(TAG, "onFailure ==> " + t.getMessage());
                        executor.execute(() -> {
                            data.postValue(new ArrayList<>());

                            insertLog("changePasswordServiceCall", t.getMessage(), "", "", TAG, "", "", "");
                        });
                    }
                });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new ArrayList<>());

                insertLog("changePasswordServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }


    public LiveData<List<DynamicUITable>> updatePlusButtonDataInDB(String fieldName, String screenNo, List<DynamicUITable> dynamicUITableListFromScreen) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<DynamicUITable> dynamicUITableListFromDB = dynamicUIDao.getTableBasedOnScreen(screenNo);
            boolean dataExist = (dynamicUITableListFromDB != null);
            if (dataExist) {
                try {
                    for (DynamicUITable dynamicUITable : dynamicUITableListFromScreen) {
                        dynamicUITable.setPlusSignName(fieldName);
                        dynamicUITable.setId(0);
                    }
                    dynamicUIDao.save(dynamicUITableListFromScreen);
                    data.postValue(dynamicUIDao.loadUpdatedDataNew(screenNo));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
//        return  dynamicUIDao.loadUpdatedData(screenNo);
        return data;
    }

    public LiveData<List<DynamicUITable>> copyValuesBasedOnScreen(List<String> FromfieldNameList, List<String> TofieldNameList,
                                                                  String fromScreen, String toScreen, String plusSign) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnPlusSign(fromScreen, plusSign);
            boolean dataExist = (dynamicUITableList != null && dynamicUITableList.size() > 0);
            if (dataExist) {
                for (int i = 0; i < FromfieldNameList.size(); i++) {
                    String fromfieldname = FromfieldNameList.get(i);
                    String toFieldName = TofieldNameList.get(i);
                    dynamicUIDao.copyValuesBasedOnPlusSignName(fromfieldname, toFieldName, fromScreen, toScreen, true, false, plusSign);
                }
            } else {
                for (int i = 0; i < FromfieldNameList.size(); i++) {
                    String fromfieldname = FromfieldNameList.get(i);
                    String toFieldName = TofieldNameList.get(i);
                    dynamicUIDao.copyValuesBasedOnScreen(fromfieldname, toFieldName, fromScreen, toScreen, true, false/*, plusSign*/);
                }
            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(toScreen));
        });
//        return  dynamicUIDao.loadUpdatedData(toScreen);
        return data;
    }


    public LiveData<List<DynamicUITable>> autoSumFields(DynamicUITable dynamicUITable, String toFieldTagName,
                                                        String fromScreen, String toScreen) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnScreen(fromScreen);
            boolean dataExist = (dynamicUITableList != null && dynamicUITableList.size() > 0);
            if (dataExist) {
                if (dynamicUITable != null) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        int newValue = Integer.parseInt(dynamicUITable.getValue());
                        DynamicUITable oldRecord = dynamicUIDao.getRowByTAGandScreen(dynamicUITable.getFieldTag(), fromScreen);
                        int balance;
                        if (oldRecord != null && !TextUtils.isEmpty(oldRecord.getValue())) {
                            int oldValue = Integer.parseInt(oldRecord.getValue());
                            balance = newValue - oldValue;
                        } else {
                            balance = newValue;
                        }
                        DynamicUITable toScreenTable = dynamicUIDao.getRowByTAGandScreen(toFieldTagName, toScreen);
                        if (toScreenTable != null && TextUtils.isEmpty(toScreenTable.getValue())) {
                            // TODO: update as 0 to ignore null value
                            dynamicUIDao.updateDynamicTableValue(toFieldTagName, toScreen, "0");
                        }
                        // TODO: update balance first
                        dynamicUIDao.updateDynamicTableValue(dynamicUITable.getFieldTag(), fromScreen, String.valueOf(balance));
                        // TODO: auto sum
                        dynamicUIDao.autoSumFields(dynamicUITable.getFieldTag(), toFieldTagName, fromScreen, toScreen, true, false);
                        // TODO: Rollback ==> update new value
                        dynamicUIDao.updateDynamicTableValue(dynamicUITable.getFieldTag(), fromScreen, String.valueOf(newValue));
                    }
                }
            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(toScreen));
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> sumOfAllFieldsByFeatureId(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUIList,
                                                                    String resultTag) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUIList);  // TODO: First update DynamicUITable list values
            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnScreen(dynamicUITable.getScreenID());
            boolean dataExist = (dynamicUITableList != null && dynamicUITableList.size() > 0);
            if (dataExist) {
                dynamicUIDao.sumOfAllFieldsByFeatureId(resultTag, dynamicUITable.getScreenID(), dynamicUITable.getFeatureID());
            }
//            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
            List<String> tagNameList = new ArrayList<>();
            tagNameList.add(resultTag);
            data.postValue(dynamicUIDao.getDynamicTableByTagNames(dynamicUITableList.get(0).getScreenID(), tagNameList));
        });
        return data;
    }


    public LiveData<List<DynamicUITable>> GSTCalculationByFeatureId(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUIList,
                                                                    String resultTag) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUIList);  // TODO: First update DynamicUITable list values
            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnScreen(dynamicUITable.getScreenID());
            boolean dataExist = (dynamicUITableList != null && dynamicUITableList.size() > 0);
            if (dataExist) {
                dynamicUIDao.sumOfAllFieldsByFeatureId(resultTag, dynamicUITable.getScreenID(), dynamicUITable.getFeatureID());

                double APPLY_MULTIPLIER = 1;
                double MONTHLY_SALES = 0;

                String applyMultiplier = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_APPLY_MULTIPLIER_IN_GST_SCREEN);

                if (!TextUtils.isEmpty(applyMultiplier)) {
                    if (applyMultiplier.equalsIgnoreCase("yes")) {
                        APPLY_MULTIPLIER = 1.5;
                    }

                    String monthlySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN);
                    if (!TextUtils.isEmpty(monthlySales)) {
                        MONTHLY_SALES = Double.valueOf(monthlySales);
                        MONTHLY_SALES = (MONTHLY_SALES / 6) * APPLY_MULTIPLIER;
                        MONTHLY_SALES = Math.round(MONTHLY_SALES);

                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN, dynamicUITable.getScreenName(),
                                String.valueOf(MONTHLY_SALES), false, true);
                    }
                }

            }
            List<String> tagNameList = new ArrayList<>();
            tagNameList.add(resultTag);
            data.postValue(dynamicUIDao.getDynamicTableByTagNames(dynamicUITableList.get(0).getScreenID(), tagNameList));
        });
        return data;
    }

    // TODO:  To copy data tvName reference check to PD References
    public LiveData<List<DynamicUITable>> copyDataFromReferenceCheck(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList, String fromScreen) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(fromScreen, dynamicUITable.getClientID(),
                    dynamicUITable.getLoanType());
            if (rawDataTable != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                if (hashMap != null && hashMap.size() > 0) {
                    //ReferenceType

                    if (hashMap.containsKey(TAG_NAME_REFERENCE_TYPE)) {
                        String referenceType = hashMap.get(TAG_NAME_REFERENCE_TYPE).toString();
                        if (!TextUtils.isEmpty(referenceType)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_REFERENCE_TYPE, dynamicUITable.getScreenName(),
                                    referenceType, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_REFERENCE_TYPE, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }

                    //TAG_NAME_FULL_NAME
                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                        String fullName = hashMap.get(TAG_NAME_FULL_NAME).toString();
                        if (!TextUtils.isEmpty(fullName)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_FULL_NAME, dynamicUITable.getScreenName(),
                                    fullName, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_FULL_NAME, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }

                    //TAG_NAME_CONTACT_NO
                    if (hashMap.containsKey(TAG_NAME_CONTACT_NO)) {
                        String contactnum = hashMap.get(TAG_NAME_CONTACT_NO).toString();
                        if (!TextUtils.isEmpty(contactnum)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CONTACT_NO, dynamicUITable.getScreenName(),
                                    contactnum, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CONTACT_NO, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }

                    //TAG_NAME_RE_ENTER_CONTACT_NO
                    if (hashMap.containsKey(TAG_NAME_RE_ENTER_CONTACT_NO)) {
                        String Recontactnum = hashMap.get(TAG_NAME_RE_ENTER_CONTACT_NO).toString();
                        if (!TextUtils.isEmpty(Recontactnum)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_RE_ENTER_CONTACT_NO, dynamicUITable.getScreenName(),
                                    Recontactnum, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_RE_ENTER_CONTACT_NO, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }

                    if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                        String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                        if (!TextUtils.isEmpty(addressLine1)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                    addressLine1, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                        String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                        if (!TextUtils.isEmpty(addressLine2)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                    addressLine2, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                        String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                        if (!TextUtils.isEmpty(addressLine3)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                    addressLine3, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                        String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                        if (!TextUtils.isEmpty(pincode)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PINCODE, dynamicUITable.getScreenName(),
                                    pincode, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PINCODE, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_CITY)) {
                        String city = hashMap.get(TAG_NAME_CITY).toString();
                        if (!TextUtils.isEmpty(city)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CITY, dynamicUITable.getScreenName(),
                                    city, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CITY, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                        String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                        if (!TextUtils.isEmpty(district)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_DISTRICT, dynamicUITable.getScreenName(),
                                    district, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_DISTRICT, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_STATE)) {
                        String state = hashMap.get(TAG_NAME_STATE).toString();
                        if (!TextUtils.isEmpty(state)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_STATE, dynamicUITable.getScreenName(),
                                    state, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_STATE, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_LANDLINE_NUMBER)) {
                        String landlineNum = hashMap.get(TAG_NAME_LANDLINE_NUMBER).toString();
                        if (!TextUtils.isEmpty(landlineNum)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_LANDLINE_NUMBER, dynamicUITable.getScreenName(),
                                    landlineNum, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_LANDLINE_NUMBER, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }


                    if (hashMap.containsKey(TAG_NAME_REFERENCE_TYPE)) {
                        String landlineNum = hashMap.get(TAG_NAME_REFERENCE_TYPE).toString();
                        if (!TextUtils.isEmpty(landlineNum)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITable.getScreenName(),
                                    landlineNum, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }

                    if (hashMap.containsKey(TAG_NAME_UNIQUE_ID)) {
                        String uniqueId = hashMap.get(TAG_NAME_UNIQUE_ID).toString();
                        if (!TextUtils.isEmpty(uniqueId)) {
                            // TODO: Updating Correlation ID
                            dynamicUIDao.updateDynamicTableCorrelationIdByScreenName(dynamicUITable.getScreenName(),
                                    uniqueId);
                        }
                    }
                }
            }

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));

        });

        return data;
    }


    public LiveData<List<DynamicUITable>> calculateAndUpdate(List<String> FromfieldNameList, List<String> TofieldNameList,
                                                             String fromScreen, String toScreen, String newRowTAGName,
                                                             String lableTagName, String valueTagName, boolean updateButtonClick,
                                                             List<DynamicUITable> viewParametersList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(viewParametersList); // TODO: First update DynamicUITable list values

            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnScreen(fromScreen);
            boolean dataExist = (dynamicUITableList != null && dynamicUITableList.size() > 0);
            if (dataExist) {

                DynamicUITable fromScreenTable = dynamicUITableList.get(0);
                RawDataTable oldRawData = dynamicUIDao.getRawDataByTAG(fromScreen, fromScreenTable.getClientID(), newRowTAGName);

                if (updateButtonClick) {
                    // TODO: update button click calculation

                    for (int i = 0; i < FromfieldNameList.size(); i++) {
                        String fromfieldTag = FromfieldNameList.get(i);
                        String toFieldTag = TofieldNameList.get(i);
                        if (toFieldTag.equalsIgnoreCase(newRowTAGName)) {

                            dynamicUIDao.copyValueForLiability(valueTagName, toFieldTag, fromScreen, toScreen, true, false);
                            dynamicUIDao.copyFieldName(lableTagName, toFieldTag, fromScreen, toScreen, true, false);

                        } else {
                            if (oldRawData != null && !TextUtils.isEmpty(oldRawData.getRawdata())) {
                                try {
                                    JSONObject jsonObject = new JSONObject(oldRawData.getRawdata());
                                    if (jsonObject.has(fromfieldTag)) {
                                        int oldValue = Integer.parseInt(jsonObject.getString(fromfieldTag));
                                        DynamicUITable newRecordFromDynamicTable = dynamicUIDao.getRowByTAGandScreen(fromfieldTag,
                                                fromScreen);
                                        if (newRecordFromDynamicTable != null && !TextUtils.isEmpty(newRecordFromDynamicTable.getValue())) {
                                            int newValue = Integer.parseInt(newRecordFromDynamicTable.getValue());
                                            int balance = newValue - oldValue;

                                            dynamicUIDao.updateDynamicTableValue(fromfieldTag,
                                                    fromScreen, String.valueOf(balance)); // TODO: update value in dynamic ui table

                                            dynamicUIDao.calculateAndUpdate(fromfieldTag, toFieldTag, fromScreen, toScreen, true, false);

                                            dynamicUIDao.updateDynamicTableValue(fromfieldTag,
                                                    fromScreen, String.valueOf(newValue)); // TODO: rollback to new value
                                        }
                                    }
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                            }

                        }
                    }
                } else {
                    // TODO: save button click calculation
                    for (int i = 0; i < FromfieldNameList.size(); i++) {
                        String fromfieldTag = FromfieldNameList.get(i);
                        String toFieldTag = TofieldNameList.get(i);
                        if (!TextUtils.isEmpty(toFieldTag) && toFieldTag.equalsIgnoreCase(newRowTAGName)) {
//                            dynamicUIDao.copyValueForLiability(fromfieldTag, toFieldTag, fromScreen, toScreen, true, false);
                            List<DynamicUITable> dynamicUITableListLiability = dynamicUIDao.getTableBasedOnScreen(toScreen);
                            if (dynamicUITableListLiability != null && dynamicUITableListLiability.size() > 0) {
                                // TODO: Position hardcoded
                                DynamicUITable dynamicUITable = dynamicUIDao.getRowByTAGandScreen(newRowTAGName, toScreen);
                                if (dynamicUITable != null) {
                                    int positionToAdd = dynamicUITableListLiability.size() - 1;
                                    if (toFieldTag.equalsIgnoreCase(TAG_NAME_BUSINESS_DEBTS)) {
                                        positionToAdd = dynamicUITableListLiability.size() - 3;
                                    }
                                    if (toFieldTag.equalsIgnoreCase(TAG_NAME_ADVANCES_ARREARS)) {
                                        positionToAdd = dynamicUITableListLiability.size() - 1;
                                    }
                                    RawDataTable rawDataTable = dynamicUIDao.getTopRawData(fromScreen, dynamicUITable.getClientID());
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable);
                                    dynamicUITableListLiability.add(positionToAdd, newDynamicUITable);
                                    dynamicUIDao.deleteRecords(toScreen);
                                    removeAllId(dynamicUITableListLiability);
                                    dynamicUIDao.save(dynamicUITableListLiability);

                                    dynamicUIDao.calculateLiabilityAndUpdate(fromfieldTag, toFieldTag, fromScreen, toScreen, true, false);

                                    dynamicUIDao.copyFieldName(lableTagName, newDynamicUITable.getFieldTag(), fromScreen, toScreen, true, false);
                                    dynamicUIDao.copyValueForLiability(valueTagName, newDynamicUITable.getFieldTag(), fromScreen, toScreen, true, false);

                                    DynamicUITable newlyAddedRow = dynamicUIDao.getRowByTAGandScreen(newDynamicUITable.getFieldTag(), toScreen);
                                    if (newlyAddedRow != null && !TextUtils.isEmpty(newDynamicUITable.getValue())) {
                                        dynamicUIDao.updateRawDataFieldName(fromScreen, rawDataTable.getId(), newlyAddedRow.getFieldName());
                                    }
                                }
                            }
                        } else {
                            dynamicUIDao.calculateAndUpdate(fromfieldTag, toFieldTag, fromScreen, toScreen, true, false);
                        }
                    }
                }
            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(toScreen));
        });
//        return  dynamicUIDao.loadUpdatedData(toScreen);
        return data;
    }

    private DynamicUITable createNewRow(DynamicUITable dynamicUITable, RawDataTable rawDataTable) {
        DynamicUITable newDynamicUITable = new DynamicUITable();
        try {
            newDynamicUITable.setScreenID(dynamicUITable.getScreenID());
            newDynamicUITable.setScreenName(dynamicUITable.getScreenName());
            newDynamicUITable.setFieldTag(rawDataTable.getTag_name());// TODO: initial tag name
            newDynamicUITable.setFieldName(dynamicUITable.getValue()); // TODO: FieldName tvName value tvName liability
            newDynamicUITable.setIsRequired(dynamicUITable.getIsRequired());
//            newDynamicUITable.setFieldType(dynamicUITable.getFieldType());
            newDynamicUITable.setFieldType(FIELD_TYPE_NEW_ROW); // TODO: Hardcoded field type
//            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_OF_FAMILY_MEMBER)) {
////                newDynamicUITable.setFieldType(FIELD_TYPE_CALCULATOR_WITH_STATUS);
////            } else
            if (dynamicUITable.getScreenID().equalsIgnoreCase(SCREEN_NO_APPLICANT_KYC_IL)) {
                newDynamicUITable.setFieldName(dynamicUITable.getFieldName());
            }
            newDynamicUITable.setDataType(dynamicUITable.getDataType());
            newDynamicUITable.setLoanType(dynamicUITable.getLoanType());
            newDynamicUITable.setVisibility(dynamicUITable.isVisibility());
            newDynamicUITable.setClientID(dynamicUITable.getClientID());
            newDynamicUITable.setValue(dynamicUITable.getValue());
            newDynamicUITable.setDataEntryType(dynamicUITable.getDataEntryType());
            newDynamicUITable.setParamlist(dynamicUITable.getParamlist());
            newDynamicUITable.setPlusSignName(dynamicUITable.getPlusSignName());
            newDynamicUITable.setEditable(dynamicUITable.isEditable());
            newDynamicUITable.setSpinnerItemPosition(dynamicUITable.getSpinnerItemPosition());
            newDynamicUITable.setLength(dynamicUITable.getLength());
            newDynamicUITable.setDefaultValue(dynamicUITable.getDefaultValue());
            newDynamicUITable.setErrorMessage(dynamicUITable.getErrorMessage());
            newDynamicUITable.setHint(dynamicUITable.getHint());
            newDynamicUITable.setFeatureID(2); // TODO: Hardcoded as 2
            newDynamicUITable.setUser_id(dynamicUITable.getUser_id());
            newDynamicUITable.setModuleType(dynamicUITable.getModuleType());
            newDynamicUITable.setCoRelationID(dynamicUITable.getCoRelationID());
            newDynamicUITable.setUniqueId(rawDataTable.getUniqueId());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return newDynamicUITable;
    }

    private DynamicUITable createNewRow(DynamicUITable dynamicUITable, RawDataTable rawDataTable, String fieldName, String value) {

        DynamicUITable newDynamicUITable = new DynamicUITable();
        try {
            newDynamicUITable.setScreenID(dynamicUITable.getScreenID());
            newDynamicUITable.setScreenName(dynamicUITable.getScreenName());
            newDynamicUITable.setFieldTag(rawDataTable.getTag_name());// TODO: initial tag name
            newDynamicUITable.setFieldName(fieldName); // TODO: FieldName
            newDynamicUITable.setValue(value); // TODO: Value
            newDynamicUITable.setFieldType(FIELD_TYPE_NEW_ROW); // TODO: Hardcoded field type
            newDynamicUITable.setIsRequired(dynamicUITable.getIsRequired());
            newDynamicUITable.setDataType(dynamicUITable.getDataType());
            newDynamicUITable.setLoanType(dynamicUITable.getLoanType());
            newDynamicUITable.setVisibility(true); // TODO: Always visibility true
            newDynamicUITable.setClientID(dynamicUITable.getClientID());
            newDynamicUITable.setDataEntryType(dynamicUITable.getDataEntryType());
            newDynamicUITable.setParamlist(dynamicUITable.getParamlist());
            newDynamicUITable.setPlusSignName(dynamicUITable.getPlusSignName());
            newDynamicUITable.setEditable(dynamicUITable.isEditable());
            newDynamicUITable.setSpinnerItemPosition(dynamicUITable.getSpinnerItemPosition());
            newDynamicUITable.setLength(dynamicUITable.getLength());
            newDynamicUITable.setDefaultValue(dynamicUITable.getDefaultValue());
            newDynamicUITable.setErrorMessage(dynamicUITable.getErrorMessage());
            newDynamicUITable.setHint(dynamicUITable.getHint());
            newDynamicUITable.setFeatureID(2); // TODO: Hardcoded as 2
            newDynamicUITable.setUser_id(dynamicUITable.getUser_id());
            newDynamicUITable.setModuleType(dynamicUITable.getModuleType());
            newDynamicUITable.setCoRelationID(rawDataTable.getCoRelationID());
            newDynamicUITable.setUniqueId(rawDataTable.getUniqueId());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return newDynamicUITable;
    }

    private List<DuplicateDynamicUITable> createDuplicateTable(List<DynamicUITable> dynamicUITableList) {
        List<DuplicateDynamicUITable> duplicateDynamicUITableList = new ArrayList<>();

        try {
            for (DynamicUITable dynamicUITable : dynamicUITableList) {
                DuplicateDynamicUITable duplicateDynamicUITable = new DuplicateDynamicUITable();
                duplicateDynamicUITable.setScreenID(dynamicUITable.getScreenID());
                duplicateDynamicUITable.setScreenName(dynamicUITable.getScreenName());
                duplicateDynamicUITable.setFieldTag(dynamicUITable.getFieldTag());
                duplicateDynamicUITable.setFieldName(dynamicUITable.getFieldName());
                duplicateDynamicUITable.setIsRequired(dynamicUITable.getIsRequired());
                duplicateDynamicUITable.setFieldType(dynamicUITable.getFieldType());
                duplicateDynamicUITable.setDataType(dynamicUITable.getDataType());
                duplicateDynamicUITable.setLoanType(dynamicUITable.getLoanType());
                duplicateDynamicUITable.setVisibility(dynamicUITable.isVisibility());
                duplicateDynamicUITable.setClientID(dynamicUITable.getClientID());
                duplicateDynamicUITable.setValue(dynamicUITable.getValue());
                duplicateDynamicUITable.setDataEntryType(dynamicUITable.getDataEntryType());
                duplicateDynamicUITable.setParamlist(dynamicUITable.getParamlist());
                duplicateDynamicUITable.setPlusSignName(dynamicUITable.getPlusSignName());
                duplicateDynamicUITable.setEditable(dynamicUITable.isEditable());
                duplicateDynamicUITable.setSpinnerItemPosition(dynamicUITable.getSpinnerItemPosition());
                duplicateDynamicUITable.setLength(dynamicUITable.getLength());
                duplicateDynamicUITable.setDefaultValue(dynamicUITable.getDefaultValue());
                duplicateDynamicUITable.setErrorMessage(dynamicUITable.getErrorMessage());
                duplicateDynamicUITable.setHint(dynamicUITable.getHint());
                duplicateDynamicUITable.setFeatureID(dynamicUITable.getFeatureID());
                duplicateDynamicUITable.setUser_id(dynamicUITable.getUser_id());
                duplicateDynamicUITable.setModuleType(dynamicUITable.getModuleType());
                duplicateDynamicUITable.setMinLength(dynamicUITable.getMinLength());
                duplicateDynamicUITable.setCoRelationID(dynamicUITable.getCoRelationID());
                duplicateDynamicUITable.setUniqueId(dynamicUITable.getUniqueId());
                duplicateDynamicUITable.setProductId(dynamicUITable.getProductId());
                duplicateDynamicUITable.setSync(dynamicUITable.isSync());

                duplicateDynamicUITableList.add(duplicateDynamicUITable);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return duplicateDynamicUITableList;
    }

    private void removeAllId(List<DynamicUITable> dynamicUITableList) {
        try {
            if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                for (DynamicUITable dynamicUITable : dynamicUITableList) {
                    dynamicUITable.setId(0);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public LiveData<List<DynamicUITable>> clearValuesBasedOnScreen(String screen) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(screen) != null);
            if (dataExist) {
                dynamicUIDao.clearValuesBasedOnScreen(screen, true, true);
                data.postValue(dynamicUIDao.loadUpdatedDataNew(screen));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> clearValuesBasedOnScreenTAGInDP(String screen, String FieldTAG) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnScreen(screen);
            boolean dataExist = (dynamicUITableList != null);
            if (dataExist) {
                for (DynamicUITable dynamicUITable : dynamicUITableList) {
                    if (dynamicUITable != null && !TextUtils.isEmpty(dynamicUITable.getFieldTag()) &&
                            !dynamicUITable.getFieldTag().equalsIgnoreCase(FieldTAG)) {
                        dynamicUIDao.clearValuesBasedOnScreenTAGInDP(screen, dynamicUITable.getFieldTag(), true, true);
                    } else {
                        break;
                    }
                }
                data.postValue(dynamicUIDao.loadUpdatedDataNew(screen));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> EnableOrDisableByFieldName(List<ParameterInfo> parameterInfoList, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(parameterInfoList.get(0).getscreenId()) != null);
            if (dataExist) {
//                List<DynamicUITable> oldDynamicUITableList = dynamicUIDao.loadUpdatedDataNew(parameterInfoList.get(0).getscreenId());
//                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: Need to uncomment
                deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITableList.get(0).getScreenName());
                List<DynamicUITable> newDynamicUITableList = dynamicUIDao.loadUpdatedDataNew(parameterInfoList.get(0).getscreenId());

                for (ParameterInfo parameterInfo : parameterInfoList) {
                    if (parameterInfo.getfieldTag().equalsIgnoreCase(TAG_NAME_NO_OF_ADULTS)
                            || parameterInfo.getfieldTag().equalsIgnoreCase(TAG_NAME_NO_OF_CHILDREN)
                            || parameterInfo.getfieldTag().equalsIgnoreCase(TAG_NAME_FAMILY_MEMBERS)) {
                        String strNoOfFamilyCountFromDB;
                        if (parameterInfo.getfieldTag().equalsIgnoreCase(TAG_NAME_NO_OF_ADULTS)) {
                            strNoOfFamilyCountFromDB = dynamicUIDao.getValueByTAGname(parameterInfo.getscreenId(),
                                    TAG_NAME_NO_OF_ADULTS);
                        } else {
                            strNoOfFamilyCountFromDB = dynamicUIDao.getValueByTAGname(parameterInfo.getscreenId(),
                                    TAG_NAME_NO_OF_CHILDREN);
                        }


                        if (!TextUtils.isEmpty(parameterInfo.getValue())) {
                            int intNoOfFamilyCountFromDB = 0;
                            if (!TextUtils.isEmpty(strNoOfFamilyCountFromDB)) {
                                intNoOfFamilyCountFromDB = Integer.valueOf(strNoOfFamilyCountFromDB);
                            }
                            int intNoOfFamilyCountFromScreen = Integer.valueOf(parameterInfo.getValue());
                            int totalFamilyMembers = intNoOfFamilyCountFromDB + intNoOfFamilyCountFromScreen;
                            if (parameterInfo.getfieldTag().equalsIgnoreCase(TAG_NAME_FAMILY_MEMBERS)) {
                                dynamicUIDao.EnableOrDisableByFieldTAG(parameterInfo.getscreenId(), parameterInfo.isVisibilty(),
                                        TAG_NAME_FAMILY_MEMBERS, String.valueOf(totalFamilyMembers), parameterInfo.isEnabled());
                            } else {
                                dynamicUIDao.EnableOrDisableByFieldTAG(parameterInfo.getscreenId(), parameterInfo.isVisibilty(),
                                        parameterInfo.getfieldTag(), parameterInfo.getValue(), parameterInfo.isEnabled());
                            }
                        }
                    } else {
                        List<LeadTable> leadTableList = dynamicUIDao.getLeadTableListFromDBWithClientId(dynamicUITableList.get(0).getUser_id(), dynamicUITableList.get(0).getLoanType(), dynamicUITableList.get(0).getClientID());
                        dynamicUIDao.EnableOrDisableByFieldTAG(parameterInfo.getscreenId(), parameterInfo.isVisibilty(),
                                parameterInfo.getfieldTag(), parameterInfo.getValue(), parameterInfo.isEnabled());
                    }
                }
                List<DynamicUITable> finalResult = dynamicUIDao.loadUpdatedDataNew(parameterInfoList.get(0).getscreenId());
                data.postValue(finalResult);
            }
        });
        return data;
    }


    public LiveData<List<DynamicUITable>> getMetaDataByScreenName(String screenName, String loanType) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getMetaDataByScreenName(screenName, loanType) != null);
            if (dataExist) {

                List<DynamicUITable> newDynamicUITableList = dynamicUIDao.getMetaDataByScreenName(screenName, loanType);
                data.postValue(newDynamicUITableList);
            }
        });
        return data;
    }


    public LiveData<List<DynamicUITable>> OralVerificationEnableOrDisable(List<ParameterInfo> parameterInfoList, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            String screenId = dynamicUITableList.get(0).getScreenID();
            String screenName = dynamicUITableList.get(0).getScreenName();
            String clientId = dynamicUITableList.get(0).getClientID();


            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(screenId) != null);
            if (dataExist) {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update dynamic list first

                for (ParameterInfo parameterInfo : parameterInfoList) {

                    DynamicUITable dynamicUITable = dynamicUIDao.GetDynamicTableRowByScreenName(screenName, clientId, parameterInfo.getfieldTag());

                    if (dynamicUITable != null) {
                        if (dynamicUITable.isVisibility()) {
                            dynamicUIDao.EnableOrDisableByFieldTAG(parameterInfo.getscreenId(), false,
                                    parameterInfo.getfieldTag(), parameterInfo.getValue(), parameterInfo.isEnabled());
                        } else {
                            dynamicUIDao.EnableOrDisableByFieldTAG(parameterInfo.getscreenId(), true,
                                    parameterInfo.getfieldTag(), parameterInfo.getValue(), parameterInfo.isEnabled());
                        }
                    }

                }
                List<DynamicUITable> newDynamicUITableList = dynamicUIDao.loadUpdatedDataNew(screenId);
                data.postValue(newDynamicUITableList);
            }

        });
        return data;
    }

    public LiveData<List<DynamicUITable>> copyValuesFromScreenToScreen(List<ParameterInfo> fromScreenList, List<ParameterInfo> toScreenList,
                                                                       List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(fromScreenList.get(0).getscreenId()) != null);
            if (dataExist) {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: First update list
                for (int i = 0; i < fromScreenList.size(); i++) {
                    String fromFieldTag = fromScreenList.get(i).getfieldTag();
                    String toFieldTag = toScreenList.get(i).getfieldTag();
                    String fromScreen = fromScreenList.get(i).getscreenId();
                    String toScreen = toScreenList.get(i).getscreenId();
                    boolean toScreenVisibility = toScreenList.get(i).isVisibilty();
                    boolean toScreenEnable = toScreenList.get(i).isEnabled();

                    dynamicUIDao.copyValuesBasedOnScreen(fromFieldTag, toFieldTag, fromScreen, toScreen, toScreenVisibility, toScreenEnable);


                }

                data.postValue(dynamicUIDao.loadUpdatedDataNew(toScreenList.get(0).getscreenId()));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> EnableOrDisableByFeatureId(String enableFeatureTag, String disableFeatureTag, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: Need to uncomment
            if (!TextUtils.isEmpty(enableFeatureTag)) {
                DynamicUITable enableTableByFeatureId = dynamicUIDao.getRowByTAGandScreen(enableFeatureTag, dynamicUITableList.get(0).getScreenID());
                if (enableTableByFeatureId != null) {

                    int featureId = enableTableByFeatureId.getFeatureID();
                    dynamicUIDao.EnableOrDisableByFeatureId(dynamicUITableList.get(0).getScreenID(), featureId, true);

                }
            }
            if (!TextUtils.isEmpty(disableFeatureTag)) {
                DynamicUITable disableTableByFeatureId = dynamicUIDao.getRowByTAGandScreen(disableFeatureTag, dynamicUITableList.get(0).getScreenID());
                if (disableTableByFeatureId != null) {

                    int featureId = disableTableByFeatureId.getFeatureID();
                    dynamicUIDao.EnableOrDisableByFeatureId(dynamicUITableList.get(0).getScreenID(), featureId, false);
                }
            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> GSTCalculation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: Need to uncomment

            String enableFeatureTag = "";
            String disableFeatureTag = "";
            double APPLY_MULTIPLIER = 1;
            double MONTHLY_SALES = 0;

            String duration = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_DURATION_IN_GST_SCREEN);
            String applyMultiplier = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_APPLY_MULTIPLIER_IN_GST_SCREEN);

            if (!TextUtils.isEmpty(duration)) {
                if (duration.equalsIgnoreCase(SPINNER_ITEM_MONTHLY)) {
                    enableFeatureTag = TAG_NAME_MONTHLY_SALES_LABEL_IN_GST_SCREEN;
                    disableFeatureTag = TAG_NAME_QUARTERLY_SALES_LABEL_IN_GST_SCREEN;
                } else if (duration.equalsIgnoreCase(SPINNER_ITEM_QUATERLY)) {
                    enableFeatureTag = TAG_NAME_QUARTERLY_SALES_LABEL_IN_GST_SCREEN;
                    disableFeatureTag = TAG_NAME_MONTHLY_SALES_LABEL_IN_GST_SCREEN;
                }
                DynamicUITable enableTableByFeatureId = dynamicUIDao.getRowByTAGandScreen(enableFeatureTag, dynamicUITable.getScreenID());
                if (enableTableByFeatureId != null) {
                    int featureId = enableTableByFeatureId.getFeatureID();
                    dynamicUIDao.EnableOrDisableByFeatureId(dynamicUITable.getScreenID(), featureId, true);
                    dynamicUIDao.sumOfAllFieldsByFeatureId(TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN, dynamicUITable.getScreenID(), featureId);
                }
                DynamicUITable disableTableByFeatureId = dynamicUIDao.getRowByTAGandScreen(disableFeatureTag, dynamicUITable.getScreenID());
                if (disableTableByFeatureId != null) {
                    int featureId = disableTableByFeatureId.getFeatureID();
                    dynamicUIDao.EnableOrDisableByFeatureId(dynamicUITable.getScreenID(), featureId, false);
                }


                if (!TextUtils.isEmpty(applyMultiplier)) {
                    if (applyMultiplier.equalsIgnoreCase("yes")) {
                        APPLY_MULTIPLIER = 1.5;
                    }

                    String monthlySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN);
                    if (!TextUtils.isEmpty(monthlySales)) {
                        MONTHLY_SALES = Double.valueOf(monthlySales);
                        MONTHLY_SALES = (MONTHLY_SALES / 6) * APPLY_MULTIPLIER;
                        MONTHLY_SALES = Math.round(MONTHLY_SALES);

                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN, dynamicUITable.getScreenName(),
                                String.valueOf(MONTHLY_SALES), false, true);
                    }
                }

            }


            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> EditableOrNonEditableByFeatureId(String enableFeatureTag, String disableFeatureTag,
                                                                           List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: Need to uncomment
            if (!TextUtils.isEmpty(enableFeatureTag)) {
                DynamicUITable enableTableByFeatureId = dynamicUIDao.getRowByTAGandScreen(enableFeatureTag, dynamicUITableList.get(0).getScreenID());
                if (enableTableByFeatureId != null) {

                    int featureId = enableTableByFeatureId.getFeatureID();
                    dynamicUIDao.EditableOrNonEditableByFeatureId(dynamicUITableList.get(0).getScreenID(), featureId, VIEW_REQUIRED);

                }
            }
            if (!TextUtils.isEmpty(disableFeatureTag)) {
                DynamicUITable disableTableByFeatureId = dynamicUIDao.getRowByTAGandScreen(disableFeatureTag, dynamicUITableList.get(0).getScreenID());
                if (disableTableByFeatureId != null) {

                    int featureId = disableTableByFeatureId.getFeatureID();
                    dynamicUIDao.EditableOrNonEditableByFeatureId(dynamicUITableList.get(0).getScreenID(), featureId, VIEW_NOT_REQUIRED);
                }
            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> setAddressKYCType(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList,
                                                            String screenNameToCheck) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameList(screenNameToCheck, dynamicUITable.getClientID(),
                    dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                List<String> rawDataSpinnerList = new ArrayList<>();
                for (RawDataTable rawDataTable : rawDataTableList) {
                    rawDataSpinnerList.add(rawDataTable.getAdditional());
                }
                if (rawDataSpinnerList.size() > 0) {
                    if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)) {
                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                            DuplicateDynamicUITable KycTypeInDuplicateTable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_PERMANENT_KYC_TYPE, dynamicUITable.getScreenID());
                            if (KycTypeInDuplicateTable != null && KycTypeInDuplicateTable.getParamlist().length > 0) {
                                List<String> newSpinnerList = new ArrayList<>();
                                List<String> KycTypeSpinnerList = Arrays.asList(KycTypeInDuplicateTable.getParamlist());

                                //todo removed
                                clearCommunicationAddressFields(dynamicUITable, true);
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                                        "", true);

                                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("yes")) {
                                    clearPermanentAddressFields(dynamicUITable);

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        for (String rawDataSpinnerItem : rawDataSpinnerList) {

                                            if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
                                                newSpinnerList.add(rawDataSpinnerItem);
                                            }
                                        }
                                    }

                                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("no")) {

                                    clearPermanentAddressFields(dynamicUITable);

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        newSpinnerList.add(kycTypeSpinnerItem);

                                        for (String rawDataSpinnerItem : rawDataSpinnerList) {
                                            if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
                                                newSpinnerList.remove(rawDataSpinnerItem);
                                            }
                                        }
                                    }
                                }
                                if (newSpinnerList.size() > 0) {
                                    String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                                    if (newSpinnerStringArray.length > 0) {
                                        dynamicUIDao.changeSpinnerList(TAG_NAME_PERMANENT_KYC_TYPE,
                                                DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                                        dynamicUIDao.updateDynamicTableValue(TAG_NAME_PERMANENT_KYC_TYPE,
                                                dynamicUITable.getScreenID(), "");
                                    }
                                }
                            }
                        }
                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT)) {
                            DynamicUITable addressKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_KYC_TYPE, dynamicUITable.getScreenID());
                            DuplicateDynamicUITable KycTypeInDuplicateTable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_PERMANENT_KYC_TYPE, dynamicUITable.getScreenID());

                            if (addressKycType != null && addressKycType.getParamlist().length > 0) {
                                List<String> newSpinnerList = new ArrayList<>();
                                List<String> KycTypeSpinnerList = Arrays.asList(KycTypeInDuplicateTable.getParamlist());
                                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("yes")) {

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        newSpinnerList.add(kycTypeSpinnerItem);
                                    }
                                    if (newSpinnerList.size() > 0) {
                                        String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                                        if (newSpinnerStringArray.length > 0) {
                                            dynamicUIDao.changeSpinnerList(TAG_NAME_COMMUNICATION_KYC_TYPE,
                                                    DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                                        }
                                    }

                                    String permKycID = dynamicUIDao.getValueByFieldName(dynamicUITable.getScreenID(), FIELD_NAME_PERMANENT_KYC_ID);
                                    if (!TextUtils.isEmpty(permKycID)) {

                                        dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), true, FIELD_NAME_COMMUNICATION_KYC_ID,
                                                permKycID, false);
                                    } else {
                                        dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
                                                permKycID, false);
                                    }


                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_KYC_TYPE, TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_1, TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_2, TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_3, TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_PINCODE, TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_CITY, TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_DISTRICT, TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_STATE, TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_LANDMARK, TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);

                                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("no")) {

                                    clearCommunicationAddressFields(dynamicUITable, true);
                                    DynamicUITable dynamicUITable_perAddress_same_as_kyc = getObjectByTAG(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, dynamicUITableList);

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        newSpinnerList.add(kycTypeSpinnerItem);
                                        if (!TextUtils.isEmpty(dynamicUITable_perAddress_same_as_kyc.getValue()) && !dynamicUITable_perAddress_same_as_kyc.getValue().equalsIgnoreCase("no")) {
                                            for (String rawDataSpinnerItem : rawDataSpinnerList) {
                                                if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
                                                    newSpinnerList.remove(rawDataSpinnerItem);

                                                }
                                            }
                                        }
                                        // TODO:  To remove selected permanent kyc type
                                        if (!TextUtils.isEmpty(addressKycType.getValue())) {
                                            for (String kycTypeSpinnerItem1 : KycTypeSpinnerList) {
                                                if (addressKycType.getValue().equalsIgnoreCase(kycTypeSpinnerItem1)) {
                                                    newSpinnerList.remove(kycTypeSpinnerItem1);
                                                }
                                            }
                                        }
                                    }
                                    if (newSpinnerList.size() > 0) {
                                        String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                                        if (newSpinnerStringArray.length > 0) {
                                            dynamicUIDao.changeSpinnerList(TAG_NAME_COMMUNICATION_KYC_TYPE,
                                                    DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());

                                        }
                                    }
                                }
                            }
                        }

                    } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                            DuplicateDynamicUITable KycTypeInDuplicateTable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_PERMANENT_KYC_TYPE, dynamicUITable.getScreenID());
                            if (KycTypeInDuplicateTable != null && KycTypeInDuplicateTable.getParamlist().length > 0) {
                                List<String> newSpinnerList = new ArrayList<>();
                                List<String> KycTypeSpinnerList = Arrays.asList(KycTypeInDuplicateTable.getParamlist());

                                //todo removed
                                clearCommunicationAddressFields(dynamicUITable, true);
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                                        "", true);

                                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("yes")) {
                                    clearPermanentAddressFields(dynamicUITable);

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        for (String rawDataSpinnerItem : rawDataSpinnerList) {

                                            if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
                                                newSpinnerList.add(rawDataSpinnerItem);
                                            }
                                        }
                                    }

                                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("no")) {

                                    clearPermanentAddressFields(dynamicUITable);

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        newSpinnerList.add(kycTypeSpinnerItem);

                                        for (String rawDataSpinnerItem : rawDataSpinnerList) {
                                            if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
                                                newSpinnerList.remove(rawDataSpinnerItem);
                                            }
                                        }
                                    }
                                }
                                if (newSpinnerList.size() > 0) {
                                    String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                                    if (newSpinnerStringArray.length > 0) {
                                        dynamicUIDao.changeSpinnerList(TAG_NAME_PERMANENT_KYC_TYPE,
                                                DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                                        dynamicUIDao.updateDynamicTableValue(TAG_NAME_PERMANENT_KYC_TYPE,
                                                dynamicUITable.getScreenID(), "");
                                    }
                                }
                            }
                        }
                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT)) {
                            DynamicUITable addressKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_KYC_TYPE, dynamicUITable.getScreenID());
                            DuplicateDynamicUITable KycTypeInDuplicateTable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenID());
//coapplicantt
                            if (addressKycType != null && addressKycType.getParamlist().length > 0) {
                                List<String> newSpinnerList = new ArrayList<>();
                                List<String> KycTypeSpinnerList = Arrays.asList(KycTypeInDuplicateTable.getParamlist());
                                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("yes")) {

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        newSpinnerList.add(kycTypeSpinnerItem);
                                    }
                                    // TODO: 08-08-2019 Prasanna --> Changed tagname_communication_kyctype to TAG_NAME_KYC_TYPE
                                    if (newSpinnerList.size() > 0) {
                                        String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                                        if (newSpinnerStringArray.length > 0) {
                                            dynamicUIDao.changeSpinnerList(TAG_NAME_COMMUNICATION_KYC_TYPE,
                                                    DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                                        }
                                    }

                                    String permKycID = dynamicUIDao.getValueByFieldName(dynamicUITable.getScreenID(), FIELD_NAME_PERMANENT_KYC_ID);
                                    if (!TextUtils.isEmpty(permKycID)) {

                                        dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), true, FIELD_NAME_COMMUNICATION_KYC_ID,
                                                permKycID, false);
                                    } else {
                                        dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
                                                permKycID, false);
                                    }


                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_KYC_TYPE, TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_1, TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_2, TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_3, TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_PINCODE, TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_CITY, TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_DISTRICT, TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_STATE, TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);
                                    dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_LANDMARK, TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenID(),
                                            dynamicUITable.getScreenID(), true, false);

                                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                                        dynamicUITable.getValue().equalsIgnoreCase("no")) {

                                    clearCommunicationAddressFields(dynamicUITable, true);
                                    DynamicUITable dynamicUITable_perAddress_same_as_kyc = getObjectByTAG(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, dynamicUITableList);

                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
                                        newSpinnerList.add(kycTypeSpinnerItem);
                                        if (!TextUtils.isEmpty(dynamicUITable_perAddress_same_as_kyc.getValue()) && !dynamicUITable_perAddress_same_as_kyc.getValue().equalsIgnoreCase("no")) {
                                            for (String rawDataSpinnerItem : rawDataSpinnerList) {
                                                if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
                                                    newSpinnerList.remove(rawDataSpinnerItem);

                                                }
                                            }
                                        }
                                        // TODO: To remove selected permanent kyc type
                                        if (!TextUtils.isEmpty(addressKycType.getValue())) {
                                            for (String kycTypeSpinnerItem1 : KycTypeSpinnerList) {
                                                if (addressKycType.getValue().equalsIgnoreCase(kycTypeSpinnerItem1)) {
                                                    newSpinnerList.remove(kycTypeSpinnerItem1);
                                                }
                                            }
                                        }
                                    }
                                    if (newSpinnerList.size() > 0) {
                                        String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                                        if (newSpinnerStringArray.length > 0) {
                                            dynamicUIDao.changeSpinnerList(TAG_NAME_COMMUNICATION_KYC_TYPE,
                                                    DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());

                                        }
                                    }
                                }
                            }
                        }
                    }
//                    else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
//                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_KYC)) {
//                            clearCommunicationAddressFields(dynamicUITable, true);
//                            DuplicateDynamicUITable KycTypeInDuplicateTable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenID());
//                            if (KycTypeInDuplicateTable != null && KycTypeInDuplicateTable.getParamlist().length > 0) {
//                                List<String> newSpinnerList = new ArrayList<>();
//                                List<String> KycTypeSpinnerList = Arrays.asList(KycTypeInDuplicateTable.getParamlist());
//                                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
//                                        dynamicUITable.getValue().equalsIgnoreCase("yes")) {
//                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
//                                        for (String rawDataSpinnerItem : rawDataSpinnerList) {
//                                            if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
//                                                newSpinnerList.add(rawDataSpinnerItem);
//                                            }
//                                        }
//                                    }
//                                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
//                                        dynamicUITable.getValue().equalsIgnoreCase("no")) {
//
//                                    // TODO: If it is no then clear the following field values
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                            "", true);
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                            "", true);
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                            "", true);
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                            "", true);
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                            "", true);
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                            "", true);
//
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                            "", true);
//                                    for (String kycTypeSpinnerItem : KycTypeSpinnerList) {
//                                        newSpinnerList.add(kycTypeSpinnerItem);
//                                        for (String rawDataSpinnerItem : rawDataSpinnerList) {
//                                            if (kycTypeSpinnerItem.equalsIgnoreCase(rawDataSpinnerItem)) {
//                                                newSpinnerList.remove(rawDataSpinnerItem);
//                                            }
//                                        }
//                                    }
//                                }
//                                if (newSpinnerList.size() > 0) {
//                                    String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
//                                    if (newSpinnerStringArray.length > 0) {
//                                        dynamicUIDao.changeSpinnerList(TAG_NAME_COMMUNICATION_KYC_TYPE,
//                                                DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
//                                        dynamicUIDao.updateDynamicTableValue(TAG_NAME_COMMUNICATION_KYC_TYPE,
//                                                dynamicUITable.getScreenID(), "");
//
//                                    }
//                                }
//                            }
//                        }
//                    }
                }
            }
            List<DynamicUITable> finalTableList = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
            data.postValue(finalTableList);
        });
        return data;
    }


    public LiveData<List<DynamicUITable>> setNamesByRadioButtonChanges(DynamicUITable dynamicUITable, String selectedRadioButton, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstT

            // TODO: if verified is selected "no" then disable below fieldsSE
            if (!TextUtils.isEmpty(dynamicUITable.getFieldTag())
                    && dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_VERIFIED_IN_GENERAL_INCOME)
                    && dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_GENERAL_INCOME)) {
                if (!TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase("Yes")) {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME, "", true);
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_STABILITY_OF_INCOME, "", true);
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_VERIFIED_BY_IN_GENERAL_INCOME, "", true);

                } else {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), false, TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME, "", true);
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), false, TAG_NAME_STABILITY_OF_INCOME, "", true);
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), false, TAG_NAME_VERIFIED_BY_IN_GENERAL_INCOME, "", true);

                }
            }// TODO: if verified is selected "no" then disable below fields
            else if (!TextUtils.isEmpty(dynamicUITable.getFieldTag())
                    && dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_VERIFIED_IN_OTHER_INCOME)
                    && dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_OTHER_INCOME_SOURCE)) {
                if (!TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase("Yes")) {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME, "", true);
                } else {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), false, TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME, "", true);
                }
            } else if (!TextUtils.isEmpty(dynamicUITable.getFieldTag())
                    && (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_CATEGORY_IN_GENERAL_INCOME))) {
                if (!TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {
                    // TODO: First clear all fields data
                    clearGeneralIncomeFields(dynamicUITable);
                    // TODO: get rawdata list for applicant
                    List<RawDataTable> applicantnameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_APPLICANT_KYC, dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    if (applicantnameList != null && applicantnameList.size() > 0) {
                        List<String> spinnerList = new ArrayList<>();
                        // TODO: calling getapplicantNamesBasedonIDProof method
                        List<String> applicantSpinnerList = getCoapplicantNamesBasedonIDProof(applicantnameList);

                        if (applicantSpinnerList.size() > 0) {
                            for (String fullName : applicantSpinnerList) {
                                if (!TextUtils.isEmpty(fullName)) {
                                    RawDataTable rawDataTableFromDB = null;
                                    if (!dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_OTHER_INCOME_SOURCE)) {
                                        rawDataTableFromDB = dynamicUIDao.getRawdataByAdditional(dynamicUITable.getScreenName(),
                                                dynamicUITable.getClientID(), fullName);
                                    }
                                    if (rawDataTableFromDB == null) {
                                        spinnerList.add(fullName);
                                    }
                                }
                            }
                        }

                        if (spinnerList.size() > 0) {
                            changeSpinnerList(spinnerList, dynamicUITable.getScreenID(), TAG_NAME_NAME_IN_GENERAL_INCOME);
                        }
                    }
                } else if (!TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) {
                    // TODO: First clear all fields data
                    clearGeneralIncomeFields(dynamicUITable);

                    List<String> distinctModuleType = dynamicUIDao.getNoOfCoApplicants(dynamicUITable.getClientID(),
                            dynamicUITable.getLoanType(), MODULE_TYPE_CO_APPLICANT);

                    // TODO: get rawdata list for co applicant
                    List<RawDataTable> nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_CO_APPLICANT_KYC, dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    if (distinctModuleType != null && distinctModuleType.size() > 0) {
                        if (nameList != null && nameList.size() > 0) {
                            List<String> spinnerList = new ArrayList<>();
                            // TODO: calling getCoapplicantNamesBasedonIDProof method
                            List<String> coapplicantSpinnerList = getCoapplicantNamesBasedonIDProof(nameList);

                            if (coapplicantSpinnerList.size() > 0) {
                                for (String fullName : coapplicantSpinnerList) {
                                    if (!TextUtils.isEmpty(fullName)) {
                                        RawDataTable rawDataTableFromDB = null;
                                        if (!dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_OTHER_INCOME_SOURCE)) {
                                            rawDataTableFromDB = dynamicUIDao.getRawdataByAdditional(dynamicUITable.getScreenName(),
                                                    dynamicUITable.getClientID(), fullName);
                                        }
                                        if (rawDataTableFromDB == null) {
                                            spinnerList.add(fullName);
                                        }
                                    }
                                }
                            }

                            if (spinnerList.size() > 0) {
                                changeSpinnerList(spinnerList, dynamicUITable.getScreenID(), TAG_NAME_NAME_IN_GENERAL_INCOME);
                            }
                        }
                    }
                }
            }


            List<DynamicUITable> finalTableList = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
            data.postValue(finalTableList);
        });
        return data;
    }


    // TODO: COMMON FOR ALL FIXED ASSET SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> FixedAssetValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            // TODO: CATEGORY VALIDATION
            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_CATEGORY_IN_FIXED_ASSET)) {

                // TODO: clear all below fields
                clearFixedAssetFields(dynamicUITable, false);

                // TODO: set drop down for address same as field

                // TODO: GET DISTINCT CO APPLICANT MODULE TYPES
                List<String> distinctModuleType = dynamicUIDao.getNoOfCoApplicants(dynamicUITable.getClientID(),
                        dynamicUITable.getLoanType(), MODULE_TYPE_CO_APPLICANT);
                // TODO: get rawdata list for co applicant
                List<RawDataTable> nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_CO_APPLICANT_KYC, dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                if (distinctModuleType != null && distinctModuleType.size() > 0) {
                    if (nameList != null && nameList.size() > 0) {
                        List<String> spinnerList = new ArrayList<>();
                        // TODO: calling getCoapplicantNamesBasedonIDProof method
                        spinnerList = getCoapplicantNamesBasedonIDProof(nameList);

                        if (spinnerList.size() > 0) {
                            // TODO: change spinner list for owners name
                            changeSpinnerList(spinnerList, dynamicUITable.getScreenID(), TAG_NAME_OWNERS_NAME_IN_FIXED_ASSET);

                            // TODO: change spinner list for address same as
                            List<String> addressList = new ArrayList<>();
                            addressList.add(SPINNER_ITEM_APPLICANT_PERMANENT_ADDRESS_IN_FIXED_ASSET);
                            addressList.add(SPINNER_ITEM_APPLICANT_COMMUNICATION_ADDRESS_IN_FIXED_ASSET);

                            for (int i = 0; i < spinnerList.size(); i++) {
                                String name = spinnerList.get(i);
                                String moduleType = distinctModuleType.get(i);
                                addressList.add(SPINNER_ITEM_CO_APPLICANT_COMMUNICATION_ADDRESS_IN_FIXED_ASSET.replace("[CoApplicant]", moduleType) + " : " + name);
                            }

                            addressList.add(SPINNER_ITEM_NEW_IN_FIXED_ASSET);

                            // TODO: change spinner list for address same as
                            changeSpinnerList(addressList, dynamicUITable.getScreenID(), TAG_NAME_ADDRESS_SAME_AS_IN_FIXED_ASSET);
                        }
                    }
                }

                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                        dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_APPLICANT_IN_FIXED_ASSET)) {
                    // TODO: get rawdata list for co applicant
                    List<RawDataTable> applicantNameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_APPLICANT_KYC, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    if (applicantNameList != null && applicantNameList.size() > 0) {
                        List<String> spinnerList = new ArrayList<>();
                        // TODO: calling getCoapplicantNamesBasedonIDProof method
                        spinnerList = getCoapplicantNamesBasedonIDProof(applicantNameList);

                        if (spinnerList.size() > 0) {
                            // TODO: change spinner list for owners name
                            changeSpinnerList(spinnerList, dynamicUITable.getScreenID(), TAG_NAME_OWNERS_NAME_IN_FIXED_ASSET);
                        }
                    }



                   /* // TODO: Applicant KYC raw data
                    RawDataTable rawDataTableApplicantKYC = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    if (rawDataTableApplicantKYC != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableApplicantKYC);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String fullName = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(fullName)) {
                                    List<String> spinnerList = new ArrayList<>();
                                    spinnerList.add(fullName);
                                    if (spinnerList.size() > 0) {
                                        changeSpinnerList(spinnerList, dynamicUITable.getScreenID(), TAG_NAME_OWNERS_NAME_IN_FIXED_ASSET);
                                    }
                                }
                            }
                        }
                    }*/

                }
            }
            // TODO: ADDRESS SAME AS VALIDATION
            else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_ADDRESS_SAME_AS_IN_FIXED_ASSET)) {
                // TODO: clear address fields
                clearFixedAssetFields(dynamicUITable, true);

                // TODO: copy address based on spinner item
                if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                        dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_APPLICANT_PERMANENT_ADDRESS_IN_FIXED_ASSET)) {
                    // TODO: Applicant KYC Permanent Address raw data
                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ADDRESS_DETAIL,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    setAddressForFixedAssets(rawDataTable, dynamicUITable, ADDRESS_TYPE_PERMANENT_IN_FIXED_ASSET);
                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                        dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_APPLICANT_COMMUNICATION_ADDRESS_IN_FIXED_ASSET)) {
                    // TODO: Applicant KYC Communication Address raw data
                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ADDRESS_DETAIL,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    setAddressForFixedAssets(rawDataTable, dynamicUITable, ADDRESS_TYPE_COMMUNICATION_IN_FIXED_ASSET);

                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) &&
                        dynamicUITable.getValue().contains(CATEGORY_TYPE_CO_APPLICANT_IN_FIXED_ASSET)) {
                    String[] stringArray = dynamicUITable.getValue().split(" ");
                    if (stringArray.length > 0) {
                        String moduleType = stringArray[0];
                        String addressType = stringArray[1];
                        if (!TextUtils.isEmpty(moduleType) && !TextUtils.isEmpty(addressType)) {
                            RawDataTable rawDataTable = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL,
                                    dynamicUITable.getClientID(), moduleType);
                            if (rawDataTable != null) {
                                if (addressType.equalsIgnoreCase(ADDRESS_TYPE_COMMUNICATION_IN_FIXED_ASSET)) {
                                    setAddressForFixedAssets(rawDataTable, dynamicUITable, ADDRESS_TYPE_COMMUNICATION_IN_FIXED_ASSET);
                                }
                            }
                        }
                    }
                }

            }

            List<DynamicUITable> finalTableList = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
            data.postValue(finalTableList);
        });
        return data;
    }

    private void setAddressForFixedAssets(RawDataTable rawDataTable, DynamicUITable dynamicUITable, String addressType) {
        try {
            if (rawDataTable != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                if (hashMap != null && hashMap.size() > 0) {
                    if (addressType.equalsIgnoreCase(ADDRESS_TYPE_PERMANENT_IN_FIXED_ASSET)) {
                        // TODO: SETTING PERMANENT ADDRESS
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_1)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_1).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_1_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_2)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_2).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_2_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_3)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_3).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_3_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PINCODE_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_CITY)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_CITY).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CITY_OR_TOWN_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_DISTRICT)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_DISTRICT).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISTRICT_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STATE_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_PERMANENT_LANDMARK)) {
                            String value = hashMap.get(TAG_NAME_PERMANENT_LANDMARK).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LANDMARK_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                    } else if (addressType.equalsIgnoreCase(ADDRESS_TYPE_COMMUNICATION_IN_FIXED_ASSET)) {
                        // TODO: SETTING COMMUNICATION ADDRESS
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_1_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_2_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_3_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PINCODE_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CITY_OR_TOWN_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_DISTRICT)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_DISTRICT).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISTRICT_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STATE_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_LANDMARK)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_LANDMARK).toString();
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LANDMARK_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                                    value, true, true);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void clearFixedAssetFields(DynamicUITable dynamicUITable, boolean isNewAddress) {
        try {
            if (!isNewAddress) {
                dynamicUIDao.changeSpinnerList(TAG_NAME_OWNERS_NAME_IN_FIXED_ASSET, DataTypeConverter.someObjectListToString(new String[0]),
                        dynamicUITable.getScreenID());
                dynamicUIDao.changeSpinnerList(TAG_NAME_ADDRESS_SAME_AS_IN_FIXED_ASSET, DataTypeConverter.someObjectListToString(new String[0]),
                        dynamicUITable.getScreenID());
            }
            dynamicUIDao.changePinCodeFields(dynamicUITable.getScreenName(), true, TAG_NAME_CITY_OR_TOWN_IN_FIXED_ASSET,
                    "", true, FIELD_TYPE_TEXT_BOX, DataTypeConverter.someObjectListToString(new String[0]));

            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_1_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_2_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_3_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PINCODE_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CITY_OR_TOWN_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISTRICT_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STATE_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LANDMARK_IN_FIXED_ASSET, dynamicUITable.getScreenName(),
                    "", true, true);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    public LiveData<List<DynamicUITable>> setGeneralIncomeScreenChangesByDropDown(DynamicUITable dynamicUITable, String selectedItem
            , String selectedRadioButton, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_VERIFIED_BY_IN_GENERAL_INCOME)) {
                if (!TextUtils.isEmpty(selectedItem) && selectedItem.equalsIgnoreCase(SPINNER_ITEM_OTHERS)) {
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS_SPECIFY_IN_GENERAL_INCOME
                            , dynamicUITable.getScreenName(), dynamicUITable.getModuleType(),
                            true, true);
                } else {
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS_SPECIFY_IN_GENERAL_INCOME
                            , dynamicUITable.getScreenName(), dynamicUITable.getModuleType(),
                            true, false);
                }
            } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_IN_GENERAL_INCOME) &&
                    !TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {
                RawDataTable applicantRawData = dynamicUIDao.getRawDataByScreenNameAndFieldName(SCREEN_NAME_APPLICANT_KYC,
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType(), selectedItem);
                if (applicantRawData != null) {
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MODULE_TYPE, dynamicUITable.getScreenName(), applicantRawData.getModuleType(),
                            true, false);
                }
            } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_IN_GENERAL_INCOME) &&
                    !TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) {
                RawDataTable applicantRawData = dynamicUIDao.getRawDataByScreenNameAndFieldName(SCREEN_NAME_CO_APPLICANT_KYC,
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType(), selectedItem);
                if (applicantRawData != null) {
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MODULE_TYPE, dynamicUITable.getScreenName(), applicantRawData.getModuleType(),
                            true, false);
                }
            }

            List<DynamicUITable> finalTableList = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
            data.postValue(finalTableList);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> setOtherIncomeScreenChangesByDropDown(DynamicUITable dynamicUITable, String selectedItem
            , String selectedRadioButton, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_IN_OTHER_INCOME) &&
                    !TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {
                RawDataTable applicantRawData = dynamicUIDao.getRawDataByScreenNameAndFieldName(SCREEN_NAME_APPLICANT_KYC,
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType(), selectedItem);
                if (applicantRawData != null) {
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MODULE_TYPE, dynamicUITable.getScreenName(), applicantRawData.getModuleType(),
                            true, false);
                }
            } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_IN_OTHER_INCOME) &&
                    !TextUtils.isEmpty(selectedRadioButton) && selectedRadioButton.equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) {
                RawDataTable applicantRawData = dynamicUIDao.getRawDataByScreenNameAndFieldName(SCREEN_NAME_CO_APPLICANT_KYC,
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType(), selectedItem);
                if (applicantRawData != null) {
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MODULE_TYPE, dynamicUITable.getScreenName(), applicantRawData.getModuleType(),
                            true, false);
                }
            }

            List<DynamicUITable> finalTableList = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
            data.postValue(finalTableList);
        });
        return data;
    }

    private void clearGeneralIncomeFields(DynamicUITable dynamicUITable) {
        try {
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NAME_IN_GENERAL_INCOME, dynamicUITable.getScreenName(), "", true, true);
            dynamicUIDao.changeSpinnerList(TAG_NAME_NAME_IN_GENERAL_INCOME,
                    DataTypeConverter.someObjectListToString(new String[0]), dynamicUITable.getScreenID());
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME, dynamicUITable.getScreenName(), "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_VERIFIED_IN_GENERAL_INCOME, dynamicUITable.getScreenName(), "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_VERIFIED_BY_IN_GENERAL_INCOME, dynamicUITable.getScreenName(), "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME, dynamicUITable.getScreenName(), "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STABILITY_OF_INCOME, dynamicUITable.getScreenName(), "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS_SPECIFY_IN_GENERAL_INCOME, dynamicUITable.getScreenName(), "", true, false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void changeSpinnerList(List<String> newSpinnerList, String screenId, String tagName) {
        try {
            String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
            dynamicUIDao.changeSpinnerList(tagName,
                    DataTypeConverter.someObjectListToString(newSpinnerStringArray), screenId);
        } catch (Exception ex) {
            ex.printStackTrace();
            insertLog("changeSpinnerList", ex.getMessage(), "", "", TAG, "", "", "");
        }
    }

    public void insertLog(String methodName, String message, String staffId, String screenNo, String screenName, String clientId,
                          String loanType, String moduleType) {
        try {

            String imei = appHelper.getIMEI();
            String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS);

            LogTable logTable = new LogTable(timeStamp, staffId, methodName, message, screenNo, screenName,
                    clientId, loanType, moduleType, imei);

            executor.execute(() ->
                    {
                        dynamicUIDao.insertLog(logTable);

                    }
            );

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void updateSelectedRoleName(String selectedRoleName) {
        try {
            executor.execute(() ->
                    {
                        dynamicUIDao.updateIsselectedStatusForAll(false);
                        dynamicUIDao.updateRoleNameSelectedStatus(selectedRoleName, true);

                    }
            );

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public void confirmCashCollectionSummary(CashCollectionSummaryDTO.IndividualCenterCollection individualCenterCollection) {
        try {
            executor.execute(() ->
                    {
                        dynamicUIDao.confirmCashCollectionSummary(individualCenterCollection.getCenterName(),
                                individualCenterCollection.isCenterConfirm());
                    }
            );


        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void insertDocumentRawData(String screenId, DocumentUploadTableNew documentUploadTableNew,
                                       List<DocumentUploadTableNew> documentUploadTableNewList) {
        try {

            List<DocumentUploadTableNew> documentUploadTableListToUpload = new ArrayList<>();

            List<DocumentUploadTableNew> documentUploadSubHeaderList = dynamicUIDao.getDocumentUploadSubHeader(documentUploadTableNew.getClient_id(),
                    documentUploadTableNew.getLoan_type(), true);

            if (documentUploadSubHeaderList != null && documentUploadSubHeaderList.size() > 0) {
                for (DocumentUploadTableNew documentUploadSubHeader : documentUploadSubHeaderList) {

                    List<String> fileNameList = dynamicUIDao.getUploadedDocumentByDocumentName(documentUploadSubHeader.getClient_id(),
                            documentUploadSubHeader.getLoan_type(), false, documentUploadSubHeader.getDocument_name(),
                            documentUploadSubHeader.getModule_type(), true);

                    if (fileNameList != null && fileNameList.size() > 0) {

                        DocumentUploadTableNew documentUploadTable = new DocumentUploadTableNew();
                        documentUploadTable.setScreen_id(documentUploadSubHeader.getScreen_id());
                        documentUploadTable.setDocument_name(documentUploadSubHeader.getDocument_full_name());
                        documentUploadTable.setCustomer_type(documentUploadSubHeader.getModule_type());
                        documentUploadTable.setDisplay_name(documentUploadSubHeader.getFull_display_name());
                        /*String[] fileArray = new String[fileNameList.size()];

                        for(int i=0 ;i<fileNameList.size();i++){
                            fileArray[i]=fileNameList.get(i);
                        }
*/
                        documentUploadTable.setFILES(fileNameList.toArray(new String[fileNameList.size()]));
//                        documentUploadTable.setFILES(fileArray);
                        documentUploadTable.setFileCount(fileNameList.size());

                        documentUploadTableListToUpload.add(documentUploadTable);
                    }
                }
            }

            if (documentUploadTableListToUpload.size() > 0) {

                String rawData = new Gson().toJson(documentUploadTableListToUpload);

                if (!TextUtils.isEmpty(rawData)) {

                    RawDataTable rawDataFromDB = dynamicUIDao.getRawDataByScreenNoTopOne(screenId,
                            documentUploadTableNew.getClient_id(), documentUploadTableNew.getLoan_type());
                    postSubmittedAllScreensLiveData(rawData, SCREEN_N0_DOCUMENT_UPLOAD_PHL,"", userId,SCREEN_NAME_DOCUMENT_UPLOAD,moduleType);

                    if (rawDataFromDB != null) {
                        // TODO: Update Raw Data

                        rawDataFromDB.setRawdata(rawData);

                        dynamicUIDao.updateRawDataBag(rawDataFromDB.getScreen_no(), rawDataFromDB.getId(), rawDataFromDB.getRawdata()); // TODO: update json in raw data table

                    } else {
                        // TODO: Insert Raw Data

                        final RawDataTable rawDataTable = new RawDataTable(rawData, screenId, SCREEN_NAME_DOCUMENT_UPLOAD,
                                "", documentUploadTableNew.getClient_id(), documentUploadTableNew.getLoan_type(),
                                documentUploadTableNew.getUser_id(), documentUploadTableNew.getModule_type(), "");

                        int refId = 1;
                        rawDataTable.setRef_id(refId);
                        rawDataTable.setUniqueId(String.valueOf(refId));
                        String rawDataTag = SCREEN_NAME_DOCUMENT_UPLOAD + "_" + refId;
                        rawDataTable.setTag_name(rawDataTag);
                        rawDataTable.setProductId(documentUploadTableNew.getProduct_id());
                        dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table

                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();

            insertLog("insertDocumentRawData", ex.getMessage(), "", "", TAG, "", "", "");
        }
    }

    public DynamicUITable getObjectByTAG(String tagName, List<DynamicUITable> viewParametersList) {
        DynamicUITable dynamicUITable1 = null;
        try {
            for (DynamicUITable dynamicUITable : viewParametersList) {
                if (dynamicUITable != null && !TextUtils.isEmpty(dynamicUITable.getFieldTag())
                        && dynamicUITable.getFieldTag().trim().equalsIgnoreCase(tagName)) {

                    dynamicUITable1 = dynamicUITable;
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return dynamicUITable1;
    }

    private void clearPermanentAddressFields(DynamicUITable dynamicUITable) {
        dynamicUIDao.updateDynamicTableValue(TAG_NAME_KYC_TYPE,
                dynamicUITable.getScreenID(), "");
        // TODO: If it is no then clear the following field values

        if (dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_UTILITY_BILLS)) {
            dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                    "", true, false);
        } else {
            dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                    "", true, true);
        }

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                "", true, true);

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                "", true, true);

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                "", true, true);

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                "", true, true);

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                "", true, true);

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                "", true, true);

        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                "", true, true);
    }


    private void clearCommunicationAddressFields(DynamicUITable dynamicUITable, boolean clearKYCType) {
        try {
            // TODO: If it is no then clear the following field values

            if (clearKYCType) {
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenName(),
                        "", true, true);
            }

            if (dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_UTILITY_BILLS)) {
                dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                        "", true, false);
            } else {
                dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                        "", true, true);
            }
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                    "", true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                    "", true, true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }


    // TODO: 25-09-2019
    public LiveData<List<DynamicUITable>> getReferenceNames(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList,
                                                            String screenToCheck) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<String> nameList = dynamicUIDao.getRawDataForReferences(screenToCheck, dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            List<String> rawDataSpinnerList = new ArrayList<>();
            if (nameList != null && nameList.size() > 0) {
                for (String name : nameList) {
                    rawDataSpinnerList.add(name);
                }

                if (rawDataSpinnerList.size() > 0) {
                    String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                    if (newSpinnerStringArray != null && newSpinnerStringArray.length > 0) {
                        dynamicUIDao.changeSpinnerList(TAG_NAME_FULL_NAME,
                                DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                    }
                }
            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }


    public LiveData<List<DynamicUITable>> getCoApplicantDetails(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList,
                                                                String screenToCheck) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            RawDataTable rawDataTable = dynamicUIDao.getRawdataByFieldName(screenToCheck, dynamicUITable.getLoanType(), dynamicUITable.getClientID(), dynamicUITable.getValue());

            if (rawDataTable != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                        String name = hashMap.get(TAG_NAME_FULL_NAME).toString();
                        if (!TextUtils.isEmpty(name)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, dynamicUITable.getScreenName(),
                                    name, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_CONTAINS_DOB)) {
                        String dob = hashMap.get(TAG_NAME_CONTAINS_DOB).toString();
                        if (!TextUtils.isEmpty(dob)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_DATE_OF_BIRTH, dynamicUITable.getScreenName(),
                                    dob, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_DATE_OF_BIRTH, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_CONTAINS_AGE)) {
                        String age = hashMap.get(TAG_NAME_CONTAINS_AGE).toString();
                        if (!TextUtils.isEmpty(age)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_AGE, dynamicUITable.getScreenName(),
                                    age, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_AGE, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_GENDER)) {
                        String gender = hashMap.get(TAG_NAME_GENDER).toString();
                        if (!TextUtils.isEmpty(gender)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_GENDER, dynamicUITable.getScreenName(),
                                    gender, false);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_GENDER, dynamicUITable.getScreenName(),
                                    "", true);
                        }
                    }
                }

            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }


    public LiveData<List<DynamicUITable>> getReferenceDetails(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList,
                                                              String screenToCheck) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            RawDataTable rawDataTable = dynamicUIDao.getRawdataByAdditional(screenToCheck, dynamicUITable.getClientID(), dynamicUITable.getValue());

            if (rawDataTable != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_REFERENCE_TYPE)) {
                        String name = hashMap.get(TAG_NAME_REFERENCE_TYPE).toString();
                        if (!TextUtils.isEmpty(name)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REFERENCE_TYPE, dynamicUITable.getScreenName(),
                                    name, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REFERENCE_TYPE, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_CONTACT_NO)) {
                        String dob = hashMap.get(TAG_NAME_CONTACT_NO).toString();
                        if (!TextUtils.isEmpty(dob)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CONTACT_NO, dynamicUITable.getScreenName(),
                                    dob, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CONTACT_NO, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_RE_ENTER_CONTACT_NO)) {
                        String age = hashMap.get(TAG_NAME_RE_ENTER_CONTACT_NO).toString();
                        if (!TextUtils.isEmpty(age)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RE_ENTER_CONTACT_NO, dynamicUITable.getScreenName(),
                                    age, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RE_ENTER_CONTACT_NO, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                        String gender = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                        if (!TextUtils.isEmpty(gender)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                    gender, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                        String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                        if (!TextUtils.isEmpty(addressLine2)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                    addressLine2, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }

                    if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                        String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                        if (!TextUtils.isEmpty(addressLine3)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                    addressLine3, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                        String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                        if (!TextUtils.isEmpty(pincode)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PINCODE, dynamicUITable.getScreenName(),
                                    pincode, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PINCODE, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_CITY)) {
                        String city = hashMap.get(TAG_NAME_CITY).toString();
                        if (!TextUtils.isEmpty(city)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CITY, dynamicUITable.getScreenName(),
                                    city, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CITY, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                        String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                        if (!TextUtils.isEmpty(district)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISTRICT, dynamicUITable.getScreenName(),
                                    district, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISTRICT, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_STATE)) {
                        String state = hashMap.get(TAG_NAME_STATE).toString();
                        if (!TextUtils.isEmpty(state)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STATE, dynamicUITable.getScreenName(),
                                    state, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STATE, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_LANDLINE_NUMBER)) {
                        String landlineNum = hashMap.get(TAG_NAME_LANDLINE_NUMBER).toString();
                        if (!TextUtils.isEmpty(landlineNum)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LANDLINE_NUMBER, dynamicUITable.getScreenName(),
                                    landlineNum, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LANDLINE_NUMBER, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }


                    if (hashMap.containsKey(TAG_NAME_REFERENCE_TYPE)) {
                        String landlineNum = hashMap.get(TAG_NAME_REFERENCE_TYPE).toString();
                        if (!TextUtils.isEmpty(landlineNum)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITable.getScreenName(),
                                    landlineNum, false, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITable.getScreenName(),
                                    "", true, true);
                        }
                    }

                    if (hashMap.containsKey(TAG_NAME_UNIQUE_ID)) {
                        String uniqueId = hashMap.get(TAG_NAME_UNIQUE_ID).toString();
                        if (!TextUtils.isEmpty(uniqueId)) {
                            // TODO: Updating Correlation ID
                            dynamicUIDao.updateDynamicTableCorrelationIdByScreenName(dynamicUITable.getScreenName(),
                                    uniqueId);
                        }
                    }
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SAVE_BUTTON, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableFieldName(TAG_NAME_SAVE_BUTTON, dynamicUITable.getScreenID(),
                            TAG_NAME_SAVE_BUTTON);
                }

            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> copyAddressBasedOnDropDown(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList,
                                                                     String screenToCheck) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)) {//new requirement done by sitaram
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_KYC_TYPE)) {
                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                            "false", true);

                    clearCommunicationAddressFields(dynamicUITable, true);
                    clearPermanentAddressFields(dynamicUITable);

                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(screenToCheck, dynamicUITable.getClientID(),
                            dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            // TODO: 19-08-2019 clear communication fields
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                                    "false", true);
                            // TODO: 23-09-2019 for kyc id tagname changed based on kyctype
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(kycId)) {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, true);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, false);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String city = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String state = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                                String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
                                if (!TextUtils.isEmpty(landmark)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                            landmark, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                        }
                    }
                }
            }
            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {//new requirement done by sitaram
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_KYC_TYPE)) {
                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                            "false", true);

                    clearCommunicationAddressFields(dynamicUITable, true);
                    clearPermanentAddressFields(dynamicUITable);

                    if (dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS_PROOF)) {
                        RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ADDRESS_DETAIL, dynamicUITable.getClientID(),
                                dynamicUITable.getLoanType());
                        if (rawDataTable != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {

                                // TODO: 19-08-2019 clear communication fields
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                                        "false", true);
                                // TODO: 23-09-2019 for kyc id tagname changed based on kyctype
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_KYC_ID)) {
                                    String kycId = hashMap.get(TAG_NAME_PERMANENT_KYC_ID).toString();
                                    if (!TextUtils.isEmpty(kycId)) {
                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                                kycId, false, true);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                                kycId, false, false);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_1)) {
                                    String addressLine1 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_1).toString();
                                    if (!TextUtils.isEmpty(addressLine1)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                                addressLine1, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_2)) {
                                    String addressLine2 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_2).toString();
                                    if (!TextUtils.isEmpty(addressLine2)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                                addressLine2, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
                                    String pincode = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
                                    if (!TextUtils.isEmpty(pincode)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                                pincode, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_CITY)) {
                                    String city = hashMap.get(TAG_NAME_PERMANENT_CITY).toString();
                                    if (!TextUtils.isEmpty(city)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                                city, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_DISTRICT)) {
                                    String district = hashMap.get(TAG_NAME_PERMANENT_DISTRICT).toString();
                                    if (!TextUtils.isEmpty(district)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                                district, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
                                    String state = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
                                    if (!TextUtils.isEmpty(state)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                                state, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_LANDMARK)) {
                                    String landmark = hashMap.get(TAG_NAME_PERMANENT_LANDMARK).toString();
                                    if (!TextUtils.isEmpty(landmark)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                                landmark, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                            }
                        }
                    } else {
                        RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(screenToCheck, dynamicUITable.getClientID(),
                                dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());
                        if (rawDataTable != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {

                                // TODO: 19-08-2019 clear communication fields
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, dynamicUITable.getScreenName(),
                                        "false", true);
                                // TODO: 23-09-2019 for kyc id tagname changed based on kyctype
                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                    String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                    if (!TextUtils.isEmpty(kycId)) {
                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                                kycId, false, true);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                                kycId, false, false);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                    String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                    if (!TextUtils.isEmpty(addressLine1)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                                addressLine1, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                    String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                    if (!TextUtils.isEmpty(addressLine2)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                                addressLine2, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                    String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                    if (!TextUtils.isEmpty(addressLine2)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                                addressLine2, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                    String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                                    if (!TextUtils.isEmpty(pincode)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                                pincode, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_CITY)) {
                                    String city = hashMap.get(TAG_NAME_CITY).toString();
                                    if (!TextUtils.isEmpty(city)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                                city, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                                    String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                                    if (!TextUtils.isEmpty(district)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                                district, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_STATE)) {
                                    String state = hashMap.get(TAG_NAME_STATE).toString();
                                    if (!TextUtils.isEmpty(state)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                                state, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                                    String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
                                    if (!TextUtils.isEmpty(landmark)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                                landmark, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                            }
                        }
                    }
                }
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_KYC_TYPE)) {
                    clearCommunicationAddressFields(dynamicUITable, false);
                    if (dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS_PROOF)) {
                        RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ADDRESS_DETAIL, dynamicUITable.getClientID(),
                                dynamicUITable.getLoanType());

                        if (rawDataTable != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {

                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_KYC_ID)) {
                                    String kycId = hashMap.get(TAG_NAME_COMMUNICATION_KYC_TYPE).toString();


                                    if (!TextUtils.isEmpty(kycId)) {
                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                                                kycId, false, true);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                                                kycId, false, true);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                                    String addressLine1 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                                    if (!TextUtils.isEmpty(addressLine1)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                                addressLine1, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                                    String addressLine2 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                                    if (!TextUtils.isEmpty(addressLine2)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                                addressLine2, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
                                    String addressLine2 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
                                    if (!TextUtils.isEmpty(addressLine2)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                                addressLine2, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                                    String pincode = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                                    if (!TextUtils.isEmpty(pincode)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                                                pincode, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
                                    String city = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
                                    if (!TextUtils.isEmpty(city)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                                                city, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_DISTRICT)) {
                                    String district = hashMap.get(TAG_NAME_COMMUNICATION_DISTRICT).toString();
                                    if (!TextUtils.isEmpty(district)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                                                district, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                                    String state = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                                    if (!TextUtils.isEmpty(state)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                                                state, false);
                                    } else {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_LANDMARK)) {
                                    String landmark = hashMap.get(TAG_NAME_COMMUNICATION_LANDMARK).toString();
                                    if (!TextUtils.isEmpty(landmark)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                                                landmark, false);
                                    } else {

                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                                                "", true);
                                    }
                                }
                            }
                        }

                    }
                }
            }
            // TODO: seetharam
//            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
//                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_KYC_TYPE)) {
//
//                    clearCommunicationAddressFields(dynamicUITable, false);
//                    if (dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)) {
//                        RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ADDRESS_DETAIL, dynamicUITable.getClientID(),
//                                dynamicUITable.getLoanType());
//
//                        if (rawDataTable != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                            if (hashMap != null && hashMap.size() > 0) {
//
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_KYC_ID)) {
//                                    String kycId = hashMap.get(TAG_NAME_PERMANENT_KYC_TYPE).toString();
//                                    if (!TextUtils.isEmpty(kycId)) {
//                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
//                                                kycId, false, true);
//                                    } else {
//                                        dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
//                                                "", true);
//                                    }
//                                } else {
//                                    dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
//                                            "", true);
//                                }
//
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_1)) {
//                                    String addressLine1 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_1).toString();
//                                    if (!TextUtils.isEmpty(addressLine1)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                                addressLine1, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_2)) {
//                                    String addressLine2 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_2).toString();
//                                    if (!TextUtils.isEmpty(addressLine2)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                                addressLine2, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
//                                    String pincode = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
//                                    if (!TextUtils.isEmpty(pincode)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                                pincode, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_CITY)) {
//                                    String city = hashMap.get(TAG_NAME_PERMANENT_CITY).toString();
//                                    if (!TextUtils.isEmpty(city)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                                city, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_DISTRICT)) {
//                                    String district = hashMap.get(TAG_NAME_PERMANENT_DISTRICT).toString();
//                                    if (!TextUtils.isEmpty(district)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                                district, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
//                                    String state = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
//                                    if (!TextUtils.isEmpty(state)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                                state, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_LANDMARK)) {
//                                    String landmark = hashMap.get(TAG_NAME_PERMANENT_LANDMARK).toString();
//                                    if (!TextUtils.isEmpty(landmark)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                                landmark, false);
//                                    } else {
//
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                            }
//                        }
//
//                    } else if (dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {
//                        RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ADDRESS_DETAIL, dynamicUITable.getClientID(),
//                                dynamicUITable.getLoanType());
//
//                        if (rawDataTable != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                            if (hashMap != null && hashMap.size() > 0) {
//
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_KYC_ID)) {
//                                    String kycId = hashMap.get(TAG_NAME_COMMUNICATION_KYC_TYPE).toString();
//
//
//                                    if (!TextUtils.isEmpty(kycId)) {
//                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
//                                                kycId, false, true);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
//                                                kycId, false, true);
//                                    }
//                                }
//
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
//                                    String addressLine1 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
//                                    if (!TextUtils.isEmpty(addressLine1)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                                addressLine1, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
//                                    String addressLine2 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
//                                    if (!TextUtils.isEmpty(addressLine2)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                                addressLine2, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
//                                    String pincode = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
//                                    if (!TextUtils.isEmpty(pincode)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                                pincode, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
//                                    String city = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
//                                    if (!TextUtils.isEmpty(city)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                                city, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_DISTRICT)) {
//                                    String district = hashMap.get(TAG_NAME_COMMUNICATION_DISTRICT).toString();
//                                    if (!TextUtils.isEmpty(district)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                                district, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
//                                    String state = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
//                                    if (!TextUtils.isEmpty(state)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                                state, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_COMMUNICATION_LANDMARK)) {
//                                    String landmark = hashMap.get(TAG_NAME_COMMUNICATION_LANDMARK).toString();
//                                    if (!TextUtils.isEmpty(landmark)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                                landmark, false);
//                                    } else {
//
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                            }
//                        }
//
//                    } else {
//                        RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(screenToCheck, dynamicUITable.getClientID(), dynamicUITable.getValue(),
//                                dynamicUITable.getLoanType());
//
//                        if (rawDataTable != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                            if (hashMap != null && hashMap.size() > 0) {
//
//                                // TODO: 23-09-2019
//                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
//                                    String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
//                                    if (!TextUtils.isEmpty(kycId)) {
//                                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
//                                                kycId, false, true);
//                                    } else {
//                                        dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
//                                                "", true);
//                                    }
//                                } else {
//                                    dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
//                                            "", true);
//                                }
//                                if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
//                                    String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
//                                    if (!TextUtils.isEmpty(addressLine1)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                                addressLine1, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
//                                    String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
//                                    if (!TextUtils.isEmpty(addressLine2)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                                addressLine2, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PINCODE)) {
//                                    String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
//                                    if (!TextUtils.isEmpty(pincode)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                                pincode, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_CITY)) {
//                                    String city = hashMap.get(TAG_NAME_CITY).toString();
//                                    if (!TextUtils.isEmpty(city)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                                city, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
//                                    String district = hashMap.get(TAG_NAME_DISTRICT).toString();
//                                    if (!TextUtils.isEmpty(district)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                                district, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_STATE)) {
//                                    String state = hashMap.get(TAG_NAME_STATE).toString();
//                                    if (!TextUtils.isEmpty(state)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                                state, false);
//                                    } else {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
//                                    String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
//                                    if (!TextUtils.isEmpty(landmark)) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                                landmark, false);
//                                    } else {
//
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
//                                                "", true);
//                                    }
//                                }
//                            }
//                        }
//
//                    }
//                }
//            }
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }

    public LiveData<List<DynamicUITable>> addressDetailValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            // TODO: APPLICANT ADDRESS DETAIL SCREEN
            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)) {

                // TODO: ( RADIO BUTTON ) PERMANENT ADDRESS SAME AS KYC
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    List<RawDataTable> applicantRawDataTableList = null;

                    if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_JLG)) {
                        applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC,
                                dynamicUITable.getClientID(), MODULE_TYPE_APPLICANT, dynamicUITable.getLoanType());
                    } else {
                        applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC,
                                dynamicUITable.getClientID(), dynamicUITable.getModuleType(), dynamicUITable.getLoanType());
                    }

                    List<String> applicantRawDataSpinnerList = new ArrayList<>();

                    if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                    String value = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                    if (!TextUtils.isEmpty(value) &&
                                            (!value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)&&!value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MOA_AOA)
                                                    &&!value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_NREGA)
                                                    && !value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AUTHORIZED_SIGNATURE_PROOF))) {
                                        applicantRawDataSpinnerList.add(value);
                                    }
                                }
                            }
                        }
                    }

                    // TODO: Applicant Permanent address ( YES )
                    if (dynamicUITable.getValue().equalsIgnoreCase("yes")) {
                        // TODO: Change Spinner List
                        changeSpinnerList(applicantRawDataSpinnerList, dynamicUITable.getScreenID(), TAG_NAME_PERMANENT_KYC_TYPE);
                    } else {
                        // TODO: Applicant Permanent address ( NO )
                        DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(
                                TAG_NAME_PERMANENT_KYC_TYPE, dynamicUITable.getScreenID());

                        List<String> duplicateSpinnerList = new ArrayList<>();

                        if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist() != null &&
                                duplicateDynamicUITable.getParamlist().length > 0) {

                            duplicateSpinnerList.addAll(Arrays.asList(duplicateDynamicUITable.getParamlist()));
                        }

                        if (applicantRawDataSpinnerList.size() > 0) {
                            for (String spinnerItem : applicantRawDataSpinnerList) {
                                if (!spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)||!spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MOA_AOA)
                                        ||!spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_NREGA)
                                        || !spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AUTHORIZED_SIGNATURE_PROOF)) {
                                    duplicateSpinnerList.remove(spinnerItem);
                                }
                            }
                        }

                        // TODO: Changing spinner list
                        changeSpinnerList(duplicateSpinnerList, dynamicUITable.getScreenID(), TAG_NAME_PERMANENT_KYC_TYPE);

                    }
                }
                // TODO: ( RADIO BUTTON ) COMMUNICATION ADDRESS SAME AS PERMANENT
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    // TODO: Communication address ( YES )
                    if (dynamicUITable.getValue().equalsIgnoreCase("yes")) {

                        String permKycID = dynamicUIDao.getValueByFieldName(dynamicUITable.getScreenID(), FIELD_NAME_PERMANENT_KYC_ID);
                        if (!TextUtils.isEmpty(permKycID)) {

                            dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), true, FIELD_NAME_COMMUNICATION_KYC_ID,
                                    permKycID, false);
                        } else {
                            dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
                                    permKycID, false);
                        }

                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_KYC_TYPE, TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_1, TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_2, TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_3, TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_PINCODE, TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_CITY, TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_DISTRICT, TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_STATE, TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_LANDMARK, TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);


                    } else {
                        // TODO: Communication address ( NO )

                        String value = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                TAG_NAME_PERMANENT_KYC_TYPE);
                        if (!TextUtils.isEmpty(value)) {
                            // TODO: Get Param list tvName duplicate table
                            DynamicUITable dynamicUITableCommType = dynamicUIDao.GetDynamicTableRowByScreenName(dynamicUITable.getScreenName(),
                                    dynamicUITable.getClientID(), TAG_NAME_COMMUNICATION_KYC_TYPE);
                            if (dynamicUITableCommType != null && dynamicUITableCommType.getParamlist() != null &&
                                    dynamicUITableCommType.getParamlist().length > 0) {
                                List<String> stringList = new ArrayList<>();
                                stringList.addAll(Arrays.asList(dynamicUITableCommType.getParamlist()));
                                if (stringList.size() > 0) {
                                    stringList.remove(value);
                                    changeSpinnerList(stringList, dynamicUITable.getScreenID(), TAG_NAME_COMMUNICATION_KYC_TYPE);
                                }
                            }
                        }
                    }
                }
                // TODO: ( DROP DOWN ) PERMANENT ADDRESS KYC TYPE
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_KYC_TYPE)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    RawDataTable rawDataTable = null;
                    if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_JLG)) {
                        rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(SCREEN_NAME_APPLICANT_KYC,
                                dynamicUITable.getClientID(),
                                dynamicUITable.getValue(), dynamicUITable.getLoanType(), MODULE_TYPE_APPLICANT);

                    } else {
                        rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(SCREEN_NAME_APPLICANT_KYC,
                                dynamicUITable.getClientID(),
                                dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());
                    }

                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            // TODO:  for kyc id tag name changed based on kyc type
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(kycId)) {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, true);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, false);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String city = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String state = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                                String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
                                if (!TextUtils.isEmpty(landmark)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                            landmark, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                        }
                    }
                }
                // TODO: ( DROP DOWN ) COMMUNICATION ADDRESS KYC TYPE
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_KYC_TYPE)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(SCREEN_NAME_APPLICANT_KYC,
                            dynamicUITable.getClientID(),
                            dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());

                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            // TODO:  for kyc id tag name changed based on kyc type
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(kycId)) {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, true);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, false);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String city = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String state = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                                String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
                                if (!TextUtils.isEmpty(landmark)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                                            landmark, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                        }
                    }
                }

                String toScreenNo = dynamicUITableList.get(0).getScreenID();
                String clientId = dynamicUITableList.get(0).getClientID();
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                RawDataTable applicantKyc = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    HashMap<String, Object> hashMapapplicant = setKeyValueForObject(applicantKyc);
                    if (hashMapapplicant != null && hashMapapplicant.size() > 0) {
                        if (hashMapapplicant.containsKey(TAG_NAME_FULL_NAME)) {
                            if (!TextUtils.isEmpty(hashMapapplicant.get(TAG_NAME_FULL_NAME).toString())) {
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_FULL_NAME, toScreenNo, hashMapapplicant.get(TAG_NAME_FULL_NAME).toString());
                            }

                        }
                    }
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_KYC_ID)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_APPLICATION_PERMANENT_RE_ENTER_KYC_ID, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString());
                            dynamicUIDao.updateDynamicTableValue(TAG_NAME_APPLICATION_PERMANENT_KYC_ID, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString());

                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_ADDRESS_LINE_ONE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_ADDRESS_LINE_ONE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_ADDRESS_LINE_ONE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_ADDRESS)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_ADDRESS).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_TWO, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_ADDRESS).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_PINCODE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_PINCODE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_CITY)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_CITY).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_CITY, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_CITY).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_APPLICATION_DATE_OF_BIRTH, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_STATE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_STATE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_STATE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_STATE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_PINCODE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_COMMUNICATION_PINCODE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString());
                        }

                        if (hashMap.containsKey(TAG_NAME_APPLICATION_DISTRICT)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_DISTRICT).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_DISTRICT, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_DISTRICT).toString());
                        }
                    }
                }
            }

            // TODO: CO APPLICANT ADDRESS DETAIL SCREEN
            else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {

                // TODO: ( RADIO BUTTON ) PERMANENT ADDRESS SAME AS KYC
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    List<RawDataTable> applicantRawDataTableList = null;

                    if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_JLG)) {
                        applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC,
                                dynamicUITable.getClientID(), MODULE_TYPE_APPLICANT, dynamicUITable.getLoanType());
                    } else {
                        applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC,
                                dynamicUITable.getClientID(), dynamicUITable.getModuleType(), dynamicUITable.getLoanType());
                    }

                    List<String> applicantRawDataSpinnerList = new ArrayList<>();

                    if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                    String value = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                    if (!TextUtils.isEmpty(value) &&
                                            (!value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)&&!value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MOA_AOA)
                                                    &&!value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_NREGA)
                                                    && !value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AUTHORIZED_SIGNATURE_PROOF))) {
                                        applicantRawDataSpinnerList.add(value);
                                    }
                                }
                            }
                        }
                    }

                    // TODO: Co Applicant Permanent address ( YES )
                    if (dynamicUITable.getValue().equalsIgnoreCase("yes")) {


                        // TODO: Change Spinner List
                        changeSpinnerList(applicantRawDataSpinnerList, dynamicUITable.getScreenID(), TAG_NAME_PERMANENT_KYC_TYPE);
                    } else {
                        // TODO: Applicant Permanent address ( NO )
                        DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_PERMANENT_KYC_TYPE,
                                dynamicUITable.getScreenID());

                        List<String> duplicateSpinnerList = new ArrayList<>();

                        if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist() != null &&
                                duplicateDynamicUITable.getParamlist().length > 0) {

                            duplicateSpinnerList.addAll(Arrays.asList(duplicateDynamicUITable.getParamlist()));
                        }

                        if (applicantRawDataSpinnerList.size() > 0) {
                            for (String spinnerItem : applicantRawDataSpinnerList) {
                                if (!spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)||!spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MOA_AOA)
                                        ||!spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_NREGA)
                                        || !spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AUTHORIZED_SIGNATURE_PROOF)) {
                                    duplicateSpinnerList.remove(spinnerItem);
                                }
                            }
                        }

                        // TODO: Changing spinner list
                        changeSpinnerList(duplicateSpinnerList, dynamicUITable.getScreenID(), TAG_NAME_PERMANENT_KYC_TYPE);
                    }
                }
                // TODO: ( RADIO BUTTON ) COMMUNICATION ADDRESS SAME AS PERMANENT
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    // TODO: Co Applicant Communication address ( YES )
                    if (dynamicUITable.getValue().equalsIgnoreCase("yes")) {

                        String permKycID = dynamicUIDao.getValueByFieldName(dynamicUITable.getScreenID(), FIELD_NAME_PERMANENT_KYC_ID);
                        if (!TextUtils.isEmpty(permKycID)) {

                            dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), true, FIELD_NAME_COMMUNICATION_KYC_ID,
                                    permKycID, false);
                        } else {
                            dynamicUIDao.EnableOrDisableByFieldName(dynamicUITable.getScreenID(), false, FIELD_NAME_COMMUNICATION_KYC_ID,
                                    permKycID, false);
                        }

                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_KYC_TYPE, TAG_NAME_COMMUNICATION_KYC_TYPE, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);

                        DynamicUITable dynamicUITableCommKycType = dynamicUIDao.GetDynamicTableRowByScreenName(dynamicUITable.getScreenName(),
                                dynamicUITable.getClientID(), TAG_NAME_COMMUNICATION_KYC_TYPE);
                        if (dynamicUITableCommKycType != null && !TextUtils.isEmpty(dynamicUITableCommKycType.getValue())
                                && dynamicUITableCommKycType.getParamlist() != null && dynamicUITableCommKycType.getParamlist().length > 0) {

                            boolean isExist = false;
                            String[] paramList = dynamicUITableCommKycType.getParamlist();
                            for (String value : paramList) {
                                if (dynamicUITableCommKycType.getValue().equalsIgnoreCase(value)) {
                                    isExist = true;
                                    break;
                                }
                            }
                            if (!isExist) {
                                List<String> newSpinnerList = new ArrayList<>();
                                newSpinnerList.add(dynamicUITableCommKycType.getValue());
                                changeSpinnerList(newSpinnerList, dynamicUITable.getScreenID(), TAG_NAME_COMMUNICATION_KYC_TYPE);
                            }
                        }
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_1, TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_2, TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_ADDRESS_LINE_3, TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_PINCODE, TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_CITY, TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_DISTRICT, TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_STATE, TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                        dynamicUIDao.copyValuesBasedOnScreen(TAG_NAME_PERMANENT_LANDMARK, TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenID(),
                                dynamicUITable.getScreenID(), true, false);
                    }
                    // TODO: Co Applicant Communication address ( NO )
                    else {
                        String value = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                TAG_NAME_PERMANENT_KYC_TYPE);
                        if (!TextUtils.isEmpty(value)) {
                            // TODO: Get Param list tvName duplicate table
                            DynamicUITable dynamicUITableCommType = dynamicUIDao.GetDynamicTableRowByScreenName(dynamicUITable.getScreenName(),
                                    dynamicUITable.getClientID(), TAG_NAME_COMMUNICATION_KYC_TYPE);
                            if (dynamicUITableCommType != null && dynamicUITableCommType.getParamlist() != null &&
                                    dynamicUITableCommType.getParamlist().length > 0) {
                                List<String> stringList = new ArrayList<>();
                                stringList.addAll(Arrays.asList(dynamicUITableCommType.getParamlist()));
                                if (stringList.size() > 0) {
                                    stringList.remove(value);
                                    changeSpinnerList(stringList, dynamicUITable.getScreenID(), TAG_NAME_COMMUNICATION_KYC_TYPE);
                                }
                            }
                        }
                    }
                }
                // TODO: ( DROP DOWN ) PERMANENT ADDRESS KYC TYPE
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_KYC_TYPE)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(SCREEN_NAME_CO_APPLICANT_KYC,
                            dynamicUITable.getClientID(),
                            dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());


                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            // TODO:  for kyc id tag name changed based on kyc type
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(kycId)) {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, true);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_PERMANENT_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, false);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String city = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String state = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                                String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
                                if (!TextUtils.isEmpty(landmark)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                            landmark, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PERMANENT_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                        }
                    }
                }
                // TODO: ( DROP DOWN ) COMMUNICATION ADDRESS KYC TYPE
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_KYC_TYPE)) {
                    // TODO: Clearing below fields
                    clearBelowFieldsValues(dynamicUITable);

                    RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalColumn(SCREEN_NAME_CO_APPLICANT_KYC,
                            dynamicUITable.getClientID(),
                            dynamicUITable.getValue(), dynamicUITable.getLoanType(), dynamicUITable.getModuleType());

                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            // TODO:  for kyc id tag name changed based on kyc type
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(kycId)) {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, true);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_COMMUNICATION_KYC_ID, dynamicUITable.getScreenName(),
                                            kycId, false, false);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String city = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String state = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                                String landmark = hashMap.get(TAG_NAME_LANDMARK).toString();
                                if (!TextUtils.isEmpty(landmark)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                                            landmark, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                        }
                    }
                }

                String toScreenNo = dynamicUITableList.get(0).getScreenID();
                String clientId = dynamicUITableList.get(0).getClientID();
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                RawDataTable applicantKyc = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    HashMap<String, Object> hashMapapplicant = setKeyValueForObject(applicantKyc);
                    if (hashMapapplicant != null && hashMapapplicant.size() > 0) {
                        if (hashMapapplicant.containsKey(TAG_NAME_FULL_NAME)) {
                            if (!TextUtils.isEmpty(hashMapapplicant.get(TAG_NAME_FULL_NAME).toString())) {
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_FULL_NAME, toScreenNo, hashMapapplicant.get(TAG_NAME_FULL_NAME).toString());
                            }
                        }
                    }
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_KYC_ID)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_APPLICATION_PERMANENT_RE_ENTER_KYC_ID, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString());
                            dynamicUIDao.updateDynamicTableValue(TAG_NAME_APPLICATION_PERMANENT_KYC_ID, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString());

                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_ADDRESS_LINE_ONE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_ADDRESS_LINE_ONE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_ADDRESS_LINE_ONE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_ADDRESS)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_ADDRESS).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_TWO, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_ADDRESS).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_PINCODE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_PINCODE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_CITY)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_CITY).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_CITY, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_CITY).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_APPLICATION_DATE_OF_BIRTH, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_STATE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_STATE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_STATE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_STATE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_PINCODE)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_COMMUNICATION_PINCODE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_PINCODE).toString());
                        }

                        if (hashMap.containsKey(TAG_NAME_APPLICATION_DISTRICT)) {
                            if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_DISTRICT).toString()))
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_ADDRESS_PERMANENT_DISTRICT, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_DISTRICT).toString());
                        }
                    }
                }
            }

            // TODO: Final Result
            List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
            data.postValue(dynamicUITableListResult);
        });
        return data;
    }

    private void clearBelowFieldsValues(DynamicUITable dynamicUITableToCheck) {
        try {
            // TODO: Before Clearing
            List<DynamicUITable> dynamicUITableList = dynamicUIDao.getBelowFieldsByFieldTag(dynamicUITableToCheck.getScreenID(),
                    dynamicUITableToCheck.getFieldTag());

            if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                for (DynamicUITable dynamicUITable : dynamicUITableList) {
                    if (!dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_BUTTON)) {

                        dynamicUIDao.updateDynamicTableValueAndVisibility(dynamicUITable.getFieldTag(),
                                dynamicUITable.getScreenName(), "", true, dynamicUITable.isVisibility());

                        if (dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_LIST)
                                || dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_LIST_BOX)
                                || dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_DROPDOWN)
                                || dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_DROPDOWN1)
                                || dynamicUITable.getFieldType().equalsIgnoreCase(FIELD_TYPE_DROPDOWN2)
                        ) {

                            DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(
                                    dynamicUITable.getFieldTag(),
                                    dynamicUITable.getScreenID());

                            if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist() != null &&
                                    duplicateDynamicUITable.getParamlist().length > 0) {

                                if (duplicateDynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PERMANENT_CITY)
                                        || duplicateDynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_COMMUNICATION_CITY)) {
// TODO: Update as text box ( this condition for city/village we are changing as drop down after getting pin code details)
                                    dynamicUIDao.updateDynamicTableFieldType(dynamicUITable.getFieldTag(),
                                            dynamicUITable.getScreenName(), FIELD_TYPE_TEXT_BOX, dynamicUITable.isEditable(),
                                            dynamicUITable.isVisibility());
                                } else {
                                    changeSpinnerList(Arrays.asList(duplicateDynamicUITable.getParamlist()), dynamicUITable.getScreenID(), dynamicUITable.getFieldTag());
                                }
                            }
                        }
                    }
                }
            }

            // TODO: Before Clearing
            List<DynamicUITable> dynamicUITableListAfterClearing = dynamicUIDao.getBelowFieldsByFieldTag(dynamicUITableToCheck.getScreenID(),
                    dynamicUITableToCheck.getFieldTag());
            Log.d(TAG, "After Clearing ");

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public LiveData<List<DynamicUITable>> copyBusinessProofAddressBasedOnDropDown(DynamicUITable dynamicUITable,
                                                                                  List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_BUSINESS_ADDRESS_PROOF)) {

                clearBusinessProofDetails(dynamicUITable);

                if (!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_PERMANENT_ADDRESS)) {
                    RawDataTable rawDataTable = dynamicUIDao.getTopRawDataForBusinessAddress(SCREEN_NAME_ADDRESS_DETAIL, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_BUSINESS_DOCUMENT_TYPE, "", true);


                            if (hashMap.containsKey(TAG_NAME_PERMANENT_KYC_TYPE)) {
                                String KYC_TYPE = hashMap.get(TAG_NAME_PERMANENT_KYC_TYPE).toString();

                                List<String> rawDataSpinnerList = new ArrayList<>();
                                rawDataSpinnerList.add(KYC_TYPE);
                                String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                                if (newSpinnerStringArray.length > 0) {
                                    dynamicUIDao.changeSpinnerList(TAG_NAME_DOCUMENT_TYPE,
                                            DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_DOCUMENT_TYPE, dynamicUITable.getScreenName(),
                                            KYC_TYPE, false);
                                }

                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_CITY)) {
                                String city = hashMap.get(TAG_NAME_PERMANENT_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_PERMANENT_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
                                String state = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_LANDMARK)) {
                                String state = hashMap.get(TAG_NAME_PERMANENT_LANDMARK).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }


                        }
                    }
                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_COMMUNICATION_ADDRESS)) {
                    RawDataTable rawDataTable = dynamicUIDao.getTopRawDataForBusinessAddress(SCREEN_NAME_ADDRESS_DETAIL, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_BUSINESS_DOCUMENT_TYPE, "", true);


                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_KYC_TYPE)) {
                                String KYC_TYPE = hashMap.get(TAG_NAME_COMMUNICATION_KYC_TYPE).toString();

                                List<String> rawDataSpinnerList = new ArrayList<>();
                                rawDataSpinnerList.add(KYC_TYPE);
                                String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                                if (newSpinnerStringArray.length > 0) {
                                    dynamicUIDao.changeSpinnerList(TAG_NAME_BUSINESS_DOCUMENT_TYPE,
                                            DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_DOCUMENT_TYPE, dynamicUITable.getScreenName(),
                                            KYC_TYPE, false);

                                }

                            }


                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                                String addressLine1 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(addressLine1)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            addressLine1, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                                String addressLine2 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(addressLine2)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            addressLine2, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
                                String addressLine3 = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(addressLine3)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            addressLine3, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                                String pincode = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                                if (!TextUtils.isEmpty(pincode)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                                            pincode, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
                                String city = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
                                if (!TextUtils.isEmpty(city)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                                            city, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_DISTRICT)) {
                                String district = hashMap.get(TAG_NAME_COMMUNICATION_DISTRICT).toString();
                                if (!TextUtils.isEmpty(district)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                                            district, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                                String state = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_LANDMARK)) {
                                String state = hashMap.get(TAG_NAME_COMMUNICATION_LANDMARK).toString();
                                if (!TextUtils.isEmpty(state)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                                            state, false);
                                } else {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                                            "", true);
                                }
                            }
                        }
                    }
                } else if ((!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_KYC_ID_PROOF))) {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_BUSINESS_DOCUMENT_TYPE, "", true);

                    List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameListForBusinessAddress(SCREEN_NAME_BUSINESS_PROOF, dynamicUITable.getClientID(),
                            MODULE_TYPE_APPLICANT, dynamicUITable.getLoanType());

                    List<String> rawDataSpinnerList = new ArrayList<>();
                    if (rawDataTableList != null && rawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : rawDataTableList) {
                            if (rawDataTable != null && !TextUtils.isEmpty(rawDataTable.getAdditional())) {
                                if (!rawDataTable.getAdditional().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                    rawDataSpinnerList.add(rawDataTable.getAdditional());
                                }
                            }
                        }
                    }

                    String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                    if (newSpinnerStringArray.length > 0) {
                        dynamicUIDao.changeSpinnerList(TAG_NAME_BUSINESS_DOCUMENT_TYPE,
                                DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                        dynamicUIDao.updateDynamicTableValue(TAG_NAME_BUSINESS_DOCUMENT_TYPE,
                                dynamicUITable.getScreenID(), "");

                    }

                    // }
                    //  else if((!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_BUSINESS_PROOF)))
                    //  {
                    //     dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(),true,TAG_NAME_BUSINESS_DOCUMENT_TYPE,"",true);
                    //   List<RawDataTable> rawDataTableList= dynamicUIDao.getTagNameList(SCREEN_NAME_BUSINESS_PROOF, dynamicUITable.getClientID(),

                } else if ((!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_BUSINESS_PROOF))) {

                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_BUSINESS_DOCUMENT_TYPE, "", true);

                    clearBusinessProofDetails(dynamicUITable);
                    List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameListForBusinessAddress(SCREEN_NAME_BUSINESS_PROOF, dynamicUITable.getClientID(),
                            MODULE_TYPE_APPLICANT, dynamicUITable.getLoanType());


                    List<String> rawDataSpinnerList = new ArrayList<>();
                    if (rawDataTableList != null && rawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : rawDataTableList) {
                            if (rawDataTable != null && !TextUtils.isEmpty(rawDataTable.getAdditional())) {
                                if (!rawDataTable.getAdditional().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                    rawDataSpinnerList.add(rawDataTable.getAdditional());
                                }
                            }
                        }
                    }

                    String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                    if (newSpinnerStringArray.length > 0) {
                        dynamicUIDao.changeSpinnerList(TAG_NAME_BUSINESS_DOCUMENT_TYPE,
                                DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                        dynamicUIDao.updateDynamicTableValue(TAG_NAME_BUSINESS_DOCUMENT_TYPE,
                                dynamicUITable.getScreenID(), "");

                    }

                } else if (!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_KYC)) {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), true, TAG_NAME_DOCUMENT_TYPE, "", true);

                    clearBusinessProofDetails(dynamicUITable);
                    List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameListForBusinessAddress(SCREEN_NAME_APPLICANT_KYC, dynamicUITable.getClientID(), MODULE_TYPE_APPLICANT, dynamicUITable.getLoanType());

                    if (rawDataTableList.size() > 0) {

                        List<String> newSpinnerList = new ArrayList<>();

                        for (RawDataTable rawDataTable : rawDataTableList) {
                            if (!TextUtils.isEmpty(rawDataTable.getAdditional()) && !(rawDataTable.getAdditional().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD))) {

                                newSpinnerList.add(rawDataTable.getAdditional());
                            }

                        }
                        if (newSpinnerList.size() > 0) {
                            String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                            dynamicUIDao.changeSpinnerList(TAG_NAME_BUSINESS_DOCUMENT_TYPE, DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
                            dynamicUIDao.updateDynamicTableValue(TAG_NAME_BUSINESS_DOCUMENT_TYPE,
                                    dynamicUITable.getScreenID(), "");
                        }
                    }

                }
               /* else if(!TextUtils.isEmpty(dynamicUITable.getValue()) && dynamicUITable.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_Business_PROOF)){
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(),true,TAG_NAME_DOCUMENT_TYPE,"",true);
                    List<RawDataTable> rawDataTableList=dynamicUIDao.getTagNameList(dynamicUITable.getScreenID(),dynamicUITable.getClientID(),dynamicUITable.getModuleType());
                    if(rawDataTableList.size()>0){

                        List<String > newSpinnerList = new ArrayList<>();

                        for (RawDataTable rawDataTable:rawDataTableList){
                            if(!TextUtils.isEmpty(rawDataTable.getAdditional())){
                                newSpinnerList.add(rawDataTable.getAdditional());
                            }

                        }
                        if(newSpinnerList.size()>0) {
                            String[] newSpinnerStringArray = newSpinnerList.toArray(new String[0]);
                            dynamicUIDao.changeSpinnerList(TAG_NAME_DOCUMENT_TYPE, DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());

                        }
                    }

                }*/


                else {
                    dynamicUIDao.EnableOrDisableByFieldTAG(dynamicUITable.getScreenID(), false, TAG_NAME_BUSINESS_DOCUMENT_TYPE, "", true);

                    clearBusinessProofDetails(dynamicUITable);

                }

            } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_DOCUMENT_TYPE)) {

                RawDataTable rawDataTable = dynamicUIDao.getRawDataByAdditionalForBusinessAddress(SCREEN_NAME_APPLICANT_KYC, dynamicUITable.getClientID(), dynamicUITable.getValue(), dynamicUITable.getLoanType());
                if (rawDataTable != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                            String addressLine1 = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                            if (!TextUtils.isEmpty(addressLine1)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                        addressLine1, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                            String addressLine2 = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                            if (!TextUtils.isEmpty(addressLine2)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                        addressLine2, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                            String addressLine3 = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                            if (!TextUtils.isEmpty(addressLine3)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                        addressLine3, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                            String pincode = hashMap.get(TAG_NAME_PINCODE).toString();
                            if (!TextUtils.isEmpty(pincode)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                                        pincode, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_CITY)) {
                            String city = hashMap.get(TAG_NAME_CITY).toString();
                            if (!TextUtils.isEmpty(city)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                                        city, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_DISTRICT)) {
                            String district = hashMap.get(TAG_NAME_DISTRICT).toString();
                            if (!TextUtils.isEmpty(district)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                                        district, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_STATE)) {
                            String state = hashMap.get(TAG_NAME_STATE).toString();
                            if (!TextUtils.isEmpty(state)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                                        state, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_LANDMARK)) {
                            String state = hashMap.get(TAG_NAME_LANDMARK).toString();
                            if (!TextUtils.isEmpty(state)) {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                                        state, false);
                            } else {
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                                        "", true);
                            }
                        }
                    }

                }
            }


            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }

    public LiveData<List<DynamicUITable>> copyValuesFromPersonalScreenToNomineeScreen(String fromScreen, String toScreen, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                String toScreenNo = dynamicUITableList.get(0).getScreenID();
                String clientId = dynamicUITableList.get(0).getClientID();
                String moduleType = dynamicUITableList.get(0).getModuleType();
                String loanType = dynamicUITableList.get(0).getLoanType();

                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
                RawDataTable rawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PERSONAL_DETAIL, clientId, loanType);
                RawDataTable rawDataNomineeDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_NOMINEE_DETAIL, clientId, loanType);

                if (rawDataPersonalDetail != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataPersonalDetail);

                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
                            String maritalStatus = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
                            if (!TextUtils.isEmpty(maritalStatus) && maritalStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {

                                // TODO: Autopopulate fields in Nominee details
                                if (hashMap.containsKey(TAG_NAME_SPOUSE_NAME)) {
                                    String spouseName = hashMap.get(TAG_NAME_SPOUSE_NAME).toString();
                                    if (!TextUtils.isEmpty(spouseName)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, toScreen, spouseName, false);

                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                    String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                    if (!TextUtils.isEmpty(kycType)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_TYPE, toScreen, kycType, false);

                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                    String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                    if (!TextUtils.isEmpty(kycId)) {
                                        DynamicUITable dynamicUITablekycid = getObjectByFieldName(TAG_NAME_NOMINEE_KYC_ID, dynamicUITableList);
                                        if (dynamicUITablekycid != null && dynamicUITablekycid.getFieldTag() != null) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(dynamicUITablekycid.getFieldTag(), toScreen, kycId, false);
                                        }
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_SPOUSE_DATE_OF_BIRTH)) {
                                    String spouseName = hashMap.get(TAG_NAME_SPOUSE_DATE_OF_BIRTH).toString();
                                    if (!TextUtils.isEmpty(spouseName)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_DATE_OF_BIRTH, toScreen, spouseName, false);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_SPOUSE_AGE)) {
                                    String spouseName = hashMap.get(TAG_NAME_SPOUSE_AGE).toString();
                                    if (!TextUtils.isEmpty(spouseName)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_AGE, toScreen, spouseName, false);
                                    }
                                }
                            } else {
                                // TODO: get full name value
                                DynamicUITable fullnameObj = getObjectByTAG(TAG_NAME_NOMINEE_FULL_NAME, dynamicUITableList);
                                if (fullnameObj != null && !TextUtils.isEmpty(fullnameObj.getValue())) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, toScreen, fullnameObj.getValue(), true);
                                }

                                // TODO: get kyctype value
                                DynamicUITable kyctypeObj = getObjectByTAG(TAG_NAME_NOMINEE_KYC_TYPE, dynamicUITableList);
                                if (kyctypeObj != null && !TextUtils.isEmpty(kyctypeObj.getValue())) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_TYPE, toScreen, kyctypeObj.getValue(), true);
                                }

                                // TODO: get kycid value
                                DynamicUITable kycidObj = getObjectByFieldName(TAG_NAME_NOMINEE_KYC_ID, dynamicUITableList);
                                if (kycidObj != null && !TextUtils.isEmpty(kycidObj.getValue())) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_ID, toScreen, kycidObj.getValue(), true);
                                }
                                // TODO: get DOB value
                                DynamicUITable dobObj = getObjectByFieldName(TAG_NAME_NOMINEE_DATE_OF_BIRTH, dynamicUITableList);
                                if (kycidObj != null && !TextUtils.isEmpty(kycidObj.getValue())) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_DATE_OF_BIRTH, toScreen, dobObj.getValue(), true);
                                }

                                // TODO: get kycid value
                                DynamicUITable ageObj = getObjectByFieldName(TAG_NAME_NOMINEE_AGE, dynamicUITableList);
                                if (kycidObj != null && !TextUtils.isEmpty(kycidObj.getValue())) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_AGE, toScreen, ageObj.getValue(), true);
                                }
                            }
                        }
                    }
                }
                data.postValue(dynamicUIDao.loadUpdatedDataNew(toScreenNo));
            }
        });
        return data;
    }

    public LiveData<CBCheckTable> getCBCheckTableData(String clientID) {
        final MutableLiveData<CBCheckTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getCBCheckTableByClientId(clientID) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getCBCheckTableByClientId(clientID));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> getCollectionTableData(List<DynamicUITable> dynamicUITableList, DynamicUITable dynamicUITable) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                String screenNameToUpdate = dynamicUITable.getScreenName();

                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

//                boolean dataExist = (dynamicUIDao.getCollectionDataByClientIdAndLoanType(dynamicUITable.getUser_id(), dynamicUITable.getLoanType(), dynamicUITable.getClientID()) != null);
//                if (dataExist) {
//
//                    CollectionTable collectionTable = dynamicUIDao.getCollectionDataByClientIdAndLoanType(dynamicUITable.getUser_id(), dynamicUITable.getLoanType(), dynamicUITable.getClientID());
//                    if (collectionTable != null) {
//                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CUSTOMER_ID_IN_COLLECTION, screenNameToUpdate, collectionTable.getClientId(), false);
//
//                        if (!TextUtils.isEmpty(collectionTable.getClientName())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CUSTOMER_NAME_IN_COLLECTION, screenNameToUpdate, collectionTable.getClientName(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CUSTOMER_NAME_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//
//                        if (!TextUtils.isEmpty(collectionTable.getBusinessAddress())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_IN_COLLECTION, screenNameToUpdate, collectionTable.getBusinessAddress(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_BUSINESS_ADDRESS_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//
//                        if (!TextUtils.isEmpty(collectionTable.getCommunicationAddress())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COMMUNICATION_ADDRESS_IN_COLLECTION, screenNameToUpdate, collectionTable.getCommunicationAddress(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMMUNICATION_ADDRESS_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//                        if (!TextUtils.isEmpty(collectionTable.getApplicantMobileNo())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_APPLICANT_MOBILE_NUMBER_IN_COLLECTION, screenNameToUpdate, collectionTable.getApplicantMobileNo(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_MOBILE_NUMBER_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//
//                        if (!TextUtils.isEmpty(collectionTable.getCoApplicantName())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COAPPLICANT_NAME_IN_COLLECTION, screenNameToUpdate, collectionTable.getCoApplicantName(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COAPPLICANT_NAME_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//                        if (!TextUtils.isEmpty(collectionTable.getCoApplicantMobileNo())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_COAPPLICANT_MOBILE_NUMBER_IN_COLLECTION, screenNameToUpdate, collectionTable.getCoApplicantMobileNo(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COAPPLICANT_MOBILE_NUMBER_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//                        if (!TextUtils.isEmpty(collectionTable.getPOS())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_POS_IN_COLLECTION, screenNameToUpdate, collectionTable.getPOS(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_POS_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//
//                        if (!TextUtils.isEmpty(collectionTable.getEMI())) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_EMI_IN_COLLECTION, screenNameToUpdate, collectionTable.getEMI(), false);
//
//                        } else {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_EMI_IN_COLLECTION, screenNameToUpdate, "", true, false);
//
//                        }
//
//                    }
//                }
                // TODO: Final Result
                data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
            }
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> getRawDataFromOtherScreenAndUpdate(List<DynamicUITable> dynamicUITableList, String screenNameToUpdate) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (dynamicUITableList != null && dynamicUITableList.size() > 0) {

                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

                String toScreenNo = dynamicUITableList.get(0).getScreenID();
                String clientId = dynamicUITableList.get(0).getClientID();
                String moduleType = dynamicUITableList.get(0).getModuleType();
                String loanType = dynamicUITableList.get(0).getLoanType();

                // TODO: AHL bank detail screen
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS) && loanType.equalsIgnoreCase(LOAN_NAME_AHL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_LOAN_SUB_TYPE)) {
                                String loanSubType = hashMap.get(TAG_NAME_LOAN_SUB_TYPE).toString();
                                if (!TextUtils.isEmpty(loanSubType) && !loanSubType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_TOP_UP)) {
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MARK_AS_DISBURSEMENT_ACCOUNT, screenNameToUpdate, "", true, false);
                                }
                            }
                        }
                    }
                }
                // TODO: PHL bank detail screen
                if (!TextUtils.isEmpty(screenNameToUpdate)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_LOAN_SUB_TYPE)) {
                                String loanSubType = hashMap.get(TAG_NAME_LOAN_SUB_TYPE).toString();
                                if (!TextUtils.isEmpty(loanSubType) && !loanSubType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_TOP_UP)) {
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MARK_AS_DISBURSEMENT_ACCOUNT, screenNameToUpdate, "", true, false);
                                }

                            }
                        }
                    }
                }

                // TODO: lead screen msme & AHL
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                    ColdCallTable coldCallTableFromDB = dynamicUIDao.getTopColdCallData(clientId);
                    if (coldCallTableFromDB != null) {
                        if (!TextUtils.isEmpty(coldCallTableFromDB.getClientName())) {
                            dynamicUIDao.updateDynamicTableValue(TAG_NAME_FULL_NAME, toScreenNo, coldCallTableFromDB.getClientName());
                        }

                        if (!TextUtils.isEmpty(coldCallTableFromDB.getMobileNo())) {
                            dynamicUIDao.updateDynamicTableValue(TAG_NAME_MOBILE_NUMBER, toScreenNo, coldCallTableFromDB.getMobileNo());
                            // TODO: Masking mobile number only for AHL
                            if (loanType.equalsIgnoreCase(LOAN_NAME_AHL) && coldCallTableFromDB.getIsPremium() == 1) {

                                dynamicUIDao.updateDynamicTableOptionalValueForPremiumLead(TAG_NAME_MOBILE_NUMBER,
                                        toScreenNo, TAG_NAME_PREMIUM_COLD_CALL, false);
                            }
                            if (coldCallTableFromDB.getIsPremium() == 1) {

                                dynamicUIDao.updateDynamicTableOptionalValueForPremiumLead(TAG_NAME_MOBILE_NUMBER,
                                        toScreenNo, TAG_NAME_PREMIUM_COLD_CALL, false);
                            }
                        }
                    }
                }
                // TODO: sales tool screen msme & AHL & PHL
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_SALES_TOOL)) {

                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String name = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(name)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_CUSTOMER_NAME_IN_SALES_TOOL, toScreenNo, name);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                if (!TextUtils.isEmpty(loanAmount)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_REQUESTED_AMOUNT_IN_SALES_TOOL, toScreenNo, loanAmount);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CONTAINS_AGE)) {
                                String age = hashMap.get(TAG_NAME_CONTAINS_AGE).toString();
                                if (!TextUtils.isEmpty(age)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_AGE_RANGE_IN_SALES_TOOL, toScreenNo, age);
                                }
                            }
                        }
                    }
                }

                // TODO:  Socio economic screen AHL
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {

                                String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INCOME_SOURCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, customerType, false, true);
                                if (!TextUtils.isEmpty(customerType) && (!customerType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SELF_EMPLOYED))) {

                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OWNERSHIP_OF_BUSINESS_PREMISES, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                            "", true, false);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DURATION_OF_BUSINESS_IN_PRESENT_ADDRESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                            "", true, false);

                                }
                                if ((customerType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SALARIED))) {
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);

                                }
                                String typeOfProdession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(customerType) && !TextUtils.isEmpty(typeOfProdession) && customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                    if (typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNERSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PROPRIETORSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PRIVATE_LIMITED) ||
                                            typeOfProdession.equalsIgnoreCase(TAG_NAME_PUBLIC_LIMITED) || typeOfProdession.equalsIgnoreCase(TAG_NAME_LLP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_HUF)) {
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELIGION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SOCIAL_STATUS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_DISABLED, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISABILITY_TYPE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_WORKING_FAMILY_MEMBER, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OCCUPATION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_EDUCATION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOUSE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RESIDING_SINCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_YEARS_OF_EXPERIENCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                    }
                                }
                            }
                        }
                    }
                }

                // TODO:  Socio-economic screen PHL
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {

                                String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INCOME_SOURCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, customerType, false, true);
                                if (!TextUtils.isEmpty(customerType) && (!customerType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SELF_EMPLOYED))) {

                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OWNERSHIP_OF_BUSINESS_PREMISES, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                            "", true, false);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DURATION_OF_BUSINESS_IN_PRESENT_ADDRESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                            "", true, false);
                                }
                                String typeOfProdession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(customerType) && !TextUtils.isEmpty(typeOfProdession) && customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                    if (typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNERSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PROPRIETORSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PRIVATE_LIMITED) ||
                                            typeOfProdession.equalsIgnoreCase(TAG_NAME_PUBLIC_LIMITED) || typeOfProdession.equalsIgnoreCase(TAG_NAME_LLP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_HUF)) {
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELIGION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SOCIAL_STATUS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_DISABLED, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISABILITY_TYPE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_WORKING_FAMILY_MEMBER, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OCCUPATION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_EDUCATION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOUSE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RESIDING_SINCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_YEARS_OF_EXPERIENCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                    }
                                }

                                if ((customerType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SALARIED))) {
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);

                                }
                            }
                        }
                    }
                }
                // TODO: Personal detail screen
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {

                    if (loanType.equalsIgnoreCase(LOAN_NAME_JLG)) {
                        // TODO: Kyc Id ( Default Aadhaar )
                        DynamicUITable dynamicUITableAadhar = getObjectByTAG(TAG_NAME_KYC_ID, dynamicUITableList);

                        if (dynamicUITableAadhar.getFieldName().equalsIgnoreCase(TAG_NAME_KYC_ID)) {
                            RawDataTable rawDataTable = dynamicUIDao.getRawdataByFieldName(dynamicUITableAadhar.getScreenName()
                                    , dynamicUITableAadhar.getLoanType(), dynamicUITableAadhar.getClientID(), SPINNER_ITEM_FIELD_NAME_AADHAAR);
                            if (rawDataTable == null) {
                                DataTypeInfo datatypeInfo = new DataTypeInfo(SPINNER_ITEM_FIELD_NAME_AADHAAR, dynamicUITableAadhar);
                                // TODO: Only here we need to check with field name
                                dynamicUITableAadhar.setLength(datatypeInfo.getLength());
                                dynamicUITableAadhar.setEditable(true);
                                dynamicUITableAadhar.setHint(datatypeInfo.getHint());
                                dynamicUITableAadhar.setDataType(datatypeInfo.getInputType());
                                dynamicUITableAadhar.setDataEntryType(datatypeInfo.getDataEntryType());
                                dynamicUITableAadhar.setFieldTag(datatypeInfo.getHintTag());
                                dynamicUITableAadhar.setValue("");
                                dynamicUITableAadhar.setErrorMessage("");// TODO: clearing the value once changing the spinner item
                                dynamicUITableAadhar.setVisibility(true);

                                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list

                            }
                        }


//                        DynamicUITable dynamicUITable = getObjectByTAG(TAG_NAME_PERFORM_CB, dynamicUITableList);
//                        if (dynamicUITable != null) {
//                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PERFORM_CB
//                                    , dynamicUITable.getScreenName(),
//                                    dynamicUITable.getValue(), true, false);
//                        }

                        // TODO: By default marital status is married so hide Father's name
                        DynamicUITable dynamicUITableFather = getObjectByTAG(TAG_NAME_FATHER_NAME, dynamicUITableList);
                        if (dynamicUITableFather != null) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FATHER_NAME
                                    , dynamicUITableFather.getScreenName(),
                                    dynamicUITableFather.getValue(), true, false);
                        }
                    }

                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    RawDataTable apapplicantdata = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        HashMap<String, Object> hashMapapplicant = setKeyValueForObject(apapplicantdata);
                        if (hashMapapplicant != null && hashMapapplicant.size() > 0) {
                            if (hashMapapplicant.containsKey(TAG_NAME_FULL_NAME)) {
                                /*if (!TextUtils.isEmpty( hashMapapplicant.get(TAG_NAME_FULL_NAME).toString())) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_PD_SPOUSE_NAME, toScreenNo, hashMapapplicant.get(TAG_NAME_FULL_NAME).toString());
                                }*/
                                if (hashMapapplicant.containsKey(TAG_PD_NAME_KYC_ID)) {
                                    if (!TextUtils.isEmpty(hashMapapplicant.get(TAG_NAME_APPLICATION_KYC_ID).toString()))
                                        dynamicUIDao.updateDynamicTableValue(TAG_PD_NAME_KYC_ID, toScreenNo, hashMapapplicant.get(TAG_NAME_APPLICATION_KYC_ID).toString());
                                    dynamicUIDao.updateDynamicTableValue(TAG_PD_NAME_REENTER_KYC_ID, toScreenNo, hashMapapplicant.get(TAG_NAME_APPLICATION_KYC_ID).toString());
                                }
                                if (hashMapapplicant.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                    if (!TextUtils.isEmpty(hashMapapplicant.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString()))
                                        dynamicUIDao.updateDynamicTableValue(TAG_PD_DATE_OF_BIRTH, toScreenNo, hashMapapplicant.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString());
                                }
                                if (hashMapapplicant.containsKey(TAG_NAME_APPLICATION_ENTER_AGE)) {
                                    if (!TextUtils.isEmpty(hashMapapplicant.get(TAG_NAME_APPLICATION_ENTER_AGE).toString()))
                                        dynamicUIDao.updateDynamicTableValue(TAG_PD_AGE, toScreenNo, hashMapapplicant.get(TAG_NAME_APPLICATION_ENTER_AGE).toString());
                                }
                            }
                        }
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                String mobileNumber = hashMap.get(TAG_NAME_MOBILE_NUMBER).toString();
                                if (!TextUtils.isEmpty(mobileNumber)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_CONTACT_NO_1, toScreenNo, mobileNumber);
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_RE_ENTER_CONTACT_NO_1, toScreenNo, mobileNumber);
                                }

                            }
                        }
                    }
                }
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                String typeOfProdession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(customerType) && !TextUtils.isEmpty(typeOfProdession) && customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                    if (typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNERSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PROPRIETORSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PRIVATE_LIMITED) ||
                                            typeOfProdession.equalsIgnoreCase(TAG_NAME_PUBLIC_LIMITED) || typeOfProdession.equalsIgnoreCase(TAG_NAME_LLP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_HUF)) {
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MARITAL_STATUS, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SPOUSE_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SPOUSE_DATE_OF_BIRTH, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SPOUSE_AGE, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOTHER_MAIDEN_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FATHER_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOTHER_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        //dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_BORROWER_TYPE, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                    }
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)&&(value.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)
                                        ||value.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP))) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_BORROWER_TYPE, toScreenNo, TAG_NAME_NONINDIVIDUAL);
                                }else {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_BORROWER_TYPE, toScreenNo, TAG_NAME_INDIVIDUAL);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_E_MAIL_ID, SCREEN_NAME_PERSONAL_DETAIL, value, false, true);
                            }
                        }
                    }

                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_COUNTRY_CODE, toScreenNo, "91");
                }

                if (screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)) {
                    List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                            clientId, loanType);
                    if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantKTCDetailRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ACCOUNT_HOLDER_NAME, SCREEN_NAME_BANK_DETAILS,
                                            value, true, true);
                                }
                            }
                        }
                    }
                }

                // Fetch DOB from Applicant KYC screen------------------------
                if(!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_APPLICANT_PAN_DETAILS)){
                    RawDataTable kycRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                    if(kycRawData != null){
                        HashMap<String, Object> hashMap = setKeyValueForObject(kycRawData);
                        if(hashMap != null && hashMap.size() > 0){
                            if(hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)){
                                String dob = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if(!TextUtils.isEmpty(dob)){
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_PAN_APPLICANT_DOB, SCREEN_NO_APPLICANT_PAN_DETAILS_EL, dob);
                                }
                            }
                        }
                    }
                }

                // TODO: APPLICANT LOAN PROPOSAL screen EL & TWL
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)) {

                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                if (!TextUtils.isEmpty(loanAmount)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_REQUESTED_LOAN_AMOUNT, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, loanAmount);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LOAN_TENURE)) {
                                String tenure = hashMap.get(TAG_NAME_LOAN_TENURE).toString();
                                if (!TextUtils.isEmpty(tenure)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_TENURE_IN_MONTHS, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, tenure);
                                }
                            }
                        }
                    }

                    if(loanType.equalsIgnoreCase(LOAN_NAME_EL)){
                        dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, "Education Loan");
                    }

                    //applicantLoanProposalScreenChangesByDropdown(dynamicUITableList.get(0),dynamicUITableList);
                }

                // TODO: Applicant Loan Proposal screen in JLG

                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL) && loanType.equalsIgnoreCase(LOAN_NAME_JLG)) {

                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CENTER_NAME)) {
                                String centerName = hashMap.get(TAG_NAME_CENTER_NAME).toString();
                                if (!TextUtils.isEmpty(centerName)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CENTER_NAME, screenNameToUpdate, centerName, false);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_MEMBER_ID_IN_APPLICANT_KYC)) {
                                String memberId = hashMap.get(TAG_NAME_MEMBER_ID_IN_APPLICANT_KYC).toString();
                                if (!TextUtils.isEmpty(memberId)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CLIENT_CODE, screenNameToUpdate, memberId, false);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String fullname = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(fullname)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_MEMBER_NAME, screenNameToUpdate, fullname, false);
                                }
                            }
                        }
                    }

                    RawDataTable leadRawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PERSONAL_DETAIL, clientId, loanType);
                    if (leadRawDataPersonalDetail != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawDataPersonalDetail);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_SPOUSE_NAME)) {
                                String spouseName = hashMap.get(TAG_NAME_SPOUSE_NAME).toString();
                                if (!TextUtils.isEmpty(spouseName)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SPOUSE_OR_FATHER_NAME, screenNameToUpdate, "", false);
                                }
                            } else if (hashMap.containsKey(TAG_NAME_FATHER_NAME)) {
                                String fatherName = hashMap.get(TAG_NAME_FATHER_NAME).toString();
                                if (!TextUtils.isEmpty(fatherName)) {
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SPOUSE_OR_FATHER_NAME, screenNameToUpdate, fatherName, false);

                                }
                            }
                        }
                    }
                }

                // TODO: CO Personal detail screen
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                    DynamicUITable dynamicUITable = getObjectByTAG(TAG_NAME_COAPPLICANT_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITableList);

                    if (dynamicUITable != null) {

                        // TODO: condition to remove added spouse tvName spinner list
                        String[] newSpinnerItems = {};

                        List<String> spinnerList = addRemoveSpouseInCoPersonal(dynamicUITable);

                        if (spinnerList != null && spinnerList.size() > 0) {

//                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);
//
//                            dynamicUITable.setParamlist(newSpinnerItems);

                            if (spinnerList.size() > 0) {
                                String[] newSpinnerStringArray = spinnerList.toArray(new String[0]);
                                if (newSpinnerStringArray != null && newSpinnerStringArray.length > 0) {
                                    dynamicUIDao.changeSpinnerList(TAG_NAME_COAPPLICANT_RELATIONSHIP_WITH_THE_APPLICANT,
                                            DataTypeConverter.someObjectListToString(newSpinnerStringArray), toScreenNo);
                                }
                            }
                        }
                    }

                    RawDataTable coApplicantkycData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_CO_APPLICANT_KYC, clientId, loanType);
                    if (coApplicantkycData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(coApplicantkycData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_FULL_NAME).toString())) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_FULL_NAME, toScreenNo, hashMap.get(TAG_NAME_FULL_NAME).toString());
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                String mobileNumber = hashMap.get(TAG_NAME_MOBILE_NUMBER).toString();
                                if (!TextUtils.isEmpty(mobileNumber)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_CONTACT_NO_1, toScreenNo, mobileNumber);
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_RE_ENTER_CONTACT_NO_1, toScreenNo, mobileNumber);
                                }
                            }
                            if (hashMap.containsKey(TAG_PD_NAME_KYC_ID)) {
                                if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString()))
                                    dynamicUIDao.updateDynamicTableValue(TAG_PD_NAME_KYC_ID, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString());
                                dynamicUIDao.updateDynamicTableValue(TAG_PD_NAME_REENTER_KYC_ID, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_KYC_ID).toString());
                            }
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString()))
                                    dynamicUIDao.updateDynamicTableValue(TAG_PD_DATE_OF_BIRTH, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString());
                            }
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_ENTER_AGE)) {
                                if (!TextUtils.isEmpty(hashMap.get(TAG_NAME_APPLICATION_ENTER_AGE).toString()))
                                    dynamicUIDao.updateDynamicTableValue(TAG_PD_AGE, toScreenNo, hashMap.get(TAG_NAME_APPLICATION_ENTER_AGE).toString());
                            }
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)&&(value.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)
                                        ||value.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP))) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_BORROWER_TYPE, toScreenNo, TAG_NAME_NONINDIVIDUAL);
                                }else {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_BORROWER_TYPE, toScreenNo, TAG_NAME_INDIVIDUAL);
                                }
                            }
                        }
                    }
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_COUNTRY_CODE, toScreenNo, "91");
                }


                // TODO: Nominee detail screen JLG
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)
                        && loanType.equalsIgnoreCase(LOAN_NAME_JLG)) {

                    RawDataTable rawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PERSONAL_DETAIL, clientId, loanType);

                    if (rawDataPersonalDetail != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataPersonalDetail);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
                                String maritalStatus = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
                                if (!TextUtils.isEmpty(maritalStatus) && maritalStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {

                                    // TODO: If Marital status is married in personal details screen
                                    // TODO: Nominee Relation drop down list include spouse
                                    // TODO: Auto populate Nominee Relation, Nominee Kyc Type , Nominee kyc id ( non editable )
                                    // TODO: Nominee full name , Nominee DOB , Nominee Age , Nominee gender by default male ( non editable )
                                    // TODO: Disable QR Scan
                                    // TODO: Insurance - if age is greater than 60 then insurance is single otherwise double ( non editable )
                                    // TODO: Insurance - Hospi cash required -yes ( editable )

                                    DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGAndScreenNameInDuplicateTable(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, screenNameToUpdate);
                                    if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist().length > 0) {
                                        // TODO: Drop down list include spouse
                                        dynamicUIDao.changeSpinnerList(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT,
                                                DataTypeConverter.someObjectListToString(duplicateDynamicUITable.getParamlist()),
                                                duplicateDynamicUITable.getScreenID());
                                    }

                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, screenNameToUpdate, SPINNER_ITEM_FIELD_NAME_SPOUSE, false);
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_GENDER, screenNameToUpdate, "MALE", false);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NOMINEE_QR_SCAN, screenNameToUpdate, "", true, false);
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_HOSPI_CASH_REQUIRED, screenNameToUpdate, "Yes", true);

                                    // TODO: Auto populate fields in Nominee details
                                    if (hashMap.containsKey(TAG_NAME_SPOUSE_NAME)) {
                                        String spouseName = hashMap.get(TAG_NAME_SPOUSE_NAME).toString();
                                        if (!TextUtils.isEmpty(spouseName)) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, screenNameToUpdate, spouseName, false);
                                        }
                                    }
                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                        if (!TextUtils.isEmpty(kycType)) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_TYPE, screenNameToUpdate, kycType, false);

                                        }
                                    }

                                    if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                        String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
                                        if (!TextUtils.isEmpty(kycId)) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_ID, screenNameToUpdate, kycId, false);

                                        }
                                    }

                                    if (hashMap.containsKey(TAG_NAME_SPOUSE_DATE_OF_BIRTH)) {
                                        String DOB = hashMap.get(TAG_NAME_SPOUSE_DATE_OF_BIRTH).toString();
                                        if (!TextUtils.isEmpty(DOB)) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_DATE_OF_BIRTH, screenNameToUpdate, DOB, false);

                                        }
                                    }

                                    if (hashMap.containsKey(TAG_NAME_SPOUSE_AGE)) {
                                        String age = hashMap.get(TAG_NAME_SPOUSE_AGE).toString();
                                        if (!TextUtils.isEmpty(age)) {

                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_AGE, screenNameToUpdate, age, false);

                                            // TODO: Insurance validation
                                            int age_value = Integer.parseInt(age);
                                            if (age_value > 60) {
                                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSURANCE, screenNameToUpdate, SPINNER_ITEM_SINGLE_IN_NOMINEE_DETAIL, false);
                                            } else {
                                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSURANCE, screenNameToUpdate, SPINNER_ITEM_DOUBLE_IN_NOMINEE_DETAIL, false);
                                            }

                                        } else {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSURANCE, screenNameToUpdate, SPINNER_ITEM_DOUBLE_IN_NOMINEE_DETAIL, false);
                                        }
                                    }
//
                                } else {

                                    // TODO: If Marital status is other than married in personal details screen
                                    // TODO: Nominee Relation drop down list exclude spouse
                                    // TODO: Gender - editable true ( allow to select any option )
                                    // TODO: Enable QR Scan
                                    // TODO: Insurance single by default & non editable
                                    // TODO: Hospi cash required -No ( non editable )
                                    // TODO: visibility false for Hospi no of years & hospi cash type

                                    DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGAndScreenNameInDuplicateTable(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, screenNameToUpdate);
                                    if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist().length > 0) {
                                        List<String> newSpinnerList = new ArrayList<>();
                                        newSpinnerList.addAll(Arrays.asList(duplicateDynamicUITable.getParamlist()));

                                        // TODO: Drop down list exclude spouse
                                        if (newSpinnerList.size() > 0) {
                                            try {
                                                for (String spinnerItem : newSpinnerList) {
                                                    if (spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                                        newSpinnerList.remove(spinnerItem);
                                                        break;
                                                    }
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                            }

                                            changeSpinnerList(newSpinnerList, duplicateDynamicUITable.getScreenID(),
                                                    TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT);
                                        }
                                    }

                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NOMINEE_GENDER, screenNameToUpdate, "", true, true);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NOMINEE_QR_SCAN, screenNameToUpdate, "", true, true);
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSURANCE, screenNameToUpdate, SPINNER_ITEM_FIELD_NAME_SINGLE, false);
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_HOSPI_CASH_REQUIRED, screenNameToUpdate, "No", false);

                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOSPI_NO_OF_YEARS, screenNameToUpdate, "", true, false);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOSPI_CASH_TYPE, screenNameToUpdate, "", true, false);

                                    // TODO: get relation value
                                    DynamicUITable nomineeRelationObj = getObjectByTAG(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITableList);
                                    if (nomineeRelationObj != null && !TextUtils.isEmpty(nomineeRelationObj.getValue())) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, screenNameToUpdate, nomineeRelationObj.getValue(), true);
                                    }

                                    // TODO: get full name value
                                    DynamicUITable fullnameObj = getObjectByTAG(TAG_NAME_NOMINEE_FULL_NAME, dynamicUITableList);
                                    if (fullnameObj != null && !TextUtils.isEmpty(fullnameObj.getValue())) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, screenNameToUpdate, fullnameObj.getValue(), true);
                                    }

                                    // TODO: get kyc type value
                                    DynamicUITable kyctypeObj = getObjectByTAG(TAG_NAME_NOMINEE_KYC_TYPE, dynamicUITableList);
                                    if (kyctypeObj != null && !TextUtils.isEmpty(kyctypeObj.getValue())) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_TYPE, screenNameToUpdate, kyctypeObj.getValue(), true);
                                    }

                                    // TODO: get kyc id value
                                    DynamicUITable kycidObj = getObjectByTAG(TAG_NAME_NOMINEE_KYC_ID, dynamicUITableList);
                                    if (kycidObj != null && !TextUtils.isEmpty(kycidObj.getValue())) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_ID, screenNameToUpdate, kycidObj.getValue(), true);
                                    }

                                }
                            }
                        }
                    }
                }

                if(TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_APPLICANT_PAN_DETAILS)
                && loanType.equalsIgnoreCase(LOAN_NAME_EL)){
                    RawDataTable rawDataFromLead = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);

                    if (rawDataFromLead != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataFromLead);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_GENDER)) {
                                String gender = hashMap.get(TAG_NAME_GENDER).toString();
                                if (!TextUtils.isEmpty(gender) && gender.equalsIgnoreCase(TAG_NAME_GENDER)) {

                                    // TODO: If Marital status is married in personal details screen
                                    // TODO: Nominee Relation drop down list include spouse
                                    // TODO: Auto populate Nominee Relation, Nominee Kyc Type , Nominee kyc id ( non editable )
                                    // TODO: Nominee full name , Nominee DOB , Nominee Age , Nominee gender by default male ( non editable )
                                    // TODO: Disable QR Scan
                                    // TODO: Insurance - if age is greater than 60 then insurance is single otherwise double ( non editable )
                                    // TODO: Insurance - Hospi cash required -yes ( editable )

                                    DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGAndScreenNameInDuplicateTable(TAG_NAME_GENDER, screenNameToUpdate);
                                    if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist().length > 0) {
                                        // TODO: Drop down list include spouse
                                        dynamicUIDao.changeSpinnerList(TAG_NAME_GENDER,
                                                DataTypeConverter.someObjectListToString(duplicateDynamicUITable.getParamlist()),
                                                duplicateDynamicUITable.getScreenID());
                                    }
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_GENDER, screenNameToUpdate, "MALE", false);

                                    // TODO: Auto populate fields in Nominee details
                                    if (hashMap.containsKey(TAG_NAME_GENDER)) {
                                        String kycType = hashMap.get(TAG_NAME_GENDER).toString();
                                        if (!TextUtils.isEmpty(kycType)) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_GENDER, screenNameToUpdate, kycType, false);

                                        }
                                    }

//                                    if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
//                                        String kycId = hashMap.get(TAG_NAME_KYC_ID).toString();
//                                        if (!TextUtils.isEmpty(kycId)) {
//                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_GENDER, screenNameToUpdate, kycId, false);
//
//                                        }
//                                    }

                                    if (hashMap.containsKey(TAG_NAME_CONTAINS_DOB)) {
                                        String DOB = hashMap.get(TAG_NAME_CONTAINS_DOB).toString();
                                        if (!TextUtils.isEmpty(DOB)) {
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CONTAINS_DOB, screenNameToUpdate, DOB, false);

                                        }
                                    }
                                }
//                                else {
//
//                                    // TODO: If Marital status is other than married in personal details screen
//                                    // TODO: Nominee Relation drop down list exclude spouse
//                                    // TODO: Gender - editable true ( allow to select any option )
//                                    // TODO: Enable QR Scan
//                                    // TODO: Insurance single by default & non editable
//                                    // TODO: Hospi cash required -No ( non editable )
//                                    // TODO: visibility false for Hospi no of years & hospi cash type
//
//                                    DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGAndScreenNameInDuplicateTable(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, screenNameToUpdate);
//                                    if (duplicateDynamicUITable != null && duplicateDynamicUITable.getParamlist().length > 0) {
//                                        List<String> newSpinnerList = new ArrayList<>();
//                                        newSpinnerList.addAll(Arrays.asList(duplicateDynamicUITable.getParamlist()));
//
//                                        // TODO: Drop down list exclude spouse
//                                        if (newSpinnerList.size() > 0) {
//                                            try {
//                                                for (String spinnerItem : newSpinnerList) {
//                                                    if (spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
//                                                        newSpinnerList.remove(spinnerItem);
//                                                        break;
//                                                    }
//                                                }
//                                            } catch (Exception ex) {
//                                                ex.printStackTrace();
//                                            }
//
//                                            changeSpinnerList(newSpinnerList, duplicateDynamicUITable.getScreenID(),
//                                                    TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT);
//                                        }
//                                    }
//
//                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NOMINEE_GENDER, screenNameToUpdate, "", true, true);
//                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NOMINEE_QR_SCAN, screenNameToUpdate, "", true, true);
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSURANCE, screenNameToUpdate, SPINNER_ITEM_FIELD_NAME_SINGLE, false);
//                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_HOSPI_CASH_REQUIRED, screenNameToUpdate, "No", false);
//
//                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOSPI_NO_OF_YEARS, screenNameToUpdate, "", true, false);
//                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOSPI_CASH_TYPE, screenNameToUpdate, "", true, false);
//
//                                    // TODO: get relation value
//                                    DynamicUITable nomineeRelationObj = getObjectByTAG(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITableList);
//                                    if (nomineeRelationObj != null && !TextUtils.isEmpty(nomineeRelationObj.getValue())) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, screenNameToUpdate, nomineeRelationObj.getValue(), true);
//                                    }
//
//                                    // TODO: get full name value
//                                    DynamicUITable fullnameObj = getObjectByTAG(TAG_NAME_NOMINEE_FULL_NAME, dynamicUITableList);
//                                    if (fullnameObj != null && !TextUtils.isEmpty(fullnameObj.getValue())) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_FULL_NAME, screenNameToUpdate, fullnameObj.getValue(), true);
//                                    }
//
//                                    // TODO: get kyc type value
//                                    DynamicUITable kyctypeObj = getObjectByTAG(TAG_NAME_NOMINEE_KYC_TYPE, dynamicUITableList);
//                                    if (kyctypeObj != null && !TextUtils.isEmpty(kyctypeObj.getValue())) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_TYPE, screenNameToUpdate, kyctypeObj.getValue(), true);
//                                    }
//
//                                    // TODO: get kyc id value
//                                    DynamicUITable kycidObj = getObjectByTAG(TAG_NAME_NOMINEE_KYC_ID, dynamicUITableList);
//                                    if (kycidObj != null && !TextUtils.isEmpty(kycidObj.getValue())) {
//                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NOMINEE_KYC_ID, screenNameToUpdate, kycidObj.getValue(), true);
//                                    }
//
//                                }
                            }
                        }
                    }
                }
                // TODO: Nominee detail screen
                else if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)) {

                    List<RawDataTable> nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_CO_APPLICANT_KYC, clientId, loanType);
                    List<String> rawDataSpinnerList = new ArrayList<>();

                    if (nameList != null && nameList.size() > 0) {
                        // TODO: calling getCoapplicantNamesBasedonIDProof method
                        rawDataSpinnerList = getCoapplicantNamesBasedonIDProof(nameList);

                        if (rawDataSpinnerList.size() > 0) {
                            String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                            if (newSpinnerStringArray != null && newSpinnerStringArray.length > 0) {
                                dynamicUIDao.changeSpinnerList(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT,
                                        DataTypeConverter.someObjectListToString(newSpinnerStringArray), toScreenNo);
                            }
                        }
                    }
                }

                // TODO:  BUSINESS PROFILE SCREEN
                else if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROFILE)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);

                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_SECTOR)) {
                                String business_sector = hashMap.get(TAG_NAME_BUSINESS_SECTOR).toString();
                                if (!TextUtils.isEmpty(business_sector)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_INDUSTRY_CLASS, toScreenNo, business_sector);
                                }

                            }
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_SUB_SECTOR)) {
                                String business_sub_sector = hashMap.get(TAG_NAME_BUSINESS_SUB_SECTOR).toString();
                                if (!TextUtils.isEmpty(business_sub_sector)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_TYPE_OF_BUSINESS, toScreenNo, business_sub_sector);
                                }
                            }
                        }
                    }

                }
                // TODO: HOUSE EXPENSES SCREEN
                else if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_HOUSE_EXPENSES)) {

                    RawDataTable businessLiabilityRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_BUSINESS_LIABILITIES, clientId, loanType);
                    RawDataTable houseLiabilityRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_HOUSE_LIABILITIES, clientId, loanType);

                    if (businessLiabilityRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(businessLiabilityRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_BUSINESS_LIABILITY)) {
                                String totalMonthlyInstallmentBD = hashMap.get(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_BUSINESS_LIABILITY).toString();
                                if (!TextUtils.isEmpty(totalMonthlyInstallmentBD)) {
                                    // TODO:  update payments of bb debts
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_PAYMENT_OF_BB_DEBTS_IN_HOUSE_EXPENSE_MSME, toScreenNo, totalMonthlyInstallmentBD);
                                }

                            }
                        }
                    }
                    if (houseLiabilityRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(houseLiabilityRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT)) {
                                String totalMonthlyInstallmentHD = hashMap.get(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT).toString();
                                if (!TextUtils.isEmpty(totalMonthlyInstallmentHD)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_PAYMENT_OF_HH_DEBTS, toScreenNo, totalMonthlyInstallmentHD);
                                }

                            }
                        }
                    }

                }
                // TODO: HOUSE DEBTS screen
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_HOUSE_DEBTS)) {
                    // TODO: get category value
                    DynamicUITable categoryObj = getObjectByTAG(TAG_NAME_CATEGORY_IN_HOUSELIABILITY_MSME, dynamicUITableList);
                    List<RawDataTable> nameList = new ArrayList<>();
                    if (categoryObj != null && !TextUtils.isEmpty(categoryObj.getValue())) {
                        if (categoryObj.getValue().equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {
                            nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                        } else if (categoryObj.getValue().equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) {
                            nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_CO_APPLICANT_KYC, clientId, loanType);
                        }
                    }
                    List<String> rawDataSpinnerList = new ArrayList<>();
                    List<String> moduletypeList = new ArrayList<>();//for moduletype
                    if (nameList != null && nameList.size() > 0) {
                        // TODO: calling getapplicantNamesBasedonIDProof method
                        rawDataSpinnerList = getCoapplicantNamesBasedonIDProof(nameList);

                        if (rawDataSpinnerList.size() > 0) {
                            String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                            if (newSpinnerStringArray != null && newSpinnerStringArray.length > 0) {
                                dynamicUIDao.changeSpinnerList(TAG_NAME_NAME_IN_HOUSELIABILITY_MSME,
                                        DataTypeConverter.someObjectListToString(newSpinnerStringArray), toScreenNo);
                            }
                        }
                    }
                }
                // TODO: bUSINESS DEBTS DETAIL screen
                if (!TextUtils.isEmpty(screenNameToUpdate) && screenNameToUpdate.equalsIgnoreCase(SCREEN_NAME_BUSINESS_DEBTS_DETAIL_MSME)) {
                    // TODO: get category value
                    DynamicUITable categoryObj = getObjectByTAG(TAG_NAME_CATEGORY_IN_HOUSELIABILITY_MSME, dynamicUITableList);
                    List<RawDataTable> nameList = new ArrayList<>();
                    if (categoryObj != null && !TextUtils.isEmpty(categoryObj.getValue())) {
                        if (categoryObj.getValue().equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {
                            nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_APPLICANT_KYC, clientId, loanType);
                        } else if (categoryObj.getValue().equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) {
                            nameList = dynamicUIDao.getRawDataForApplicantCoappnew(SCREEN_NAME_CO_APPLICANT_KYC, clientId, loanType);
                        }
                    }
                    List<String> rawDataSpinnerList = new ArrayList<>();
                    List<String> moduletypeList = new ArrayList<>();//for moduletype
                    if (nameList != null && nameList.size() > 0) {
                        // TODO: calling getapplicantNamesBasedonIDProof method
                        rawDataSpinnerList = getCoapplicantNamesBasedonIDProof(nameList);

                        if (rawDataSpinnerList.size() > 0) {
                            String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                            if (newSpinnerStringArray != null && newSpinnerStringArray.length > 0) {
                                dynamicUIDao.changeSpinnerList(TAG_NAME_NAME_IN_HOUSELIABILITY_MSME,
                                        DataTypeConverter.someObjectListToString(newSpinnerStringArray), toScreenNo);
                            }
                        }
                    }
                }
                // TODO: Final Result
                data.postValue(dynamicUIDao.loadUpdatedDataNew(toScreenNo));
            }
        });
        return data;
    }

    // TODO: get co-applicant names list based on PROOF TYPE CONTAINS "ID"
    public List<String> addRemoveSpouseInCoPersonal(DynamicUITable dynamicUITableRelation) {
        List<String> spinnerList = new ArrayList<>();

// TODO: Raw data
        List<RawDataTable> applicantPersonalRawDataList = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_PERSONAL_DETAIL, dynamicUITableRelation.getClientID());
        if (applicantPersonalRawDataList != null && applicantPersonalRawDataList.size() > 0) {
            for (RawDataTable applicantPersonalRawData : applicantPersonalRawDataList) {
                if (applicantPersonalRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(applicantPersonalRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        // TODO: value tvName marital status for applicant
                        if (hashMap.containsKey(TAG_NAME_APPLICANT_MARITAL_STATUS)) {
                            String maritalStatus = hashMap.get(TAG_NAME_APPLICANT_MARITAL_STATUS).toString();
                            if (!TextUtils.isEmpty(maritalStatus)) {

                                spinnerList.addAll(Arrays.asList(dynamicUITableRelation.getParamlist()));

                                try {
                                    if (maritalStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SINGLE)) {
                                        for (String spinnerItem : spinnerList) {
                                            if (spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                                spinnerList.remove(spinnerItem);
                                                break;
                                            }
                                        }
                                    } else {
                                        boolean ishere = false;
                                        for (String spinnerItem : spinnerList) {
                                            if (spinnerItem.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                                ishere = true;
                                                break;
                                            }
                                        }
                                        if (!ishere) {
                                            spinnerList.add(SPINNER_ITEM_FIELD_NAME_SPOUSE);
                                        }
                                    }

                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }

        }
        return spinnerList;
    }

    // TODO: get co-applicant names list based on PROOF TYPE CONTAINS "ID"
    public List<String> getCoapplicantNamesBasedonIDProof(List<RawDataTable> nameList) {
        List<String> rawDataSpinnerList = new ArrayList<>();
        List<String> moduletypeList = new ArrayList<>();//for moduletype
        if (nameList != null && nameList.size() > 0) {
            for (RawDataTable coapplicantRawData : nameList) {
                if (coapplicantRawData != null && !TextUtils.isEmpty(coapplicantRawData.getModuleType())) {
                    Type type = new TypeToken<List<DynamicUITable>>() {
                    }.getType();
                    HashMap<String, Object> hashMap = setKeyValueForObject(coapplicantRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (moduletypeList != null && moduletypeList.size() > 0) {
                            boolean moduletypeExist = false;
                            for (String moduletype : moduletypeList) {
                                if (moduletype.equalsIgnoreCase(coapplicantRawData.getModuleType())) {
                                    moduletypeExist = true;//put true
                                    break;
                                }
                            }
                            if (!moduletypeExist) {

                                if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {
                                    // TODO: ID RELATED KYC NAME TAKEN
                                    if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                        if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                            rawDataSpinnerList.add(hashMap.get(TAG_NAME_FULL_NAME).toString());
                                            moduletypeList.add(coapplicantRawData.getModuleType());
                                            //break;
                                        }
                                    }
                                }
                            }
                        } else {
                            if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {
                                // TODO: ID RELATED KYC NAME TAKEN
                                if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                        rawDataSpinnerList.add(hashMap.get(TAG_NAME_FULL_NAME).toString());
                                        moduletypeList.add(coapplicantRawData.getModuleType());
                                        // break;
                                    }
                                }
                            }
                        }
                    }
                    //new
                }
            }
        }
        return rawDataSpinnerList;
    }

    // TODO: get unique months list based on date
    public List<String> getMonthsBasedonDate(List<String> monthList) {

        List<String> uniqueMonthsList = new ArrayList<>();//for months
        if (monthList != null && monthList.size() > 0) {
            for (String month : monthList) {
                if (month != null && !TextUtils.isEmpty(month)) {
                    if (uniqueMonthsList != null && uniqueMonthsList.size() > 0) {
                        boolean moduletypeExist = false;
                        for (String uniqueMonth : uniqueMonthsList) {
                            if (uniqueMonth.equalsIgnoreCase(month)) {
                                moduletypeExist = true;//put true
                                break;
                            }
                        }
                        if (!moduletypeExist) {
                            uniqueMonthsList.add(month);
                        }
                    } else {
                        uniqueMonthsList.add(month);
                    }

                    //new
                }
            }
        }
        return uniqueMonthsList;
    }


    public LiveData<List<DynamicUITable>> calculatePurchaseFrequency(DynamicUITable
                                                                             dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            String frequencyRadioBtnValue = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_FREQUENCY_IN_PURCHASE_ANALYSIS);
            String purchaseValue = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_PURCHASES_IN_PURCHASE_ANALYSIS);
            if (!TextUtils.isEmpty(frequencyRadioBtnValue) && !TextUtils.isEmpty(purchaseValue)) {
                int intPurchaseValue = Integer.parseInt(purchaseValue);
                if (frequencyRadioBtnValue.equalsIgnoreCase(FREQUENCY_DAILY)) {
                    // TODO: For daily purchase frequency avg days 25
                    int intTotalPurchaseValue = INT_FREQUENCY_DAILY * intPurchaseValue;
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY, dynamicUITable.getScreenID(),
                            String.valueOf(intTotalPurchaseValue));

                } else if (frequencyRadioBtnValue.equalsIgnoreCase(FREQUENCY_WEEKLY)) {
                    // TODO: For weekly purchase frequency avg weeks 4
                    int intTotalPurchaseValue = INT_FREQUENCY_WEEKLY * intPurchaseValue;
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY, dynamicUITable.getScreenID(),
                            String.valueOf(intTotalPurchaseValue));
                } else if (frequencyRadioBtnValue.equalsIgnoreCase(FREQUENCY_FORTNIGHTLY)) {
                    // TODO: For fortnightly purchase frequency avg fortnights 2
                    int intTotalPurchaseValue = INT_FREQUENCY_FORTNIGHTLY * intPurchaseValue;
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY, dynamicUITable.getScreenID(),
                            String.valueOf(intTotalPurchaseValue));
                } else if (frequencyRadioBtnValue.equalsIgnoreCase(FREQUENCY_MONTHLY)) {
                    // TODO: For monthly purchase frequency avg months 1
                    int intTotalPurchaseValue = INT_FREQUENCY_MONTHLY * intPurchaseValue;
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY, dynamicUITable.getScreenID(),
                            String.valueOf(intTotalPurchaseValue));
                }

            } else {
                // TODO: update as 00
                dynamicUIDao.updateDynamicTableValue(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY, dynamicUITable.getScreenID(), "00");
            }

//            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));

            List<String> tagNameList = new ArrayList<>();
            tagNameList.add(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY);
            data.postValue(dynamicUIDao.getDynamicTableByTagNames(dynamicUITableList.get(0).getScreenID(), tagNameList));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }


    public LiveData<List<DynamicUITable>> businessAssetChildScreenChangesByRawData(List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenName(dynamicUITableList.get(0).getScreenName(),
                    dynamicUITableList.get(0).getClientID());

            DuplicateDynamicUITable duplicateDynamicUITable = dynamicUIDao.getRowByTAGandScreenInDuplicateTable(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME,
                    dynamicUITableList.get(0).getScreenID());

            List<String> typeSpinnerList = new ArrayList<>();
            if (duplicateDynamicUITable != null &&
                    duplicateDynamicUITable.getParamlist() != null && duplicateDynamicUITable.getParamlist().length > 0) {
                typeSpinnerList.addAll(Arrays.asList(duplicateDynamicUITable.getParamlist()));
            }


            if (rawDataTableList != null && rawDataTableList.size() > 0 && typeSpinnerList.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableList) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME)) {
                                String spinnerItem = hashMap.get(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME).toString();
                                if (!TextUtils.isEmpty(spinnerItem)) {
                                    for (String spinnerItemFromDuplicateTable : typeSpinnerList) {
                                        if (spinnerItemFromDuplicateTable.equalsIgnoreCase(spinnerItem)) {
                                            typeSpinnerList.remove(spinnerItem);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                changeSpinnerList(typeSpinnerList, dynamicUITableList.get(0).getScreenID(), TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME);
            }

            // TODO: Final Result
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }


    public LiveData<List<DynamicUITable>> loanSuggestionCalculation(List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            double REQUESTED_LOAN_AMOUNT = 0, DECLARED_REPAYMENT_CAPACITY = 0, RECOMMENDED_LOAN_AMOUNT_BASED_ON_CFA = 0,
                    RECOMMENDED_EMI_BASED_ON_CFA = 0, POLICY_CAP = 0, ELLIGIBLE_LOAN_AMOUNT = 0, ELLIGIBLE_EMI = 0;

            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            DynamicUITable dynamicUITable = dynamicUITableList.get(0);

            // TODO: APPLICANT LOAN PROPOSAL
            List<RawDataTable> applicantLoanProposalRawDataList = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL,
                    dynamicUITable.getClientID());
            // TODO: CASH FLOW SUMMARY
            List<RawDataTable> cashFlowSummaryRawDataList = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getClientID());

            if (applicantLoanProposalRawDataList != null && applicantLoanProposalRawDataList.size() > 0) {
                for (RawDataTable rawDataTable : applicantLoanProposalRawDataList) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT_IN_LOAN_SUGGESTION_MSME
                                        , dynamicUITable.getScreenName(), value,
                                        false, true);
                                REQUESTED_LOAN_AMOUNT = Double.valueOf(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_SAME_DECLARED_REPAYMENT_CAPACITY)) {
                                String value = hashMap.get(TAG_NAME_SAME_DECLARED_REPAYMENT_CAPACITY).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DECLARED_REPAYMENT_CAPACITY_IN_LOAN_SUGGESTION_MSME,
                                        dynamicUITable.getScreenName(), value,
                                        false, true);
                                DECLARED_REPAYMENT_CAPACITY = Double.valueOf(value);
                            }
                        }
                    }
                }
            }
            if (cashFlowSummaryRawDataList != null && cashFlowSummaryRawDataList.size() > 0) {
                for (RawDataTable rawDataTable : cashFlowSummaryRawDataList) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME)) {
                                String value = hashMap.get(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_BASED_ON_CFA_IN_LOAN_SUGGESTION_MSME,
                                        dynamicUITable.getScreenName(), value,
                                        false, true);
                                RECOMMENDED_LOAN_AMOUNT_BASED_ON_CFA = Double.valueOf(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA_IN_CASH_FLOW_SUMMARY_MSME)) {
                                String value = hashMap.get(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_EMI_BASED_ON_CFA_IN_LOAN_SUGGESTION_MSME,
                                        dynamicUITable.getScreenName(), value,
                                        false, true);
                                RECOMMENDED_EMI_BASED_ON_CFA = Double.valueOf(value);
                            }

                            String scheme = "", product = "";
                            if (hashMap.containsKey(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME)) {
                                scheme = hashMap.get(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME)) {
                                product = hashMap.get(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(scheme) && !TextUtils.isEmpty(product)) {
                                ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(scheme, product);
                                if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())
                                        && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount())) {
                                    POLICY_CAP = Double.parseDouble(productMasterTable.getMaxLoanAmount());
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_POLICY_CAP_IN_LOAN_SUGGESTION_MSME,
                                            dynamicUITable.getScreenName(), String.valueOf(POLICY_CAP), true, true);
                                }
                            }
                        }
                    }
                }
            }

            if (REQUESTED_LOAN_AMOUNT > RECOMMENDED_LOAN_AMOUNT_BASED_ON_CFA) {
                ELLIGIBLE_LOAN_AMOUNT = RECOMMENDED_LOAN_AMOUNT_BASED_ON_CFA;
            }
            if (RECOMMENDED_LOAN_AMOUNT_BASED_ON_CFA > POLICY_CAP) {
                ELLIGIBLE_LOAN_AMOUNT = POLICY_CAP;
            }
            if (POLICY_CAP > REQUESTED_LOAN_AMOUNT) {
                ELLIGIBLE_LOAN_AMOUNT = REQUESTED_LOAN_AMOUNT;
            }

            if (DECLARED_REPAYMENT_CAPACITY > RECOMMENDED_EMI_BASED_ON_CFA) {
                ELLIGIBLE_EMI = RECOMMENDED_EMI_BASED_ON_CFA;
            } else {
                ELLIGIBLE_EMI = DECLARED_REPAYMENT_CAPACITY;
            }

            // TODO: updating eligible loan amount
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ELIGIBLE_LOAN_AMOUNT_IN_LOAN_SUGGESTION_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(ELLIGIBLE_LOAN_AMOUNT),
                    false, true);
            // TODO: updating eligible emi
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ELIGIBLE_EMI_IN_LOAN_SUGGESTION_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(ELLIGIBLE_EMI),
                    false, true);

            // TODO: Final Result
            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }


    public LiveData<List<DynamicUITable>> calculateNBI(DynamicUITable
                                                               dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            String salesWeekly = "", salesMonthly = "", purchaseFrequency = "", operationExpense = "";

            // TODO: Raw data
            RawDataTable declaredSalesRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_DECLARED_SALES_WEEKLY, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable purchaseFrequencyRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PURCHASE_ANALYSIS, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable operationExpenseRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_OPERATING_EXPENSE, dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            if (declaredSalesRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(declaredSalesRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_DECLARED_SALES)) {
                        String declaredSales = hashMap.get(TAG_NAME_DECLARED_SALES).toString();
                        if (!TextUtils.isEmpty(declaredSales)) {
                            if (declaredSales.equalsIgnoreCase(DECLARED_SALES_DAILY)) {
                                if (hashMap.containsKey(TAG_NAME_AVERAGE_WEEKLY_SALES)) {
                                    salesWeekly = hashMap.get(TAG_NAME_AVERAGE_WEEKLY_SALES).toString();
                                }
                                if (hashMap.containsKey(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY)) {
                                    salesMonthly = hashMap.get(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY).toString();
                                }
                            } else if (declaredSales.equalsIgnoreCase(DECLARED_SALES_WEEKLY)) {
                                if (hashMap.containsKey(TAG_NAME_AVERAGE_MONTHLY_SALES)) {
                                    salesMonthly = hashMap.get(TAG_NAME_AVERAGE_MONTHLY_SALES).toString();
                                }
                            }
                        }

                    }
                }
            }
            if (purchaseFrequencyRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(purchaseFrequencyRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY)) {
                        purchaseFrequency = hashMap.get(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY).toString();
                    }
                }
            }
            if (operationExpenseRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(operationExpenseRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_EXPENSES)) {
                        operationExpense = hashMap.get(TAG_NAME_EXPENSES).toString();
                    }
                }
            }

            double NBI, GROSS_BUSINESS_INCOME, SALES = 0, PURCHASE = 0, EXPENSES = 0;
           /* if(!TextUtils.isEmpty(salesWeekly)){
                SALES=Integer.parseInt(salesWeekly);
            }*/
            if (!TextUtils.isEmpty(salesMonthly)) {
                SALES = SALES + Double.parseDouble(salesMonthly);
            }
            if (!TextUtils.isEmpty(purchaseFrequency)) {
                PURCHASE = Double.parseDouble(purchaseFrequency);
            }
            if (!TextUtils.isEmpty(operationExpense)) {
                EXPENSES = Double.parseDouble(operationExpense);
            }
            // TODO: Formula
            GROSS_BUSINESS_INCOME = SALES - PURCHASE;
            NBI = GROSS_BUSINESS_INCOME - EXPENSES;

//            GROSS_BUSINESS_INCOME=Math.round(GROSS_BUSINESS_INCOME);
//            NBI=Math.round(NBI);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BY_DAILY_WEEKLY_FIGURES, dynamicUITable.getScreenName(), salesWeekly, false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BY_MONTHLY_FIGURES, dynamicUITable.getScreenName(), salesMonthly, false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BY_FREQUENCY, dynamicUITable.getScreenName(), purchaseFrequency, false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_OPERATION_EXPENSE, dynamicUITable.getScreenName(), operationExpense, false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_GROSS_BUSINESS_INCOME, dynamicUITable.getScreenName(), String.valueOf(GROSS_BUSINESS_INCOME), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NET_BUSINESS_INCOME_NBI, dynamicUITable.getScreenName(), String.valueOf(NBI), false);


            if (NBI < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_NET_BUSINESS_INCOME_NBI, dynamicUITable.getScreenName(), false,
                        "Net Business Income should not be negative");
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_NET_BUSINESS_INCOME_NBI, dynamicUITable.getScreenName(), true, "");
            }

            if (GROSS_BUSINESS_INCOME < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_GROSS_BUSINESS_INCOME, dynamicUITable.getScreenName(), false,
                        "Gross Business Income should not be negative");
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_GROSS_BUSINESS_INCOME, dynamicUITable.getScreenName(), true, "");
            }

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }


    public LiveData<List<DynamicUITable>> calculateHouseIncomeSummary(DynamicUITable
                                                                              dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            // TODO: CURRENT SCREEN RAW DATA
            List<RawDataTable> houseincomesummaryRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            if (houseincomesummaryRawDataList != null && houseincomesummaryRawDataList.size() > 0) {
                RawDataTable rawDataTable = houseincomesummaryRawDataList.get(0);
                DynamicUITable dynamicUITableSaveButton = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableList);
                if (dynamicUITableSaveButton != null) {
                    // TODO: setting raw data tag name for update
                    dynamicUITableSaveButton.setValue(rawDataTable.getTag_name());
                    dynamicUITableSaveButton.setFieldName(FIELD_NAME_UPDATE);
                }
            }

            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            String generalIncome = "", otherSourceIncome = "";
            int GENERAL_INCOME = 0, OTHER_SOURCE_INCOME = 0;

            // TODO: Raw data
            List<RawDataTable> generalIncomeRawDataList = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_GENERAL_INCOME, dynamicUITable.getClientID());
            List<RawDataTable> otherSourceIncomeRawDataList = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_OTHER_INCOME_SOURCE, dynamicUITable.getClientID());

            if (generalIncomeRawDataList != null && generalIncomeRawDataList.size() > 0) {
                for (RawDataTable generalIncomeRawData : generalIncomeRawDataList) {
                    if (generalIncomeRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(generalIncomeRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            // TODO: generalincome calculation based on verified field
                            if (hashMap.containsKey(TAG_NAME_VERIFIED_IN_GENERAL_INCOME)) {
                                String verified = hashMap.get(TAG_NAME_VERIFIED_IN_GENERAL_INCOME).toString();
                                if (!TextUtils.isEmpty(verified)) {
                                    if (verified.equalsIgnoreCase("Yes")) {
                                        if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME)) {
                                            generalIncome = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(generalIncome)) {
                                                GENERAL_INCOME = GENERAL_INCOME + Integer.parseInt(generalIncome);
                                            }
                                        }
                                    } else {
                                        if (hashMap.containsKey(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME)) {
                                            generalIncome = hashMap.get(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(generalIncome)) {
                                                GENERAL_INCOME = GENERAL_INCOME + Integer.parseInt(generalIncome);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (otherSourceIncomeRawDataList != null && otherSourceIncomeRawDataList.size() > 0) {
                for (RawDataTable otherSourceIncomeRawData : otherSourceIncomeRawDataList) {
                    if (otherSourceIncomeRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(otherSourceIncomeRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            // TODO: otherincome calculation based on verified field
                            if (hashMap.containsKey(TAG_NAME_VERIFIED_IN_OTHER_INCOME)) {
                                String verified = hashMap.get(TAG_NAME_VERIFIED_IN_OTHER_INCOME).toString();
                                if (!TextUtils.isEmpty(verified)) {
                                    if (verified.equalsIgnoreCase("Yes")) {
                                        if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME)) {
                                            generalIncome = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME).toString();
                                            if (!TextUtils.isEmpty(generalIncome)) {
                                                OTHER_SOURCE_INCOME = OTHER_SOURCE_INCOME + Integer.parseInt(generalIncome);
                                            }
                                        }
                                    } else {
                                        if (hashMap.containsKey(TAG_NAME_MONTHLY_INCOME_IN_OTHER_INCOME)) {
                                            generalIncome = hashMap.get(TAG_NAME_MONTHLY_INCOME_IN_OTHER_INCOME).toString();
                                            if (!TextUtils.isEmpty(generalIncome)) {
                                                OTHER_SOURCE_INCOME = OTHER_SOURCE_INCOME + Integer.parseInt(generalIncome);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_GENERAL_IN_HOUSE_SUMMARY_SCREEN, dynamicUITable.getScreenName(), String.valueOf(GENERAL_INCOME), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_OTHER_SOURCE_IN_HOUSE_SUMMARY_SCREEN, dynamicUITable.getScreenName(), String.valueOf(OTHER_SOURCE_INCOME), false);

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }

    // TODO: BANKING HISTORY CALCULATION
    public LiveData<List<DynamicUITable>> bankingHistoryCalculation(DynamicUITable
                                                                            dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double MONTHLY_SALES = 0;
            double APPLY_MULTIPLIER = 1;
            String monthlySales = "";
            String month = "";
            String applyMultiplier = "";

            List<RawDataTable> rawDataTableListMonthlyDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_MONTHLY_TRANSACTION_DETAIL_MSME,
                    dynamicUITable.getClientID());

            applyMultiplier = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_APPLY_MULTIPLIER);

            if (TextUtils.isEmpty(applyMultiplier)) {

                RawDataTable rawDataTableForBankingHistory = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(dynamicUITable.getScreenName(),
                        dynamicUITable.getClientID(), dynamicUITable.getModuleType());
                if (rawDataTableForBankingHistory != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBankingHistory);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_APPLY_MULTIPLIER)) {
                            applyMultiplier = hashMap.get(TAG_NAME_APPLY_MULTIPLIER).toString();
                        }
                    }
                }
            }

            if (!TextUtils.isEmpty(applyMultiplier) && applyMultiplier.equalsIgnoreCase("yes")) {
                APPLY_MULTIPLIER = 1.5;
            }

            if (rawDataTableListMonthlyDetails != null && rawDataTableListMonthlyDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListMonthlyDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TOTAL_DEPOSIT_IN_BANKING_HISTORY)) {
                                monthlySales = hashMap.get(TAG_NAME_TOTAL_DEPOSIT_IN_BANKING_HISTORY).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_MONTH_IN_BANKING_HISTORY)) {
                                month = hashMap.get(TAG_NAME_MONTH_IN_BANKING_HISTORY).toString();
                                // TODO: month year format need to set
                                month = appHelper.getMonthByDate(AppConstant.DATE_FORMAT_YYYY_MM_DD, month);
                            }
                            if (!TextUtils.isEmpty(monthlySales)) {
                                MONTHLY_SALES = MONTHLY_SALES + Integer.parseInt(monthlySales);

                            }
                            if (!TextUtils.isEmpty(month) && !TextUtils.isEmpty(monthlySales)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, month, monthlySales);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            month, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            monthlySales, true, true);
                                }

                            }
                        }
                    }
                }

                MONTHLY_SALES = MONTHLY_SALES / rawDataTableListMonthlyDetails.size();
                MONTHLY_SALES = MONTHLY_SALES * APPLY_MULTIPLIER;
                MONTHLY_SALES = Math.round(MONTHLY_SALES);

                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_SALES_IN_BANKING_HISTORY, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_SALES), true, true);

                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLY_MULTIPLIER, dynamicUITable.getScreenName(),
                        applyMultiplier, true, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: ITR CALCULATION
    public LiveData<List<DynamicUITable>> ITRCalculation(DynamicUITable
                                                                 dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double MONTHLY_SALES = 0;
            double LATEST_YEAR_SALES = 0;
            double APPLY_MULTIPLIER = 1;
            String sales = "";
            String year = "";
            int latestyear = 0;
            String applyMultiplier = "";

            List<RawDataTable> rawDataTableListITRDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_ITR_DETAIL_MSME,
                    dynamicUITable.getClientID());

            applyMultiplier = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_APPLY_MULTIPLIER_IN_ITR);

            if (TextUtils.isEmpty(applyMultiplier)) {

                RawDataTable rawDataTableForBankingHistory = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(dynamicUITable.getScreenName(),
                        dynamicUITable.getClientID(), dynamicUITable.getModuleType());
                if (rawDataTableForBankingHistory != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBankingHistory);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_APPLY_MULTIPLIER_IN_ITR)) {
                            applyMultiplier = hashMap.get(TAG_NAME_APPLY_MULTIPLIER_IN_ITR).toString();
                        }
                    }
                }
            }

            if (!TextUtils.isEmpty(applyMultiplier) && applyMultiplier.equalsIgnoreCase("yes")) {
                APPLY_MULTIPLIER = 1.5;
            }

            if (rawDataTableListITRDetails != null && rawDataTableListITRDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListITRDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_SALES_IN_ITR_DETAIL)) {
                                sales = hashMap.get(TAG_NAME_SALES_IN_ITR_DETAIL).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_YEAR_IN_ITR_DETAIL)) {
                                year = hashMap.get(TAG_NAME_YEAR_IN_ITR_DETAIL).toString();
                                if (latestyear == 0) {
                                    latestyear = Integer.parseInt(year);
                                }
                            }
                            if (!TextUtils.isEmpty(sales)) {
                                if (!TextUtils.isEmpty(year)) {
                                    int valuefromyear = Integer.parseInt(year);
                                    if (latestyear < valuefromyear) {
                                        latestyear = valuefromyear;
                                        MONTHLY_SALES = Integer.parseInt(sales);
                                        LATEST_YEAR_SALES = Integer.parseInt(sales);
                                    } else if (latestyear == valuefromyear) {
                                        MONTHLY_SALES = Integer.parseInt(sales);
                                        LATEST_YEAR_SALES = Integer.parseInt(sales);
                                    }
                                }
//                                MONTHLY_SALES = MONTHLY_SALES + Integer.parseInt(sales);

                            }
                            if (!TextUtils.isEmpty(year) && !TextUtils.isEmpty(sales)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, year, sales);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            year, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            sales, true, true);
                                }

                            }
                        }
                    }
                }
                // TODO: old
//                MONTHLY_SALES = MONTHLY_SALES / rawDataTableListITRDetails.size();
//                MONTHLY_SALES = MONTHLY_SALES * APPLY_MULTIPLIER;
//                MONTHLY_SALES = Math.round(MONTHLY_SALES);
                // TODO: new
                MONTHLY_SALES = MONTHLY_SALES / 12;
                MONTHLY_SALES = MONTHLY_SALES * APPLY_MULTIPLIER;
                MONTHLY_SALES = Math.round(MONTHLY_SALES);

                //LATEST_YEAR_SALES = Math.round(LATEST_YEAR_SALES);

                // TODO: updating monthly sales
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_SALES_IN_ITR, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_SALES), false, true);
//                // TODO: updating sales OLD
//                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SALES_IN_ITR, dynamicUITable.getScreenName(),
//                        sales, false, true);
                // TODO: updating sales
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SALES_IN_ITR, dynamicUITable.getScreenName(),
                        String.valueOf(LATEST_YEAR_SALES), false, true);
                // TODO: updating multiplier
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLY_MULTIPLIER_IN_ITR, dynamicUITable.getScreenName(),
                        applyMultiplier, true, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: GET MAXIMUM LOAN AMOUNT
    public LiveData<Integer> getMaximumLoanAmount(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<Integer> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            String loanProduct = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                    TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME);

            String scheme = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                    TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME);

            if (!TextUtils.isEmpty(loanProduct) && !TextUtils.isEmpty(scheme)) {
                ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(scheme, loanProduct);

                if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount())) {
                    int MAX_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMaxLoanAmount());
                    data.postValue(MAX_LOAN_AMOUNT);
                }
            }
        });
        return data;
    }

    // TODO: GET MIN AND MAXIMUM LOAN AMOUNT
    public LiveData<ProductMasterTable> getMinAndMaximumLoanAmount(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<ProductMasterTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_MSME)) {

                String loanProduct = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME);

                String scheme = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME);

                if (!TextUtils.isEmpty(loanProduct) && !TextUtils.isEmpty(scheme)) {
                    ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(scheme, loanProduct);

                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount()) && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())) {
//                        int MAX_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMaxLoanAmount());
                        data.postValue(productMasterTable);
                    }
                }
            } else if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {
                ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly("Samruddhi IB Loan");
                if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount()) && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())) {
                    data.postValue(productMasterTable);
                }

            }
        });
        return data;
    }


    // TODO: MORTGAGE SCREEN CALCULATION MSME
    public LiveData<List<DynamicUITable>> mortgageCalculation(DynamicUITable
                                                                      dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double ESTIMATED_VALUE = 0;


            // TODO: UPDATING MAIN SCREEN FIELDS
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ESTIMATED_VALUE_IN_MORTGAGE_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(ESTIMATED_VALUE), false, true);

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: CENTER CREATION SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> centerCreationScreenValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            // TODO: get raw data list for village survey
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataListONLYByScreenName(SCREEN_NAME_VILLAGE_SURVEY,
                    dynamicUITable.getLoanType(), dynamicUITable.getUser_id());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {

                List<String> newSpinnerList = new ArrayList<>();
                for (RawDataTable rawDataTable : rawDataTableList) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_VILLAGE_NAME_IN_VILLAGE_SURVEY)) {
                                String spinnerItem = hashMap.get(TAG_NAME_VILLAGE_NAME_IN_VILLAGE_SURVEY).toString();
                                if (!TextUtils.isEmpty(spinnerItem)) {
                                    newSpinnerList.add(spinnerItem);
                                }
                            }
                        }
                    }
                }

                if (newSpinnerList.size() > 0) {
                    changeSpinnerList(newSpinnerList, dynamicUITable.getScreenID(), TAG_NAME_VILLAGE_NAME_IN_CENTER_CREATION);
                }
            }
            // TODO: SEND FINAL RESULT
            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);

        });

        return data;
    }


    // TODO: LOAN APPROVAL SCREEN CALCULATION MSME
    public LiveData<List<DynamicUITable>> loanApprovalCalculation(DynamicUITable
                                                                          dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            // TODO: CURRENT SCREEN RAW DATA
            List<RawDataTable> loanApprovalRawDataTableList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            if (loanApprovalRawDataTableList != null && loanApprovalRawDataTableList.size() > 0) {
                RawDataTable rawDataTable = loanApprovalRawDataTableList.get(0);
                DynamicUITable dynamicUITableSaveButton = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableList);
                if (dynamicUITableSaveButton != null) {
                    // TODO: setting raw data tag name for update
                    dynamicUITableSaveButton.setValue(rawDataTable.getTag_name());
                    dynamicUITableSaveButton.setFieldName(FIELD_NAME_UPDATE);
                }
            }

            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            // TODO: Loan Amount Suggestion Raw data list
            List<RawDataTable> loanSuggestionRawDataTableList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_LOAN_SUGGESTION_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            // TODO: Cash Flow Summary Raw data list
            List<RawDataTable> cashFlowSummaryRawDataTableList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            // TODO: Cash Flow Summary
            if (cashFlowSummaryRawDataTableList != null && cashFlowSummaryRawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : cashFlowSummaryRawDataTableList) {

                    Type type = new TypeToken<List<DynamicUITable>>() {
                    }.getType();
                    List<DynamicUITable> dynamicUITableListFromDB = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                    if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                        DynamicUITable productDynamicUITable = getObjectByTAG(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME,
                                dynamicUITableListFromDB);
                        if (productDynamicUITable != null && !TextUtils.isEmpty(productDynamicUITable.getValue())
                                && productDynamicUITable.getParamlist().length > 0) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME,
                                    dynamicUITable.getScreenName(), productDynamicUITable.getValue(), true, true);

                            changeSpinnerList(Arrays.asList(productDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME);
                        }

                        DynamicUITable schemeDynamicUITable = getObjectByTAG(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME,
                                dynamicUITableListFromDB);
                        if (schemeDynamicUITable != null && !TextUtils.isEmpty(schemeDynamicUITable.getValue())
                                && schemeDynamicUITable.getParamlist().length > 0) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME,
                                    dynamicUITable.getScreenName(), schemeDynamicUITable.getValue(), true, true);

                            changeSpinnerList(Arrays.asList(schemeDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME);
                        }

                        DynamicUITable termDynamicUITable = getObjectByTAG(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME,
                                dynamicUITableListFromDB);
                        if (termDynamicUITable != null && !TextUtils.isEmpty(termDynamicUITable.getValue())
                                && termDynamicUITable.getParamlist().length > 0) {

                            changeSpinnerList(Arrays.asList(termDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME);
                        }


                        DynamicUITable ROIDynamicUITable = getObjectByTAG(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME,
                                dynamicUITableListFromDB);

                        if (ROIDynamicUITable != null && !TextUtils.isEmpty(ROIDynamicUITable.getValue())
                                && ROIDynamicUITable.getParamlist().length > 0) {

                            changeSpinnerList(Arrays.asList(ROIDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME);
                        }

                    }
                }
            }

//             TODO: Loan Suggestionn
            if (loanSuggestionRawDataTableList != null && loanSuggestionRawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : loanSuggestionRawDataTableList) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_ELIGIBLE_LOAN_AMOUNT_IN_LOAN_SUGGESTION_MSME)) {
                            String value = hashMap.get(TAG_NAME_ELIGIBLE_LOAN_AMOUNT_IN_LOAN_SUGGESTION_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {

                                String product = dynamicUIDao.getValueByTAGAndScreenName(SCREEN_NAME_CASH_FLOW_SUMMARY_MSME,
                                        TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME);

                                String scheme = dynamicUIDao.getValueByTAGAndScreenName(SCREEN_NAME_CASH_FLOW_SUMMARY_MSME,
                                        TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME);

                                if (!TextUtils.isEmpty(scheme) && !TextUtils.isEmpty(product)) {
                                    ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(scheme, product);

                                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())
                                            && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount())) {

                                        int MIN_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMinLoanAmount());
                                        int MAX_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMaxLoanAmount());

                                        // TODO: Updating Minimum And Maximum Loan Amount
                                        dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                                dynamicUITable.getScreenName(), String.valueOf(MIN_LOAN_AMOUNT), true);
                                        dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                                dynamicUITable.getScreenName(), String.valueOf(MAX_LOAN_AMOUNT), true);

                                        double ELLIGIBLE_LOAN_AMOUNT = Double.valueOf(value);
                                        if (ELLIGIBLE_LOAN_AMOUNT > MIN_LOAN_AMOUNT && ELLIGIBLE_LOAN_AMOUNT < MAX_LOAN_AMOUNT) {
                                            // TODO: Updating Maximum Loan Amount As Elligible Loan Amount
                                            dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                                    String.valueOf(ELLIGIBLE_LOAN_AMOUNT), true);
                                        }
                                    }
                                }

                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_ELIGIBLE_EMI_IN_LOAN_SUGGESTION_MSME)) {
                            String value = hashMap.get(TAG_NAME_ELIGIBLE_EMI_IN_LOAN_SUGGESTION_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                    }
                }
            }

            //             TODO: Loan approval
            if (loanApprovalRawDataTableList != null && loanApprovalRawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : loanApprovalRawDataTableList) {

                    Type type = new TypeToken<List<DynamicUITable>>() {
                    }.getType();
                    List<DynamicUITable> dynamicUITableListFromDB = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                    if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                        DynamicUITable productDynamicUITable = getObjectByTAG(TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME,
                                dynamicUITableListFromDB);
                        if (productDynamicUITable != null && !TextUtils.isEmpty(productDynamicUITable.getValue())
                                && productDynamicUITable.getParamlist().length > 0) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME,
                                    dynamicUITable.getScreenName(), productDynamicUITable.getValue(), true, true);

                            changeSpinnerList(Arrays.asList(productDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME);
                        }

                        DynamicUITable schemeDynamicUITable = getObjectByTAG(TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME,
                                dynamicUITableListFromDB);
                        if (schemeDynamicUITable != null && !TextUtils.isEmpty(schemeDynamicUITable.getValue())
                                && schemeDynamicUITable.getParamlist().length > 0) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME,
                                    dynamicUITable.getScreenName(), schemeDynamicUITable.getValue(), true, true);

                            changeSpinnerList(Arrays.asList(schemeDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME);
                        }

                        DynamicUITable termDynamicUITable = getObjectByTAG(TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME,
                                dynamicUITableListFromDB);
                        if (termDynamicUITable != null && !TextUtils.isEmpty(termDynamicUITable.getValue())
                                && termDynamicUITable.getParamlist().length > 0) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME,
                                    dynamicUITable.getScreenName(), termDynamicUITable.getValue(), true, true);

                            changeSpinnerList(Arrays.asList(termDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME);
                        }


                        DynamicUITable ROIDynamicUITable = getObjectByTAG(TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME,
                                dynamicUITableListFromDB);

                        if (ROIDynamicUITable != null && !TextUtils.isEmpty(ROIDynamicUITable.getValue())
                                && ROIDynamicUITable.getParamlist().length > 0) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME,
                                    dynamicUITable.getScreenName(), ROIDynamicUITable.getValue(), true, true);

                            changeSpinnerList(Arrays.asList(ROIDynamicUITable.getParamlist()), dynamicUITable.getScreenID(),
                                    TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME);
                        }

                    }


                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {

                        if (hashMap.containsKey(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {

                                String product = dynamicUIDao.getValueByTAGAndScreenName(SCREEN_NAME_LOAN_APPROVAL_MSME,
                                        TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME);

                                String scheme = dynamicUIDao.getValueByTAGAndScreenName(SCREEN_NAME_LOAN_APPROVAL_MSME,
                                        TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME);

                                if (!TextUtils.isEmpty(scheme) && !TextUtils.isEmpty(product)) {
                                    ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(scheme, product);

                                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())
                                            && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount())) {

                                        int MIN_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMinLoanAmount());
                                        int MAX_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMaxLoanAmount());

                                        // TODO: Updating Minimum And Maximum Loan Amount
                                        dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                                dynamicUITable.getScreenName(), String.valueOf(MIN_LOAN_AMOUNT), true);
                                        dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                                dynamicUITable.getScreenName(), String.valueOf(MAX_LOAN_AMOUNT), true);

//                                        double ELLIGIBLE_LOAN_AMOUNT=Double.valueOf(value);
//                                        if(ELLIGIBLE_LOAN_AMOUNT>MIN_LOAN_AMOUNT && ELLIGIBLE_LOAN_AMOUNT<MAX_LOAN_AMOUNT){
//                                            // TODO: Updating Maximum Loan Amount As Elligible Loan Amount
//                                            dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME,dynamicUITable.getScreenName(),
//                                                    String.valueOf(ELLIGIBLE_LOAN_AMOUNT),true);
//                                        }
                                    }
                                }

                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }


                        if (hashMap.containsKey(TAG_NAME_FIRST_INSTALLMENT_DATE_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_FIRST_INSTALLMENT_DATE_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIRST_INSTALLMENT_DATE_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_PURPOSE_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_PURPOSE_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PURPOSE_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_INVESTMENT_AMOUNT_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_INVESTMENT_AMOUNT_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INVESTMENT_AMOUNT_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_LOAN_DOCUMENT_TYPE_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_LOAN_DOCUMENT_TYPE_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_DOCUMENT_TYPE_IN_LOAN_APPROVAL_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }
                    }
                }
            }


            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }


    // TODO: CASH FLOW SUMMARY SCREEN CALCULATION MSME
    public LiveData<List<DynamicUITable>> cashFlowSummaryCalculation(DynamicUITable
                                                                             dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();


        executor.execute(() -> {

            // TODO: CURRENT SCREEN RAW DATA
            List<RawDataTable> cashFlowSummaryRawDataTableList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            // TODO: LOAN APPROVALl
            List<RawDataTable> rawDataTableListLoanApproval = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_LOAN_APPROVAL_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            // TODO: surplus visibility or not
            DynamicUITable dynamicUITableSurplus = getObjectByTAG(TAG_NAME_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITableList);
            if (dynamicUITableSurplus != null) {
                if (rawDataTableListLoanApproval != null && rawDataTableListLoanApproval.size() > 0) {
                    dynamicUITableSurplus.setVisibility(true);
                } else {
                    dynamicUITableSurplus.setVisibility(false);
                }
            }

            if (cashFlowSummaryRawDataTableList != null && cashFlowSummaryRawDataTableList.size() > 0) {
                RawDataTable rawDataTable = cashFlowSummaryRawDataTableList.get(0);
                DynamicUITable dynamicUITableSaveButton = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableList);
                if (dynamicUITableSaveButton != null) {
                    // TODO: setting raw data tag name for update
                    dynamicUITableSaveButton.setValue(rawDataTable.getTag_name());
                    dynamicUITableSaveButton.setFieldName(FIELD_NAME_UPDATE);
                }
            }

            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            String loanType = "", pickMethodSales = "";

            // TODO: Get raw data for all needed screens

            // TODO: INCOME ASSESSMENT SUMMARY
            List<RawDataTable> rawDataTableListIncomeAssessmentSummary = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_INCOME_ASSESSMENT_SUMMARY_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            // TODO: OPERATION EXPENSE
            List<RawDataTable> rawDataTableListOperationExpense = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_OPERATING_EXPENSE_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            // TODO: GENERAL INCOME
            List<RawDataTable> rawDataTableListGeneralIncome = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_GENERAL_INCOME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            // TODO: OTHER INCOME
            List<RawDataTable> rawDataTableListOtherIncome = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_OTHER_INCOME_SOURCE,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            // TODO: HOUSE EXPENSE
            List<RawDataTable> rawDataTableListHouseExpense = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_HOUSE_EXPENSES,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            // TODO: APPLICANT LOAN PROPOSAL
            List<RawDataTable> rawDataTableListApplicantLoanProposal = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());


            // TODO: ************ BUSINESS EXPENSE CALCULATION ****************
            double NET_BUSINESS_INCOME = 0, GROSS_MARGIN = 0, NET_MARGIN = 0, TOTAL_OPERATING_EXPENSE = 0, TOTAL_SALES = 0, TOTAL_PURCHASE = 0,
                    TOTAL_HOUSEHOLD_EXPENSE = 0, TOTAL_MONTHLY_SURPLUS = 0, SURPLUS = 0;

            // TODO: Income Assessment Summary
            if (rawDataTableListIncomeAssessmentSummary != null && rawDataTableListIncomeAssessmentSummary.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListIncomeAssessmentSummary) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY)) {
                            pickMethodSales = hashMap.get(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY).toString();
                        }
                        if (hashMap.containsKey(FIELD_TAG_SALES_PRESENT_ANALYSIS_IN_INCOME_ASSESSMENT_SUMMARY)) {
                            String value = hashMap.get(FIELD_TAG_SALES_PRESENT_ANALYSIS_IN_INCOME_ASSESSMENT_SUMMARY).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_MONTHLY_SALES_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);

                                TOTAL_SALES = Double.valueOf(value); // TODO: Total Sales
                            }
                        }
                        if (hashMap.containsKey(FIELD_TAG_PURCHASE_PRESENT_ANALYSIS_IN_INCOME_ASSESSMENT_SUMMARY)) {
                            String value = hashMap.get(FIELD_TAG_PURCHASE_PRESENT_ANALYSIS_IN_INCOME_ASSESSMENT_SUMMARY).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_PURCHASES_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);

                                TOTAL_PURCHASE = Double.valueOf(value); // TODO: Total Purchase
                            }
                        }
                    }
                }
            }

            // TODO: Operation Expense
            if (rawDataTableListOperationExpense != null && rawDataTableListOperationExpense.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListOperationExpense) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_SALARY_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_SALARY_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SALARIES_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_TELEPHONE_OR_MOBILE_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_TELEPHONE_OR_MOBILE_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TELEPHONE_OR_MOBILE_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_RENT_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_RENT_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RENT_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_ELECTRICITY_OR_WATER_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_ELECTRICITY_OR_WATER_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ELECTRICITY_OR_WATER_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_STAFF_WELFARE_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_STAFF_WELFARE_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_STAFF_WELFARE_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_TRANSPORT_FUEL_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_TRANSPORT_FUEL_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TRANSPORTATION_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_MISC_EXPENSES_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_MISC_EXPENSES_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MISC_EXPENSES_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_OTHERS_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_OTHERS_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OPERATING_EXPENSES_OTHERS_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_EXPENSES_IN_OPERATING_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_EXPENSES_IN_OPERATING_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_OPERATING_EXPENSES_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);

                                TOTAL_OPERATING_EXPENSE = Double.valueOf(value); // TODO: Total Operating Expense
                            }
                        }
                    }
                }
            }

            // TODO: FORMULA [ NET BUSINESS INCOME = SALES - OPERATING EXPENSE ]
            // TODO: FORMULA [ NET BUSINESS INCOME = SALES -PURCHASE- OPERATING EXPENSE ]  new formula
            // TODO: FORMULA [ GROSS MARGIN = (SALES - PURCHASE / SALES )  ]
            // TODO: FORMULA [ GROSS MARGIN = (SALES - PURCHASE / SALES ) *100 ]   new formulaa
            // TODO: FORMULA [ NET MARGIN = NET BUSINESS INCOME / SALES ]
            // TODO: FORMULA [ NET MARGIN = (NET BUSINESS INCOME / SALES) *100 ]  new formulaa

            // NET_BUSINESS_INCOME=TOTAL_SALES-TOTAL_OPERATING_EXPENSE;
            NET_BUSINESS_INCOME = TOTAL_SALES - TOTAL_PURCHASE - TOTAL_OPERATING_EXPENSE;
            // GROSS_MARGIN=(TOTAL_SALES-TOTAL_PURCHASE/TOTAL_SALES) ;
            GROSS_MARGIN = ((TOTAL_SALES - TOTAL_PURCHASE) / TOTAL_SALES) * 100;
            // GROSS_MARGIN=Math.round(GROSS_MARGIN);
            // NET_MARGIN=(NET_BUSINESS_INCOME/TOTAL_SALES) ;
            NET_MARGIN = (NET_BUSINESS_INCOME / TOTAL_SALES) * 100;
            // TODO: Updating Net Business Income
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NET_BUSINESS_INCOME_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(NET_BUSINESS_INCOME), false, true);
            // TODO: Updating Gross Margin
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_GROOS_MARGIN_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(GROSS_MARGIN), false, true);
            // TODO: Updating Net Margin
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_NET_MARGIN_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(NET_MARGIN), false, true);


            // TODO: ************ HOUSEHOLD INCOME CALCULATION ****************
            // TODO: General Income
            double APPLICANT_GENERAL_INCOME = 0, CO_APPLICANT_GENERAL_INCOME = 0, APPLICANT_OTHER_INCOME = 0,
                    CO_APPLICANT_OTHER_INCOME = 0, TOTAL_HOUSE_HOLD_INCOME = 0;

            if (rawDataTableListGeneralIncome != null && rawDataTableListGeneralIncome.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListGeneralIncome) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        // TODO: generalincome calculation based on verified field
                        if (hashMap.containsKey(TAG_NAME_CATEGORY_IN_GENERAL_INCOME) && hashMap.containsKey(TAG_NAME_VERIFIED_IN_GENERAL_INCOME)) {
                            String category = hashMap.get(TAG_NAME_CATEGORY_IN_GENERAL_INCOME).toString();
                            String verified = hashMap.get(TAG_NAME_VERIFIED_IN_GENERAL_INCOME).toString();
                            if (!TextUtils.isEmpty(category) && !TextUtils.isEmpty(verified)) {
                                if (category.equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {// TODO: Applicant
                                    if (verified.equalsIgnoreCase("Yes")) {
                                        if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME)) {
                                            String value = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                APPLICANT_GENERAL_INCOME = APPLICANT_GENERAL_INCOME + Double.valueOf(value);
                                                TOTAL_HOUSE_HOLD_INCOME = TOTAL_HOUSE_HOLD_INCOME + APPLICANT_GENERAL_INCOME;
                                            }
                                        }
                                    } else {
                                        if (hashMap.containsKey(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME)) {
                                            String value = hashMap.get(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                APPLICANT_GENERAL_INCOME = APPLICANT_GENERAL_INCOME + Double.valueOf(value);
                                                TOTAL_HOUSE_HOLD_INCOME = TOTAL_HOUSE_HOLD_INCOME + APPLICANT_GENERAL_INCOME;
                                            }
                                        }
                                    }
                                } else if (category.equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) { // TODO: Co Applicant
                                    if (verified.equalsIgnoreCase("Yes")) {
                                        if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME)) {
                                            String value = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                CO_APPLICANT_GENERAL_INCOME = CO_APPLICANT_GENERAL_INCOME + Double.valueOf(value);
                                                TOTAL_HOUSE_HOLD_INCOME = TOTAL_HOUSE_HOLD_INCOME + CO_APPLICANT_GENERAL_INCOME;
                                            }
                                        }
                                    } else {
                                        if (hashMap.containsKey(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME)) {
                                            String value = hashMap.get(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                CO_APPLICANT_GENERAL_INCOME = CO_APPLICANT_GENERAL_INCOME + Double.valueOf(value);
                                                TOTAL_HOUSE_HOLD_INCOME = TOTAL_HOUSE_HOLD_INCOME + CO_APPLICANT_GENERAL_INCOME;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
            }

            if (rawDataTableListOtherIncome != null && rawDataTableListOtherIncome.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListOtherIncome) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_CATEGORY_IN_OTHER_INCOME)) {
                            String category = hashMap.get(TAG_NAME_CATEGORY_IN_OTHER_INCOME).toString();
                            if (!TextUtils.isEmpty(category)) {
                                if (category.equalsIgnoreCase(SPINNER_ITEM_APPLICANT)) {// TODO: Applicant
                                    if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME)) {
                                        String value = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME).toString();
                                        if (!TextUtils.isEmpty(value)) {
                                            APPLICANT_OTHER_INCOME = APPLICANT_OTHER_INCOME + Double.valueOf(value);
                                            TOTAL_HOUSE_HOLD_INCOME = TOTAL_HOUSE_HOLD_INCOME + APPLICANT_OTHER_INCOME;
                                        }
                                    }
                                } else if (category.equalsIgnoreCase(SPINNER_ITEM_COAPPLICANT)) { // TODO: Co Applicant
                                    if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME)) {
                                        String value = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME).toString();
                                        if (!TextUtils.isEmpty(value)) {
                                            CO_APPLICANT_OTHER_INCOME = CO_APPLICANT_OTHER_INCOME + Double.valueOf(value);
                                            TOTAL_HOUSE_HOLD_INCOME = TOTAL_HOUSE_HOLD_INCOME + CO_APPLICANT_OTHER_INCOME;
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
            }

            // TODO: Updating Household income verified fields
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_GENERAL_INCOME_APPLICANT_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(APPLICANT_GENERAL_INCOME), false, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INCOME_FROM_OTHER_APPLICANT_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(APPLICANT_OTHER_INCOME), false, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INCOME_FROM_OTHER_CO_APPLICANT_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(CO_APPLICANT_OTHER_INCOME), false, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_GENERAL_INCOME_CO_APPLICANT_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(CO_APPLICANT_GENERAL_INCOME), false, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_HOUSEHOLD_INCOME_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(TOTAL_HOUSE_HOLD_INCOME), false, true);

            // TODO: ************ HOUSEHOLD EXPENSE CALCULATION ****************
            // TODO: Operation Expense
            if (rawDataTableListHouseExpense != null && rawDataTableListHouseExpense.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListHouseExpense) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_FOOD_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_FOOD_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FOOD_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_RENT_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_RENT_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOUSEHOLD_EXPENSES_RENT_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_WATER_OR_ELECTRICITY_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_WATER_OR_ELECTRICITY_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_WATER_ELECTRICITY_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_TELEPHONE_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_TELEPHONE_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TELEPHONE_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_TRANSPORT_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_TRANSPORT_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TRANSPORT_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_EDUCATION_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_EDUCATION_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_EDUCATION_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_CLOTHING_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_CLOTHING_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CLOTHING_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_HEALTHCARE_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_HEALTHCARE_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HEALTHCARE_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_OTHERS_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_OTHERS_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_PAYMENT_OF_HH_DEBTS_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_PAYMENT_OF_HH_DEBTS_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAYMENT_OF_HH_DEBTS_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_PAYMENT_OF_BB_DEBTS_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_PAYMENT_OF_BB_DEBTS_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAYMENT_OF_BB_DEBTS_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_TOTAL_EXPENSES_IN_HOUSE_EXPENSE_MSME)) {
                            String value = hashMap.get(TAG_NAME_TOTAL_EXPENSES_IN_HOUSE_EXPENSE_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_HOUSEHOLD_EXPENSES_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, false, true);

                                TOTAL_HOUSEHOLD_EXPENSE = Double.valueOf(value); // TODO: Total Household Expenses
                            }
                        }
                    }
                }
            }

            // TODO: ************ TOTAL MONTHLY SURPLUS CALCULATION ****************

            // TODO: FORMULA [ TOTAL MONTHLY SURPLUS = (NET BUSINESS INCOME + TOTAL HOUSEHOLD INCOME ) - TOTAL HOUSEHOLD EXPENSES]
            TOTAL_MONTHLY_SURPLUS = (NET_BUSINESS_INCOME + TOTAL_HOUSE_HOLD_INCOME) - TOTAL_HOUSEHOLD_EXPENSE;
            // TODO: Updating Total Monthly Surplus
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_MONTHLY_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME,
                    dynamicUITable.getScreenName(), String.valueOf(TOTAL_MONTHLY_SURPLUS), false, true);

            // TODO: getting product list
            List<String> productList = dynamicUIDao.getDistinctProducts();
            if (productList != null && productList.size() > 0) {
                changeSpinnerList(productList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME);
            }

            // TODO: getting scheme list
            List<String> schemeList = dynamicUIDao.getDistinctSchemes();
            if (schemeList != null && schemeList.size() > 0) {
                changeSpinnerList(schemeList, dynamicUITable.getScreenID(), TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME);
            }

            // TODO: Applicant Loan Proposal
            if (rawDataTableListApplicantLoanProposal != null && rawDataTableListApplicantLoanProposal.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListApplicantLoanProposal) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_LOAN_PRODUCT)) {
                            loanType = hashMap.get(TAG_NAME_LOAN_PRODUCT).toString();
                            if (!TextUtils.isEmpty(loanType)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), loanType, true, true);

                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_LOAN_SCHEME)) {
                            String value = hashMap.get(TAG_NAME_LOAN_SCHEME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_SAME_DECLARED_REPAYMENT_CAPACITY)) {
                            String value = hashMap.get(TAG_NAME_SAME_DECLARED_REPAYMENT_CAPACITY).toString();
                            if (!TextUtils.isEmpty(value)) {
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DECLARED_REPAYMENT_CAPACITY_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), value, true, true);
                            }
                        }
                    }
                }
            }


            // TODO: ************ SURPLUS CALCULATION ****************
            if (rawDataTableListLoanApproval != null && rawDataTableListLoanApproval.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListLoanApproval) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME)) {
                            String value = hashMap.get(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                double INSTALLMENT_AMOUNT = Double.valueOf(value); // TODO: installment ammount tvName loan approval
                                // TODO: FORMULA [SURPLUS = (TOTAL_MONTHLY_SURPLUS - INSTALLMENT_AMOUNT )]
                                SURPLUS = TOTAL_MONTHLY_SURPLUS - INSTALLMENT_AMOUNT;
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME,
                                        dynamicUITable.getScreenName(), String.valueOf(SURPLUS), false, true);
                                if (SURPLUS < 0) {
                                    dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(), false, "Surplus Should Not Be Negative");
                                } else {
                                    dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(), true, "");
                                }
                            }
                        }
                    }
                }
            }

            if (!TextUtils.isEmpty(loanType) && !TextUtils.isEmpty(pickMethodSales)) {

                DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

                try {
                    final DBRRequestDTO rawDataRequestDTO = new DBRRequestDTO();
                    rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                    DBRRequestDTO.SpNameWithParameterClass spNameWithParameter = new DBRRequestDTO.SpNameWithParameterClass();
                    spNameWithParameter.setSpName(SP_NAME_TO_GET_DBR);
                    DBRRequestDTO.SpParametersClass spParametersClass = new DBRRequestDTO.SpParametersClass();
                    spParametersClass.setDBRCalMtd("0"); // TODO: DBRCallMtd
                    spParametersClass.setBCID(AppConstant.BCID); // TODO: BC id ( Hard coded )
                    spParametersClass.setLoanType(loanType); // TODO: Loan Type
                    spParametersClass.setPickmtd(pickMethodSales); // TODO: Pick Method
                    spNameWithParameter.setSpParameters(spParametersClass);
                    ArrayList<DBRRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<DBRRequestDTO.SpNameWithParameterClass>();
                    SpNameWithParameterList.add(spNameWithParameter);
                    rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                    String baseString = new Gson().toJson(rawDataRequestDTO, DBRRequestDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).getDBRFromServer(rawDataRequestDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<ResponseBody>() {
                                @Override
                                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            try {
                                                String strResponse = response.body().string();
                                                JSONObject json = new JSONObject(strResponse);
                                                String key = json.keys().next();

                                                String tableJson = json.get(key).toString();
                                                DBRResponseDTO dbrResponseDTO = new Gson().fromJson(tableJson, DBRResponseDTO.class);
                                                if (dbrResponseDTO != null && dbrResponseDTO.getTable().size() > 0) {
                                                    Log.d(TAG, "raw data tvName server =======> " + new Gson().toJson(dbrResponseDTO));

                                                    if (dbrResponseDTO.getTable().size() > 0) {
                                                        DBRResponseDTO.Table table = dbrResponseDTO.getTable().get(0);
                                                        if (table != null && !TextUtils.isEmpty(table.getRuleInPercent())) {
                                                            // TODO: Updating DBR
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DEBT_SERVICE_RATIO_IN_CASH_FLOW_SUMMARY_MSME,
                                                                    dynamicUITable.getScreenName(), String.valueOf(table.getRuleInPercent()), false, true);

                                                            double DBR = Double.valueOf(table.getRuleInPercent());
                                                            String totalMonthlySurplus = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                    TAG_NAME_TOTAL_MONTHLY_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME);
                                                            if (!TextUtils.isEmpty(totalMonthlySurplus)) {

                                                                double dTotalMonthlySurplus = Double.valueOf(totalMonthlySurplus);
                                                                if (DBR > 0 && dTotalMonthlySurplus > 0) {
                                                                    // TODO: Updating Suggested EMI based on CFA
                                                                    double SUGGESTED_EMI_BASED_ON_CFA = (DBR / 100) * dTotalMonthlySurplus;
                                                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA_IN_CASH_FLOW_SUMMARY_MSME,
                                                                            dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI_BASED_ON_CFA), false, true);

                                                                    String declaredRepaymentCapacity = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                            TAG_NAME_DECLARED_REPAYMENT_CAPACITY_IN_CASH_FLOW_SUMMARY_MSME);
                                                                    if (!TextUtils.isEmpty(declaredRepaymentCapacity)) {

                                                                        double DECLARED_REPAYMENT_CAPACITY = Double.valueOf(declaredRepaymentCapacity);
                                                                        double SUGGESTED_EMI = 0;
                                                                        if (SUGGESTED_EMI_BASED_ON_CFA < DECLARED_REPAYMENT_CAPACITY) {
                                                                            SUGGESTED_EMI = SUGGESTED_EMI_BASED_ON_CFA;
                                                                        } else {
                                                                            SUGGESTED_EMI = DECLARED_REPAYMENT_CAPACITY;
                                                                        }

                                                                        // TODO: Updating suggested EMI
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SUGGESTED_EMI_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI), false, true);

                                                                        double RPI = 0;
                                                                        double NO_OF_INSTALLMENT = 0;

                                                                        // TODO: Cash Flow Raw Data List
                                                                        if (cashFlowSummaryRawDataTableList != null && cashFlowSummaryRawDataTableList.size() > 0) {
                                                                            for (RawDataTable rawDataTable : cashFlowSummaryRawDataTableList) {
                                                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                                                                if (hashMap != null && hashMap.size() > 0) {
                                                                                    if (hashMap.containsKey(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME)) {
                                                                                        String value = hashMap.get(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                                                                        if (!TextUtils.isEmpty(value)) {
                                                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                    dynamicUITable.getScreenName(), value, true, true);
                                                                                        }
                                                                                    }
                                                                                    if (hashMap.containsKey(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME)) {
                                                                                        String value = hashMap.get(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                                                                        if (!TextUtils.isEmpty(value)) {
                                                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                    dynamicUITable.getScreenName(), value, true, true);
                                                                                        }
                                                                                    }
                                                                                    if (hashMap.containsKey(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME)) {
                                                                                        String value = hashMap.get(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                                                                        if (!TextUtils.isEmpty(value)) {
                                                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                    dynamicUITable.getScreenName(), value, true, true);
                                                                                        }
                                                                                    }
                                                                                    if (hashMap.containsKey(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME)) {
                                                                                        String value = hashMap.get(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                                                                        if (!TextUtils.isEmpty(value)) {
                                                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                    dynamicUITable.getScreenName(), value, true, true);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        String loanProduct = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME);

                                                                        String scheme = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME);

                                                                        // TODO: TENURE AND ROI PARAMLIST CHANGES
                                                                        if (!TextUtils.isEmpty(loanProduct) && !TextUtils.isEmpty(scheme)) {
                                                                            ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(scheme, loanProduct);
                                                                            // TODO: Tenure paramlist changes
                                                                            if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                                                                    && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                                                                                List<String> tenureParamList = new ArrayList<>();
                                                                                double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                                                                                double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                                                                                double step_double = Double.parseDouble(productMasterTable.getStep());

                                                                                int minTenure = (int) minTenure_double;
                                                                                int maxTenure = (int) maxTenuredouble;
                                                                                int step = (int) step_double;
                                                                                tenureParamList.add(0, String.valueOf(minTenure));
                                                                                int tenure = minTenure;
                                                                                for (int i = 1; tenure <= maxTenure; i++) {
                                                                                    tenure = tenure + step;
                                                                                    tenureParamList.add(i, String.valueOf(tenure));
                                                                                }
                                                                                if (tenureParamList.size() > 0) {
                                                                                    changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                                                                                }
                                                                            }

                                                                            // TODO: ROI paramlist changes
                                                                            if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinROI())
                                                                                    && !TextUtils.isEmpty(productMasterTable.getMaxROI())) {

                                                                                List<String> ROIParamlist = new ArrayList<>();
                                                                                double minROI_double = Double.parseDouble(productMasterTable.getMinROI());
                                                                                double maxROI_double = Double.parseDouble(productMasterTable.getMaxROI());

                                                                                int minROI = (int) minROI_double;
                                                                                int maxROI = (int) maxROI_double;
                                                                                int step = 1;
                                                                                ROIParamlist.add(0, String.valueOf(minROI));
                                                                                int ROI = minROI;
                                                                                for (int i = 1; ROI < maxROI; i++) {
                                                                                    ROI = ROI + step;
                                                                                    ROIParamlist.add(i, String.valueOf(ROI));
                                                                                }
                                                                                if (ROIParamlist.size() > 0) {
                                                                                    changeSpinnerList(ROIParamlist, dynamicUITable.getScreenID(), TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);
                                                                                }
                                                                            }
                                                                        }
                                                                        /////////////////////////////


                                                                        String tenure = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                                                                        String ratePerInterest = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);
                                                                        String loanamount_cashflow = "";

                                                                        // TODO: Cash Flow Raw Data List
                                                                        if (cashFlowSummaryRawDataTableList != null && cashFlowSummaryRawDataTableList.size() > 0) {
                                                                            for (RawDataTable rawDataTable : cashFlowSummaryRawDataTableList) {
                                                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                                                                if (hashMap != null && hashMap.size() > 0) {
                                                                                    if (hashMap.containsKey(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME)) {
                                                                                        String value = hashMap.get(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME).toString();
                                                                                        if (!TextUtils.isEmpty(value)) {
                                                                                            loanamount_cashflow = value;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        if (!TextUtils.isEmpty(tenure) && !TextUtils.isEmpty(ratePerInterest)) {
                                                                            NO_OF_INSTALLMENT = Double.valueOf(tenure);
                                                                            RPI = Double.valueOf(ratePerInterest);
                                                                            RPI = RPI / 12 / 100;

                                                                            // TODO: Calculate Recommended Loan Amount
                                                                            double RECOMMENDED_LOAN_AMOUNT = SUGGESTED_EMI * ((Math.pow(RPI + 1, NO_OF_INSTALLMENT) - 1) / (RPI * Math.pow(RPI + 1, NO_OF_INSTALLMENT)));
                                                                            RECOMMENDED_LOAN_AMOUNT = Math.round(RECOMMENDED_LOAN_AMOUNT);

                                                                            if (!TextUtils.isEmpty(loanamount_cashflow) && RECOMMENDED_LOAN_AMOUNT < Double.valueOf(loanamount_cashflow)) {
                                                                                // TODO: Updating Recommendedd Loan Amount
                                                                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                        dynamicUITable.getScreenName(), loanamount_cashflow, false, true);
                                                                            } else {
                                                                                // TODO: Updating Recommended Loan Amount
                                                                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                        dynamicUITable.getScreenName(), String.valueOf(RECOMMENDED_LOAN_AMOUNT), false, true);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }
                                                    // TODO: Final Result
                                                    List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
                                                    data.postValue(dynamicUITableListFinal);
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                            }
                                        }

                                    });
                                }

                                @Override
                                public void onFailure(Call<ResponseBody> call, Throwable t) {
                                    t.printStackTrace();
                                }
                            });
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            } else {
                // TODO: Final Result
                List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
                data.postValue(dynamicUITableListFinal);
            }


//                // TODO: Final Result
//                List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
//                data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: HOUSE ASSET CALCULATION MSME
    public LiveData<List<DynamicUITable>> houseAssetCalculation(DynamicUITable
                                                                        dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double TOTAL_FIXED_ASSETS = 0;
            double TOTAL_HOUSE_LIABILITY = 0;
            double TOTAL_EQUITY = 0;


            // TODO: HOUSE LIABILITY RAW DATA
            RawDataTable rawDataTableForBusinessLiability = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_HOUSE_LIABILITIES_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForBusinessLiability != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBusinessLiability);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_TOTAL_LIABILITIES_IN_HOUSELIABILITY_MSME)) {
                        String value = hashMap.get(TAG_NAME_TOTAL_LIABILITIES_IN_HOUSELIABILITY_MSME).toString();
                        if (!TextUtils.isEmpty(value)) {
                            TOTAL_HOUSE_LIABILITY = Double.valueOf(value);
                        }
                    }
                }
            }

            TOTAL_EQUITY = TOTAL_FIXED_ASSETS - TOTAL_HOUSE_LIABILITY;

            // TODO: UPDATING MAIN SCREEN FIELDS
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOUSEHOLD_EQUITY_IN_HOUSE_ASSET_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_EQUITY), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_ASSETS_IN_HOUSE_ASSET_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_FIXED_ASSETS), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIXED_ASSETS_IN_HOUSE_ASSET_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_FIXED_ASSETS), true, true);

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: BUSINESS ASSET CALCULATION IL
    public LiveData<List<DynamicUITable>> businessAssetILCalculation(DynamicUITable
                                                                             dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first


            double TOTAL_ASSETS = 0;

            // TODO: PRODUCT DETAIL VALIDATION
            List<RawDataTable> rawDataTableListForProduct = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_PRODUCT,
                    dynamicUITable.getClientID());

            if (rawDataTableListForProduct != null && rawDataTableListForProduct.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForProduct) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PRODUCT)) {
                                fieldName = hashMap.get(TAG_NAME_PRODUCT).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_CURRENT_INVENTORY)) {
                                value = hashMap.get(TAG_NAME_CURRENT_INVENTORY).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                TOTAL_ASSETS = TOTAL_ASSETS + Double.parseDouble(value);
                            }

                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_CASH_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            TOTAL_ASSETS = Math.round(TOTAL_ASSETS);

            // TODO: UPDATING TOTAL_ASSETS
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_ASSETS
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_ASSETS), true, true);


            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: BUSINESS ASSET CALCULATION MSME
    public LiveData<List<DynamicUITable>> businessAssetMSMECalculation(DynamicUITable
                                                                               dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first

            double TOTAL_FIXED_ASSETS = 0;
            double TOTAL_ASSETS = 0;
            double TOTAL_EQUITY = 0;
            double TOTAL_BUSINESS_LIABILITY = 0;
            double CASH = 0;
            double SAVINGS = 0;
            double DEPOSIT = 0;
            double INSURANCE = 0;
            double INVENTORY = 0;
            double RECEIVABLES = 0;
            double CURRENT_ASSETS = 0;
            double LIQUID_ASSETS = 0;

            // TODO: CASH DETAIL VALIDATION
            List<RawDataTable> rawDataTableListForCash = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_CASH_BUSINESS_ASSETS_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListForCash != null && rawDataTableListForCash.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForCash) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME)) {
                                fieldName = hashMap.get(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_AMOUNT_IN_BUSINESS_ASSETS_MSME)) {
                                value = hashMap.get(TAG_NAME_AMOUNT_IN_BUSINESS_ASSETS_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                CASH = CASH + Double.parseDouble(value);
                            }

                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_CASH_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            // TODO: SAVINGS/CHITS DETAIL VALIDATION
            List<RawDataTable> rawDataTableListForSavingsOrChits = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_SAVINGS_CHITS_BUSINESS_ASSETS_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListForSavingsOrChits != null && rawDataTableListForSavingsOrChits.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForSavingsOrChits) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME)) {
                                fieldName = hashMap.get(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME).toString();

                                if (!TextUtils.isEmpty(fieldName) && fieldName.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_OTHERS_IN_BUSINESS_ASSETS_MSME)) {
                                    fieldName = hashMap.get(TAG_NAME_OTHERS_IN_BUSINESS_ASSETS_MSME).toString();
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE_IN_BUSINESS_ASSETS_MSME)) {
                                value = hashMap.get(TAG_NAME_BALANCE_IN_BUSINESS_ASSETS_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                SAVINGS = SAVINGS + Double.parseDouble(value);
                            }
                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_SAVINGS_OR_CHITS_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            // TODO: DEPOSITS AND BONDS DETAIL VALIDATION
            List<RawDataTable> rawDataTableListForDeposits = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_DEPOSITS_BUSINESS_ASSETS_BONDS_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListForDeposits != null && rawDataTableListForDeposits.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForDeposits) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME)) {
                                fieldName = hashMap.get(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_AMOUNT_IN_BUSINESS_ASSETS_MSME)) {
                                value = hashMap.get(TAG_NAME_AMOUNT_IN_BUSINESS_ASSETS_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                DEPOSIT = DEPOSIT + Double.parseDouble(value);
                            }

                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_DEPOSITS_AND_BONDS_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            // TODO: INSURANCE DETAIL VALIDATION
            List<RawDataTable> rawDataTableListForInsurance = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_INSURANCE_BUSINESS_ASSETS_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListForInsurance != null && rawDataTableListForInsurance.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForInsurance) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME)) {
                                fieldName = hashMap.get(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME).toString();

                                if (!TextUtils.isEmpty(fieldName) && fieldName.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_OTHERS_IN_BUSINESS_ASSETS_MSME)) {
                                    fieldName = hashMap.get(TAG_NAME_OTHERS_IN_BUSINESS_ASSETS_MSME).toString();
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_SURRENDER_VALUE_IN_BUSINESS_ASSETS_MSME)) {
                                value = hashMap.get(TAG_NAME_SURRENDER_VALUE_IN_BUSINESS_ASSETS_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                INSURANCE = INSURANCE + Double.parseDouble(value);
                            }

                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_INSURANCE_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            // TODO: INVENTORY  VALIDATION
            List<RawDataTable> rawDataTableListForInventory = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_INVENTORY_BUSINESS_ASSETS_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListForInventory != null && rawDataTableListForInventory.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForInventory) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PRODUCT_IN_BUSINESS_ASSETS_MSME)) {
                                fieldName = hashMap.get(TAG_NAME_PRODUCT_IN_BUSINESS_ASSETS_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_CURRENT_INVENTORY_IN_BUSINESS_ASSETS_MSME)) {
                                value = hashMap.get(TAG_NAME_CURRENT_INVENTORY_IN_BUSINESS_ASSETS_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                INVENTORY = INVENTORY + Double.parseDouble(value);
                            }

                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_INVENTORY_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            // TODO: RECEIVABLES VALIDATION
            List<RawDataTable> rawDataTableListForReceivables = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_RECEIVABLES_BUSINESS_ASSETS_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListForReceivables != null && rawDataTableListForReceivables.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableListForReceivables) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME)) {
                                fieldName = hashMap.get(TAG_NAME_TYPE_IN_BUSINESS_ASSETS_MSME).toString();

                                if (!TextUtils.isEmpty(fieldName) && fieldName.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_OTHERS_IN_BUSINESS_ASSETS_MSME)) {
                                    fieldName = hashMap.get(TAG_NAME_OTHERS_IN_BUSINESS_ASSETS_MSME).toString();
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_AMOUNT_IN_BUSINESS_ASSETS_MSME)) {
                                value = hashMap.get(TAG_NAME_AMOUNT_IN_BUSINESS_ASSETS_MSME).toString();
                            }

                            if (!TextUtils.isEmpty(value)) {
                                RECEIVABLES = RECEIVABLES + Double.parseDouble(value);
                            }

                            if (!TextUtils.isEmpty(fieldName) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    dynamicUITableList.add(getPositionToInsertNewRow(dynamicUITableList, TAG_NAME_RECEIVABLES_IN_BUSINESS_ASSETS_MSME),
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }
            }

            // TODO: BUSINESS LIABILITY RAW DATA
            RawDataTable rawDataTableForBusinessLiability = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_BUSINESS_LIABILITIES_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForBusinessLiability != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBusinessLiability);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_TOTAL_LIABILITIES_IN_BUSINESS_LIABILITY_MSME)) {
                        String value = hashMap.get(TAG_NAME_TOTAL_LIABILITIES_IN_BUSINESS_LIABILITY_MSME).toString();
                        if (!TextUtils.isEmpty(value)) {
                            TOTAL_BUSINESS_LIABILITY = Double.valueOf(value);
                        }
                    }
                }
            }

            // TODO: UPDATING MAIN SCREEN FIELDS
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CASH_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(CASH), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SAVINGS_OR_CHITS_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(SAVINGS), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DEPOSITS_AND_BONDS_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(DEPOSIT), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSURANCE_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(INSURANCE), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INVENTORY_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(INVENTORY), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECEIVABLES_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(RECEIVABLES), true, true);

            LIQUID_ASSETS = CASH + SAVINGS + DEPOSIT + INSURANCE;
            CURRENT_ASSETS = LIQUID_ASSETS + INVENTORY + RECEIVABLES;
            TOTAL_ASSETS = CURRENT_ASSETS + TOTAL_FIXED_ASSETS;
            TOTAL_EQUITY = TOTAL_ASSETS - TOTAL_BUSINESS_LIABILITY;

            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LIQUID_ASSETS_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(LIQUID_ASSETS), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_CURRENT_ASSETS_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(CURRENT_ASSETS), true, true);


            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_EQUITY_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_EQUITY), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_ASSETS_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_ASSETS), true, true);
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIXED_ASSETS_IN_BUSINESS_ASSETS_MSME
                    , dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_FIXED_ASSETS), true, true);

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: UPDATE VILLAGE & CENTER DETAILS only for JLG
    public LiveData<List<DynamicUITable>> updateVillageAndCenter(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList,
                                                                 CenterCreationTable centerCreationTable) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first
            CenterCreationTable centerCreationTableFromDb = centerCreationTable;

            // TODO: if CenterCreation table is null update tvName database
            if (centerCreationTable == null) {
                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(dynamicUITable.getClientID());
                if (masterTable != null) {
                    centerCreationTableFromDb = dynamicUIDao.getCenterCreationTableByCenterID(masterTable.getCenterId(), dynamicUITable.getLoanType());
                }

            }


            if (centerCreationTableFromDb != null && !TextUtils.isEmpty(centerCreationTableFromDb.getVillageName())) {
                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_VILLAGE_NAME, dynamicUITable.getScreenName(),
                        centerCreationTableFromDb.getVillageName(), false);
            }

            if (centerCreationTableFromDb != null && !TextUtils.isEmpty(centerCreationTableFromDb.getCenterName())) {
                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_CENTER_NAME, dynamicUITable.getScreenName(),
                        centerCreationTableFromDb.getCenterName(), false);
            }

            // TODO: Final Result
            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: APPLICANT KYC SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> applicantKYCScreenValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first

            // TODO: APPLICANT RAW DATA LIST
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableList) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                fieldName = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                value = hashMap.get(TAG_NAME_KYC_ID).toString();
                            }

                            if (!TextUtils.isEmpty(fieldName)) {
//                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                DynamicUITable dynamicUITableForNewRow = dynamicUIDao.getRowByTAGandScreen(rawDataTable.getTag_name(),
                                        dynamicUITableList.get(0).getScreenID());
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    List<DynamicUITable> dynamicUITableListLatest = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());

                                    dynamicUITableListLatest.add(dynamicUITableListLatest.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableListLatest, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(), fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(), value, true, true);
                                }
                            }
                        }
                    }
                }
            }

            List<DynamicUITable> dynamicUITableListNew = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            if (dynamicUITableListNew != null && dynamicUITableListNew.size() > 0) {
                for (DynamicUITable dynamicUITableNew : dynamicUITableListNew) {
                    dynamicUITableNew.setVisibility(false);
                    if (dynamicUITableNew.getFieldType().equalsIgnoreCase(FIELD_TYPE_NEW_ROW)) {
                        dynamicUITableNew.setVisibility(true);
                    } else {
                        // TODO: JLG VALIDATIONS
                        if (dynamicUITableNew.getLoanType().equalsIgnoreCase(LOAN_NAME_JLG)) {

                            if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_VILLAGE_NAME)
                                    || dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_CENTER_NAME)
                                    || dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_MEMBER_ID_IN_APPLICANT_KYC)) {
                                dynamicUITableNew.setVisibility(true);
                            }

                            // TODO: Kyc Type ( Default Aadhaar )
                            else if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_KYC_TYPE)) {
                                RawDataTable rawDataTable = dynamicUIDao.getRawdataByFieldName(dynamicUITableNew.getScreenName(),
                                        dynamicUITableNew.getLoanType(), dynamicUITableNew.getClientID(), SPINNER_ITEM_FIELD_NAME_AADHAAR);
                                if (rawDataTable == null) {
                                    dynamicUITableNew.setValue(SPINNER_ITEM_FIELD_NAME_AADHAAR);
                                }
                            }
                            // TODO: Kyc Id ( Default Aadhaar )
                            else if (dynamicUITableNew.getFieldName().equalsIgnoreCase(TAG_NAME_KYC_ID)) {
                                RawDataTable rawDataTable = dynamicUIDao.getRawdataByFieldName(dynamicUITableNew.getScreenName(),
                                        dynamicUITableNew.getLoanType(), dynamicUITableNew.getClientID(), SPINNER_ITEM_FIELD_NAME_AADHAAR);
                                if (rawDataTable == null) {
                                    DataTypeInfo datatypeInfo = new DataTypeInfo(SPINNER_ITEM_FIELD_NAME_AADHAAR, dynamicUITableNew);
                                    // TODO: Only here we need to check with field name
                                    dynamicUITableNew.setLength(datatypeInfo.getLength());
                                    dynamicUITableNew.setEditable(true);
                                    dynamicUITableNew.setHint(datatypeInfo.getHint());
                                    dynamicUITableNew.setDataType(datatypeInfo.getInputType());
                                    dynamicUITableNew.setDataEntryType(datatypeInfo.getDataEntryType());
                                    dynamicUITableNew.setFieldTag(datatypeInfo.getHintTag());
                                    dynamicUITableNew.setValue("");
                                    dynamicUITableNew.setErrorMessage("");// TODO: clearing the value once changing the spinner item
                                    dynamicUITableNew.setVisibility(true);
                                }
                            }
                            // TODO: Re-Enter Kyc Id ( Default Aadhaar )
                            else if (dynamicUITableNew.getFieldName().equalsIgnoreCase(TAG_NAME_RE_ENTER_KYC_ID)) {
                                RawDataTable rawDataTable = dynamicUIDao.getRawdataByFieldName(dynamicUITableNew.getScreenName()
                                        , dynamicUITableNew.getLoanType(), dynamicUITableNew.getClientID(), SPINNER_ITEM_FIELD_NAME_AADHAAR);
                                if (rawDataTable == null) {
                                    DataTypeInfo datatypeInfo = new DataTypeInfo(SPINNER_ITEM_FIELD_NAME_AADHAAR, dynamicUITableNew);
                                    // TODO: Only here we need to check with field name
                                    dynamicUITableNew.setLength(datatypeInfo.getLength());
                                    dynamicUITableNew.setEditable(true);
                                    dynamicUITableNew.setHint("Re " + datatypeInfo.getHint());
                                    dynamicUITableNew.setDataType(datatypeInfo.getInputType());
                                    dynamicUITableNew.setDataEntryType(datatypeInfo.getDataEntryType());
                                    dynamicUITableNew.setFieldTag("RE ENTER " + datatypeInfo.getHintTag()); // TODO: RE ENTER TAG NAME
                                    dynamicUITableNew.setValue(""); // TODO: clearing the value once changing the spinner item
                                    dynamicUITableNew.setVisibility(true);

                                }
                            } else if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_EKYC_BUTTON)) {
                                RawDataTable rawDataTable = dynamicUIDao.getRawdataByFieldName(dynamicUITableNew.getScreenName(),
                                        dynamicUITableNew.getLoanType(), dynamicUITableNew.getClientID(), SPINNER_ITEM_FIELD_NAME_AADHAAR);
                                if (rawDataTable == null) {
                                    dynamicUITableNew.setVisibility(true);
                                }
                            }
                        } else {
                            dynamicUITableNew.setValue("");
                        }
                    }

                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                    }
                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_TYPE_OF_PROFESSION)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                    }
                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_CUSTOMER_TYPE)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                    }
                    if(dynamicUITableList.get(0).getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)){
                        if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_APPLICANT_KYC)) {
                            dynamicUITableNew.setVisibility(true);
                            dynamicUITableNew.setEditable(true);
                        }
                    }
                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_KYC_TYPE)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                        dynamicUITableNew.setFieldType(FIELD_TYPE_LIST_BOX);
                        // TODO: condition to remove added kyc type tvName spinner list(Get the new spinner list)
                        String[] newSpinnerItems = {};
                        List<String> spinnerList = new ArrayList<>();
                        spinnerList.addAll(Arrays.asList(dynamicUITableNew.getParamlist()));
                        try {
                            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                for (RawDataTable rawDataTable : rawDataTableList) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                            String value = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                for (String spinnerItem : spinnerList) {
                                                    if (spinnerItem.equalsIgnoreCase(value)) {
                                                        spinnerList.remove(spinnerItem);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);

                            dynamicUITableNew.setParamlist(newSpinnerItems);

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                deleteAndInsertNewRecordInTable(dynamicUITableListNew, dynamicUITable.getScreenName());

                // TODO: After adding 2 kycs hide kyc related fields in JLG
                // Add same to EL Guarantor screen

                DynamicUITable dynamicUITable_kycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_KYC_TYPE, dynamicUITable.getScreenID());
                if (dynamicUITable_kycType != null && dynamicUITable_kycType.getLoanType().equalsIgnoreCase(LOAN_NAME_JLG)) {
                    if (dynamicUITable_kycType.getParamlist().length == 0) {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_KYC_TYPE, dynamicUITable_kycType.getScreenName(),
                                dynamicUITable_kycType.getValue(), true, false);

                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_KYC_ID, dynamicUITable.getScreenName(),
                                "", true, false);
                        dynamicUIDao.updateDynamicTableValueByFieldName(FIELD_NAME_RE_ENTER_KYC_ID, dynamicUITable.getScreenName(),
                                "", true, false);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_EKYC_BUTTON, dynamicUITable_kycType.getScreenName(),
                                "", true, false);
                    }
                }
            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: REFERENCE CHECK SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> referenceCheckScreenValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first

            // TODO: REFERENCE CHECK RAW DATA LIST
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableList) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                fieldName = hashMap.get(TAG_NAME_FULL_NAME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_REFERENCE_TYPE)) {
                                value = hashMap.get(TAG_NAME_REFERENCE_TYPE).toString();
                            }

                            if (!TextUtils.isEmpty(fieldName)) {
//                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                DynamicUITable dynamicUITableForNewRow = dynamicUIDao.getRowByTAGandScreen(rawDataTable.getTag_name(),
                                        dynamicUITableList.get(0).getScreenID());
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    List<DynamicUITable> dynamicUITableListLatest = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());

                                    dynamicUITableListLatest.add(dynamicUITableListLatest.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableListLatest, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(),
                                            value, true, true);
                                }
                            }
                        }
                    }
                }
            }

            List<DynamicUITable> dynamicUITableListNew = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            if (dynamicUITableListNew != null && dynamicUITableListNew.size() > 0) {
                for (DynamicUITable dynamicUITableNew : dynamicUITableListNew) {
                    dynamicUITableNew.setVisibility(false);

                    if (!dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_SAVE_BUTTON)) {
                        dynamicUITableNew.setVisibility(true);
                    }

                    if (dynamicUITableNew.getFieldType().equalsIgnoreCase(FIELD_TYPE_NEW_ROW)) {
                        dynamicUITableNew.setVisibility(true);
                    } else {
                        dynamicUITableNew.setValue("");
                    }
                }
                deleteAndInsertNewRecordInTable(dynamicUITableListNew, dynamicUITable.getScreenName());

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: REFERENCE VERIFICATION SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> referenceVerificationScreenValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first

            // TODO: REFERENCE VERIFICATION RAW DATA LIST
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableList) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                fieldName = hashMap.get(TAG_NAME_FULL_NAME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO)) {
                                value = hashMap.get(TAG_NAME_CONTACT_NO).toString();
                            }

                            if (!TextUtils.isEmpty(fieldName)) {
//                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                DynamicUITable dynamicUITableForNewRow = dynamicUIDao.getRowByTAGandScreen(rawDataTable.getTag_name(),
                                        dynamicUITableList.get(0).getScreenID());
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    List<DynamicUITable> dynamicUITableListLatest = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());

                                    dynamicUITableListLatest.add(dynamicUITableListLatest.size() - 1, newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableListLatest, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(), fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(), value, true, true);
                                }
                            }
                        }
                    }
                }
            }

            // TODO: References PD detail screen

            List<String> nameList = dynamicUIDao.getRawDataForReferences(SCREEN_NAME_REFERENCE_CHECK, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            List<String> nameListForReferencesInPD = dynamicUIDao.getRawDataForReferences(SCREEN_NAME_REFERENCES, dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            List<String> rawDataSpinnerList = new ArrayList<>();
            if (nameList != null && nameList.size() > 0) {
                for (String name : nameList) {
                    if (nameListForReferencesInPD != null && nameListForReferencesInPD.size() > 0) {
                        boolean nameExist = false;
                        for (String nameFromPD : nameListForReferencesInPD) {
                            if (nameFromPD.equalsIgnoreCase(name)) {
                                nameExist = true;//put true
                                break;
                            }
                        }
                        if (!nameExist) {
                            rawDataSpinnerList.add(name);
                        }
                    } else {
                        rawDataSpinnerList.add(name);
                    }
                }

                String[] newSpinnerStringArray = rawDataSpinnerList.toArray(new String[0]);
                dynamicUIDao.changeSpinnerList(TAG_NAME_FULL_NAME,
                        DataTypeConverter.someObjectListToString(newSpinnerStringArray), dynamicUITable.getScreenID());
            }

            List<DynamicUITable> dynamicUITableListNew = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            if (dynamicUITableListNew != null && dynamicUITableListNew.size() > 0) {
                for (DynamicUITable dynamicUITableNew : dynamicUITableListNew) {
                    dynamicUITableNew.setVisibility(false);

                    if (dynamicUITableNew.getFieldType().equalsIgnoreCase(FIELD_TYPE_NEW_ROW)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                    } else {
                        dynamicUITableNew.setValue("");
                    }

                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_FULL_NAME)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                        dynamicUITableNew.setFieldType(FIELD_TYPE_LIST_BOX);

                        // TODO: condition to remove added kyc type tvName spinner list
                        String[] newSpinnerItems = {};
                        List<String> spinnerList = new ArrayList<>();
                        spinnerList.addAll(Arrays.asList(dynamicUITableNew.getParamlist()));
                        try {
                            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                for (RawDataTable rawDataTable : rawDataTableList) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                            String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                for (String spinnerItem : spinnerList) {
                                                    if (spinnerItem.equalsIgnoreCase(value)) {
                                                        spinnerList.remove(spinnerItem);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);

                            dynamicUITableNew.setParamlist(newSpinnerItems);

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                deleteAndInsertNewRecordInTable(dynamicUITableListNew, dynamicUITable.getScreenName());

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: GENERAL INCOME SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> generalIncomeScreenValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first

            // TODO: GENERAL INCOME RAW DATA LIST
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableList) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_NAME_IN_GENERAL_INCOME)) {
                                fieldName = hashMap.get(TAG_NAME_NAME_IN_GENERAL_INCOME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_VERIFIED_IN_GENERAL_INCOME)) {
                                String verified = hashMap.get(TAG_NAME_VERIFIED_IN_GENERAL_INCOME).toString();
                                if (!TextUtils.isEmpty(verified)) {
                                    if (verified.equalsIgnoreCase("Yes")) {
                                        if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME)) {
                                            value = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_GENERAL_INCOME).toString();
                                        }
                                    } else {
                                        if (hashMap.containsKey(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME)) {
                                            value = hashMap.get(TAG_NAME_MONTHLY_INCOME_IN_GENERAL_INCOME).toString();
                                        }
                                    }
                                }
                            }


                            if (!TextUtils.isEmpty(fieldName)) {
//                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                DynamicUITable dynamicUITableForNewRow = dynamicUIDao.getRowByTAGandScreen(rawDataTable.getTag_name(),
                                        dynamicUITableList.get(0).getScreenID());
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    List<DynamicUITable> dynamicUITableListLatest = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());

                                    dynamicUITableListLatest.add(dynamicUITableListLatest.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableListLatest, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name(), dynamicUITable.getScreenName(),
                                            value, true, true);
                                }
                            }
                        }
                    }
                }
            }

            List<DynamicUITable> dynamicUITableListNew = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            if (dynamicUITableListNew != null && dynamicUITableListNew.size() > 0) {
                for (DynamicUITable dynamicUITableNew : dynamicUITableListNew) {

                    if (!dynamicUITableNew.getFieldType().equalsIgnoreCase(FIELD_TYPE_NEW_ROW)) {
                        dynamicUITableNew.setValue("");
                    }

                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_IN_GENERAL_INCOME)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                        dynamicUITableNew.setFieldType(FIELD_TYPE_LIST_BOX);

                        // TODO: condition to remove added kyc type tvName spinner list
                        String[] newSpinnerItems = {};
                        List<String> spinnerList = new ArrayList<>();
                        spinnerList.addAll(Arrays.asList(dynamicUITableNew.getParamlist()));
                        try {
                            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                for (RawDataTable rawDataTable : rawDataTableList) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NAME_IN_GENERAL_INCOME)) {
                                            String value = hashMap.get(TAG_NAME_NAME_IN_GENERAL_INCOME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                for (String spinnerItem : spinnerList) {
                                                    if (spinnerItem.equalsIgnoreCase(value)) {
                                                        spinnerList.remove(spinnerItem);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);

                            dynamicUITableNew.setParamlist(newSpinnerItems);

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                deleteAndInsertNewRecordInTable(dynamicUITableListNew, dynamicUITable.getScreenName());

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: OTHER INCOME SOURCE SCREEN VALIDATION
    public LiveData<List<DynamicUITable>> otherIncomeSourceScreenValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI Table list first

            // TODO: GENERAL INCOME RAW DATA LIST
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable : rawDataTableList) {
                    String fieldName = "", value = "";
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_NAME_IN_OTHER_INCOME)) {
                                fieldName = hashMap.get(TAG_NAME_NAME_IN_OTHER_INCOME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_VERIFIED_IN_OTHER_INCOME)) {
                                String verified = hashMap.get(TAG_NAME_VERIFIED_IN_OTHER_INCOME).toString();
                                if (!TextUtils.isEmpty(verified)) {
                                    if (verified.equalsIgnoreCase("Yes")) {
                                        if (hashMap.containsKey(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME)) {
                                            value = hashMap.get(TAG_NAME_VERIFIED_INCOME_IN_OTHER_INCOME).toString();
                                        }
                                    } else {
                                        if (hashMap.containsKey(TAG_NAME_MONTHLY_INCOME_IN_OTHER_INCOME)) {
                                            value = hashMap.get(TAG_NAME_MONTHLY_INCOME_IN_OTHER_INCOME).toString();
                                        }
                                    }
                                }
                            }

                            if (!TextUtils.isEmpty(fieldName)) {
//                                DynamicUITable dynamicUITableForNewRow = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                DynamicUITable dynamicUITableForNewRow = dynamicUIDao.getRowByTAGandScreen(rawDataTable.getTag_name(),
                                        dynamicUITableList.get(0).getScreenID());
                                if (dynamicUITableForNewRow == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, fieldName, value);

                                    List<DynamicUITable> dynamicUITableListLatest = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());

                                    dynamicUITableListLatest.add(dynamicUITableListLatest.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableListLatest, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(), fieldName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name(),
                                            dynamicUITable.getScreenName(), value, true, true);
                                }
                            }
                        }
                    }
                }
            }

            List<DynamicUITable> dynamicUITableListNew = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            if (dynamicUITableListNew != null && dynamicUITableListNew.size() > 0) {
                for (DynamicUITable dynamicUITableNew : dynamicUITableListNew) {

                    if (!dynamicUITableNew.getFieldType().equalsIgnoreCase(FIELD_TYPE_NEW_ROW)) {
                        dynamicUITableNew.setValue("");
                    }

                    if (dynamicUITableNew.getFieldTag().equalsIgnoreCase(TAG_NAME_NAME_IN_OTHER_INCOME)) {
                        dynamicUITableNew.setVisibility(true);
                        dynamicUITableNew.setEditable(true);
                        dynamicUITableNew.setFieldType(FIELD_TYPE_LIST_BOX);

                        // TODO: condition to remove added kyc type tvName spinner list
                        String[] newSpinnerItems = {};
                        List<String> spinnerList = new ArrayList<>();
                        spinnerList.addAll(Arrays.asList(dynamicUITableNew.getParamlist()));
                        try {
                            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                                for (RawDataTable rawDataTable : rawDataTableList) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NAME_IN_OTHER_INCOME)) {
                                            String value = hashMap.get(TAG_NAME_NAME_IN_OTHER_INCOME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                for (String spinnerItem : spinnerList) {
                                                    if (spinnerItem.equalsIgnoreCase(value)) {
                                                        spinnerList.remove(spinnerItem);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);

                            dynamicUITableNew.setParamlist(newSpinnerItems);

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                deleteAndInsertNewRecordInTable(dynamicUITableListNew, dynamicUITable.getScreenName());

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }


    // TODO: Getting Dynamic UI Table List from Local DB
    public LiveData<List<DynamicUITable>> getDynamicUITableLocalDB(String screenId) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(screenId);
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: LOAN PROPOSAL APPLICANT SCREEN MSME
    public LiveData<List<DynamicUITable>> applicantLoanProposalScreenChangesByDropdown(DynamicUITable dynamicUITable,
                                                                                       List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            if (dynamicUITable.getLoanType().equalsIgnoreCase(AppConstant.LOAN_NAME_MSME)) {

                // TODO: LOAN PRODUCTS VALIDATION
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {

                    // TODO: product drop down changes by loan type
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().equalsIgnoreCase(RADIO_BUTTON_ITEM_TOP_UP)) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PREVIOUS_LOAN_ACCOUNT_NUM, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PREVIOUS_LOAN_TYPE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SAME_COLLATERAL, dynamicUITable.getScreenName(), "",
                                    true, false);

                            // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                                    true, true);

                            List<String> productParamList = dynamicUIDao.getDistinctProducts();
                            if (productParamList != null && productParamList.size() > 0) {
                                changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                            }
                        } else if (dynamicUITable.getValue().equalsIgnoreCase(RADIO_BUTTON_ITEM_NEW)) {

                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PREVIOUS_LOAN_ACCOUNT_NUM, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PREVIOUS_LOAN_TYPE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SAME_COLLATERAL, dynamicUITable.getScreenName(), "",
                                    true, false);

                            // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                                    true, true);

                            List<String> productParamList = dynamicUIDao.getLoanProductsExceptTopUp(RADIO_BUTTON_ITEM_TOP_UP);
                            if (productParamList != null && productParamList.size() > 0) {
                                changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                            }
                        }
                    }
                }
                // TODO: LOAN SCHEME VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT)) {

                    // TODO: set value empty for loan_scheme,request_loan_amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                            true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: for security type field
                    if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_UNSECURED)) {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                true, false);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                true, false);
                    } else {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                true, true);
                    }
                    // TODO: scheme drop down changes by product
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                        if (schemeParamList != null && schemeParamList.size() > 0) {
                            changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                        }
                    }
                }
                // TODO: TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME)) {

                    // TODO: set value empty for request_loan_amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by scheme
                    DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
                    if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure <= maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                            }
                            /*if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
                // TODO: Previous loanType Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PREVIOUS_LOAN_TYPE)) {

                    if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_UNSECURED)) {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SAME_COLLATERAL, dynamicUITable.getScreenName(), "",
                                true, false);
                    } else {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SAME_COLLATERAL, dynamicUITable.getScreenName(), "",
                                true, true);
                    }

                }

            }
            else if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {

                    String product_value = "";

                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        product_value = dynamicUITable.getValue();
                    } else {
                        product_value = dynamicUITable.getDefaultValue();
                    }
                    // TODO: TENURE VALIDATION
                    // TODO: tenure drop down changes by scheme
                    if (!TextUtils.isEmpty(product_value)) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly("Samruddhi IB Loan");
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure <= maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                            }
                            /*if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
            }

            else if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_AHL)) {

                List<String> productParamList = dynamicUIDao.getDistinctProducts();
                if (productParamList != null && productParamList.size() > 0) {
                    changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                }
                List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                if (schemeParamList != null && schemeParamList.size() > 0) {
                    changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                }
                // TODO: AHL LOAN PRODUCTS VALIDATION
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {
                    // TODO: product drop down changes by loan type
                    if (TextUtils.isEmpty(dynamicUITable.getValue())) {
                        // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                true, true);
                        //dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "", true, true);

                        /*List<String> productParamList = dynamicUIDao.getDistinctProducts();
                        if (productParamList != null && productParamList.size() > 0) {
                            changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                        }*/
                    }
                }
                // TODO: SCHEME TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT)) {
                    // TODO: set value empty for request_loan_amount,purpose
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                            true, true);
                    //dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PURPOSE, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by product
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {

                        // TODO: scheme drop down changes by product
                        /*if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                            List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                            if (schemeParamList != null && schemeParamList.size() > 0) {
                                changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                            }
                        }*/
//                        List<String> tenureParamList = new ArrayList<>();
//                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly(dynamicUITable.getValue());
//                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
//                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {
//
//                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
//                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
//                            double step_double = Double.parseDouble(productMasterTable.getStep());
//
//                            int minTenure = (int) minTenure_double;
//                            int maxTenure = (int) maxTenuredouble;
//                            int step = (int) step_double;
//                            tenureParamList.add(0, String.valueOf(minTenure));
//                            int tenure = minTenure;
//                            for (int i = 1; tenure <= maxTenure; i++) {
//                                tenure = tenure + step;
//                                tenureParamList.add(i, String.valueOf(tenure));
//                            }
//                            if (tenureParamList.size() > 0) {
//                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
//                            }
//                        }

                        // TODO: COMMENTED THIS CONDITION BECAUSE OF REMOVEING PURPOSE SPINNER ITEMS
                        // TODO: purpose validation
                        /*List<String> purposeParamList = new ArrayList<>();
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_PURCHASE)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_FINANCE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                        } else if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP_NO_SPACE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        } else {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        }
                        if (purposeParamList.size() > 0) {
                            changeSpinnerList(purposeParamList, dynamicUITable.getScreenID(), TAG_NAME_PURPOSE);
                        }*/
                    }
                }
                // TODO: TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME)) {

                    // TODO: set value empty for request_loan_amount
                    //dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "", true, true);

                    // TODO: tenure drop down changes by scheme
                    DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
                    if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure < maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                            }
                            /*if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
                // TODO: loan purpose Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PURPOSE)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_OTHERS)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }

                }
                // TODO: property identified Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PROPERTY_IDENTIFIED)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().equalsIgnoreCase(PROPERTY_IDENTIFIED_RADIO_BUTTON_YES)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }
                }
            }
            else if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_EL)) {
                List<String> productParamList = dynamicUIDao.getDistinctProducts();
                if (productParamList != null && productParamList.size() > 0) {
                    changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                }
                List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                if (schemeParamList != null && schemeParamList.size() > 0) {
                    changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                }
                dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, "620", productParamList.get(0));
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, CLIENT_ID, loanType);
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {

                        if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                            String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                            if (!TextUtils.isEmpty(loanAmount)) {
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_REQUESTED_LOAN_AMOUNT, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, loanAmount);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_LOAN_TENURE)) {
                            String tenure = hashMap.get(TAG_NAME_LOAN_TENURE).toString();
                            if (!TextUtils.isEmpty(tenure)) {
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_TENURE_IN_MONTHS, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, tenure);
                            }
                        }

                        //dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, toScreenNo, "Used Car");

                    }
                }
                // TODO: PHL LOAN PRODUCTS VALIDATION
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {

                    // TODO: product drop down changes by loan type
                    if (TextUtils.isEmpty(dynamicUITable.getValue())) {
                        // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                true, true);
                        /*RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, dynamicUITable.getClientID(), loanType);
                        if (leadRawData != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                    String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), loanAmount,
                                            true, true);
                                }
                            }
                        }*/

                       /* List<String> productParamList = dynamicUIDao.getDistinctProducts();
                        if (productParamList != null && productParamList.size() > 0) {
                            changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                        }*/
                    }
                }
                // TODO: SCHEME TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT)) {
                    // TODO: set value empty for request_loan_amount,purpose
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                            true, true);
                    /*dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);*/
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PURPOSE, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by product
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {

                        // TODO: scheme drop down changes by product
                        /*if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                            List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                            if (schemeParamList != null && schemeParamList.size() > 0) {
                                changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                            }
                        }*/
//                        List<String> tenureParamList = new ArrayList<>();
//                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly(dynamicUITable.getValue());
//                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
//                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {
//
//                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
//                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
//                            double step_double = Double.parseDouble(productMasterTable.getStep());
//
//                            int minTenure = (int) minTenure_double;
//                            int maxTenure = (int) maxTenuredouble;
//                            int step = (int) step_double;
//                            tenureParamList.add(0, String.valueOf(minTenure));
//                            int tenure = minTenure;
//                            for (int i = 1; tenure <= maxTenure; i++) {
//                                tenure = tenure + step;
//                                tenureParamList.add(i, String.valueOf(tenure));
//                            }
//                            if (tenureParamList.size() > 0) {
//                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
//                            }
//                        }

                        // TODO: COMMENTED THIS CONDITION BECAUSE OF REMOVEING PURPOSE SPINNER ITEMS
                        // TODO: purpose validation
                        /*List<String> purposeParamList = new ArrayList<>();
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_PURCHASE)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_FINANCE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                        } else if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP_NO_SPACE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        } else {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        }
                        if (purposeParamList.size() > 0) {
                            changeSpinnerList(purposeParamList, dynamicUITable.getScreenID(), TAG_NAME_PURPOSE);
                        }*/
                    }
                }
                // TODO: TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME)) {

                    // TODO: set value empty for request_loan_amount
                    /*dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);*/

                    // TODO: tenure drop down changes by scheme
                    DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
                    if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure < maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                                Log.d("TS", String.valueOf(tenureParamList.size()));
                            }
                            /*if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
                // TODO: loan purpose Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PURPOSE)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_OTHERS)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }

                        if (dynamicUITable.getValue().contains(TAG_NAME_PERSONAL)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        }
                    }

                }
                // TODO: property identified Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PROPERTY_IDENTIFIED)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().equalsIgnoreCase(PROPERTY_IDENTIFIED_RADIO_BUTTON_YES)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }

                }

            }
            //
            else if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_PHL)) {

                // TODO: PHL LOAN PRODUCTS VALIDATION
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {

                    List<String> productParamList = dynamicUIDao.getDistinctProducts();
                    if (productParamList != null && productParamList.size() > 0) {
                        changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                    }
                    List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                    if (schemeParamList != null && schemeParamList.size() > 0) {
                        changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                    }
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, "620", productParamList.get(0));
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, CLIENT_ID, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                if (!TextUtils.isEmpty(loanAmount)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_REQUESTED_LOAN_AMOUNT, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, loanAmount);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LOAN_TENURE)) {
                                String tenure = hashMap.get(TAG_NAME_LOAN_TENURE).toString();
                                if (!TextUtils.isEmpty(tenure)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_TENURE_IN_MONTHS, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, tenure);
                                }
                            }

                            //dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, toScreenNo, "Used Car");

                        }
                    }
                    // TODO: product drop down changes by loan type
                    if (TextUtils.isEmpty(dynamicUITable.getValue())) {
                        // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                true, true);
                       /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                                true, true);*/

                    }
                }
                // TODO: SCHEME TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT)) {
                    // TODO: set value empty for request_loan_amount,purpose
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                            true, true);
                   /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);*/
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PURPOSE, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by product
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {

                        // TODO: scheme drop down changes by product
                       /* if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                            List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                            if (schemeParamList != null && schemeParamList.size() > 0) {
                                changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                            }
                        }*/
//                        List<String> tenureParamList = new ArrayList<>();
//                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly(dynamicUITable.getValue());
//                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
//                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {
//
//                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
//                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
//                            double step_double = Double.parseDouble(productMasterTable.getStep());
//
//                            int minTenure = (int) minTenure_double;
//                            int maxTenure = (int) maxTenuredouble;
//                            int step = (int) step_double;
//                            tenureParamList.add(0, String.valueOf(minTenure));
//                            int tenure = minTenure;
//                            for (int i = 1; tenure <= maxTenure; i++) {
//                                tenure = tenure + step;
//                                tenureParamList.add(i, String.valueOf(tenure));
//                            }
//                            if (tenureParamList.size() > 0) {
//                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
//                            }
//                        }

                        // TODO: COMMENTED THIS CONDITION BECAUSE OF REMOVEING PURPOSE SPINNER ITEMS
                        // TODO: purpose validation
                        /*List<String> purposeParamList = new ArrayList<>();
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_PURCHASE)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_FINANCE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                        } else if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP_NO_SPACE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        } else {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        }
                        if (purposeParamList.size() > 0) {
                            changeSpinnerList(purposeParamList, dynamicUITable.getScreenID(), TAG_NAME_PURPOSE);
                        }*/
                    }
                }
                // TODO: TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME)) {

                   /* // TODO: set value empty for request_loan_amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);*/

                    // TODO: tenure drop down changes by scheme
                    DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
                    if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure < maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                                Log.d("TS", String.valueOf(tenureParamList.size()));
                            }
                            /*if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
                // TODO: loan purpose Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PURPOSE)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_OTHERS)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }
                    if (dynamicUITable.getValue().contains(TAG_NAME_PERSONAL)) {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                true, false);
                    }else {
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                true, true);
                    }

                }
                // TODO: property identified Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PROPERTY_IDENTIFIED)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().equalsIgnoreCase(PROPERTY_IDENTIFIED_RADIO_BUTTON_YES)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }
                }
            }
            else if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_TWL)) {

                List<String> productParamList = dynamicUIDao.getDistinctProducts();
                if (productParamList != null && productParamList.size() > 0) {
                    changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                }
                List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                if (schemeParamList != null && schemeParamList.size() > 0) {
                    changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                }
                dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, "620", productParamList.get(0));
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, CLIENT_ID, loanType);
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {

                        if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                            String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                            if (!TextUtils.isEmpty(loanAmount)) {
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_REQUESTED_LOAN_AMOUNT, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, loanAmount);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_LOAN_TENURE)) {
                            String tenure = hashMap.get(TAG_NAME_LOAN_TENURE).toString();
                            if (!TextUtils.isEmpty(tenure)) {
                                dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_TENURE_IN_MONTHS, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, tenure);
                            }
                        }

                        //dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_PRODUCT, toScreenNo, "Used Car");

                    }
                }
                // TODO: PHL LOAN PRODUCTS VALIDATION
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {

                    // TODO: product drop down changes by loan type
                    if (TextUtils.isEmpty(dynamicUITable.getValue())) {
                        // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                true, true);
                       /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                                true, true);*/

                       /* List<String> productParamList = dynamicUIDao.getDistinctProducts();
                        if (productParamList != null && productParamList.size() > 0) {
                            changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                        }*/
                    }
                }
                // TODO: SCHEME TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT)) {
                    // TODO: set value empty for request_loan_amount,purpose
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                            true, true);
                    /*dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);*/
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PURPOSE, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by product
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {

                        // TODO: scheme drop down changes by product
                       /* if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                            List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                            if (schemeParamList != null && schemeParamList.size() > 0) {
                                changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                            }
                        }*/
//                        List<String> tenureParamList = new ArrayList<>();
//                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly(dynamicUITable.getValue());
//                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
//                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {
//
//                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
//                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
//                            double step_double = Double.parseDouble(productMasterTable.getStep());
//
//                            int minTenure = (int) minTenure_double;
//                            int maxTenure = (int) maxTenuredouble;
//                            int step = (int) step_double;
//                            tenureParamList.add(0, String.valueOf(minTenure));
//                            int tenure = minTenure;
//                            for (int i = 1; tenure <= maxTenure; i++) {
//                                tenure = tenure + step;
//                                tenureParamList.add(i, String.valueOf(tenure));
//                            }
//                            if (tenureParamList.size() > 0) {
//                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
//                            }
//                        }

                        // TODO: COMMENTED THIS CONDITION BECAUSE OF REMOVEING PURPOSE SPINNER ITEMS
                        // TODO: purpose validation
                       /* List<String> purposeParamList = new ArrayList<>();
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_PURCHASE)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_FINANCE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                        } else if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP_NO_SPACE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        } else {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        }
                        if (purposeParamList.size() > 0) {
                            changeSpinnerList(purposeParamList, dynamicUITable.getScreenID(), TAG_NAME_PURPOSE);
                        }*/
                    }
                }
                // TODO: TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME)) {

                    // TODO: set value empty for request_loan_amount
                   /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);*/

                    // TODO: tenure drop down changes by scheme
                    DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
                    if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure < maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                                Log.d("TS", String.valueOf(tenureParamList.size()));
                            }
                           /* if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
                // TODO: loan purpose Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PURPOSE)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {

                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_OTHERS)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                        if (dynamicUITable.getValue().contains(TAG_NAME_PERSONAL)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        }
                    }

                }
                // TODO: property identified Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PROPERTY_IDENTIFIED)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().equalsIgnoreCase(PROPERTY_IDENTIFIED_RADIO_BUTTON_YES)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }

                }

            }
            else {
                // TODO: PHL LOAN PRODUCTS VALIDATION
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_TYPE)) {

                    // TODO: product drop down changes by loan type
                    if (TextUtils.isEmpty(dynamicUITable.getValue())) {
                        // TODO: set value empty for loan_product,loan_scheme,request_loan_amount
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_PRODUCT, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                                true, true);
                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                                true, true);

                        List<String> productParamList = dynamicUIDao.getDistinctProducts();
                        if (productParamList != null && productParamList.size() > 0) {
                            changeSpinnerList(productParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);
                        }
                    }
                }
                // TODO: SCHEME TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT)) {
                    // TODO: set value empty for request_loan_amount,purpose
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME, dynamicUITable.getScreenName(), "",
                            true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PURPOSE, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by product
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {

                        // TODO: scheme drop down changes by product
                        if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                            List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                            if (schemeParamList != null && schemeParamList.size() > 0) {
                                changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
                            }
                        }
//                        List<String> tenureParamList = new ArrayList<>();
//                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly(dynamicUITable.getValue());
//                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
//                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {
//
//                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
//                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
//                            double step_double = Double.parseDouble(productMasterTable.getStep());
//
//                            int minTenure = (int) minTenure_double;
//                            int maxTenure = (int) maxTenuredouble;
//                            int step = (int) step_double;
//                            tenureParamList.add(0, String.valueOf(minTenure));
//                            int tenure = minTenure;
//                            for (int i = 1; tenure <= maxTenure; i++) {
//                                tenure = tenure + step;
//                                tenureParamList.add(i, String.valueOf(tenure));
//                            }
//                            if (tenureParamList.size() > 0) {
//                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
//                            }
//                        }

                        // TODO: COMMENTED THIS CONDITION BECAUSE OF REMOVEING PURPOSE SPINNER ITEMS
                        // TODO: purpose validation
                        /*List<String> purposeParamList = new ArrayList<>();
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_PURCHASE)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_FINANCE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                        } else if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP)
                                || dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_TOP_UP_NO_SPACE)) {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        } else {
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_CONSTRUCTION_OF_HOUSE);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_RENOVATION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_HOUSE_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_BUSINESS_EXPANSION);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_PURCHASE_OF_PROPERTY);
                            purposeParamList.add(SPINNER_ITEM_FIELD_NAME_OTHERS);
                        }
                        if (purposeParamList.size() > 0) {
                            changeSpinnerList(purposeParamList, dynamicUITable.getScreenID(), TAG_NAME_PURPOSE);
                        }*/
                    }
                }
                // TODO: TENURE VALIDATION
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME)) {

                    // TODO: set value empty for request_loan_amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITable.getScreenName(), "",
                            true, true);

                    // TODO: tenure drop down changes by scheme
                    DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
                    if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                        List<String> tenureParamList = new ArrayList<>();
                        ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());
                        if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                                && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                            double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                            double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                            double step_double = Double.parseDouble(productMasterTable.getStep());

                            int minTenure = (int) minTenure_double;
                            int maxTenure = (int) maxTenuredouble;
                            int step = (int) step_double;
                            tenureParamList.add(0, String.valueOf(minTenure));
                            int tenure = minTenure;
                            for (int i = 1; tenure < maxTenure; i++) {
                                tenure = tenure + step;
                                tenureParamList.add(i, String.valueOf(tenure));
                                Log.d("TS", String.valueOf(tenureParamList.size()));
                            }
                            /*if (tenureParamList.size() > 0) {
                                changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_TENURE_IN_MONTHS);
                            }*/
                        }
                    }
                }
                // TODO: loan purpose Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PURPOSE)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().contains(SPINNER_ITEM_FIELD_NAME_OTHERS)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OTHERS, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }

                }
                // TODO: property identified Validation
                else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_PROPERTY_IDENTIFIED)) {
                    if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                        if (dynamicUITable.getValue().equalsIgnoreCase(PROPERTY_IDENTIFIED_RADIO_BUTTON_YES)) {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, true);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, true);
                        } else {
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_1, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_ADDRESS_LINE_2, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_PINCODE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_CITY, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_DISTRICT, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERT_STATE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPERTY_USAGE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_TYPE, dynamicUITable.getScreenName(), "",
                                    true, false);
                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SECURITY_VALUE, dynamicUITable.getScreenName(), "",
                                    true, false);
                        }
                    }

                }

            }

            //


            // TODO: Final dynamic ui list
            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }


    // TODO: LOAN APPROVAL SCREEN MSME
    public LiveData<List<DynamicUITable>> loanApprovalScreenChangesByDropdown(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            // TODO: LOAN PRODUCTS VALIDATION
            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME)) {

                // TODO: Clear the following fields
                changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME);
                changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME);
                changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME);

                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true);
                dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true);

                // TODO: scheme drop down changes by product
                if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                    List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                    if (schemeParamList != null && schemeParamList.size() > 0) {
                        changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME);

                    }

                }

            }


            // TODO: LOAN SCHEME VALIDATION
            else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_SCHEME_IN_LOAN_APPROVAL_MSME)) {

                // TODO: Tenure & ROI drop down changes by product
                DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT_IN_LOAN_APPROVAL_MSME, dynamicUITableList);

                if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {
                    // TODO: Clear the following fields
                    changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME);
                    changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME);

                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                            "", true);
                    dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                            "", true);


                    ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());

                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())
                            && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount())) {
                        int MIN_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMinLoanAmount());
                        int MAX_LOAN_AMOUNT = (int) Double.parseDouble(productMasterTable.getMaxLoanAmount());
                        // TODO: Updating Minimum and Maximum Loan Amount
                        dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                String.valueOf(MIN_LOAN_AMOUNT), true);
                        dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                String.valueOf(MAX_LOAN_AMOUNT), true);

                        if (MIN_LOAN_AMOUNT < MSME_MINIMUM_LOAN_AMOUNT) {
                            dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                    String.valueOf(MSME_MINIMUM_LOAN_AMOUNT), true);
                        }

                        // TODO: LOAN SUGGESTION
                        List<RawDataTable> rawDataTableListLoanSuggestion = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_LOAN_SUGGESTION_MSME,
                                dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                        if (rawDataTableListLoanSuggestion != null && rawDataTableListLoanSuggestion.size() > 0) {
                            for (RawDataTable rawDataTable : rawDataTableListLoanSuggestion) {
                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                if (hashMap != null && hashMap.size() > 0) {
                                    if (hashMap.containsKey(TAG_NAME_ELIGIBLE_LOAN_AMOUNT_IN_LOAN_SUGGESTION_MSME)) {
                                        String elligibleLoanAmount = hashMap.get(TAG_NAME_ELIGIBLE_LOAN_AMOUNT_IN_LOAN_SUGGESTION_MSME).toString();
                                        if (!TextUtils.isEmpty(elligibleLoanAmount)) {
                                            double ELLIGIBLE_LOAN_AMOUNT = Double.valueOf(elligibleLoanAmount);
                                            if (ELLIGIBLE_LOAN_AMOUNT > MIN_LOAN_AMOUNT && ELLIGIBLE_LOAN_AMOUNT < MAX_LOAN_AMOUNT) {
                                                dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                                        String.valueOf(ELLIGIBLE_LOAN_AMOUNT), true);
                                            } else {
                                                dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                                        String.valueOf(MIN_LOAN_AMOUNT), true);

                                                dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                                                        String.valueOf(MAX_LOAN_AMOUNT), true);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }

                    // TODO: Tenure paramlist changes
                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                            && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                        List<String> tenureParamList = new ArrayList<>();
                        double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                        double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                        double step_double = Double.parseDouble(productMasterTable.getStep());

                        int minTenure = (int) minTenure_double;
                        int maxTenure = (int) maxTenuredouble;
                        int step = (int) step_double;
                        tenureParamList.add(0, String.valueOf(minTenure));
                        int tenure = minTenure;
                        for (int i = 1; tenure <= maxTenure; i++) {
                            tenure = tenure + step;
                            tenureParamList.add(i, String.valueOf(tenure));
                        }
                        if (tenureParamList.size() > 0) {
                            changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME);
                        }
                    }

                    // TODO: ROI paramlist changes
                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinROI())
                            && !TextUtils.isEmpty(productMasterTable.getMaxROI())) {

                        List<String> ROIParamlist = new ArrayList<>();
                        double minROI_double = Double.parseDouble(productMasterTable.getMinROI());
                        double maxROI_double = Double.parseDouble(productMasterTable.getMaxROI());

                        int minROI = (int) minROI_double;
                        int maxROI = (int) maxROI_double;
                        int step = 1;
                        ROIParamlist.add(0, String.valueOf(minROI));
                        int ROI = minROI;
                        for (int i = 1; ROI < maxROI; i++) {
                            ROI = ROI + step;
                            ROIParamlist.add(i, String.valueOf(ROI));
                        }
                        if (ROIParamlist.size() > 0) {
                            changeSpinnerList(ROIParamlist, dynamicUITable.getScreenID(), TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME);
                        }
                    }

                }

            }


            // TODO: LOAN INSTALLMENT AMOUNT VALIDATION
            else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME)
                    || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME)
                    || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME)) {

                // TODO: Clear the following fields
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME, dynamicUITable.getScreenName(),
                        "", true, true);

                double ROI = 0;
                double NO_OF_INSTALLMENT = 0;
                double LOAN_AMOUNT = 0;

                String loan_amount = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_AMOUNT_IN_LOAN_APPROVAL_MSME);
                String tenure = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_TERM_IN_LOAN_APPROVAL_MSME);
                String rateOfInterest = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_RATE_OF_INTEREST_IN_LOAN_APPROVAL_MSME);


                if (!TextUtils.isEmpty(loan_amount) && !TextUtils.isEmpty(tenure) && !TextUtils.isEmpty(rateOfInterest)) {
                    LOAN_AMOUNT = Double.valueOf(loan_amount);
                    NO_OF_INSTALLMENT = Double.valueOf(tenure);
                    ROI = Double.valueOf(rateOfInterest);

                    // TODO: Calculate EMI ( installment amount )
                    double INSTALLMENT_AMOUNT = AppConstant.calculateEMI((int) LOAN_AMOUNT, (int) NO_OF_INSTALLMENT, ROI);
                    INSTALLMENT_AMOUNT = Math.round(INSTALLMENT_AMOUNT);
                    // TODO: Updating installment amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME,
                            dynamicUITable.getScreenName(), String.valueOf(INSTALLMENT_AMOUNT), false, true);
                } else {
                    // TODO: Updating installment amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INSTALLMENT_AMOUNT_IN_LOAN_APPROVAL_MSME,
                            dynamicUITable.getScreenName(), "", false, true);

                }

            }


            // TODO: Final dynamic ui list
            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: CASH FLOW SCREEN MSME
    public LiveData<List<DynamicUITable>> cashFlowScreenChangesByDropdown(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            // TODO: LOAN SCHEME VALIDATION
            if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME)) {

                // TODO: Clear the following fields
                changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);

                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DEBT_SERVICE_RATIO_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                        "", true, true);
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                        "", true, true);

                // TODO: scheme drop down changes by product
                if (!TextUtils.isEmpty(dynamicUITable.getValue())) {
                    List<String> schemeParamList = dynamicUIDao.getSchemeByProduct();
                    if (schemeParamList != null && schemeParamList.size() > 0) {
                        changeSpinnerList(schemeParamList, dynamicUITable.getScreenID(), TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME);

                    }

                }

                // TODO: Final dynamic ui list
                List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
                data.postValue(dynamicUITableListFinal);

            }
            // TODO: TENURE VALIDATION
            else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SCHEME_IN_CASH_FLOW_SUMMARY_MSME)) {
                // TODO: tenure drop down changes by scheme
                DynamicUITable productObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT_TYPE_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITableList);

                if (!TextUtils.isEmpty(dynamicUITable.getValue()) && !TextUtils.isEmpty(productObj.getValue())) {

                    // TODO: Clearing the following fieldsd
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DEBT_SERVICE_RATIO_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA_IN_CASH_FLOW_SUMMARY_MSME, dynamicUITable.getScreenName(),
                            "", true, true);
                    changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                    changeSpinnerList(new ArrayList<>(), dynamicUITable.getScreenID(), TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);

                    ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(dynamicUITable.getValue(), productObj.getValue());

                    // TODO: Tenure paramlist changes
                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                            && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                        List<String> tenureParamList = new ArrayList<>();
                        double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                        double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                        double step_double = Double.parseDouble(productMasterTable.getStep());

                        int minTenure = (int) minTenure_double;
                        int maxTenure = (int) maxTenuredouble;
                        int step = (int) step_double;
                        tenureParamList.add(0, String.valueOf(minTenure));
                        int tenure = minTenure;
                        for (int i = 1; tenure <= maxTenure; i++) {
                            tenure = tenure + step;
                            tenureParamList.add(i, String.valueOf(tenure));
                        }
                        if (tenureParamList.size() > 0) {
                            changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                        }
                    }

                    // TODO: ROI paramlist changes
                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinROI())
                            && !TextUtils.isEmpty(productMasterTable.getMaxROI())) {

                        List<String> ROIParamlist = new ArrayList<>();
                        double minROI_double = Double.parseDouble(productMasterTable.getMinROI());
                        double maxROI_double = Double.parseDouble(productMasterTable.getMaxROI());

                        int minROI = (int) minROI_double;
                        int maxROI = (int) maxROI_double;
                        int step = 1;
                        ROIParamlist.add(0, String.valueOf(minROI));
                        int ROI = minROI;
                        for (int i = 1; ROI < maxROI; i++) {
                            ROI = ROI + step;
                            ROIParamlist.add(i, String.valueOf(ROI));
                        }
                        if (ROIParamlist.size() > 0) {
                            changeSpinnerList(ROIParamlist, dynamicUITable.getScreenID(), TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);
                        }
                    }

                    // TODO: INCOME ASSESSMENT SUMMARY
                    List<RawDataTable> rawDataTableListIncomeAssessmentSummary = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_INCOME_ASSESSMENT_SUMMARY_MSME,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    // TODO: Income Assessment Summary
                    if (rawDataTableListIncomeAssessmentSummary != null && rawDataTableListIncomeAssessmentSummary.size() > 0) {
                        for (RawDataTable rawDataTable : rawDataTableListIncomeAssessmentSummary) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY)) {
                                    String pickMethodSales = hashMap.get(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY).toString();
                                    if (!TextUtils.isEmpty(pickMethodSales)) {

                                        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

                                        try {
                                            final DBRRequestDTO rawDataRequestDTO = new DBRRequestDTO();
                                            rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                                            DBRRequestDTO.SpNameWithParameterClass spNameWithParameter = new DBRRequestDTO.SpNameWithParameterClass();
                                            spNameWithParameter.setSpName(SP_NAME_TO_GET_DBR);
                                            DBRRequestDTO.SpParametersClass spParametersClass = new DBRRequestDTO.SpParametersClass();
                                            spParametersClass.setDBRCalMtd("0"); // TODO: DBRCallMtd
                                            spParametersClass.setBCID(AppConstant.BCID); // TODO: BC id ( Hard coded )
                                            spParametersClass.setLoanType(productObj.getValue()); // TODO: Loan Type
                                            spParametersClass.setPickmtd(pickMethodSales); // TODO: Pick Method
                                            spNameWithParameter.setSpParameters(spParametersClass);
                                            ArrayList<DBRRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<DBRRequestDTO.SpNameWithParameterClass>();
                                            SpNameWithParameterList.add(spNameWithParameter);
                                            rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                                            String baseString = new Gson().toJson(rawDataRequestDTO, DBRRequestDTO.class).replace("\\u003d", "=");
                                            String k1 = SHA256Encrypt.sha256(baseString);
                                            DynamicUIWebService.createService(DynamicUIWebservice.class).getDBRFromServer(rawDataRequestDTO,
                                                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                                                    enqueue(new Callback<ResponseBody>() {
                                                        @Override
                                                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                                            executor.execute(() -> {
                                                                if (response.isSuccessful()) {
                                                                    try {
                                                                        String strResponse = response.body().string();
                                                                        JSONObject json = new JSONObject(strResponse);
                                                                        String key = json.keys().next();

                                                                        String tableJson = json.get(key).toString();
                                                                        DBRResponseDTO dbrResponseDTO = new Gson().fromJson(tableJson, DBRResponseDTO.class);
                                                                        if (dbrResponseDTO != null && dbrResponseDTO.getTable().size() > 0) {
                                                                            Log.d(TAG, "raw data tvName server =======> " + new Gson().toJson(dbrResponseDTO));

                                                                            if (dbrResponseDTO.getTable().size() > 0) {
                                                                                DBRResponseDTO.Table table = dbrResponseDTO.getTable().get(0);
                                                                                if (table != null && !TextUtils.isEmpty(table.getRuleInPercent())) {
                                                                                    // TODO: Updating DBR
                                                                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DEBT_SERVICE_RATIO_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                            dynamicUITable.getScreenName(), String.valueOf(table.getRuleInPercent()), false, true);

                                                                                    double DBR = Double.valueOf(table.getRuleInPercent());
                                                                                    String totalMonthlySurplus = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                            TAG_NAME_TOTAL_MONTHLY_SURPLUS_IN_CASH_FLOW_SUMMARY_MSME);
                                                                                    if (!TextUtils.isEmpty(totalMonthlySurplus)) {

                                                                                        double dTotalMonthlySurplus = Double.valueOf(totalMonthlySurplus);
                                                                                        if (DBR > 0 && dTotalMonthlySurplus > 0) {
                                                                                            // TODO: Updating Suggested EMI based on CFA
                                                                                            double SUGGESTED_EMI_BASED_ON_CFA = (DBR / 100) * dTotalMonthlySurplus;
                                                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                    dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI_BASED_ON_CFA), false, true);

                                                                                            String declaredRepaymentCapacity = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                                    TAG_NAME_DECLARED_REPAYMENT_CAPACITY_IN_CASH_FLOW_SUMMARY_MSME);
                                                                                            if (!TextUtils.isEmpty(declaredRepaymentCapacity)) {

                                                                                                double DECLARED_REPAYMENT_CAPACITY = Double.valueOf(declaredRepaymentCapacity);
                                                                                                double SUGGESTED_EMI = 0;
                                                                                                if (SUGGESTED_EMI_BASED_ON_CFA < DECLARED_REPAYMENT_CAPACITY) {
                                                                                                    SUGGESTED_EMI = SUGGESTED_EMI_BASED_ON_CFA;
                                                                                                } else {
                                                                                                    SUGGESTED_EMI = DECLARED_REPAYMENT_CAPACITY;
                                                                                                }

                                                                                                // TODO: Updating suggested EMI
                                                                                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SUGGESTED_EMI_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                        dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI), false, true);

                                                                                                double RPI = 0;
                                                                                                double NO_OF_INSTALLMENT = 0;

                                                                                                String suggested_emi = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                                        TAG_NAME_SUGGESTED_EMI_IN_CASH_FLOW_SUMMARY_MSME);
                                                                                                String tenure = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                                        TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                                                                                                String ratePerInterest = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                                                                                                        TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);

                                                                                                if (!TextUtils.isEmpty(suggested_emi) && !TextUtils.isEmpty(tenure) && !TextUtils.isEmpty(ratePerInterest)) {
                                                                                                    SUGGESTED_EMI = Double.valueOf(suggested_emi);
                                                                                                    NO_OF_INSTALLMENT = Double.valueOf(tenure);
                                                                                                    RPI = Double.valueOf(ratePerInterest);
                                                                                                    RPI = RPI / 12 / 100;


                                                                                                    // TODO: Calculate Recommended Loan Amount
                                                                                                    double RECOMMENDED_LOAN_AMOUNT = SUGGESTED_EMI * ((Math.pow(RPI + 1, NO_OF_INSTALLMENT) - 1) / (RPI * Math.pow(RPI + 1, NO_OF_INSTALLMENT)));
                                                                                                    RECOMMENDED_LOAN_AMOUNT = Math.round(RECOMMENDED_LOAN_AMOUNT);
                                                                                                    // TODO: Updating Recommended Loan Amount
                                                                                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                            dynamicUITable.getScreenName(), String.valueOf(RECOMMENDED_LOAN_AMOUNT), false, true);
                                                                                                } else {
                                                                                                    // TODO: Updating Recommended Loan Amount
                                                                                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME,
                                                                                                            dynamicUITable.getScreenName(), "", false, true);

                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                            }
                                                                            // TODO: Final Result
                                                                            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
                                                                            data.postValue(dynamicUITableListFinal);
                                                                        }
                                                                    } catch (Exception ex) {
                                                                        ex.printStackTrace();
                                                                    }
                                                                }

                                                            });
                                                        }

                                                        @Override
                                                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                                                            t.printStackTrace();
                                                        }
                                                    });
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                        }

                                    }
                                }
                            }
                        }
                    }

                }
            }

            // TODO: RECOMMENDED LOAN CALCULATION
            else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME)
                    || dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME)) {

                double SUGGESTED_EMI = 0;
                double RPI = 0;
                double NO_OF_INSTALLMENT = 0;

                String suggested_emi = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_SUGGESTED_EMI_IN_CASH_FLOW_SUMMARY_MSME);
                String tenure = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_TENURE_IN_CASH_FLOW_SUMMARY_MSME);
                String ratePerInterest = dynamicUIDao.getValueByTAGAndScreenName(dynamicUITable.getScreenName(),
                        TAG_NAME_ROI_IN_CASH_FLOW_SUMMARY_MSME);

                if (!TextUtils.isEmpty(suggested_emi) && !TextUtils.isEmpty(tenure) && !TextUtils.isEmpty(ratePerInterest)) {
                    SUGGESTED_EMI = Double.valueOf(suggested_emi);
                    NO_OF_INSTALLMENT = Double.valueOf(tenure);
                    RPI = Double.valueOf(ratePerInterest);
                    RPI = RPI / 12 / 100;

                    // TODO: Calculate Recommended Loan Amount
                    double RECOMMENDED_LOAN_AMOUNT = SUGGESTED_EMI * ((Math.pow(RPI + 1, NO_OF_INSTALLMENT) - 1) / (RPI * Math.pow(RPI + 1, NO_OF_INSTALLMENT)));
                    RECOMMENDED_LOAN_AMOUNT = Math.round(RECOMMENDED_LOAN_AMOUNT);
                    // TODO: Updating Recommended Loan Amount
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RECOMMENDED_LOAN_AMOUNT_IN_CASH_FLOW_SUMMARY_MSME,
                            dynamicUITable.getScreenName(), String.valueOf(RECOMMENDED_LOAN_AMOUNT), false, true);
                }

                // TODO: Final dynamic ui list
                List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
                data.postValue(dynamicUITableListFinal);

            }


        });
        return data;
    }


    // TODO: INCOME ASSESSMENT SUMMARY CALCULATION
    public LiveData<List<DynamicUITable>> IncomeAssessmentSummaryCalculation(DynamicUITable
                                                                                     dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update UI list first

            // TODO: Update GST
            RawDataTable rawDataTableForGST = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_GST_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForGST != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForGST);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN)) {
                        String value = hashMap.get(TAG_NAME_MONTHLY_SALES_IN_GST_SCREEN).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_GST_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Update Bank Statement
            RawDataTable rawDataTableForBankStatement = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_BANKING_HISTORY_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForBankStatement != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBankStatement);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_SALES_IN_BANKING_HISTORY)) {
                        String value = hashMap.get(TAG_NAME_MONTHLY_SALES_IN_BANKING_HISTORY).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_BANK_STATEMENT_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Update Sales Bills
            RawDataTable rawDataTableForSalesBills = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_SALES_BILLS_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForSalesBills != null) {
                double SALES_BILLS = 0;
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForSalesBills);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_KUCCHA_SALES_IN_SALES_BILLS)) {
                        String value = hashMap.get(TAG_NAME_KUCCHA_SALES_IN_SALES_BILLS).toString();
                        if (!TextUtils.isEmpty(value)) {
                            SALES_BILLS = SALES_BILLS + Double.parseDouble(value);
                        }
                    }
                    if (hashMap.containsKey(TAG_NAME_PUCCA_SALES_IN_SALES_BILLS)) {
                        String value = hashMap.get(TAG_NAME_PUCCA_SALES_IN_SALES_BILLS).toString();
                        if (!TextUtils.isEmpty(value)) {
                            SALES_BILLS = SALES_BILLS + Double.parseDouble(value);
                        }
                    }
                    dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_SALES_BILLS_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            String.valueOf(SALES_BILLS), false);
                }
            }

            // TODO: Update ITR
            RawDataTable rawDataTableForITR = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_ITR_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForITR != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForITR);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_SALES_IN_ITR)) {
                        String value = hashMap.get(TAG_NAME_MONTHLY_SALES_IN_ITR).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_ITR_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Update Declared Sales
            RawDataTable rawDataTableForDeclaredSales = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_DECLARED_SALES_WEEKLY,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForDeclaredSales != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForDeclaredSales);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY)) {
                        String value = hashMap.get(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_DECLARED_SALES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
//                    if (hashMap.containsKey(TAG_NAME_AVERAGE_WEEKLY_SALES)) {
//                        String value = hashMap.get(TAG_NAME_AVERAGE_WEEKLY_SALES).toString();
//                        if (!TextUtils.isEmpty(value)) {
//                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_DECLARED_SALES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
//                                    value, false);
//                        }
//                    }
                }
            }

            // TODO: Update Product Estimate
            RawDataTable rawDataTableForProductEstimate = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_PRODUCT_ESTIMATE_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForProductEstimate != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForProductEstimate);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_PRODUCTS_IN_PRODUCT_ESTIMATE)) {
                        String value = hashMap.get(TAG_NAME_PRODUCTS_IN_PRODUCT_ESTIMATE).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_PRODUCT_ESTIMATE_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Update Purchase Bills
            RawDataTable rawDataTableForPurchaseBills = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_PURCHASE_BILLS_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForPurchaseBills != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForPurchaseBills);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_PURCHASES_IN_PURCHASE_BILLS)) {
                        String value = hashMap.get(TAG_NAME_MONTHLY_PURCHASES_IN_PURCHASE_BILLS).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_PURCHASE_BILLS_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                    // TODO: update by purchase bills-sales
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_SALES_IN_PURCHASE_BILLS)) {
                        String value = hashMap.get(TAG_NAME_MONTHLY_SALES_IN_PURCHASE_BILLS).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_BY_PURCHASE_BILLS_SALES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Update Direct Business Expenses
            RawDataTable rawDataTableForDirectBusinessExpenses = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_DIRECT_BUSINESS_EXPENSE_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForDirectBusinessExpenses != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForDirectBusinessExpenses);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_PURCHASES_IN_DIRECT_BUSINESS_EXPENSE)) {
                        String value = hashMap.get(TAG_NAME_MONTHLY_PURCHASES_IN_DIRECT_BUSINESS_EXPENSE).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_DIRECT_BUSINESS_EXPENSES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Update Operating Expenses
            RawDataTable rawDataTableForOperatingExpenses = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_OPERATING_EXPENSE_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            if (rawDataTableForOperatingExpenses != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForOperatingExpenses);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_EXPENSES)) {
                        String value = hashMap.get(TAG_NAME_EXPENSES).toString();
                        if (!TextUtils.isEmpty(value)) {
                            dynamicUIDao.updateDynamicTableValueAndNonEditable(FIELD_TAG_OPERATING_EXPENSES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                                    value, false);
                        }
                    }
                }
            }

            // TODO: Pick Up Method Sales  ( new value )
            String pickMethodSales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY);

            if (TextUtils.isEmpty(pickMethodSales)) {
                // TODO: If it is empty get value tvName raw data ( old value )
                RawDataTable rawDataTableForIncomeAssessmentSummary = dynamicUIDao.getRawDataByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                if (rawDataTableForIncomeAssessmentSummary != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForIncomeAssessmentSummary);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY)) {
                            pickMethodSales = hashMap.get(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY).toString();
                        }
                    }
                }
            }

            if (!TextUtils.isEmpty(pickMethodSales)) {
                String tagName = pickMethodSales.toUpperCase();
                String salesPresentAnalysis = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), tagName);
                if (!TextUtils.isEmpty(salesPresentAnalysis)) {
                    // TODO: update Sales Present Analysis
                    dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_SALES_PRESENT_ANALYSIS_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            salesPresentAnalysis, false, true);
                    // TODO: update Sales
                    dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_SALES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            salesPresentAnalysis, false, true);
                    // TODO: update Pick Up Method Sales
                    dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            pickMethodSales, true, true);
                }
            } else {
                // TODO: update Pick Up Method Sales
                dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_PICK_METHOD_SALES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                        "", true, true);
            }


            // TODO: Pick Up Method Purchase  ( new value )
            String pickMethodPurchase = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), FIELD_TAG_PICK_METHOD_PURCHASE_IN_INCOME_ASSESSMENT_SUMMARY);

            if (TextUtils.isEmpty(pickMethodPurchase)) {
                // TODO: If it is empty get value tvName raw data ( old value )
                RawDataTable rawDataTableForIncomeAssessmentSummary = dynamicUIDao.getRawDataByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                if (rawDataTableForIncomeAssessmentSummary != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForIncomeAssessmentSummary);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(FIELD_TAG_PICK_METHOD_PURCHASE_IN_INCOME_ASSESSMENT_SUMMARY)) {
                            pickMethodPurchase = hashMap.get(FIELD_TAG_PICK_METHOD_PURCHASE_IN_INCOME_ASSESSMENT_SUMMARY).toString();
                        }
                    }
                }
            }

            if (!TextUtils.isEmpty(pickMethodPurchase)) {
                String tagName = pickMethodPurchase.toUpperCase();
                String purchasePresentAnalysis = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), tagName);
                if (!TextUtils.isEmpty(purchasePresentAnalysis)) {
                    // TODO: update Purchase Present Analysis
                    dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_PURCHASE_PRESENT_ANALYSIS_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            purchasePresentAnalysis, false, true);
                    // TODO: update Purchase
                    dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_PURCHASES_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            purchasePresentAnalysis, false, true);
                    // TODO: update Pick Up Method Purchase
                    dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_PICK_METHOD_PURCHASE_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                            pickMethodPurchase, true, true);
                }
            } else {
                // TODO: update Pick Up Method Purchase
                dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_PICK_METHOD_PURCHASE_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                        "", true, true);
            }

            // TODO: GROSS BUSINESS INCOME CALCULATION
            double GROSS_BUSINESS_INCOME = 0, SALES = 0, PURCHASE = 0;
            String sales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), FIELD_TAG_SALES_IN_INCOME_ASSESSMENT_SUMMARY);
            String purchase = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), FIELD_TAG_PURCHASES_IN_INCOME_ASSESSMENT_SUMMARY);
            if (!TextUtils.isEmpty(sales)) {
                SALES = Double.parseDouble(sales);
            }
            if (!TextUtils.isEmpty(purchase)) {
                PURCHASE = Double.parseDouble(purchase);
            }
            GROSS_BUSINESS_INCOME = SALES - PURCHASE;
            // TODO: update Gross Business Income
            dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_GROSS_BUSINESS_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                    String.valueOf(GROSS_BUSINESS_INCOME), false, true);


            // TODO: NET BUSINESS INCOME CALCULATION
            double NET_BUSINESS_INCOME = 0, OPERATING_EXPENSES = 0;
            String operatingExpenses = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), FIELD_TAG_OPERATING_EXPENSES_IN_INCOME_ASSESSMENT_SUMMARY);
            if (!TextUtils.isEmpty(operatingExpenses)) {
                OPERATING_EXPENSES = Double.parseDouble(operatingExpenses);
            }
            NET_BUSINESS_INCOME = GROSS_BUSINESS_INCOME - OPERATING_EXPENSES;
            // TODO: update Net Business Income
            dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_NET_BUSINESS_INCOME_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                    String.valueOf(NET_BUSINESS_INCOME), false, true);


            // TODO: GROSS MARGIN CALCULATION
            double GROSS_MARGIN = 0, TOTAL_EXPENSES = 0, DIRECT_BUSINESS_EXPENSE = 0;
            String directBusinessExpense = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), FIELD_TAG_DIRECT_BUSINESS_EXPENSES_IN_INCOME_ASSESSMENT_SUMMARY);
            if (!TextUtils.isEmpty(directBusinessExpense)) {
                DIRECT_BUSINESS_EXPENSE = Double.parseDouble(directBusinessExpense);
            }
            TOTAL_EXPENSES = DIRECT_BUSINESS_EXPENSE + OPERATING_EXPENSES;
            if (SALES != 0) {
                // GROSS_MARGIN = (SALES - TOTAL_EXPENSES) / SALES; // TODO: Gross Margin formula =(Sales-Expenses)/Total Sales
                GROSS_MARGIN = (GROSS_BUSINESS_INCOME / SALES) * 100; // TODO: Gross Margin new formula =(GROSS_BUSINESS_INCOME/Total Sales)*100
                // TODO: update Gross Margin
                dynamicUIDao.updateDynamicTableValueAndVisibility(FIELD_TAG_GROSS_MARGIN_IN_INCOME_ASSESSMENT_SUMMARY, dynamicUITable.getScreenName(),
                        String.valueOf(GROSS_MARGIN), false, true);
            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: PRODUCT ESTIMATE DETAIL CALCULATION
    public LiveData<List<DynamicUITable>> ProductEstimateDetailCalculation(DynamicUITable
                                                                                   dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<RawDataTable> rawDataTableListProductRawMaterial = dynamicUIDao.getRawDataByScreenNameAndCorrelationId(SCREEN_NAME_PRODUCT_RAW_MATERIAL_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getCoRelationID());

            double MATERIAL = 0;
            String materialName = "";
            String rawMaterialCost = "";

            if (rawDataTableListProductRawMaterial != null && rawDataTableListProductRawMaterial.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListProductRawMaterial) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_MATERIAL_NAME_IN_PRODUCT_RAW_MATERIAL)) {
                                materialName = hashMap.get(TAG_NAME_MATERIAL_NAME_IN_PRODUCT_RAW_MATERIAL).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_RAW_MATERIAL_COST_IN_PRODUCT_RAW_MATERIAL)) {
                                rawMaterialCost = hashMap.get(TAG_NAME_RAW_MATERIAL_COST_IN_PRODUCT_RAW_MATERIAL).toString();
                            }
                            if (!TextUtils.isEmpty(rawMaterialCost)) {
                                MATERIAL = MATERIAL + Integer.parseInt(rawMaterialCost);

                            }
                            if (!TextUtils.isEmpty(materialName) && !TextUtils.isEmpty(rawMaterialCost)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, materialName, rawMaterialCost);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            materialName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            rawMaterialCost, true, true);
                                }

                            }
                        }
                    }
                }

                MATERIAL = Math.round(MATERIAL);

                // TODO: updating cost of raw material
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COST_OF_RAW_MATERIAL_IN_PRODUCT_ESTIMATE_DETAIL, dynamicUITable.getScreenName(),
                        String.valueOf(MATERIAL), false, true);

                // TODO: updating material
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MATERIAL_IN_PRODUCT_ESTIMATE_DETAIL, dynamicUITable.getScreenName(),
                        String.valueOf(MATERIAL), false, true);

                String directCost = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_DIRECT_COSTS_IN_PRODUCT_ESTIMATE_DETAIL);
                String costOfRawMaterial = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_COST_OF_RAW_MATERIAL_IN_PRODUCT_ESTIMATE_DETAIL);
                if (!TextUtils.isEmpty(directCost) && !TextUtils.isEmpty(costOfRawMaterial)) {
                    double DIRECT_COST = Double.valueOf(directCost);
                    double COST_OF_RAW_MATERIAL = Double.valueOf(costOfRawMaterial);
                    double COST_OF_PRODUCTION = DIRECT_COST + COST_OF_RAW_MATERIAL;

                    // TODO: updating cost of production
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COST_OF_PRODUCTION_IN_PRODUCT_ESTIMATE_DETAIL, dynamicUITable.getScreenName(),
                            String.valueOf(COST_OF_PRODUCTION), false, true);
                }

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: SERVICE ESTIMATE DETAIL CALCULATION
    public LiveData<List<DynamicUITable>> ServiceEstimateDetailCalculation(DynamicUITable
                                                                                   dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<RawDataTable> rawDataTableListProductRawMaterial = dynamicUIDao.getRawDataByScreenNameAndCorrelationId(SCREEN_NAME_SERVICE_RAW_MATERIAL_MSME,
                    dynamicUITable.getClientID(), dynamicUITable.getCoRelationID());

            double MATERIAL = 0;
            String materialName = "";
            String rawMaterialCost = "";

            if (rawDataTableListProductRawMaterial != null && rawDataTableListProductRawMaterial.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListProductRawMaterial) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_MATERIAL_NAME_IN_SERVICE_RAW_MATERIAL)) {
                                materialName = hashMap.get(TAG_NAME_MATERIAL_NAME_IN_SERVICE_RAW_MATERIAL).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_COST_OF_RAW_MATERIAL_IN_SERVICE_RAW_MATERIAL)) {
                                rawMaterialCost = hashMap.get(TAG_NAME_COST_OF_RAW_MATERIAL_IN_SERVICE_RAW_MATERIAL).toString();
                            }
                            if (!TextUtils.isEmpty(rawMaterialCost)) {
                                MATERIAL = MATERIAL + Integer.parseInt(rawMaterialCost);

                            }
                            if (!TextUtils.isEmpty(materialName) && !TextUtils.isEmpty(rawMaterialCost)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, materialName, rawMaterialCost);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            materialName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            rawMaterialCost, true, true);
                                }

                            }
                        }
                    }
                }

                MATERIAL = Math.round(MATERIAL);

                // TODO: updating materials
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MATERIAL_IN_SERVICE_ESTIMATE_DETAIL, dynamicUITable.getScreenName(),
                        String.valueOf(MATERIAL), false, true);


            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    // TODO: PRODUCT ESTIMATE CALCULATION
    public LiveData<List<DynamicUITable>> ProductEstimateCalculation(DynamicUITable
                                                                             dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<RawDataTable> rawDataTableListProductEstimateDetail = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_PRODUCT_ESTIMATE_DETAIL_MSME,
                    dynamicUITable.getClientID());

            double PRODUCTS = 0;
            String productName = "";
            String productCost = "";

            if (rawDataTableListProductEstimateDetail != null && rawDataTableListProductEstimateDetail.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListProductEstimateDetail) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PRODUCT_NAME_IN_PRODUCT_ESTIMATE_DETAIL)) {
                                productName = hashMap.get(TAG_NAME_PRODUCT_NAME_IN_PRODUCT_ESTIMATE_DETAIL).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_COST_OF_PRODUCTION_IN_PRODUCT_ESTIMATE_DETAIL)) {
                                productCost = hashMap.get(TAG_NAME_COST_OF_PRODUCTION_IN_PRODUCT_ESTIMATE_DETAIL).toString();
                            }
                            if (!TextUtils.isEmpty(productCost)) {
                                PRODUCTS = PRODUCTS + Double.parseDouble(productCost);

                            }
                            if (!TextUtils.isEmpty(productName) && !TextUtils.isEmpty(productCost)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, productName, productCost);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            productName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            productCost, true, true);
                                }

                            }
                        }
                    }
                }

                PRODUCTS = Math.round(PRODUCTS);

                // TODO: updating products
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PRODUCTS_IN_PRODUCT_ESTIMATE, dynamicUITable.getScreenName(),
                        String.valueOf(PRODUCTS), false, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }


    // TODO: SERVICE ESTIMATE CALCULATION
    public LiveData<List<DynamicUITable>> ServiceEstimateCalculation(DynamicUITable
                                                                             dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            List<RawDataTable> rawDataTableListProductEstimateDetail = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_SERVICE_ESTIMATE_DETAIL_MSME,
                    dynamicUITable.getClientID());

            double PRODUCTS = 0;
            String serviceName = "";
            String productCost = "";

            if (rawDataTableListProductEstimateDetail != null && rawDataTableListProductEstimateDetail.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListProductEstimateDetail) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_SERVICE_NAME_IN_SERVICE_ESTIMATE_DETAIL)) {
                                serviceName = hashMap.get(TAG_NAME_SERVICE_NAME_IN_SERVICE_ESTIMATE_DETAIL).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_COST_OF_PRODUCTION_IN_SERVICE_ESTIMATE_DETAIL)) {
                                productCost = hashMap.get(TAG_NAME_COST_OF_PRODUCTION_IN_SERVICE_ESTIMATE_DETAIL).toString();
                            }
                            if (!TextUtils.isEmpty(productCost)) {
                                PRODUCTS = PRODUCTS + Double.parseDouble(productCost);

                            }
                            if (!TextUtils.isEmpty(serviceName) && !TextUtils.isEmpty(productCost)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable, serviceName, productCost);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            serviceName, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            productCost, true, true);
                                }

                            }
                        }
                    }
                }

                PRODUCTS = Math.round(PRODUCTS);

                // TODO: updating products
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PRODUCTS_IN_SERVICE_ESTIMATE, dynamicUITable.getScreenName(), String.valueOf(PRODUCTS), false, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> salesBillsCalculation(DynamicUITable
                                                                        dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double MONTHLY_SALES = 0;
            double KUCCHA_SALES = 0;
            double PUCCA_SALES = 0;
            String billType = "";
            String date = "";
            String value = "";
            String dateOrMonth = "";
            int NO_OF_KUCCHA_SALES = 0;
            int NO_OF_PUCCA_SALES = 0;
            List<String> monthList = new ArrayList<>();// TODO: unique for month sales
            List<String> kucchaMonthList = new ArrayList<>();// TODO: unique for kuccha month sales
            List<String> puccaMonthList = new ArrayList<>();// TODO: unique for pucca month sales

            List<RawDataTable> rawDataTableListSalesBillsDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_SALES_BILLS_DETAIL_MSME,
                    dynamicUITable.getClientID());

            dateOrMonth = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_DATE_OR_MONTH_IN_SALES_BILLS);

            if (TextUtils.isEmpty(dateOrMonth)) {

                RawDataTable rawDataTableForSalesBills = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(dynamicUITable.getScreenName(),
                        dynamicUITable.getClientID(), dynamicUITable.getModuleType());

                if (rawDataTableForSalesBills != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForSalesBills);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_DATE_OR_MONTH_IN_SALES_BILLS)) {
                            dateOrMonth = hashMap.get(TAG_NAME_DATE_OR_MONTH_IN_SALES_BILLS).toString();
                        }
                    }
                }
            }

            if (rawDataTableListSalesBillsDetails != null && rawDataTableListSalesBillsDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListSalesBillsDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BILL_TYPE_IN_SALES_BILLS)) {
                                billType = hashMap.get(TAG_NAME_BILL_TYPE_IN_SALES_BILLS).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_DATE_IN_SALES_BILLS)) {
                                date = hashMap.get(TAG_NAME_DATE_IN_SALES_BILLS).toString();
                                if (!TextUtils.isEmpty(dateOrMonth) && dateOrMonth.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MONTH)) {
                                    date = appHelper.getMonthByDate(AppConstant.DATE_FORMAT_YYYY_MM_DD, date);
                                }

                            }
                            if (hashMap.containsKey(TAG_NAME_VALUE_IN_SALES_BILLS)) {
                                value = hashMap.get(TAG_NAME_VALUE_IN_SALES_BILLS).toString();

                                if (!TextUtils.isEmpty(value) && Integer.parseInt(value) > 0) {
                                    if (!TextUtils.isEmpty(dateOrMonth) && dateOrMonth.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MONTH)) {
                                        // TODO: add month to list
                                        monthList.add(date);
                                        if (!TextUtils.isEmpty(billType) && billType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_KUCCHA)) {
                                            kucchaMonthList.add(date);
                                        } else if (!TextUtils.isEmpty(billType) && billType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PUCCA)) {
                                            puccaMonthList.add(date);
                                        }
                                    } else {
                                        String getdate = appHelper.getMonthByDate(AppConstant.DATE_FORMAT_YYYY_MM_DD, date);
                                        // TODO: add month to list
                                        monthList.add(getdate);
                                        if (!TextUtils.isEmpty(billType) && billType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_KUCCHA)) {
                                            kucchaMonthList.add(getdate);
                                        } else if (!TextUtils.isEmpty(billType) && billType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PUCCA)) {
                                            puccaMonthList.add(getdate);
                                        }

                                    }
                                }
                            }
                            if (!TextUtils.isEmpty(billType) && billType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_KUCCHA)) {
                                KUCCHA_SALES = KUCCHA_SALES + Integer.parseInt(value);
                                MONTHLY_SALES = MONTHLY_SALES + (Integer.parseInt(value) * 0.92);
                                NO_OF_KUCCHA_SALES++;
                            }
                            if (!TextUtils.isEmpty(billType) && billType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PUCCA)) {
                                PUCCA_SALES = PUCCA_SALES + Integer.parseInt(value);
                                MONTHLY_SALES = MONTHLY_SALES + Integer.parseInt(value);
                                NO_OF_PUCCA_SALES++;
                            }
                            if (!TextUtils.isEmpty(date) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            date, value);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            date, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }

                // TODO: calling getMonthsBasedonDate method
                List<String> uniqueMonthList = getMonthsBasedonDate(monthList);
                if (uniqueMonthList.size() > 0) {

//                MONTHLY_SALES = MONTHLY_SALES / rawDataTableListSalesBillsDetails.size();
                    // TODO: new validation monthly_sales /total months
                    MONTHLY_SALES = MONTHLY_SALES / uniqueMonthList.size();
                    MONTHLY_SALES = Math.round(MONTHLY_SALES);

                    // TODO: calling getMonthsBasedonDate method for kuccha sales
                    if (kucchaMonthList.size() > 0) {
                        List<String> uniqueKucchaMonthList = getMonthsBasedonDate(kucchaMonthList);
                        NO_OF_KUCCHA_SALES = uniqueKucchaMonthList.size();

                        KUCCHA_SALES = (KUCCHA_SALES * 0.92 / NO_OF_KUCCHA_SALES);
                        KUCCHA_SALES = Math.round(KUCCHA_SALES);
                    }
                    // TODO: calling getMonthsBasedonDate method for pucca sales
                    if (puccaMonthList.size() > 0) {
                        List<String> uniquePuccaMonthList = getMonthsBasedonDate(puccaMonthList);
                        NO_OF_PUCCA_SALES = uniquePuccaMonthList.size();

                        PUCCA_SALES = PUCCA_SALES / NO_OF_PUCCA_SALES;
                        PUCCA_SALES = Math.round(PUCCA_SALES);
                    }

//                KUCCHA_SALES = (KUCCHA_SALES / NO_OF_KUCCHA_SALES) * 0.92;
//                KUCCHA_SALES = Math.round(KUCCHA_SALES);

//                PUCCA_SALES = PUCCA_SALES / NO_OF_PUCCA_SALES;
//                PUCCA_SALES = Math.round(PUCCA_SALES);

                    // TODO: updating monthly sales
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_SALES_IN_SALES_BILLS, dynamicUITable.getScreenName(),
                            String.valueOf(MONTHLY_SALES), false, true);
                    // TODO: updating kuccha sales
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_KUCCHA_SALES_IN_SALES_BILLS, dynamicUITable.getScreenName(),
                            String.valueOf(KUCCHA_SALES), false, true);
                    // TODO: updating pucca sales
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PUCCA_SALES_IN_SALES_BILLS, dynamicUITable.getScreenName(),
                            String.valueOf(PUCCA_SALES), false, true);
                    // TODO: updating date/month sales
                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DATE_OR_MONTH_IN_SALES_BILLS, dynamicUITable.getScreenName(),
                            dateOrMonth, true, true);

                }

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> directBusinessExpenseCalculation(DynamicUITable
                                                                                   dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double MONTHLY_SALES = 0;
            String cardfield = "";
            String cardvalue = "";

            List<RawDataTable> rawDataTableListSalesBillsDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_DIRECT_BUSINESS_EXPENSE_DETAIL_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListSalesBillsDetails != null && rawDataTableListSalesBillsDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListSalesBillsDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_TOTAL_EXPENSES_IN_DIRECT_BUSINESS_EXPENSE)) {
                                String value = hashMap.get(TAG_NAME_TOTAL_EXPENSES_IN_DIRECT_BUSINESS_EXPENSE).toString();
                                MONTHLY_SALES = MONTHLY_SALES + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_EXPENSE_NAME_BUSINESS_EXPENSE)) {
                                String expense_name = hashMap.get(TAG_NAME_EXPENSE_NAME_BUSINESS_EXPENSE).toString();
                                if (!TextUtils.isEmpty(expense_name)) {
                                    if (expense_name.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_OTHERS_BUSINESS_EXPENSE)) {
                                        cardfield = hashMap.get(TAG_NAME_OTHERS_BUSINESS_EXPENSE).toString();
                                    } else {
                                        cardfield = expense_name;
                                    }
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_TOTAL_EXPENSES_IN_DIRECT_BUSINESS_EXPENSE)) {
                                cardvalue = hashMap.get(TAG_NAME_TOTAL_EXPENSES_IN_DIRECT_BUSINESS_EXPENSE).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }

                // MONTHLY_SALES=MONTHLY_SALES/rawDataTableListSalesBillsDetails.size();
                MONTHLY_SALES = Math.round(MONTHLY_SALES);

                // TODO: updating monthly sales
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_PURCHASES_IN_DIRECT_BUSINESS_EXPENSE, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_SALES), false, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> hypothecationMsmeCalculation(DynamicUITable
                                                                               dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstt

            double ALL_HYPOTHECATION = 0;
            String cardfield = "";
            String cardvalue = "";

            List<RawDataTable> rawDataTableListHypothecationDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_HYPOTHECATION_DETAIL_MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListHypothecationDetails != null && rawDataTableListHypothecationDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListHypothecationDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_ESTIMATED_MARKET_VALUE_IN_HYPOTHECATION_MSME)) {
                                String value = hashMap.get(TAG_NAME_ESTIMATED_MARKET_VALUE_IN_HYPOTHECATION_MSME).toString();
                                ALL_HYPOTHECATION = ALL_HYPOTHECATION + Integer.parseInt(value);
                            }

                            if (hashMap.containsKey(TAG_NAME_ASSET_NAME_IN_HYPOTHECATION_MSME)) {
                                cardfield = hashMap.get(TAG_NAME_ASSET_NAME_IN_HYPOTHECATION_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_ESTIMATED_MARKET_VALUE_IN_HYPOTHECATION_MSME)) {
                                cardvalue = hashMap.get(TAG_NAME_ESTIMATED_MARKET_VALUE_IN_HYPOTHECATION_MSME).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }

                ALL_HYPOTHECATION = Math.round(ALL_HYPOTHECATION);

                // TODO: updating total hypothecation
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HYPOTHECATION_IN_HYPOTHECATION_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(ALL_HYPOTHECATION), false, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> houseLiabilitiesILCalculation(DynamicUITable
                                                                                dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstt

            double MONTHLY_INSTALLMENT = 0;
            double TOTAL_HOUSEHOLD_LIABILITIES = 0;
            double LIABILITIES = 0;

            String cardfield = "";
            String cardvalue = "";

            List<RawDataTable> rawDataTableListLiabilitiesDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_LIABILITIES,
                    dynamicUITable.getClientID());

            if (rawDataTableListLiabilitiesDetails != null && rawDataTableListLiabilitiesDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListLiabilitiesDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_INSTALLMENT)) {
                                String value = hashMap.get(TAG_NAME_INSTALLMENT).toString();
                                MONTHLY_INSTALLMENT = MONTHLY_INSTALLMENT + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE)) {
                                String value = hashMap.get(TAG_NAME_BALANCE).toString();
                                TOTAL_HOUSEHOLD_LIABILITIES = TOTAL_HOUSEHOLD_LIABILITIES + Integer.parseInt(value);
                                LIABILITIES = LIABILITIES + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_LENDING_INSTITITUTION_NAME)) {
                                cardfield = hashMap.get(TAG_NAME_LENDING_INSTITITUTION_NAME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE)) {
                                cardvalue = hashMap.get(TAG_NAME_BALANCE).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }


                MONTHLY_INSTALLMENT = Math.round(MONTHLY_INSTALLMENT);
                TOTAL_HOUSEHOLD_LIABILITIES = Math.round(TOTAL_HOUSEHOLD_LIABILITIES);
                LIABILITIES = Math.round(LIABILITIES);


                // TODO: updating total monthly installment
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_INSTALLMENT), false, true);
                // TODO: updating total HOUSE HOLD liabilities
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_HOUSEHOLD_LIABILITIES, dynamicUITable.getScreenName(),
                        String.valueOf(TOTAL_HOUSEHOLD_LIABILITIES), false, true);
                // TODO: updating LIABILITIES
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LIABILITY, dynamicUITable.getScreenName(),
                        String.valueOf(LIABILITIES), false, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> houseLiabilitiesMsmeCalculation(DynamicUITable
                                                                                  dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstt

            double MONTHLY_INSTALLMENT = 0;
            double HOUSEHOLD_EQUITY = 0;
            double TOTAL_ASSETS = 0;
            double ALL_DEBTS = 0;
            String cardfield = "";
            String cardvalue = "";

            List<RawDataTable> rawDataTableListSalesBillsDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_HOUSE_DEBTS,
                    dynamicUITable.getClientID());

            if (rawDataTableListSalesBillsDetails != null && rawDataTableListSalesBillsDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListSalesBillsDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_MONTHLY_INSTALMENT_IN_HOUSELIABILITY_MSME)) {
                                String value = hashMap.get(TAG_NAME_MONTHLY_INSTALMENT_IN_HOUSELIABILITY_MSME).toString();
                                MONTHLY_INSTALLMENT = MONTHLY_INSTALLMENT + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME)) {
                                String value = hashMap.get(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME).toString();
                                ALL_DEBTS = ALL_DEBTS + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_CREDITOR_NAME_IN_HOUSELIABILITY_MSME)) {
                                cardfield = hashMap.get(TAG_NAME_CREDITOR_NAME_IN_HOUSELIABILITY_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME)) {
                                cardvalue = hashMap.get(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }

                // TODO: HOUSE ASSETS RAW DATA
                RawDataTable rawDataTableForBusinessLiability = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_HOUSE_ASSETS_MSME,
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                if (rawDataTableForBusinessLiability != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBusinessLiability);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_TOTAL_ASSETS_IN_HOUSE_ASSET_MSME)) {
                            String value = hashMap.get(TAG_NAME_TOTAL_ASSETS_IN_HOUSE_ASSET_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                TOTAL_ASSETS = Double.valueOf(value);
                            }
                        }
                    }
                }


                MONTHLY_INSTALLMENT = Math.round(MONTHLY_INSTALLMENT);
                ALL_DEBTS = Math.round(ALL_DEBTS);
                HOUSEHOLD_EQUITY = TOTAL_ASSETS - ALL_DEBTS;

                // TODO: updating total monthly installment
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_IN_HOUSELIABILITY_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_INSTALLMENT), false, true);
                // TODO: updating total liabilities
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_LIABILITIES_IN_HOUSELIABILITY_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(ALL_DEBTS), false, true);
                // TODO: updating debts
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DEBTS_IN_HOUSELIABILITY_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(ALL_DEBTS), false, true);
                // TODO: updating household equity
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOUSEHOLD_EQUITY_IN_HOUSELIABILITY_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(HOUSEHOLD_EQUITY), false, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> houseIncomeILCalculation(DynamicUITable
                                                                           dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstt

            double TOTAL_FAMILY_INCOME = 0;

            String cardfield = "";
            String cardvalue = "";


            List<RawDataTable> rawDataTableListfamilymemberDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_FAMILY_MEMBER_INCOME,
                    dynamicUITable.getClientID());

            if (rawDataTableListfamilymemberDetails != null && rawDataTableListfamilymemberDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListfamilymemberDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            // TODO: add value to TOTAL_FAMILY_INCOME
                            if (hashMap.containsKey(TAG_NAME_TOTAL_VERIFIED_INCOME)) {
                                String value = hashMap.get(TAG_NAME_TOTAL_VERIFIED_INCOME).toString();
                                TOTAL_FAMILY_INCOME = TOTAL_FAMILY_INCOME + Integer.parseInt(value);
                            }

                            if (hashMap.containsKey(TAG_NAME_NAME_OF_FAMILY_MEMBER)) {
                                cardfield = hashMap.get(TAG_NAME_NAME_OF_FAMILY_MEMBER).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_TOTAL_VERIFIED_INCOME)) {
                                cardvalue = hashMap.get(TAG_NAME_TOTAL_VERIFIED_INCOME).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    DynamicUITable businessdebtsObj = getObjectByTAG(TAG_NAME_NAME_OF_FAMILY_MEMBER, dynamicUITableList);
                                    if (businessdebtsObj != null) {
                                        dynamicUITableList.add(dynamicUITableList.indexOf(businessdebtsObj) + 1,
                                                newDynamicUITable);
                                    } else {
                                        dynamicUITableList.add(dynamicUITableList.size() - 1,
                                                newDynamicUITable);
                                    }
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }
            }

            TOTAL_FAMILY_INCOME = Math.round(TOTAL_FAMILY_INCOME);

            // TODO: Updating TOTAL_FAMILY_INCOMEe
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_FAMILY_INCOME, dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_FAMILY_INCOME), false, true);

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> businessLiabilitiesILCalculation(DynamicUITable
                                                                                   dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstt

            double ALL_DEBTS = 0;
            double TOTAL_MONTHLY_INSTALLMENT = 0;
            double ALL_ADVANCE = 0;
            double TOTAL_LIABILITIES = 0;

            String cardfield = "";
            String cardvalue = "";


            List<RawDataTable> rawDataTableListbusinessdebtsDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_BUSINESS_DEBTS,
                    dynamicUITable.getClientID());
            List<RawDataTable> rawDataTableListadvanceDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_ADVANCES,
                    dynamicUITable.getClientID());

            if (rawDataTableListbusinessdebtsDetails != null && rawDataTableListbusinessdebtsDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListbusinessdebtsDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            // TODO: add value to TOTAL_MONTHLY_INSTALLMENT
                            if (hashMap.containsKey(TAG_NAME_INSTALLMENT_AMOUNT)) {
                                String value = hashMap.get(TAG_NAME_INSTALLMENT_AMOUNT).toString();
                                TOTAL_MONTHLY_INSTALLMENT = TOTAL_MONTHLY_INSTALLMENT + Integer.parseInt(value);
                            }
                            // TODO: add value to ALL_DEBTS
                            if (hashMap.containsKey(TAG_NAME_BALANCE)) {
                                String value = hashMap.get(TAG_NAME_BALANCE).toString();
                                ALL_DEBTS = ALL_DEBTS + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_SUPPLIER_NAME)) {
                                cardfield = hashMap.get(TAG_NAME_SUPPLIER_NAME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE)) {
                                cardvalue = hashMap.get(TAG_NAME_BALANCE).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    DynamicUITable businessdebtsObj = getObjectByTAG(TAG_NAME_BUSINESS_DEBTS_IN_ACC_PAYABLE_MSME, dynamicUITableList);
                                    if (businessdebtsObj != null) {
                                        dynamicUITableList.add(dynamicUITableList.indexOf(businessdebtsObj) + 1,
                                                newDynamicUITable);
                                    } else {
                                        dynamicUITableList.add(dynamicUITableList.size() - 1,
                                                newDynamicUITable);
                                    }
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }
            }

            if (rawDataTableListadvanceDetails != null && rawDataTableListadvanceDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListadvanceDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BALANCE)) {
                                String value = hashMap.get(TAG_NAME_BALANCE).toString();
                                ALL_ADVANCE = ALL_ADVANCE + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_TYPE)) {
                                cardfield = hashMap.get(TAG_NAME_TYPE).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE)) {
                                cardvalue = hashMap.get(TAG_NAME_BALANCE).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);

                                    DynamicUITable advanceObj = getObjectByTAG(TAG_NAME_ADVANCES_ARREARS, dynamicUITableList);
                                    if (advanceObj != null) {
                                        dynamicUITableList.add(dynamicUITableList.indexOf(advanceObj) + 1,
                                                newDynamicUITable);
                                    } else {
                                        dynamicUITableList.add(dynamicUITableList.size() - 1,
                                                newDynamicUITable);
                                    }
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }

            }

            ALL_DEBTS = Math.round(ALL_DEBTS);
            TOTAL_MONTHLY_INSTALLMENT = Math.round(TOTAL_MONTHLY_INSTALLMENT);

            // TODO: Updating TOTAL_MONTHLY_INSTALLMENT
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_BUSINESS_LIABILITY, dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_MONTHLY_INSTALLMENT), false, true);
            // TODO: Updating Business Debts
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_BUSINESS_DEBTS, dynamicUITable.getScreenName(),
                    String.valueOf(ALL_DEBTS), false, true);


            ALL_ADVANCE = Math.round(ALL_ADVANCE);

            // TODO: updating advance
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADVANCES_ARREARS, dynamicUITable.getScreenName(),
                    String.valueOf(ALL_ADVANCE), false, true);

            TOTAL_LIABILITIES = ALL_DEBTS + ALL_ADVANCE;
            TOTAL_LIABILITIES = Math.round(TOTAL_LIABILITIES);

            // TODO: updating total liabilities
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_LIABILITIES, dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_LIABILITIES), false, true);

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> businessLiabilitiesMsmeCalculation(DynamicUITable
                                                                                     dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list firstt

            double ALL_ACC_PAYABLE = 0;
            double ALL_DEBTS = 0;
            double TOTAL_MONTHLY_INSTALLMENT = 0;
            double ALL_ADVANCE = 0;
            double TOTAL_LIABILITIES = 0;
            double TOTAL_EQUITY = 0;
            double TOTAL_ASSETS = 0;
            String cardfield = "";
            String cardvalue = "";


            List<RawDataTable> rawDataTableListaccountpayableDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_BUSINESS_ACCOUNT_PAYABLE,
                    dynamicUITable.getClientID());
            List<RawDataTable> rawDataTableListbusinessdebtsDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_BUSINESS_DEBTS_DETAIL_MSME,
                    dynamicUITable.getClientID());
            List<RawDataTable> rawDataTableListadvanceDetails = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_ADVANCE_DETAIL__MSME,
                    dynamicUITable.getClientID());

            if (rawDataTableListaccountpayableDetails != null && rawDataTableListaccountpayableDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListaccountpayableDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME)) {
                                String value = hashMap.get(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME).toString();
                                ALL_ACC_PAYABLE = ALL_ACC_PAYABLE + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_NAME_IN_ACC_PAYABLE_MSME)) {
                                cardfield = hashMap.get(TAG_NAME_NAME_IN_ACC_PAYABLE_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME)) {
                                cardvalue = hashMap.get(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);

                                    DynamicUITable accpayableObj = getObjectByTAG(TAG_NAME_ACCOUNT_PAYABLE_IN_ACC_PAYABLE_MSME, dynamicUITableList);
                                    if (accpayableObj != null) {
                                        dynamicUITableList.add(dynamicUITableList.indexOf(accpayableObj) + 1,
                                                newDynamicUITable);
                                    } else {
                                        dynamicUITableList.add(dynamicUITableList.size() - 1,
                                                newDynamicUITable);
                                    }
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }

                // MONTHLY_SALES=MONTHLY_SALES/rawDataTableListSalesBillsDetails.size();
                ALL_ACC_PAYABLE = Math.round(ALL_ACC_PAYABLE);

                // TODO: Updating Account Payable
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ACCOUNT_PAYABLE_IN_ACC_PAYABLE_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(ALL_ACC_PAYABLE), false, true);

            }

            if (rawDataTableListbusinessdebtsDetails != null && rawDataTableListbusinessdebtsDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListbusinessdebtsDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            // TODO: add value to TOTAL_MONTHLY_INSTALLMENT
                            if (hashMap.containsKey(TAG_NAME_MONTHLY_INSTALMENT_IN_HOUSELIABILITY_MSME)) {
                                String value = hashMap.get(TAG_NAME_MONTHLY_INSTALMENT_IN_HOUSELIABILITY_MSME).toString();
                                TOTAL_MONTHLY_INSTALLMENT = TOTAL_MONTHLY_INSTALLMENT + Integer.parseInt(value);
                            }
                            // TODO: add value to ALL_DEBTS
                            if (hashMap.containsKey(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME)) {
                                String value = hashMap.get(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME).toString();
                                ALL_DEBTS = ALL_DEBTS + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_CREDITOR_NAME_IN_HOUSELIABILITY_MSME)) {
                                cardfield = hashMap.get(TAG_NAME_CREDITOR_NAME_IN_HOUSELIABILITY_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME)) {
                                cardvalue = hashMap.get(TAG_NAME_CURRENT_OUTSTANDING_IN_HOUSELIABILITY_MSME).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);
                                    DynamicUITable businessdebtsObj = getObjectByTAG(TAG_NAME_BUSINESS_DEBTS_IN_ACC_PAYABLE_MSME, dynamicUITableList);
                                    if (businessdebtsObj != null) {
                                        dynamicUITableList.add(dynamicUITableList.indexOf(businessdebtsObj) + 1,
                                                newDynamicUITable);
                                    } else {
                                        dynamicUITableList.add(dynamicUITableList.size() - 1,
                                                newDynamicUITable);
                                    }
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }

                ALL_DEBTS = Math.round(ALL_DEBTS);
                TOTAL_MONTHLY_INSTALLMENT = Math.round(TOTAL_MONTHLY_INSTALLMENT);

                // TODO: Updating TOTAL_MONTHLY_INSTALLMENT
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_IN_BUSINESS_LIABILITY_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(TOTAL_MONTHLY_INSTALLMENT), false, true);
                // TODO: Updating Business Debts
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_BUSINESS_DEBTS_IN_ACC_PAYABLE_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(ALL_DEBTS), false, true);

            }

            if (rawDataTableListadvanceDetails != null && rawDataTableListadvanceDetails.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListadvanceDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME)) {
                                String value = hashMap.get(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME).toString();
                                ALL_ADVANCE = ALL_ADVANCE + Integer.parseInt(value);
                            }
                            if (hashMap.containsKey(TAG_NAME_CREDITOR_TYPE_MSME)) {
                                cardfield = hashMap.get(TAG_NAME_CREDITOR_TYPE_MSME).toString();
                            }
                            if (hashMap.containsKey(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME)) {
                                cardvalue = hashMap.get(TAG_NAME_BALANCE_IN_ACC_PAYABLE_MSME).toString();
                            }
                            if (!TextUtils.isEmpty(cardfield) && !TextUtils.isEmpty(cardvalue)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            cardfield, cardvalue);

                                    DynamicUITable advanceObj = getObjectByTAG(TAG_NAME_ADVANCE_IN_ACC_PAYABLE_MSME, dynamicUITableList);
                                    if (advanceObj != null) {
                                        dynamicUITableList.add(dynamicUITableList.indexOf(advanceObj) + 1,
                                                newDynamicUITable);
                                    } else {
                                        dynamicUITableList.add(dynamicUITableList.size() - 1,
                                                newDynamicUITable);
                                    }
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardfield, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            cardvalue, true, true);
                                }

                            }
                        }
                    }
                }


                // TODO: BUSINESS ASSETS RAW DATA
                RawDataTable rawDataTableForBusinessLiability = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_BUSINESS_ASSETS_MSME,
                        dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                if (rawDataTableForBusinessLiability != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForBusinessLiability);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_TOTAL_ASSETS_IN_BUSINESS_ASSETS_MSME)) {
                            String value = hashMap.get(TAG_NAME_TOTAL_ASSETS_IN_BUSINESS_ASSETS_MSME).toString();
                            if (!TextUtils.isEmpty(value)) {
                                TOTAL_ASSETS = Double.valueOf(value);
                            }
                        }
                    }
                }

                ALL_ADVANCE = Math.round(ALL_ADVANCE);

                // TODO: updating advance
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ADVANCE_IN_ACC_PAYABLE_MSME, dynamicUITable.getScreenName(),
                        String.valueOf(ALL_ADVANCE), false, true);

            }
            TOTAL_LIABILITIES = ALL_ACC_PAYABLE + ALL_DEBTS + ALL_ADVANCE;
            TOTAL_LIABILITIES = Math.round(TOTAL_LIABILITIES);

            TOTAL_EQUITY = TOTAL_ASSETS - TOTAL_LIABILITIES;

            // TODO: updating total liabilities
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_LIABILITIES_IN_BUSINESS_LIABILITY_MSME, dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_LIABILITIES), false, true);

            // TODO: updating total equity
            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TOTAL_EQUITY_IN_BUSINESS_LIABILITY_MSME, dynamicUITable.getScreenName(),
                    String.valueOf(TOTAL_EQUITY), false, true);

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> purchaseBillsCalculation(DynamicUITable
                                                                           dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            double MONTHLY_SALES = 0;
            double MONTHLY_PURCHASES = 0;
            String billType = "";
            String date = "";
            String value = "";
            String dateOrMonth = "";
            String margin = "";
            int MARGIN = 0;
            List<String> monthList = new ArrayList<>();// TODO: unique for month

            List<RawDataTable> rawDataTableListPurchaseBillsDetail = dynamicUIDao.getRawDataByClientAndScreenName(SCREEN_NAME_PURCHASE_BILLS_DETAIL_MSME,
                    dynamicUITable.getClientID());

            dateOrMonth = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_DATE_OR_MONTH_IN_PURCHASE_BILLS);
            margin = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_MARGIN_IN_PURCHASE_BILLS);

            if (TextUtils.isEmpty(dateOrMonth)) {

                RawDataTable rawDataTableForPurchaseBills = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(dynamicUITable.getScreenName(),
                        dynamicUITable.getClientID(), dynamicUITable.getModuleType());

                if (rawDataTableForPurchaseBills != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableForPurchaseBills);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_DATE_OR_MONTH_IN_PURCHASE_BILLS)) {
                            dateOrMonth = hashMap.get(TAG_NAME_DATE_OR_MONTH_IN_PURCHASE_BILLS).toString();
                        }
                        if (hashMap.containsKey(TAG_NAME_MARGIN_IN_PURCHASE_BILLS)) {
                            margin = hashMap.get(TAG_NAME_MARGIN_IN_PURCHASE_BILLS).toString();
                        }
                    }
                }
            }

            if (!TextUtils.isEmpty(margin)) {
                MARGIN = Integer.parseInt(margin);
            }

            if (rawDataTableListPurchaseBillsDetail != null && rawDataTableListPurchaseBillsDetail.size() > 0) {

                for (RawDataTable rawDataTable : rawDataTableListPurchaseBillsDetail) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_DATE_IN_PURCHASE_BILLS)) {
                                date = hashMap.get(TAG_NAME_DATE_IN_PURCHASE_BILLS).toString();
                                if (!TextUtils.isEmpty(dateOrMonth) && dateOrMonth.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MONTH)) {
                                    date = appHelper.getMonthByDate(AppConstant.DATE_FORMAT_YYYY_MM_DD, date);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_VALUE_IN_PURCHASE_BILLS)) {
                                value = hashMap.get(TAG_NAME_VALUE_IN_PURCHASE_BILLS).toString();
                                MONTHLY_PURCHASES = MONTHLY_PURCHASES + Integer.parseInt(value);

                                if (!TextUtils.isEmpty(value) && Integer.parseInt(value) > 0) {
                                    if (!TextUtils.isEmpty(dateOrMonth) && dateOrMonth.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MONTH)) {
                                        // TODO: add month to list
                                        monthList.add(date);
                                    } else {
                                        String getdate = appHelper.getMonthByDate(AppConstant.DATE_FORMAT_YYYY_MM_DD, date);
                                        // TODO: add month to list
                                        monthList.add(getdate);

                                    }
                                }
                            }
                            if (!TextUtils.isEmpty(date) && !TextUtils.isEmpty(value)) {
                                DynamicUITable dynamicUITableObj = getObjectByTAG(rawDataTable.getTag_name(), dynamicUITableList);
                                if (dynamicUITableObj == null) {
                                    // TODO: creating new row
                                    DynamicUITable newDynamicUITable = createNewRow(dynamicUITable, rawDataTable,
                                            date, value);
                                    dynamicUITableList.add(dynamicUITableList.size() - 1,
                                            newDynamicUITable);
                                    // TODO: delete old record and insert
                                    deleteAndInsertNewRecordInTable(dynamicUITableList, dynamicUITable.getScreenName());
                                } else {
                                    // TODO: updating field name
                                    dynamicUIDao.updateDynamicTableFieldNameAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            date, true, true);

                                    // TODO: updating value
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(rawDataTable.getTag_name()
                                            , dynamicUITable.getScreenName(),
                                            value, true, true);
                                }

                            }
                        }
                    }
                }


                // TODO: Monthly purchases =  Sum of all the values / no. of records enter

                // TODO: calling getMonthsBasedonDate method
                List<String> uniqueMonthList = getMonthsBasedonDate(monthList);

//                MONTHLY_PURCHASES = MONTHLY_PURCHASES / rawDataTableListPurchaseBillsDetail.size();
                // TODO: new validation monthly_purchase /total months
                MONTHLY_PURCHASES = MONTHLY_PURCHASES / uniqueMonthList.size();
                MONTHLY_PURCHASES = Math.round(MONTHLY_PURCHASES);

                // TODO: Monthly sales =  Monthly Purchase/(1-(Margin/100))

                MONTHLY_SALES = MONTHLY_PURCHASES / (1 - ((double) MARGIN / 100));
                MONTHLY_SALES = Math.round(MONTHLY_SALES);

                // TODO: updating monthly sales
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_SALES_IN_PURCHASE_BILLS, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_SALES), false, true);
                // TODO: updating monthly purchases
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MONTHLY_PURCHASES_IN_PURCHASE_BILLS, dynamicUITable.getScreenName(),
                        String.valueOf(MONTHLY_PURCHASES), false, true);
                // TODO: updating margin
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MARGIN_IN_PURCHASE_BILLS, dynamicUITable.getScreenName(),
                        String.valueOf(MARGIN), true, true);
                // TODO: updating date/month
                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DATE_OR_MONTH_IN_PURCHASE_BILLS, dynamicUITable.getScreenName(),
                        dateOrMonth, true, true);

            }

            List<DynamicUITable> dynamicUITableListFinal = dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID());
            data.postValue(dynamicUITableListFinal);
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> calculateSurplus(DynamicUITable
                                                                   dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            String salesWeekly = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_DECALRED_SALES_WEEKLY, TAG_NAME_BY_DAILY_WEEKLY_FIGURES);
            String salesMonthly = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_DECALRED_SALES_WEEKLY, TAG_NAME_BY_MONTHLY_FIGURES);
            String purchaseFrequency = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_PURCHASE_ANALYSIS, TAG_NAME_BY_FREQUENCY);
            String businessExpenses = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_OPERATING_EXPENSE, TAG_NAME_EXPENSES);
            String houseExpenses = dynamicUIDao.getValueByTAGname(SCREEN_N0_HOUSE_EXPENSES, TAG_NAME_TOTAL_FAMILY_EXPENSES);
            String houseIncome = dynamicUIDao.getValueByTAGname(SCREEN_N0_HOUSE_INCOME, TAG_NAME_TOTAL_FAMILY_INCOME);
            String installmentAmount = dynamicUIDao.getValueByTAGname(SCREEN_NO_LOAN_PROPOSAL_IL, TAG_NAME_REQUESTED_LOAN_AMOUNT);

            int NBI, SALES = 0, PURCHASE = 0, BUSINESS_EXPENSES = 0, HOUSE_EXPENSES = 0, HOUSE_INCOME = 0, INSTALLMENT_AMOUNT = 0,
                    DISPOSAL_INCOME, AVAILABLE_SURPLUS;
            /*if(!TextUtils.isEmpty(salesWeekly)){
                SALES=Integer.parseInt(salesWeekly);
            }*/
            if (!TextUtils.isEmpty(salesMonthly)) {
                SALES = SALES + Integer.parseInt(salesMonthly);
            }
            if (!TextUtils.isEmpty(purchaseFrequency)) {
                PURCHASE = Integer.parseInt(purchaseFrequency);
            }
            if (!TextUtils.isEmpty(businessExpenses)) {
                BUSINESS_EXPENSES = Integer.parseInt(businessExpenses);
            }
            if (!TextUtils.isEmpty(houseExpenses)) {
                HOUSE_EXPENSES = Integer.parseInt(houseExpenses);
            }
            if (!TextUtils.isEmpty(houseIncome)) {
                HOUSE_INCOME = Integer.parseInt(houseIncome);
            }
            if (!TextUtils.isEmpty(installmentAmount)) {
                INSTALLMENT_AMOUNT = Integer.parseInt(installmentAmount);
            }

            // TODO: Formula
            NBI = SALES - PURCHASE - BUSINESS_EXPENSES; // TODO: Sales-Purchase-Business Expenses
            DISPOSAL_INCOME = NBI + HOUSE_INCOME - HOUSE_EXPENSES; // TODO: NBC + Family income + Other income + (HH payout/12)  - Family expense
            AVAILABLE_SURPLUS = DISPOSAL_INCOME - INSTALLMENT_AMOUNT; // TODO: Disposable Income - Proposed Installment

            dynamicUIDao.updateDynamicTableValue(TAG_NAME_NET_BUSINESS_INCOME_IN_SURPLUS_SCREEN, dynamicUITable.getScreenID(), String.valueOf(NBI));
            dynamicUIDao.updateDynamicTableValue(TAG_NAME_FAMILY_INCOME, dynamicUITable.getScreenID(), String.valueOf(HOUSE_INCOME));
            dynamicUIDao.updateDynamicTableValue(TAG_NAME_FAMILY_EXPENSES, dynamicUITable.getScreenID(), String.valueOf(HOUSE_EXPENSES));
            dynamicUIDao.updateDynamicTableValue(TAG_NAME_INSTALLMENT_AMOUNT_IN_SURPLUS_SCREEN, dynamicUITable.getScreenID(), String.valueOf(INSTALLMENT_AMOUNT));
            dynamicUIDao.updateDynamicTableValue(TAG_NAME_DISPOSABLE_INCOME, dynamicUITable.getScreenID(), String.valueOf(DISPOSAL_INCOME));
            dynamicUIDao.updateDynamicTableValue(TAG_NAME_AVAILABLE_SURPLUS, dynamicUITable.getScreenID(), String.valueOf(AVAILABLE_SURPLUS));

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }

    public LiveData<List<DynamicUITable>> calculateFinancialRatios(DynamicUITable
                                                                           dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            String salesWeekly = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_DECALRED_SALES_WEEKLY, TAG_NAME_BY_DAILY_WEEKLY_FIGURES);
            String salesMonthly = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_DECALRED_SALES_WEEKLY, TAG_NAME_BY_MONTHLY_FIGURES);
            String purchaseFrequency = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_PURCHASE_ANALYSIS, TAG_NAME_BY_FREQUENCY);
            String businessExpenses = dynamicUIDao.getValueByTAGname(SCREEN_N0_MANUFACTURING_OPERATING_EXPENSE, TAG_NAME_EXPENSES);
            String houseExpenses = dynamicUIDao.getValueByTAGname(SCREEN_N0_HOUSE_EXPENSES, TAG_NAME_TOTAL_FAMILY_EXPENSES);
            String houseIncome = dynamicUIDao.getValueByTAGname(SCREEN_N0_HOUSE_INCOME, TAG_NAME_TOTAL_FAMILY_INCOME);
            String installmentAmount = dynamicUIDao.getValueByTAGname(SCREEN_NO_LOAN_PROPOSAL_IL, TAG_NAME_REQUESTED_LOAN_AMOUNT);

            double NBI, SALES = 0, PURCHASE = 0, BUSINESS_EXPENSES = 0, HOUSE_EXPENSES = 0, HOUSE_INCOME = 0, INSTALLMENT_AMOUNT = 0,
                    DISPOSAL_INCOME, AVAILABLE_SURPLUS,
                    TOTAL_EXPENSES, GROSS_MARGIN = 0;
            /*if(!TextUtils.isEmpty(salesWeekly)){
                SALES=Integer.parseInt(salesWeekly);
            }*/
            if (!TextUtils.isEmpty(salesMonthly)) {
                SALES = SALES + Double.parseDouble(salesMonthly);
            }
            if (!TextUtils.isEmpty(purchaseFrequency)) {
                PURCHASE = Double.parseDouble(purchaseFrequency);
            }
            if (!TextUtils.isEmpty(businessExpenses)) {
                BUSINESS_EXPENSES = Double.parseDouble(businessExpenses);
            }
            if (!TextUtils.isEmpty(houseExpenses)) {
                HOUSE_EXPENSES = Double.parseDouble(houseExpenses);
            }
            if (!TextUtils.isEmpty(houseIncome)) {
                HOUSE_INCOME = Double.parseDouble(houseIncome);
            }
            if (!TextUtils.isEmpty(installmentAmount)) {
                INSTALLMENT_AMOUNT = Double.parseDouble(installmentAmount);
            }

            // TODO: Formula
            NBI = SALES - PURCHASE - BUSINESS_EXPENSES; // TODO: Sales-Purchase-Business Expenses
            DISPOSAL_INCOME = NBI + HOUSE_INCOME - HOUSE_EXPENSES; // TODO: NBC + Family income + Other income + (HH payout/12)  - Family expense
            AVAILABLE_SURPLUS = DISPOSAL_INCOME - INSTALLMENT_AMOUNT; // TODO: Disposable Income - Proposed Installment
            TOTAL_EXPENSES = HOUSE_EXPENSES + BUSINESS_EXPENSES;
            if (SALES != 0) {
                GROSS_MARGIN = (SALES - TOTAL_EXPENSES) / SALES; // TODO: (Sales-Expenses)/Total Sales
            }
            dynamicUIDao.updateDynamicTableValue(TAG_NAME_GROSS_MARGIN, dynamicUITable.getScreenID(), String.valueOf(GROSS_MARGIN));

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }


    public LiveData<List<DynamicUITable>> getCBAmountFromServer(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {

        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {

                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

                final RawDataCBRequestDTO rawDataRequestDTO = new RawDataCBRequestDTO();
                rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                RawDataCBRequestDTO.SpNameWithParameterClass spNameWithParameter = new RawDataCBRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_GET_CB_AMOUNT);
                RawDataCBRequestDTO.SpParametersClass spParametersClass = new RawDataCBRequestDTO.SpParametersClass();
                spParametersClass.setCustomerId(dynamicUITable.getClientID()); // TODO: client id
                spParametersClass.setScreenId(dynamicUITable.getScreenID()); // TODO: screen id
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<RawDataCBRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<RawDataCBRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(rawDataRequestDTO, RawDataCBRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getCBAmountFromServer(rawDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            RawDataCBResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, RawDataCBResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                Log.d(TAG, "raw data tvName server =======> " + new Gson().toJson(rawDataResponseDTO));
                                                Log.d(TAG, "CB Amount tvName server =======> " + rawDataResponseDTO.getTable().get(0).getIL_AMOUNT_eligibility());

                                                String CB_AMOUNT = rawDataResponseDTO.getTable().get(0).getIL_AMOUNT_eligibility();
                                                if (!TextUtils.isEmpty(CB_AMOUNT)) {
                                                    DynamicUITable cbAmountObj = getObjectByTAG(TAG_NAME_CB_ELIGIBLE_LOAN_AMOUNT, dynamicUITableList);
                                                    if (cbAmountObj != null) {
                                                        cbAmountObj.setValue(CB_AMOUNT);
                                                    }

                                                    dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: updating the latest lis
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getCBAmountFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getCBAmountFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();

                                insertLog("getCBAmountFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("getCBAmountFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            }

        });

        return data;
    }

    // TODO: SOD EOD SERVICE CALL
    public LiveData<SODTable> SODEODServiceCall(SODTable sodTable) {

        final MutableLiveData<SODTable> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                if (appHelper.isNetworkAvailable()) {
                    final SODEODRequestDTO sodeodRequestDTO = new SODEODRequestDTO();
                    sodeodRequestDTO.setIMEINumber(appHelper.getIMEI());
                    sodeodRequestDTO.setUserId(sodTable.getStaffId());
                    SODEODRequestDTO.SpNameWithParameterClass spNameWithParameter = new SODEODRequestDTO.SpNameWithParameterClass();
                    spNameWithParameter.setSpName(SP_NAME_TO_POST_SOD_EOD_DATA);
                    SODEODRequestDTO.SpParametersClass spParametersClass = new SODEODRequestDTO.SpParametersClass();

                    spParametersClass.setStaffId(sodTable.getStaffId());
                    spParametersClass.setStaffName(sodTable.getStaffName());
                    spParametersClass.setBranchId(sodTable.getBranchId());
                    spParametersClass.setBranchGSTcode(sodTable.getBranchGSTcode());
                    spParametersClass.setCreated_date(sodTable.getCreated_date());
                    spParametersClass.setIsSOD(1);
                    spParametersClass.setIsEOD(1);
                    spParametersClass.setSOD_Latitude(sodTable.getSOD_Latitude());
                    spParametersClass.setSOD_Longitue(sodTable.getSOD_Longitue());
                    spParametersClass.setEOD_Latitude(sodTable.getEOD_Latitude());
                    spParametersClass.setEOD_Longitude(sodTable.getEOD_Longitude());

                    spNameWithParameter.setSpParameters(spParametersClass);
                    ArrayList<SODEODRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<SODEODRequestDTO.SpNameWithParameterClass>();
                    SpNameWithParameterList.add(spNameWithParameter);
                    sodeodRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                    String baseString = new Gson().toJson(sodeodRequestDTO, SODEODRequestDTO.class).replace("\\u003d", "=");
                    String k1 = SHA256Encrypt.sha256(baseString);
                    DynamicUIWebService.createService(DynamicUIWebservice.class).SODEODServiceCall(sodeodRequestDTO,
                                    appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                            enqueue(new Callback<ResponseBody>() {
                                @Override
                                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                    executor.execute(() -> {
                                        if (response.isSuccessful()) {
                                            try {
                                                String strResponse = response.body().string();
                                                JSONObject json = new JSONObject(strResponse);
                                                String key = json.keys().next();

                                                String tableJson = json.get(key).toString();
                                                SODEODResponseDTO sodeodResponseDTO = new Gson().fromJson(tableJson, SODEODResponseDTO.class);
                                                if (sodeodResponseDTO != null && sodeodResponseDTO.getTable().size() > 0) {
                                                    Log.d(TAG, "SODEODServiceCall response tvName server =======> "
                                                            + sodeodResponseDTO.getTable().get(0).getResponse());

                                                    String responseFromServer = sodeodResponseDTO.getTable().get(0).getResponse();
                                                    if (!TextUtils.isEmpty(responseFromServer) && responseFromServer.equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {
                                                        // TODO: Updating EOD success
                                                        dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), responseFromServer, true);
                                                        try {
                                                            // TODO: JLG COLLECTION TABLE SYNCED DATA DELETING HERE func
                                                            List<String> centerIdList = dynamicUIDao.getDistinctCenterIdFromCenterMeetingCollectionTable();
                                                            if (centerIdList != null && centerIdList.size() > 0) {
                                                                for (String centerId : centerIdList) {
                                                                    dynamicUIDao.deleteCenterMeetingTableByCenterId(centerId);
                                                                }
                                                            }
                                                            dynamicUIDao.deleteCenterMeetingCollectionTableBySync();
                                                            dynamicUIDao.deleteCenterMeetingAttendanceTableBySync();
                                                            dynamicUIDao.deleteCashDenominationTableBySync();
                                                            dynamicUIDao.deleteStaffActivityTableBySync();
                                                            dynamicUIDao.deleteCashCollectionSummaryTableBySync();
                                                        } catch (Exception ex) {
                                                            ex.printStackTrace();
                                                            insertLog("SODEODServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
                                                        }

                                                    } else {
                                                        // TODO: Failure Case

                                                        // TODO: Updating EOD Failed
                                                        dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), responseFromServer, false);
                                                        insertLog("SODEODServiceCall", "responseFromServer : " + responseFromServer, "", "", TAG, "", "", "");
                                                    }
                                                } else {
                                                    // TODO: Failure Case
                                                    // TODO: Updating EOD Failed
                                                    dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), ERROR_MESSAGE_UNABLE_TO_PERFORM_EOD, false);
                                                    insertLog("SODEODServiceCall", "Empty Response", "", "", TAG, "", "", "");
                                                }
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                                // TODO: Updating EOD Failed
                                                dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), ERROR_MESSAGE_UNABLE_TO_PERFORM_EOD, false);
                                                insertLog("SODEODServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
                                            }
                                        } else {
                                            // TODO: Failure Case
                                            // TODO: Updating EOD Failed
                                            dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), ERROR_MESSAGE_UNABLE_TO_PERFORM_EOD, false);
                                            insertLog("SODEODServiceCall", response.message(), "", "", TAG, "", "", "");
                                        }

                                        // TODO: Final result
                                        data.postValue(dynamicUIDao.getSODEODRowById(sodTable.getId()));

                                    });
                                }

                                @Override
                                public void onFailure(Call<ResponseBody> call, Throwable t) {
                                    t.printStackTrace();
                                    executor.execute(() -> {
                                        // TODO: Updating EOD Failed
                                        dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), t.getMessage(), false);

                                        // TODO: Final result
                                        data.postValue(dynamicUIDao.getSODEODRowById(sodTable.getId()));
                                        insertLog("SODEODServiceCall", t.getMessage(), "", "", TAG, "", "", "");
                                    });

                                }
                            });
                } else {
                    // TODO: Updating EOD Failed
                    dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), ERROR_MESSAGE_NO_INTERNET_CONNECTION, false);

                    // TODO: Final result
                    data.postValue(dynamicUIDao.getSODEODRowById(sodTable.getId()));
                    insertLog("SODEODServiceCall", ERROR_MESSAGE_NO_INTERNET_CONNECTION, "", "", TAG, "", "", "");

                }
            } catch (Exception ex) {
                ex.printStackTrace();

                executor.execute(() -> {

                    // TODO: Updating EOD Failed
                    dynamicUIDao.updateSODEODResponsebyId(sodTable.getId(), ERROR_MESSAGE_UNABLE_TO_PERFORM_EOD, false);

                    // TODO: Final result
                    data.postValue(dynamicUIDao.getSODEODRowById(sodTable.getId()));
                    insertLog("SODEODServiceCall", ex.getMessage(), "", "", TAG, "", "", "");

                });

            }

        });

        return data;
    }

    public LiveData<List<CenterMeetingCollectionTable>> getPendingCentersInJLGcollection(String staffId) {
        final MutableLiveData<List<CenterMeetingCollectionTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
//                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getDistinctMembersFromCMCollectionTableByCenterAndCollectionType(centerName, collectionType);
                List<CenterMeetingCollectionTable> centerMeetingCollectionTableListFromDB = dynamicUIDao.getPendingCenterMeetingCollectionTableList(staffId);
                data.postValue(centerMeetingCollectionTableListFromDB);
            } catch (Exception ex) {
                ex.printStackTrace();
                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<ProductMasterTable>> getLeadProductDetailsFromServer(String productId, String bcId){
        final MutableLiveData<List<ProductMasterTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() ->{
            try {
              final LeadMasterRequestDTO leadMasterRequestDTO = new LeadMasterRequestDTO();
              leadMasterRequestDTO.setIMEINumber(appHelper.getIMEI());
              LeadMasterRequestDTO.SpLeadNameWithParameterClass spLeadNameWithParameterClass = new LeadMasterRequestDTO.SpLeadNameWithParameterClass();
              spLeadNameWithParameterClass.setSpName(SP_NAME_TO_GET_PRODUCT_MASTER);
              LeadMasterRequestDTO.SpParametersClass spParametersClass = new LeadMasterRequestDTO.SpParametersClass();
              spParametersClass.getSegmentId(productId);
              spParametersClass.setBCID(bcId);
              spLeadNameWithParameterClass.setSpParameters(spParametersClass);
              ArrayList<LeadMasterRequestDTO.SpLeadNameWithParameterClass> spLeadNameWithParameterClassArrayList = new ArrayList<>();
              spLeadNameWithParameterClassArrayList.add(spLeadNameWithParameterClass);
              leadMasterRequestDTO.setSpNameWithParameter(spLeadNameWithParameterClassArrayList);
              String baseString = new Gson().toJson(leadMasterRequestDTO, LeadMasterRequestDTO.class).replace("\\u003d", "=");
              String k1 = SHA256Encrypt.sha256(baseString);
              DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadMasterFromServer(leadMasterRequestDTO,
                      appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                      enqueue(new Callback<ResponseBody>() {
                          @Override
                          public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                              executor.execute(() -> {
                                  if(response.isSuccessful()){
                                      try {
                                          String strResponse = response.body().string();
                                          JSONObject json = new JSONObject(strResponse);
                                          String key = json.keys().next();
                                          String tableJson = json.get(key).toString();
                                          LeadMasterResponseDTO leadMasterResponseDTO = new Gson().fromJson(tableJson, LeadMasterResponseDTO.class);
                                          if (leadMasterResponseDTO != null && leadMasterResponseDTO.getTable().size() > 0) {
                                              Log.d(TAG, "raw data server =======> " + new Gson().toJson(leadMasterResponseDTO));
                                              List<ProductMasterTable> productMasterTableList = new ArrayList<>();

                                              for (ProductMasterTable productMasterTable : leadMasterResponseDTO.getTable()) {
                                                  productMasterTableList.add(productMasterTable);
                                                  Log.d(TAG, "raw data Loan scheme list...... server =======> " + productMasterTableList.add(productMasterTable));
                                              }
                                              data.postValue(productMasterTableList);

                                              dynamicUIDao.insertAndDeleteProductMasterTable(productMasterTableList);

                                          }
                                      } catch (Exception e) {
                                          throw new RuntimeException(e);
                                      }
                                  }
                              });
                          }

                          @Override
                          public void onFailure(Call<ResponseBody> call, Throwable t) {

                          }
                      });
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
        return data;
    }
    public LiveData<List<ProductMasterTable>> getProductMasterFromServer(String productId, String bcId) {
        final MutableLiveData<List<ProductMasterTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final ProductMasterRequestDTO rawDataRequestDTO = new ProductMasterRequestDTO();
                rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                ProductMasterRequestDTO.SpNameWithParameterClass spNameWithParameter = new ProductMasterRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_GET_PRODUCT_MASTER);
                ProductMasterRequestDTO.SpParametersClass spParametersClass = new ProductMasterRequestDTO.SpParametersClass();
                spParametersClass.setSegmentId(productId); // TODO: segment id ( product id )
                spParametersClass.setBCID(bcId); // TODO: BC id
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<ProductMasterRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<ProductMasterRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(rawDataRequestDTO, ProductMasterRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getProductMasterFromServer(rawDataRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            String key = json.keys().next();

                                            String tableJson = json.get(key).toString();
                                            ProductMasterResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, ProductMasterResponseDTO.class);
                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                Log.d(TAG, "raw data server =======> " + new Gson().toJson(rawDataResponseDTO));
                                                List<ProductMasterTable> productMasterTableList = new ArrayList<>();

                                                for (ProductMasterTable productMasterTable : rawDataResponseDTO.getTable()) {
                                                    productMasterTableList.add(productMasterTable);
                                                    Log.d(TAG, "raw data Loan scheme list...... server =======> " + productMasterTableList.add(productMasterTable));
                                                }
                                                data.postValue(productMasterTableList);

                                                dynamicUIDao.insertAndDeleteProductMasterTable(productMasterTableList);
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getProductMasterFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getProductMasterFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<ProductMasterTable> productMasterTableList = dynamicUIDao.getProductMasterTable();
                                    data.postValue(productMasterTableList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();

                                insertLog("getProductMasterFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();

                insertLog("getProductMasterFromServer", ex.getMessage(), "", "", TAG, "", "", "");
            }

        });
        return data;
    }

//    public LiveData<List<ProductMasterTable>> getLeadProductMasterFromServer(String productId, String bcId) {
//        final MutableLiveData<List<ProductMasterTable>> data = new MutableLiveData<>();
//        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
//        executor.execute(() -> {
//            try {
//                final LeadMasterRequestDTO rawDataRequestDTO = new LeadMasterRequestDTO();
//                rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
//                LeadMasterRequestDTO.SpLeadNameWithParameterClass spNameWithParameter = new LeadMasterRequestDTO.SpLeadNameWithParameterClass();
//                spNameWithParameter.setSpName(SP_NAME_TO_GET_PRODUCT_MASTER);
//                LeadMasterRequestDTO.SpParametersClass spParametersClass = new LeadMasterRequestDTO.SpParametersClass();
//                spParametersClass.setSegmentId(productId); // TODO: segment id ( product id )
//                spParametersClass.setBCID(bcId); // TODO: BCid
//                spNameWithParameter.setSpParameters(spParametersClass);
//                Log.d(TAG, "get the sp parameters.................." + spParametersClass.getBCID());
//                Log.d(TAG, "get the sp parameters.................." + spParametersClass.getSegmentId());
//                ArrayList<LeadMasterRequestDTO.SpLeadNameWithParameterClass> SpNameWithParameterList = new ArrayList<LeadMasterRequestDTO.SpLeadNameWithParameterClass>();
//                SpNameWithParameterList.add(spNameWithParameter);
//                rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
//                String baseString = new Gson().toJson(rawDataRequestDTO, LeadMasterRequestDTO.class).replace("\\u003d", "=");
//                String k1 = SHA256Encrypt.sha256(baseString);
//                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadMasterFromServer(rawDataRequestDTO,
//                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
//                        enqueue(new Callback<ResponseBody>() {
//                            @Override
//                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
//                                executor.execute(() -> {
//                                    if (response.isSuccessful()) {
//                                        try {
//                                            String strResponse = response.body().string();
//                                            JSONObject json = new JSONObject(strResponse);
//                                            String key = json.keys().next();
//
//                                            String tableJson = json.get(key).toString();
//                                            LeadMasterResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, LeadMasterResponseDTO.class);
//                                            if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
//                                                Log.d(TAG, "raw data server =======> " + new Gson().toJson(rawDataResponseDTO));
//                                                List<ProductMasterTable> productMasterTableList = new ArrayList<>();
//
//                                                for (ProductMasterTable productMasterTable : rawDataResponseDTO.getTable()) {
//                                                    productMasterTableList.add(productMasterTable);
//                                                    Log.d(TAG, "raw data Loan scheme list...... server =======> " + productMasterTableList.add(productMasterTable));
//                                                }
//                                                data.postValue(productMasterTableList);
//
//                                                dynamicUIDao.insertAndDeleteProductMasterTable(productMasterTableList);
//                                            }
//                                        } catch (Exception ex) {
//                                            ex.printStackTrace();
//
//                                            insertLog("getProductMasterFromServer", ex.getMessage(), "", "", TAG, "", "", "");
//                                        }
//                                    } else {
//                                        insertLog("getProductMasterFromServer", response.message(), "", "", TAG, "", "", "");
//                                    }
//
//                                    // TODO: Final result
//                                    List<ProductMasterTable> productMasterTableList = dynamicUIDao.getProductMasterTable();
//                                    data.postValue(productMasterTableList);
//
//                                });
//                            }
//
//                            @Override
//                            public void onFailure(Call<ResponseBody> call, Throwable t) {
//                                t.printStackTrace();
//
//                                insertLog("getProductMasterFromServer", t.getMessage(), "", "", TAG, "", "", "");
//                            }
//                        });
//            } catch (Exception ex) {
//                ex.printStackTrace();
//
//                insertLog("getProductMasterFromServer", ex.getMessage(), "", "", TAG, "", "", "");
//            }
//
//        });
//        return data;
//    }

    // TODO:  IFSC Service call
    public LiveData<List<DynamicUITable>> getIFSCDataFromServer(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        // dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            final IFSCRequestDTO ifscRequestDTO = new IFSCRequestDTO();
            ifscRequestDTO.setIMEINumber(appHelper.getIMEI());
            IFSCRequestDTO.SpNameWithParameterClass spNameWithParameter = new IFSCRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_IFSC_DATA);
            IFSCRequestDTO.SpParametersClass spParametersClass = new IFSCRequestDTO.SpParametersClass();
            spParametersClass.setBankName("");
            spParametersClass.setIFSC(dynamicUITable.getValue());

            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<IFSCRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<IFSCRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            ifscRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
            String baseString = new Gson().toJson(ifscRequestDTO, IFSCRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            DynamicUIWebService.createService(DynamicUIWebservice.class).getIFSCDataServiceCall(ifscRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        String key = json.keys().next();
                                        String tableJson = json.get(key).toString();

                                        IFSCResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, IFSCResponseDTO.class);

                                        if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                            Log.d(TAG, "raw data tvName server");
                                            List<IFSCResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                            if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                IFSCResponseDTO.Table ifscResponseTable = rawDataResponseDTOList.get(0);
                                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_IFSC_CODE, dynamicUITable.getScreenName(), ifscResponseTable.getIFSC(), true);
                                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BANK_NAME, dynamicUITable.getScreenName(), ifscResponseTable.getBANK(), false);
                                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BRANCH_NAME, dynamicUITable.getScreenName(), ifscResponseTable.getBRANCH(), false);

                                                data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
                                            }

                                        } else {
                                            //  dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_IFSC_CODE, dynamicUITable.getScreenName(), "", true);
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BANK_NAME, dynamicUITable.getScreenName(), "", false);
                                            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BRANCH_NAME, dynamicUITable.getScreenName(), "", false);

                                            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));
                                        }

                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        //  dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_IFSC_CODE, dynamicUITable.getScreenName(), "", true);
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BANK_NAME, dynamicUITable.getScreenName(), "", false);
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BRANCH_NAME, dynamicUITable.getScreenName(), "", false);

                                        data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));


                                    }
                                } else {
                                    // TODO: Sending result
                                    //  dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_IFSC_CODE, dynamicUITable.getScreenName(), "", true);

                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BANK_NAME, dynamicUITable.getScreenName(), "", false);
                                    dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BRANCH_NAME, dynamicUITable.getScreenName(), "", false);

                                    data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));

                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result
                            executor.execute(() -> {
                                //  dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_IFSC_CODE, dynamicUITable.getScreenName(), "", true);
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BANK_NAME, dynamicUITable.getScreenName(), "", false);
                                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BRANCH_NAME, dynamicUITable.getScreenName(), "", false);

                                data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID()));

                            });
                        }
                    });
        });
        return data;
    }

    // TODO: PAN VALIDATION SERVICE CALL
    public LiveData<List<DynamicUITable>> panValidationServiceCall(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(PAN_VALIDATION_URL);

        try {
            executor.execute(() -> {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

                // TODO: Initially it will be false
                dynamicUIDao.updateIsValidAndErrorMessage(dynamicUITable.getFieldTag(),
                        dynamicUITable.getScreenName(), false, FAILURE_RESPONSE_FOR_PAN_VALIDATION);

                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_IS_VERIFIED,
                        dynamicUITable.getScreenName(),
                        IS_VERIFIED_FALSE, false, false);

                PanValidationRequestDTO panValidationRequestDTO = new PanValidationRequestDTO();
                String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_DDMMYYYYSMS);
                panValidationRequestDTO.setUniqueId(timeStamp);
                panValidationRequestDTO.setClientID(dynamicUITable.getClientID());
                panValidationRequestDTO.setExternalCustomerId("");
                panValidationRequestDTO.setKYCId(dynamicUITable.getValue());
                panValidationRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                panValidationRequestDTO.setCreatedBy(dynamicUITable.getUser_id());
                panValidationRequestDTO.setServiceType(SERVICE_TYPE_PAN_VALIDATION);

                PanValidationRequestDTO.RequestStringClass requestStringClass = new PanValidationRequestDTO.RequestStringClass();

                PanValidationRequestDTO.PanVerificationClass panVerificationClass = new PanValidationRequestDTO.PanVerificationClass();
                List<PanValidationRequestDTO.PanNumbersClass> panNumbersClassList = new ArrayList<>();

                PanValidationRequestDTO.PanNumbersClass panNumbersClass = new PanValidationRequestDTO.PanNumbersClass();
                panNumbersClass.setPan(dynamicUITable.getValue());

                panNumbersClassList.add(panNumbersClass);
                panVerificationClass.setPanNumbers(panNumbersClassList);
                requestStringClass.setPanVerification(panVerificationClass);
                panValidationRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(panValidationRequestDTO, PanValidationRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).panValidationServiceCall
                                (panValidationRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<PanValidationResponseDTO>() {
                            @Override
                            public void onResponse(Call<PanValidationResponseDTO> call, Response<PanValidationResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        PanValidationResponseDTO panValidationResponseDTO = response.body();
                                        if (panValidationResponseDTO != null && panValidationResponseDTO.getApiResponse() != null) {
                                            PanValidationResponseDTO.ApiResponseClass apiResponse = panValidationResponseDTO.getApiResponse();

                                            List<PanValidationResponseDTO.PanDetailsClass> panDetailsClassList = apiResponse.getPanDetails();

                                            if (panDetailsClassList != null && panDetailsClassList.size() > 0) {

                                                PanValidationResponseDTO.PanDetailsClass panDetailsClass = panDetailsClassList.get(0);
                                                if (panDetailsClass != null && panDetailsClass.getPanstatus().equalsIgnoreCase("E")) {

                                                    String fullName = panDetailsClass.getFiller1();
                                                    String pan = panDetailsClass.getPan();
                                                    String panstatus = panDetailsClass.getPanstatus();
                                                    String firstName = panDetailsClass.getFirstname();
                                                    String middleName = panDetailsClass.getMiddlename();
                                                    String lastName = panDetailsClass.getLastname();
                                                    String pantitle = panDetailsClass.getPantitle();
                                                    String lastupdatedate = panDetailsClass.getLastupdatedate();
                                                    String aadhaarseedingstatus = panDetailsClass.getAadhaarseedingstatus();

                                                    if (TextUtils.isEmpty(fullName)) {
                                                        fullName = panDetailsClass.getFirstname() + " " + panDetailsClass.getMiddlename() + " " + panDetailsClass.getLastname();
                                                    }

                                                    if (!TextUtils.isEmpty(fullName)) {

                                                        // TODO: Update IsValid Success
                                                        dynamicUIDao.updateIsValidAndErrorMessage(dynamicUITable.getFieldTag(),
                                                                dynamicUITable.getScreenName(), true, SUCCESS_RESPONSE_FOR_PAN_VALIDATION);

                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAN, dynamicUITable.getScreenName(),
                                                                pan, false, true);
                                                        RawDataTable leadRawData = null;
                                                        List<RawDataTable> coApplicantKYCDetailRawDataList=null;
                                                        HashMap<String, Object> hashMap =null;
                                                        if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                                                            leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                                                            hashMap = setKeyValueForObject(leadRawData);
                                                        } else {
                                                            coApplicantKYCDetailRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, dynamicUITable.getClientID(), dynamicUITable.getModuleType(), dynamicUITable.getLoanType());
                                                            if (coApplicantKYCDetailRawDataList != null && coApplicantKYCDetailRawDataList.size() > 0) {
                                                                for (RawDataTable rawDataTable : coApplicantKYCDetailRawDataList) {
                                                                     hashMap = setKeyValueForObject(rawDataTable);
                                                                }
                                                            }
                                                        }
                                                        if (leadRawData != null||coApplicantKYCDetailRawDataList!=null) {
                                                            String mobileNumber = "";
                                                            if (hashMap != null && hashMap.size() > 0) {
                                                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                                                    String typeOfProdession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                                                    if(hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)){
                                                                        mobileNumber = hashMap.get(TAG_NAME_MOBILE_NUMBER).toString();
                                                                    }
                                                                    if (!TextUtils.isEmpty(typeOfProdession) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))
                                                                            && typeOfProdession.equalsIgnoreCase(TAG_NAME_PROPRIETORSHIP)) {
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPRIETORSHIP_PAN, dynamicUITable.getScreenName(),
                                                                                pan, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPRIETORSHIP_FIRM_NAME, dynamicUITable.getScreenName(),
                                                                                fullName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPRIETORSHIP_FIRST_NAME, dynamicUITable.getScreenName(),
                                                                                firstName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPRIETORSHIP_MIDDLE_NAME, dynamicUITable.getScreenName(),
                                                                                middleName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PROPRIETORSHIP_LAST_NAME, dynamicUITable.getScreenName(),
                                                                                lastName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOBILE_NUMBER, dynamicUITable.getScreenName(),
                                                                                mobileNumber, true, true);
                                                                    } else if (!TextUtils.isEmpty(typeOfProdession) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))
                                                                            && typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNER)) {
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FULL_NAME, dynamicUITable.getScreenName(),
                                                                                fullName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAN_STATUS, dynamicUITable.getScreenName(),
                                                                                panstatus, true, true);
                                                                        //
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_UPDATE_DATE, dynamicUITable.getScreenName(),
                                                                                lastupdatedate, true, true);
                                                                       /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AADHAAR_SEEDINGS_STATUS, dynamicUITable.getScreenName(),
                                                                                aadhaarseedingstatus, false, true);*/
                                                                        //
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIRST_NAME, dynamicUITable.getScreenName(),
                                                                                firstName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MIDDLE_NAME, dynamicUITable.getScreenName(),
                                                                                middleName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_NAME, dynamicUITable.getScreenName(),
                                                                                lastName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOBILE_NUMBER, dynamicUITable.getScreenName(),
                                                                                mobileNumber, true, true);
                                                                    } else if (!TextUtils.isEmpty(typeOfProdession) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))
                                                                            && typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNERSHIP)) {
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PARTNERSHIP_FIRM_NAME, dynamicUITable.getScreenName(),
                                                                                fullName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PARTNERSHIP_PAN, dynamicUITable.getScreenName(),
                                                                                pan, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOBILE_NUMBER, dynamicUITable.getScreenName(),
                                                                                mobileNumber, true, true);
                                                                        /*dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAN_STATUS, dynamicUITable.getScreenName(),
                                                                                panstatus, true, true);*/
                                                                        //
                                                                       /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_UPDATE_DATE, dynamicUITable.getScreenName(),
                                                                                lastupdatedate, true, true);*/
                                                                       /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AADHAAR_SEEDINGS_STATUS, dynamicUITable.getScreenName(),
                                                                                aadhaarseedingstatus, false, true);*/
                                                                        //
                                                                      /*  dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIRST_NAME, dynamicUITable.getScreenName(),
                                                                                firstName, true, false);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MIDDLE_NAME, dynamicUITable.getScreenName(),
                                                                                middleName, true, false);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_NAME, dynamicUITable.getScreenName(),
                                                                                lastName, true, false);*/
                                                                    } else if (!TextUtils.isEmpty(typeOfProdession) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))
                                                                            && typeOfProdession.equalsIgnoreCase(TAG_NAME_PRIVATE_LIMITED)
                                                                            || typeOfProdession.equalsIgnoreCase(TAG_NAME_PUBLIC_LIMITED)
                                                                            || typeOfProdession.equalsIgnoreCase(TAG_NAME_LLP)
                                                                            || typeOfProdession.equalsIgnoreCase(TAG_NAME_HUF) || typeOfProdession.equalsIgnoreCase(TAG_NAME_DIRECTOR)) {

                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMPANYNAME, dynamicUITable.getScreenName(),
                                                                                fullName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_COMPANY_PAN, dynamicUITable.getScreenName(),
                                                                                pan, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOBILE_NUMBER, dynamicUITable.getScreenName(),
                                                                                mobileNumber, true, true);

                                                                    } else {
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FULL_NAME, dynamicUITable.getScreenName(),
                                                                                fullName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAN_STATUS, dynamicUITable.getScreenName(),
                                                                                panstatus, true, true);
                                                                        //
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_UPDATE_DATE, dynamicUITable.getScreenName(),
                                                                                lastupdatedate, true, true);
                                                                       /* dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AADHAAR_SEEDINGS_STATUS, dynamicUITable.getScreenName(),
                                                                                aadhaarseedingstatus, false, true);*/
                                                                        //
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIRST_NAME, dynamicUITable.getScreenName(),
                                                                                firstName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MIDDLE_NAME, dynamicUITable.getScreenName(),
                                                                                middleName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_NAME, dynamicUITable.getScreenName(),
                                                                                lastName, true, true);
                                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOBILE_NUMBER, dynamicUITable.getScreenName(),
                                                                                mobileNumber, true, true);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FULL_NAME, dynamicUITable.getScreenName(),
                                                                    fullName, true, true);
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PAN_STATUS, dynamicUITable.getScreenName(),
                                                                    panstatus, true, true);
                                                            //
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_UPDATE_DATE, dynamicUITable.getScreenName(),
                                                                    lastupdatedate, true, true);
                                                            /*dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_AADHAAR_SEEDINGS_STATUS, dynamicUITable.getScreenName(),
                                                                    aadhaarseedingstatus, false, true);*/
                                                            //
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FIRST_NAME, dynamicUITable.getScreenName(),
                                                                    firstName, true, true);
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MIDDLE_NAME, dynamicUITable.getScreenName(),
                                                                    middleName, true, true);
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_LAST_NAME, dynamicUITable.getScreenName(),
                                                                    lastName, true, true);

                                                        }

                                                        /*if(pantitle.equalsIgnoreCase("")) {
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TITLE, dynamicUITable.getScreenName(), "", false, true);
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SALUTATION, dynamicUITable.getScreenName(), "", true, true);
                                                        }else {
                                                            dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_TITLE, dynamicUITable.getScreenName(), pantitle, false, true);
                                                        }*/

                                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_IS_VERIFIED,
                                                                dynamicUITable.getScreenName(),
                                                                IS_VERIFIED_TRUE, false, false);
                                                    }
                                                } else {
                                      /*  // TODO: Update IsValid False
                                        dynamicUIDao.updateIsValidAndErrorMessage(dynamicUITable.getFieldTag(),
                                                dynamicUITable.getScreenName(),false,FAILURE_RESPONSE_FOR_PAN_VALIDATION);

                                        // TODO: Updating PAN Card as empty
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(dynamicUITable.getFieldTag(),
                                                dynamicUITable.getScreenName(),
                                                "",true,true);
*/
                                                    dynamicUIDao.updateIsValidAndErrorMessage(dynamicUITable.getFieldTag(),
                                                            dynamicUITable.getScreenName(), false, "");

                                                    // TODO: Updating Full Name as empty
                                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FULL_NAME, dynamicUITable.getScreenName(), "", true, true);
                                                }
                                            }
                                        }
                                    } else {
                                        insertLog("panValidationServiceCall", response.message(), "", "", TAG, "", "", "");
                                    }


                                    // TODO: Final Result
                                    List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
                                    data.postValue(dynamicUITableListResult);
                                });
                            }

                            @Override
                            public void onFailure(Call<PanValidationResponseDTO> call, Throwable t) {
                                t.printStackTrace();
                                executor.execute(() -> {
                                    // TODO: Final Result
                                    List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
                                    data.postValue(dynamicUITableListResult);

                                    insertLog("panValidationServiceCall", t.getMessage(), "", "", TAG, "", "", "");

                                });
                            }
                        });
            });

        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                // TODO: Final Result
                List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
                data.postValue(dynamicUITableListResult);

                insertLog("panValidationServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
            });

        }
        return data;
    }

    // TODO: AADHAAR VAULT SERVICE CALL
    public LiveData<List<DynamicUITable>> aadhaarVaultServiceCall(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(AADHAAR_VAULT_URL);
        try {
            executor.execute(() -> {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

                // TODO: Initially Optional column is empty
                dynamicUIDao.updateDynamicTableOptionalValue(dynamicUITable.getFieldTag(),
                        dynamicUITable.getScreenName(), "");

                AadhaarVaultRequestDTO aadhaarVaultRequestDTO = new AadhaarVaultRequestDTO();
                String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_DDMMYYYYSMS);
                aadhaarVaultRequestDTO.setUniqueId(timeStamp);
                aadhaarVaultRequestDTO.setClientID(dynamicUITable.getClientID());
                aadhaarVaultRequestDTO.setExternalCustomerId("");
                aadhaarVaultRequestDTO.setKYCId(dynamicUITable.getValue());
                aadhaarVaultRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                aadhaarVaultRequestDTO.setCreatedBy(dynamicUITable.getUser_id());
                aadhaarVaultRequestDTO.setServiceType(SERVICE_TYPE_AADHAAR_VAULT);

                AadhaarVaultRequestDTO.RequestStringClass requestStringClass = new AadhaarVaultRequestDTO.RequestStringClass();

                AadhaarVaultRequestDTO.AadharVaultClass aadhaarVaultClass = new AadhaarVaultRequestDTO.AadharVaultClass();

                aadhaarVaultClass.setUid(dynamicUITable.getValue());
                aadhaarVaultClass.setReqId(timeStamp);
                aadhaarVaultClass.setSourceIdentifier1(dynamicUITable.getUser_id());
                aadhaarVaultClass.setUserConsentFlag("1"); // TODO: STATIC HARDCODED VALUE

                requestStringClass.setAadharVault(aadhaarVaultClass);
                aadhaarVaultRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(aadhaarVaultRequestDTO, AadhaarVaultRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).aadhaarVaultServiceCall
                                (aadhaarVaultRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<AadhaarVaultResponseDTO>() {
                            @Override
                            public void onResponse(Call<AadhaarVaultResponseDTO> call, Response<AadhaarVaultResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        AadhaarVaultResponseDTO aadhaarVaultResponseDTO = response.body();
                                        if (aadhaarVaultResponseDTO != null && aadhaarVaultResponseDTO.getApiResponse() != null) {
                                            AadhaarVaultResponseDTO.ApiResponseClass apiResponse = aadhaarVaultResponseDTO.getApiResponse();
                                            if (apiResponse != null && apiResponse.getStatus().equals("1") &&
                                                    !TextUtils.isEmpty(apiResponse.getAadhaarRefKey())) {
                                                String aadhaarRefKey = apiResponse.getAadhaarRefKey();

                                                dynamicUIDao.updateDynamicTableOptionalValue(dynamicUITable.getFieldTag(),
                                                        dynamicUITable.getScreenName(), aadhaarRefKey);
                                            }
                                        }
                                    } else {
                                        insertLog("aadhaarVaultServiceCall", response.message(), "", "", TAG, "", "", "");
                                    }
                                    // TODO: Final Result
                                    List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
                                    data.postValue(dynamicUITableListResult);
                                });
                            }

                            @Override
                            public void onFailure(Call<AadhaarVaultResponseDTO> call, Throwable t) {
                                t.printStackTrace();
                                executor.execute(() -> {
                                    // TODO: Final Result
                                    List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
                                    data.postValue(dynamicUITableListResult);

                                    insertLog("aadhaarVaultServiceCall", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            });

        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                // TODO: Final Result
                List<DynamicUITable> dynamicUITableListResult = dynamicUIDao.loadUpdatedDataNew(dynamicUITable.getScreenID());
                data.postValue(dynamicUITableListResult);

                insertLog("aadhaarVaultServiceCall", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    // TODO: GENERATE CIBIL SERVICE CALL
    public LiveData<String> generateCIBILServiceCall(CIBILTable cibilTable, String staffId) {
        final MutableLiveData<String> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(CIBIL_URL);

        try {
            executor.execute(() -> {

                CibilRequestDTO cibilRequestDTO = new CibilRequestDTO();
                String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_DDMMYYYYSMS);
                cibilRequestDTO.setUniqueId(timeStamp);
                cibilRequestDTO.setClientID(cibilTable.getClient_id());
                cibilRequestDTO.setExternalCustomerId("");
                cibilRequestDTO.setKYCId("");
                cibilRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                cibilRequestDTO.setCreatedBy(staffId);
                cibilRequestDTO.setServiceType(SERVICE_TYPE_CIBIL);

                CibilRequestDTO.RequestStringClass requestStringClass = new CibilRequestDTO.RequestStringClass();

                CibilRequestDTO.cibilEnquiryClass cibilEnquiryClass = new CibilRequestDTO.cibilEnquiryClass();

                cibilEnquiryClass.setModuleType(cibilTable.getModuleType());
                cibilEnquiryClass.setResidenceMobileNumber(cibilTable.getMobileNumber());

                requestStringClass.setCibilEnquiry(cibilEnquiryClass);
                cibilRequestDTO.setRequestString(requestStringClass);

                // TODO: Setting values tvName raw data table
                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> addressRawDataTableList = null;
                List<RawDataTable> loanApplicationRawDataTableList = null;

                // TODO: Raw data for Applicant
                if (cibilTable.getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC,
                            cibilTable.getClient_id(), cibilTable.getModuleType(), cibilTable.getLoan_type());
                    addressRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL,
                            cibilTable.getClient_id(), cibilTable.getModuleType(), cibilTable.getLoan_type());

                } else {

                    // TODO: Raw data for Co Applicant
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC,
                            cibilTable.getClient_id(), cibilTable.getModuleType(), cibilTable.getLoan_type());
                    addressRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL,
                            cibilTable.getClient_id(), cibilTable.getModuleType(), cibilTable.getLoan_type());
                }

                // TODO: Raw data for Loan proposal
                loanApplicationRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL,
                        cibilTable.getClient_id(), MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, cibilTable.getLoan_type());

                // TODO: Applicant detail
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {

                                    // TODO: if first name is empty then set value otherwise values already setted
                                    if (TextUtils.isEmpty(cibilEnquiryClass.getApplicantFirstName())
                                            && TextUtils.isEmpty(cibilEnquiryClass.getApplicantLastName())) {

                                        cibilEnquiryClass.setApplicantFirstName(value);
                                        cibilEnquiryClass.setApplicantLastName(value);

                                        // TODO: Validation to split name
                                        try {
                                            String[] nameArray = value.split(" ");
                                            if (nameArray != null && nameArray.length > 0) {
                                                String firstName = "";
                                                String middleName = "";
                                                String lastName = "";
                                                if (nameArray.length == 1) {
                                                    firstName = nameArray[0];
                                                    lastName = nameArray[0];
                                                    if (!TextUtils.isEmpty(firstName) && firstName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantFirstName(firstName);
                                                    }
                                                    if (!TextUtils.isEmpty(lastName) && lastName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantLastName(lastName);
                                                    }
                                                } else if (nameArray.length == 2) {
                                                    firstName = nameArray[0];
                                                    lastName = nameArray[1];
                                                    // TODO: First Name
                                                    if (!TextUtils.isEmpty(firstName) && firstName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantFirstName(firstName);
                                                    } else {
                                                        cibilEnquiryClass.setApplicantFirstName(firstName + lastName);
                                                    }
                                                    // TODO: Last Name
                                                    if (!TextUtils.isEmpty(lastName) && lastName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantLastName(lastName);
                                                    } else {
                                                        cibilEnquiryClass.setApplicantLastName(firstName + lastName);
                                                    }
                                                } else {
                                                    firstName = nameArray[0];
                                                    middleName = nameArray[1];
                                                    lastName = nameArray[nameArray.length - 1];
                                                    // TODO: First Name
                                                    if (!TextUtils.isEmpty(firstName) && firstName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantFirstName(firstName);
                                                    } else if (!TextUtils.isEmpty(middleName) && middleName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantFirstName(firstName + middleName);
                                                    } else {
                                                        cibilEnquiryClass.setApplicantFirstName(firstName + lastName);
                                                    }
                                                    // TODO: Middle Name
                                                    if (!TextUtils.isEmpty(middleName) && middleName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantMiddleName(middleName);
                                                    } else {
                                                        cibilEnquiryClass.setApplicantMiddleName(middleName + lastName);
                                                    }
                                                    // TODO: Last Name
                                                    if (!TextUtils.isEmpty(lastName) && lastName.length() > 3) {
                                                        cibilEnquiryClass.setApplicantLastName(lastName);
                                                    } else {
                                                        cibilEnquiryClass.setApplicantLastName(middleName + lastName);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                        }
                                    }
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CONTAINS_DOB)) {
                                String value = hashMap.get(TAG_NAME_CONTAINS_DOB).toString();
                                if (!TextUtils.isEmpty(value)) {

                                    // TODO: if dob is empty then set value otherwise values already setted
                                    if (TextUtils.isEmpty(cibilEnquiryClass.getDateofBirth())) {
                                        String dob = appHelper.convertDateToGivenDateFormat(value, DATE_FORMAT_YYYY_MM_DD, DATE_FORMAT_DD_MM_YYYY);
                                        cibilEnquiryClass.setDateofBirth(dob);
                                    }
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_GENDER)) {
                                String value = hashMap.get(TAG_NAME_GENDER).toString();
                                if (!TextUtils.isEmpty(value)) {

                                    // TODO: if gender is empty then set value otherwise values already setted
                                    if (TextUtils.isEmpty(cibilEnquiryClass.getGender())) {
                                        cibilEnquiryClass.setGender(value);
                                    }
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    // TODO: check pan card, passport, driving license, voter id, aadhaar, ration card no
                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                        if (!TextUtils.isEmpty(kycType)) {
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)) {
                                                cibilEnquiryClass.setUId(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                                cibilEnquiryClass.setPanNo(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PASSPORT)) {
                                                cibilEnquiryClass.setPassportNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_DRIVING_LICENSE)) {
                                                cibilEnquiryClass.setDLNo(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)) {
                                                cibilEnquiryClass.setVoterId(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)) {
                                                cibilEnquiryClass.setRationCardNo(value);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    // TODO: Final Result - Failure case
                    data.postValue(MESSAGE_CAPTURE_APPLICANT_KYC.replace("Applicant", cibilTable.getModuleType()));
                    return;
                }

                // TODO: Address detail
                if (addressRawDataTableList != null && addressRawDataTableList.size() > 0) {
                    RawDataTable rawDataTable = addressRawDataTableList.get(0);
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setResidenceAddress1(value);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setResidenceAddress2(value);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setResidenceAddress3(value);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setResidencePincode(value);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setResidenceState(value);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
                            String value = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setResidenceCity(value);
                            }
                        }
                    }
                } else {
                    // TODO: Final Result - Failure case
                    data.postValue(MESSAGE_CAPTURE_ADDRESS_DETAIL.replace("Applicant", cibilTable.getModuleType()));
                    return;
                }
                // TODO: Loan Application
                if (loanApplicationRawDataTableList != null && loanApplicationRawDataTableList.size() > 0) {
                    RawDataTable rawDataTable = loanApplicationRawDataTableList.get(0);
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                            String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                            if (!TextUtils.isEmpty(value)) {
                                cibilEnquiryClass.setMonthlyIncome(value);
                            }
                        }
                    }
                } else {
                    // TODO: Final Result - Failure case
                    data.postValue(MESSAGE_CAPTURE_LOAN_PROPOSAL_DETAIL);
                    return;
                }
                List<RawDataTable> hunterrawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(SCREEN_NAME_HUNTER, cibilTable.getClient_id(), MODULE_TYPE_GENERATE_CIBIL);

                if (hunterrawDataTableList != null && hunterrawDataTableList.size() > 0) {

                    for (RawDataTable rawDataTable : hunterrawDataTableList) {
                        String rawData = rawDataTable.getRawdata();
                        boolean sync = rawDataTable.isSync();
                        HunterResponseDTO hunterResponseDTO = new Gson().fromJson(rawData, HunterResponseDTO.class);
                        if (hunterResponseDTO.getErrorMessage() != null && !hunterResponseDTO.getErrorMessage().equalsIgnoreCase("")) {
                            data.postValue(MESSAGE_CAPTURE_HUNTER);
                            return;
                        }

                    }
                } else {
                    data.postValue(MESSAGE_CAPTURE_HUNTER);
                    return;
                }

                // TODO: OTP Verification Check
                OTPVerificationTable otpVerificationTable = dynamicUIDao.getOTPVerificationByModuleType(cibilTable.getClient_id(), cibilTable.getModuleType());
                if (otpVerificationTable != null && otpVerificationTable.isOTPVerified()) {
                    cibilTable.setMobileNumber(otpVerificationTable.getMobileNumber());
                } else {
                    data.postValue(MESSAGE_OTP_VERIFICATION_PENDING.replace("this member", cibilTable.getName()));
                    return;
                }
                String cibilData = new Gson().toJson(cibilRequestDTO, CibilRequestDTO.class);
                String cibilData1 = cibilData.replace("|"," ");
                String cibilData2 = cibilData1.replace(">"," ");
                String cibilData3 = cibilData2.replace("<"," ");
                String cibilData4 = cibilData3.replace("("," ");
                String cibilData5 = cibilData4.replace("\\"," ");
                String cibilData6 = cibilData5.replace(")"," ");
                String cibilDatavalue = cibilData6.replace("#"," ");
                CibilRequestDTO cibilRequestResponseDTO = new Gson().fromJson(cibilDatavalue, CibilRequestDTO.class);

                String baseString = new Gson().toJson(cibilRequestResponseDTO, CibilRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).generateCIBILServiceCall
                                (cibilRequestResponseDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""),k1).
                        enqueue(new Callback<CibilResponseDTO>() {
                            @Override
                            public void onResponse(Call<CibilResponseDTO> call, Response<CibilResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        CibilResponseDTO cibilResponseDTO = response.body();
                                        if (cibilResponseDTO != null) {
                                            if (cibilResponseDTO.getResponseCode().equals("200")
                                                    && TextUtils.isEmpty(cibilResponseDTO.getErrorCode())
                                                    && TextUtils.isEmpty(cibilResponseDTO.getErrorMessage())
                                                    && cibilResponseDTO.getApiResponse() != null) {
                                                CibilResponseDTO.ApiResponseClass apiResponse = cibilResponseDTO.getApiResponse();

                                                dynamicUIDao.updateCIBILTableDataFromServer(cibilTable.getClient_id(), cibilTable.getModuleType(),
                                                        apiResponse.getDecision(), apiResponse.getScore(), apiResponse.getReason(),
                                                        apiResponse.getApplicationId(), apiResponse.getSolutionSetInstanceId(),
                                                        apiResponse.getDateofTUHit(), true);


                                                // TODO: Form CIBIL Raw data
                                                CIBILRawDataDTO cibilRawDataDTO = new CIBILRawDataDTO();
                                                cibilRawDataDTO.setCustomerId(cibilTable.getApplicationId());
                                                cibilRawDataDTO.setModeType(cibilTable.getModuleType());
                                                cibilRawDataDTO.setType(cibilTable.getModuleType());
                                                cibilRawDataDTO.setCATEGORY(cibilTable.getModuleType());
                                                if (cibilTable.getModuleType().contains(MODULE_TYPE_CO_APPLICANT)) {
                                                    try {
                                                        String type = cibilTable.getModuleType().substring(0,
                                                                cibilTable.getModuleType().length() - 1);
                                                        cibilRawDataDTO.setType(type);
                                                        cibilRawDataDTO.setCATEGORY(type);
                                                    } catch (Exception ex) {
                                                        ex.printStackTrace();
                                                    }
                                                }
                                                if (apiResponse.getCibilResponse() != null && apiResponse.getCibilResponse().getAPPLICANTSEGMENT() != null) {
                                                    CibilResponseDTO.APPLICANTSEGMENT APPLICANTSEGMENT = apiResponse.getCibilResponse().getAPPLICANTSEGMENT();

                                                    cibilRawDataDTO.setNAME(APPLICANTSEGMENT.getCONSUMERNAME1());
                                                    cibilRawDataDTO.setDob(APPLICANTSEGMENT.getDATEOFBIRTH());
                                                }
                                                cibilRawDataDTO.setSCORE(apiResponse.getScore());
                                                cibilRawDataDTO.setDecision(apiResponse.getDecision());
                                                cibilRawDataDTO.setReason(apiResponse.getReason());
                                                cibilRawDataDTO.setDisbursedAmount(apiResponse.getDisbursementAmount());
                                                cibilRawDataDTO.setOutstandingAmount(apiResponse.getOverdue());
                                                cibilRawDataDTO.setTotalInstallmentAmount(apiResponse.getTotalInstallmentAmount());
                                                cibilRawDataDTO.setCurrentBalance(apiResponse.getCurrentBalance());
                                                cibilRawDataDTO.setOverDueAmount(apiResponse.getOverdue());
                                                cibilRawDataDTO.setMaxDPD(apiResponse.getDefaultAccount());
                                                cibilRawDataDTO.setAnyDefaultInPaymentHistory(apiResponse.getAnyDefaultInPaymentHistory());
                                                cibilRawDataDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));

                                                String cibilRawDataJson = new Gson().toJson(cibilRawDataDTO, CIBILRawDataDTO.class);

                                                if (!TextUtils.isEmpty(cibilRawDataJson)) {
                                                    String ciBillScreenId = SCREEN_NO_GENERATE_CIBIL;
                                                    if (!TextUtils.isEmpty(cibilTable.getLoan_type()) && cibilTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
                                                        ciBillScreenId = SCREEN_NO_GENERATE_CIBIL_AHL;
                                                    }
                                                    if (!TextUtils.isEmpty(cibilTable.getLoan_type()) && cibilTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {
                                                        ciBillScreenId = SCREEN_NO_GENERATE_CIBIL_PHL;
                                                    }
                                                    if (!TextUtils.isEmpty(cibilTable.getLoan_type()) && cibilTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                        ciBillScreenId = SCREEN_NO_GENERATE_CIBIL;
                                                    }
                                                    RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_GENERATE_CIBIL,
                                                            cibilTable.getClient_id(), cibilTable.getModuleType());

                                                    if (rawDataTableFromDB == null) {
                                                        // TODO: Insert Raw Data Table
                                                        RawDataTable rawDataTable = new RawDataTable(cibilRawDataJson, ciBillScreenId,
                                                                SCREEN_NAME_GENERATE_CIBIL, "", cibilTable.getClient_id(), cibilTable.getLoan_type(),
                                                                cibilTable.getUserId(), cibilTable.getModuleType(), "");

                                                        dynamicUIDao.insertRawData(rawDataTable);

                                                    } else {
                                                        // TODO: Update Raw Data Table
                                                        dynamicUIDao.updateRawDataBag(ciBillScreenId, rawDataTableFromDB.getId(), cibilRawDataJson);
                                                    }

                                                }
                                                // TODO: Final Result - Success case
                                                data.postValue(MESSAGE_CIBIL_SUCCESS);
                                            } else {
                                                // TODO: Final Result - Failure case
                                                data.postValue(cibilResponseDTO.getErrorMessage());
                                            }
                                        } else {
                                            // TODO: Final Result - Failure case
                                            data.postValue(MESSAGE_CIBIL_FAILED);
                                        }
                                    } else {
                                        // TODO: Final Result - Failure case
                                        data.postValue(response.message());

                                        insertLog("generateCIBILServiceCall", response.message(), "", "", TAG, "", "", "");
                                    }

                                });
                            }

                            @Override
                            public void onFailure(Call<CibilResponseDTO> call, Throwable t) {
                                t.printStackTrace();
                                executor.execute(() -> {
                                    // TODO: Final Result - Failure case
                                    data.postValue("No Response from Server.");
                                });
                            }
                        });


            });

        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                // TODO: Final Result - Failure case
                data.postValue("No Response from Server.");
            });
        }
        return data;
    }

    public LiveData<List<DynamicUITable>> calculateLoanProposalNew(DynamicUITable dynamicUITable,
                                                                   List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            String tenure = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_TENURE);
            String cbElligibleAmt = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_CB_ELIGIBLE_LOAN_AMOUNT);

            double NBI, SALES = 0, PURCHASE = 0, BUSINESS_EXPENSES = 0, HOUSE_EXPENSES = 0, HOUSE_INCOME = 0, TOTAL_INCOME, REQUESTED_LOAN_AMOUNT = 0,
                    DISPOSAL_INCOME, AVAILABLE_SURPLUS, TOTAL_MONTHLY_INSTALLMENT = 0, TOTAL_HOUSEHOLD_EXPENSES = 0,
                    TOTAL_EXPENSES, SUGGESTED_EMI_BASED_ON_FOIR = 0, SUGGESTED_EMI_BASED_ON_CB = 0, DBR = 0, FOIR = 0;
//            double RPI = 0.002222;
            double RPI = 0.0216666667;
            int NO_OF_INSTALLMENT = 36;
            int CB_ELLIGIBLE_AMOUNT = 0;
            double RATE_OF_INTEREST = 26;


            String salesWeekly = "", salesMonthly = "", purchaseFrequency = "", operationExpense = "", houseExpenses = "", houseIncome = "",
                    paymentOfHHD = "", paymentOfBD = "", requestedLoanAmount = "";

            // TODO: CURRENT SCREEN RAW DATA
            List<RawDataTable> loanProposalSummaryRawDataTableList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            // TODO: Raw data
            RawDataTable declaredSalesRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_DECLARED_SALES_WEEKLY, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable purchaseFrequencyRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PURCHASE_ANALYSIS, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable operationExpenseRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_OPERATING_EXPENSE, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable houseExpensesRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_HOUSE_EXPENSES, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable houseIncomeRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_HOUSE_INCOME, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
            RawDataTable loanProposalApplicationRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, dynamicUITable.getClientID(), dynamicUITable.getLoanType());
//            RawDataTable summaryLoanProposalRawData=dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SUMMARY_LOAN_PROPOSAL,dynamicUITable.getClientID());

            if (declaredSalesRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(declaredSalesRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_DECLARED_SALES)) {
                        String declaredSales = hashMap.get(TAG_NAME_DECLARED_SALES).toString();
                        if (!TextUtils.isEmpty(declaredSales)) {
                            if (declaredSales.equalsIgnoreCase(DECLARED_SALES_DAILY)) {
                                if (hashMap.containsKey(TAG_NAME_AVERAGE_WEEKLY_SALES)) {
                                    salesWeekly = hashMap.get(TAG_NAME_AVERAGE_WEEKLY_SALES).toString();
                                }
                                if (hashMap.containsKey(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY)) {
                                    salesMonthly = hashMap.get(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY).toString();
                                }
                            } else if (declaredSales.equalsIgnoreCase(DECLARED_SALES_WEEKLY)) {
                                if (hashMap.containsKey(TAG_NAME_AVERAGE_MONTHLY_SALES)) {
                                    salesMonthly = hashMap.get(TAG_NAME_AVERAGE_MONTHLY_SALES).toString();
                                }
                            }
                        }

                    }
                }
            }
            if (purchaseFrequencyRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(purchaseFrequencyRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY)) {
                        purchaseFrequency = hashMap.get(TAG_NAME_MONTHLY_PURCHASE_FREQUENCY).toString();
                    }
                }
            }
            if (loanProposalApplicationRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(loanProposalApplicationRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                        requestedLoanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                    }
                }

                if (loanProposalSummaryRawDataTableList != null && loanProposalSummaryRawDataTableList.size() > 0) {
                    //nothing
                } else {
                    List<String> tenureParamList = new ArrayList<>();
                    ProductMasterTable productMasterTable = dynamicUIDao.getTenureByproductonly("Samruddhi IB Loan");
                    if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinTenor())
                            && !TextUtils.isEmpty(productMasterTable.getMaxTenor()) && !TextUtils.isEmpty(productMasterTable.getStep())) {

                        double minTenure_double = Double.parseDouble(productMasterTable.getMinTenor());
                        double maxTenuredouble = Double.parseDouble(productMasterTable.getMaxTenor());
                        double step_double = Double.parseDouble(productMasterTable.getStep());

                        int minTenure = (int) minTenure_double;
                        int maxTenure = (int) maxTenuredouble;
                        int step = (int) step_double;
                        tenureParamList.add(0, String.valueOf(minTenure));
                        int tenure_pd = minTenure;
                        for (int i = 1; tenure_pd <= maxTenure; i++) {
                            tenure_pd = tenure_pd + step;
                            tenureParamList.add(i, String.valueOf(tenure_pd));
                        }
                        if (tenureParamList.size() > 0) {
                            changeSpinnerList(tenureParamList, dynamicUITable.getScreenID(), TAG_NAME_TENURE);
                        }
                    }
                }
            }
            if (operationExpenseRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(operationExpenseRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_EXPENSES)) {
                        operationExpense = hashMap.get(TAG_NAME_EXPENSES).toString();
                    }
                }
            }
            if (houseExpensesRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(houseExpensesRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_TOTAL_FAMILY_EXPENSES)) {
                        houseExpenses = hashMap.get(TAG_NAME_TOTAL_FAMILY_EXPENSES).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_PAYMENT_OF_HH_DEBTS)) {
                        paymentOfHHD = hashMap.get(TAG_NAME_PAYMENT_OF_HH_DEBTS).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_PAYMENT_OF_BUS_DEBTS)) {
                        paymentOfBD = hashMap.get(TAG_NAME_PAYMENT_OF_BUS_DEBTS).toString();
                    }
                }
            }
            if (houseIncomeRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(houseIncomeRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_TOTAL_FAMILY_INCOME)) {
                        houseIncome = hashMap.get(TAG_NAME_TOTAL_FAMILY_INCOME).toString();
                    }
                }
            }
           /* if(summaryLoanProposalRawData !=null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(summaryLoanProposalRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_TENURE)) {
                        tenure = hashMap.get(TAG_NAME_TENURE).toString();
                    }
                }
            }*/


            /*if(!TextUtils.isEmpty(salesWeekly)){
                SALES=Integer.parseInt(salesWeekly);
            }*/
            if (!TextUtils.isEmpty(salesMonthly)) {
                SALES = SALES + Double.parseDouble(salesMonthly);
            }
            if (!TextUtils.isEmpty(purchaseFrequency)) {
                PURCHASE = Double.parseDouble(purchaseFrequency);
            }
            if (!TextUtils.isEmpty(operationExpense)) {
                BUSINESS_EXPENSES = Double.parseDouble(operationExpense);
            }
            if (!TextUtils.isEmpty(houseExpenses)) {
                HOUSE_EXPENSES = Double.parseDouble(houseExpenses);
            }
            if (!TextUtils.isEmpty(houseIncome)) {
                HOUSE_INCOME = Double.parseDouble(houseIncome);
            }
            if (!TextUtils.isEmpty(requestedLoanAmount)) {
                REQUESTED_LOAN_AMOUNT = Double.parseDouble(requestedLoanAmount);
            }
            if (!TextUtils.isEmpty(paymentOfHHD) && !TextUtils.isEmpty(paymentOfBD)) {
                TOTAL_MONTHLY_INSTALLMENT = Double.parseDouble(paymentOfHHD) + Double.parseDouble(paymentOfBD);
            }
            if (!TextUtils.isEmpty(tenure)) {
                NO_OF_INSTALLMENT = Integer.parseInt(tenure);
            }
            if (!TextUtils.isEmpty(cbElligibleAmt)) {
                CB_ELLIGIBLE_AMOUNT = Integer.parseInt(cbElligibleAmt);
                SUGGESTED_EMI_BASED_ON_CB = AppConstant.calculateEMI(CB_ELLIGIBLE_AMOUNT, NO_OF_INSTALLMENT, RATE_OF_INTEREST);
            } else {
                CB_ELLIGIBLE_AMOUNT = 100000;
                SUGGESTED_EMI_BASED_ON_CB = AppConstant.calculateEMI(CB_ELLIGIBLE_AMOUNT, NO_OF_INSTALLMENT, RATE_OF_INTEREST);
            }


            // TODO: Formula
            NBI = SALES - PURCHASE - BUSINESS_EXPENSES; // TODO: Sales-Purchase-Business Expenses
            TOTAL_INCOME = HOUSE_INCOME + NBI; // TODO: total family income + NBI
            TOTAL_EXPENSES = HOUSE_EXPENSES;
            TOTAL_HOUSEHOLD_EXPENSES = HOUSE_EXPENSES + TOTAL_MONTHLY_INSTALLMENT;
//            DISPOSAL_INCOME = TOTAL_INCOME - TOTAL_HOUSEHOLD_EXPENSES;
            DISPOSAL_INCOME = TOTAL_INCOME - TOTAL_EXPENSES;
            SUGGESTED_EMI_BASED_ON_FOIR = ((TOTAL_INCOME / 2)) - TOTAL_MONTHLY_INSTALLMENT;


            /*P = (Eligible EMI * (((Rate per installment + 1) ^ No of Instalments) - 1)) / (Rate per installment * ((Rate per installment + 1) ^ No of Instalments))*/
//            double SUGGESTED_LOAN_BASED_ON_FOIR = (SUGGESTED_EMI_BASED_ON_FOIR *  ((Math.pow((RPI + 1) , NO_OF_INSTALLMENT))- 1)) / (RPI * (Math.pow((RPI + 1) , NO_OF_INSTALLMENT)));
            double SUGGESTED_LOAN_BASED_ON_FOIR = SUGGESTED_EMI_BASED_ON_FOIR * ((Math.pow(RPI + 1, NO_OF_INSTALLMENT) - 1) / (RPI * Math.pow(RPI + 1, NO_OF_INSTALLMENT)));
//            double SUGGESTED_LOAN_BASED_ON_FOIR = (SUGGESTED_EMI_BASED_ON_FOIR * ((Math.pow((RPI + 1) , NO_OF_INSTALLMENT)) - 1) / (RPI* ((Math.pow((RPI+ 1) , NO_OF_INSTALLMENT));
//            double SUGGESTED_EMI_BASED_ON_CB=((RATE_OF_INTEREST/100)/12) * NO_OF_INSTALLMENT * CB_ELLIGIBLE_AMOUNT;
            double SUGGESTED_EMI_BASED_ON_DSCR = (DISPOSAL_INCOME * 100) / 150;
            double SUGGESTED_EMI_BASED_ON_CFA = 0;
            double FINAL_SUGGESTED_EMI = 0;
            double LOAN_RECOMMENDED_AMOUNT = 0;


            SUGGESTED_EMI_BASED_ON_CB = Math.round(SUGGESTED_EMI_BASED_ON_CB);
            SUGGESTED_EMI_BASED_ON_DSCR = Math.round(SUGGESTED_EMI_BASED_ON_DSCR);
            SUGGESTED_EMI_BASED_ON_FOIR = Math.round(SUGGESTED_EMI_BASED_ON_FOIR);
            SUGGESTED_LOAN_BASED_ON_FOIR = Math.round(SUGGESTED_LOAN_BASED_ON_FOIR);

            if (SUGGESTED_EMI_BASED_ON_FOIR > SUGGESTED_EMI_BASED_ON_DSCR) {
                SUGGESTED_EMI_BASED_ON_CFA = SUGGESTED_EMI_BASED_ON_DSCR;
            } else {
                SUGGESTED_EMI_BASED_ON_CFA = SUGGESTED_EMI_BASED_ON_FOIR;
            }

            double SUGGESTED_LOAN_AMOUNT_BASED_ON_CFA = (SUGGESTED_EMI_BASED_ON_CFA * ((Math.pow((RPI + 1), NO_OF_INSTALLMENT)) - 1)) / (RPI * (Math.pow((RPI + 1), NO_OF_INSTALLMENT)));

            if (CB_ELLIGIBLE_AMOUNT > SUGGESTED_LOAN_AMOUNT_BASED_ON_CFA) {
                LOAN_RECOMMENDED_AMOUNT = SUGGESTED_LOAN_AMOUNT_BASED_ON_CFA;
            } else {
                LOAN_RECOMMENDED_AMOUNT = CB_ELLIGIBLE_AMOUNT;
            }
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NET_BUSINESS_INCOME, dynamicUITable.getScreenName(), String.valueOf(NBI), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TOTAL_HOUSEHOLD_INCOME, dynamicUITable.getScreenName(), String.valueOf(HOUSE_INCOME), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TOTAL_INCOME, dynamicUITable.getScreenName(), String.valueOf(TOTAL_INCOME), false);

//            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_HOUSEHOLD_EXPENSES, dynamicUITable.getScreenName(), String.valueOf(TOTAL_EXPENSES),false);
//            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_IN_SUMMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), String.valueOf(TOTAL_MONTHLY_INSTALLMENT),false);
//            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TOTAL_HOUSEHOLD_EXPENSES, dynamicUITable.getScreenName(), String.valueOf(TOTAL_HOUSEHOLD_EXPENSES),false);

//             dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_HOUSEHOLD_EXPENSES, dynamicUITable.getScreenName(), String.valueOf(TOTAL_EXPENSES),false);
            dynamicUIDao.EnableOrDisableByFieldTAGAndScreenName(dynamicUITable.getScreenName(), false, TAG_NAME_HOUSEHOLD_EXPENSES, "", true);
//            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_IN_SUMMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), String.valueOf(TOTAL_MONTHLY_INSTALLMENT),false);
            dynamicUIDao.EnableOrDisableByFieldTAGAndScreenName(dynamicUITable.getScreenName(), false, TAG_NAME_TOTAL_MONTHLY_INSTALLMENT_IN_SUMMMARY_LOAN_SCREEN, "", true);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TOTAL_HOUSEHOLD_EXPENSES, dynamicUITable.getScreenName(), String.valueOf(TOTAL_EXPENSES), false);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_DISPOSABLE_INCOME_IN_SUMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), String.valueOf(DISPOSAL_INCOME), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_EMI_BASED_ON_FOIR, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI_BASED_ON_FOIR), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_LOAN_AMOUNT_BASED_ON_FOIR, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_LOAN_BASED_ON_FOIR), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_EMI_BASED_ON_CB_ELIGIBLE_AMOUNT, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI_BASED_ON_CB), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_EMI_BASED_ON_DSCR, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI_BASED_ON_DSCR), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_EMI_BASED_ON_CFA, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI_BASED_ON_CFA), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_LOAN_AMOUNT_BASED_ON_CFA, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_LOAN_AMOUNT_BASED_ON_CFA), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_LOAN_RECOMMENDED_AMOUNT, dynamicUITable.getScreenName(), String.valueOf(LOAN_RECOMMENDED_AMOUNT), false);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_ROI, dynamicUITable.getScreenName(), String.valueOf(RATE_OF_INTEREST), false);

            if (DISPOSAL_INCOME < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_DISPOSABLE_INCOME_IN_SUMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), false, "Disposable Income Should Not Be Negative");
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_DISPOSABLE_INCOME_IN_SUMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), true, "");
            }

            if (LOAN_RECOMMENDED_AMOUNT < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_RECOMMENDED_AMOUNT, dynamicUITable.getScreenName(), false, "Loan Recommended Amount Should Not Be Negative");
            } else {
                if (LOAN_RECOMMENDED_AMOUNT > REQUESTED_LOAN_AMOUNT) {
                    dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_RECOMMENDED_AMOUNT, dynamicUITable.getScreenName(), false, " Sanction Loan Amount is greater than requested amount");
                } else {
                    if (LOAN_RECOMMENDED_AMOUNT < IL_MINIMUM_LOAN_AMOUNT) {
                        dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_RECOMMENDED_AMOUNT, dynamicUITable.getScreenName(), false, " Loan Recommended Amount Should Not Be Less Than " + IL_MINIMUM_LOAN_AMOUNT);
                    } else {
                        dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_RECOMMENDED_AMOUNT, dynamicUITable.getScreenName(), true, "");
                    }
                }
            }

            if (NBI < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_NET_BUSINESS_INCOME, dynamicUITable.getScreenName(), false, "Net Business Income Should Not Be Negative");
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_NET_BUSINESS_INCOME, dynamicUITable.getScreenName(), true, "");
                if (HOUSE_INCOME > NBI) {
                    dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_TOTAL_HOUSEHOLD_INCOME, dynamicUITable.getScreenName(), false, "Total Household Income Should Not Be Greater Than NBI");
                } else {
                    dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_TOTAL_HOUSEHOLD_INCOME, dynamicUITable.getScreenName(), true, "");
                }
            }

            if (SUGGESTED_EMI_BASED_ON_FOIR < SUGGESTED_EMI_BASED_ON_CB && SUGGESTED_EMI_BASED_ON_FOIR < SUGGESTED_EMI_BASED_ON_DSCR) {
                FINAL_SUGGESTED_EMI = SUGGESTED_EMI_BASED_ON_FOIR;
            }
            if (SUGGESTED_EMI_BASED_ON_CB < SUGGESTED_EMI_BASED_ON_DSCR && SUGGESTED_EMI_BASED_ON_CB < SUGGESTED_EMI_BASED_ON_FOIR) {
                FINAL_SUGGESTED_EMI = SUGGESTED_EMI_BASED_ON_CB;
            }
            if (SUGGESTED_EMI_BASED_ON_DSCR < SUGGESTED_EMI_BASED_ON_CB && SUGGESTED_EMI_BASED_ON_DSCR < SUGGESTED_EMI_BASED_ON_FOIR) {
                FINAL_SUGGESTED_EMI = SUGGESTED_EMI_BASED_ON_DSCR;
            }

            AVAILABLE_SURPLUS = DISPOSAL_INCOME - FINAL_SUGGESTED_EMI;
            DBR = (DISPOSAL_INCOME / FINAL_SUGGESTED_EMI) * 100;

            FOIR = (((FINAL_SUGGESTED_EMI + TOTAL_MONTHLY_INSTALLMENT)) / TOTAL_INCOME);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SUGGESTED_EMI, dynamicUITable.getScreenName(), String.valueOf(FINAL_SUGGESTED_EMI), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_AVAILABLE_SURPLUS_IN_SUMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), String.valueOf(AVAILABLE_SURPLUS), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_DBR, dynamicUITable.getScreenName(), String.valueOf(DBR), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_FOIR, dynamicUITable.getScreenName(), String.valueOf(FOIR), false);

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }
    public LiveData<List<DynamicUITable>> calculateLoanProposalFinalPDNew
            (DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList, boolean loanAmountChanges) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first
            /* FORMULA
             * Rate per installment = 26/1200
             * P = (Eligible EMI * (((Rate per installment + 1) ^ No of Instalments) - 1)) / (Rate per installment * ((Rate per installment + 1) ^ No of Instalments))
             *
             *  PROCESSING FEE GST = 18 PERCENT OF ( 3 PERCENT OF LOAN AMOUNT )
             * PROCESSING FEE= 3 PERCENT OF LOAN AMOUNT + PROCESSING_FEE_GST
             *  INSURANCE  = (18.24 * ( LOAN AMOUNT /1000 ) ) * 2
             * INSURANCE FEE GST = 18 PERCENT OF ( INSURANCE  )
             * INSURANCE FEE = INSURANCE +   INSURANCE FEE GST ;
             * NET DISBURSAL = LOAN AMOUNT -PROCESSING FEE -INSURANCE FEE
             *
             * */

            double SUGGESTED_EMI = 0;
            double THREE_PERCENT_OF_LOAN_AMOUNT = 0;
            double PROCESSING_FEE_GST = 0;
            double INSURANCE_FEE_GST = 0;
            double PROCESSING_FEE = 0;
            double INSURANCE = 0;
            double INSURANCE_FEE = 0;
            double NET_DISBURSAL = 0;
            double DBR = 0;
            double FOIR = 0;
            double AVAILABLE_SURPLUS = 0;
            double DISPOSAL_INCOME = 0;
            double TOTAL_INCOME = 0;
            double TOTAL_MONTHLY_INSTALLMENT = 0;
//            double RPI = 0.002222;
            double RPI = 0.0216666667;
            int NO_OF_INSTALLMENT = 0;
            double ELLIGIBLE_LOAN_AMOUNT = 0;
            double RATE_OF_INTEREST = 26;
            double INSURANCE_RATE_FOR_2_YEAR = 12.16;
            double INSURANCE_RATE_FOR_3_YEAR = 18.24;
            double INSURANCE_RATE_FOR_YEAR = 0;

            String suggestedEMI = "", term = "", loanAmount = "", disposableIncome = "", totalIncome = "", paymentOfHHD = "", paymentOfBD = "";

            RawDataTable loanProposalSummaryRawData = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_SUMMARY_LOAN_PROPOSAL,
                    dynamicUITable.getClientID(),
                    dynamicUITable.getLoanType());

            RawDataTable houseExpensesRawData = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_HOUSE_EXPENSES,
                    dynamicUITable.getClientID(),
                    dynamicUITable.getLoanType());

            if (loanProposalSummaryRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(loanProposalSummaryRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_SUGGESTED_EMI)) {
                        suggestedEMI = hashMap.get(TAG_NAME_SUGGESTED_EMI).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_TENURE)) {
                        term = hashMap.get(TAG_NAME_TENURE).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_LOAN_RECOMMENDED_AMOUNT)) {
                        loanAmount = hashMap.get(TAG_NAME_LOAN_RECOMMENDED_AMOUNT).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_DISPOSABLE_INCOME_IN_SUMMARY_LOAN_SCREEN)) {
                        disposableIncome = hashMap.get(TAG_NAME_DISPOSABLE_INCOME_IN_SUMMARY_LOAN_SCREEN).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_TOTAL_INCOME)) {
                        totalIncome = hashMap.get(TAG_NAME_TOTAL_INCOME).toString();
                    }
                }
            }

            if (houseExpensesRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(houseExpensesRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_PAYMENT_OF_HH_DEBTS)) {
                        paymentOfHHD = hashMap.get(TAG_NAME_PAYMENT_OF_HH_DEBTS).toString();
                    }
                    if (hashMap.containsKey(TAG_NAME_PAYMENT_OF_BUS_DEBTS)) {
                        paymentOfBD = hashMap.get(TAG_NAME_PAYMENT_OF_BUS_DEBTS).toString();
                    }
                }
            }

            if (!TextUtils.isEmpty(paymentOfHHD) && !TextUtils.isEmpty(paymentOfBD)) {
                TOTAL_MONTHLY_INSTALLMENT = Double.parseDouble(paymentOfHHD) + Double.parseDouble(paymentOfBD);
            }

            if (!TextUtils.isEmpty(suggestedEMI)) {
                SUGGESTED_EMI = SUGGESTED_EMI + Double.parseDouble(suggestedEMI);
                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSTALLMENT_IN_FINAL_LOAN_SUMMARY_SCREEN,
                        dynamicUITable.getScreenName(), suggestedEMI, false);
            }
            if (!TextUtils.isEmpty(term)) {
                dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_TERM,
                        dynamicUITable.getScreenName(), term, false);
                NO_OF_INSTALLMENT = Integer.valueOf(term);
                if (NO_OF_INSTALLMENT == 24) {
                    INSURANCE_RATE_FOR_YEAR = INSURANCE_RATE_FOR_2_YEAR;
                } else if (NO_OF_INSTALLMENT == 36) {
                    INSURANCE_RATE_FOR_YEAR = INSURANCE_RATE_FOR_3_YEAR;
                }
            }
            if (!TextUtils.isEmpty(loanAmount)) {
                ELLIGIBLE_LOAN_AMOUNT = Double.valueOf(loanAmount);
                if (loanAmountChanges) {
                    ELLIGIBLE_LOAN_AMOUNT = Double.valueOf(dynamicUITable.getValue());
                }
                SUGGESTED_EMI = AppConstant.calculateEMI((int) ELLIGIBLE_LOAN_AMOUNT, NO_OF_INSTALLMENT, RATE_OF_INTEREST);
            }
            if (!TextUtils.isEmpty(disposableIncome)) {
                DISPOSAL_INCOME = Double.valueOf(disposableIncome);
            }
            if (!TextUtils.isEmpty(totalIncome)) {
                TOTAL_INCOME = Double.valueOf(totalIncome);
            }

            THREE_PERCENT_OF_LOAN_AMOUNT = ELLIGIBLE_LOAN_AMOUNT * 0.03;
            PROCESSING_FEE_GST = THREE_PERCENT_OF_LOAN_AMOUNT * 0.18;
            PROCESSING_FEE = THREE_PERCENT_OF_LOAN_AMOUNT + PROCESSING_FEE_GST;
            INSURANCE = ((INSURANCE_RATE_FOR_YEAR) * ((ELLIGIBLE_LOAN_AMOUNT / 1000))) * 2;
            INSURANCE_FEE_GST = INSURANCE * 0.18;
            INSURANCE_FEE = INSURANCE + INSURANCE_FEE_GST;
            NET_DISBURSAL = ELLIGIBLE_LOAN_AMOUNT - PROCESSING_FEE - INSURANCE_FEE;
            AVAILABLE_SURPLUS = DISPOSAL_INCOME - SUGGESTED_EMI;
            DBR = (DISPOSAL_INCOME / SUGGESTED_EMI) * 100;
            FOIR = (((SUGGESTED_EMI + TOTAL_MONTHLY_INSTALLMENT)) / TOTAL_INCOME) * 100;

            PROCESSING_FEE = Math.round(PROCESSING_FEE);
            INSURANCE_FEE = Math.round(INSURANCE_FEE);
            NET_DISBURSAL = Math.round(NET_DISBURSAL);
            ELLIGIBLE_LOAN_AMOUNT = Math.round(ELLIGIBLE_LOAN_AMOUNT);
            SUGGESTED_EMI = Math.round(SUGGESTED_EMI);
            AVAILABLE_SURPLUS = Math.round(AVAILABLE_SURPLUS);
            DBR = Math.round(DBR);
            FOIR = Math.round(FOIR);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_AVAILABLE_SURPLUS_IN_SUMMARY_LOAN_SCREEN, dynamicUITable.getScreenName(), String.valueOf(AVAILABLE_SURPLUS), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_DBR, dynamicUITable.getScreenName(), String.valueOf(DBR), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_FOIR, dynamicUITable.getScreenName(), String.valueOf(FOIR), false);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_PROCESSING_FEE, dynamicUITable.getScreenName(), String.valueOf(PROCESSING_FEE), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSURANCE, dynamicUITable.getScreenName(), String.valueOf(INSURANCE_FEE), false);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_NET_DISBURSAL, dynamicUITable.getScreenName(), String.valueOf(NET_DISBURSAL), false);

            int iSelectedAmount = 0;
            int iMaxAmount = 0;
            int iMinAmount = 0;
            try {
                iMinAmount = IL_MINIMUM_LOAN_AMOUNT;
                double dMaxAmount = Double.valueOf(loanAmount);
                iMaxAmount = (int) dMaxAmount;
                iSelectedAmount = (int) ELLIGIBLE_LOAN_AMOUNT;
                int amount = iMinAmount;
                int tempMaxAmount = 0;
                while (amount <= iMaxAmount) {
                    tempMaxAmount = amount;
                    amount = amount + 5000;
                    if (amount > iMaxAmount) {
                        iMaxAmount = tempMaxAmount;
                        break;
                    }
                }

                if (iMinAmount == iMaxAmount) {
                    iMaxAmount = iMaxAmount + 5000;
                    iSelectedAmount = iMaxAmount;
                }

                if (iSelectedAmount > iMaxAmount) {
                    iSelectedAmount = iMaxAmount;
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

// TODO: MINIMUM VALUE
            dynamicUIDao.updateDynamicTableMINvalueAndNonEditable(TAG_NAME_LOAN_REQUESTED_AMOUNT,
                    dynamicUITable.getScreenName(), String.valueOf(IL_MINIMUM_LOAN_AMOUNT), true);
// TODO: MAXIMUM VALUE
            dynamicUIDao.updateDynamicTableMAXValueAndNonEditable(TAG_NAME_LOAN_REQUESTED_AMOUNT, dynamicUITable.getScreenName(),
                    String.valueOf(iMaxAmount), true);
// TODO: SELECTED AMOUNT
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_LOAN_REQUESTED_AMOUNT, dynamicUITable.getScreenName(),
                    String.valueOf(Math.round(iSelectedAmount)), true);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_INSTALLMENT_IN_FINAL_LOAN_SUMMARY_SCREEN, dynamicUITable.getScreenName(), String.valueOf(SUGGESTED_EMI), false);

            if (ELLIGIBLE_LOAN_AMOUNT < IL_MINIMUM_LOAN_AMOUNT) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_REQUESTED_AMOUNT, dynamicUITable.getScreenName(), false, "Loan amount should be greater than " + IL_MINIMUM_LOAN_AMOUNT);
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_REQUESTED_AMOUNT, dynamicUITable.getScreenName(), true, "");
            }

            if (ELLIGIBLE_LOAN_AMOUNT > IL_MAXIMUM_LOAN_AMOUNT) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_REQUESTED_AMOUNT, dynamicUITable.getScreenName(), false, "Loan amount should be less than " + IL_MAXIMUM_LOAN_AMOUNT);
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_LOAN_REQUESTED_AMOUNT, dynamicUITable.getScreenName(), true, "");
            }

            if (NET_DISBURSAL < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_NET_DISBURSAL, dynamicUITable.getScreenName(), false, "Net Disbursal Should Not Be Negative");
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_NET_DISBURSAL, dynamicUITable.getScreenName(), true, "");
            }
            if (SUGGESTED_EMI < 0) {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_INSTALLMENT_IN_FINAL_LOAN_SUMMARY_SCREEN, dynamicUITable.getScreenName(), false, "Installment Should Not Be Negative");
            } else {
                dynamicUIDao.updateIsValidAndErrorMessage(TAG_NAME_INSTALLMENT_IN_FINAL_LOAN_SUMMARY_SCREEN, dynamicUITable.getScreenName(), true, "");
            }

            data.postValue(dynamicUIDao.loadUpdatedDataNew(dynamicUITableList.get(0).getScreenID()));
        });
        return data;
    }

    public LiveData<List<DynamicUITable>> calculateAvgSales
            (List<DynamicUITable> dynamicUITableList, DynamicUITable dynamicUITable,
             String tag, String tagToDisplayResult, int totalNo) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: update list first

            if (tag.equalsIgnoreCase(TAG_NAME_NO_OF_GOOD_DAYS_IN_A_WEEK)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_REGULAR_DAYS_IN_A_WEEK)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_BAD_DAYS_IN_A_WEEK)
                    || tag.equalsIgnoreCase(TAG_NAME_GOOD_DAILY)
                    || tag.equalsIgnoreCase(TAG_NAME_REGULAR_DAILY)
                    || tag.equalsIgnoreCase(TAG_NAME_BAD_DAILY)) {

                // TODO: AVERAGE DAILY SALES

                String goodDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_GOOD_DAYS_IN_A_WEEK);
                String regDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_REGULAR_DAYS_IN_A_WEEK);
                String badDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_BAD_DAYS_IN_A_WEEK);

                String goodDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_GOOD_DAILY);
                String regDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_REGULAR_DAILY);
                String badDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_BAD_DAILY);

                int totalNoFromDB = 0;
                if (!TextUtils.isEmpty(goodDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(goodDays);
                }
                if (!TextUtils.isEmpty(regDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(regDays);
                }
                if (!TextUtils.isEmpty(badDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(badDays);
                }
                if (totalNoFromDB > totalNo) {
                    DynamicUITable dynamicUITable1 = dynamicUIDao.getRowByTAGandScreen(tag, dynamicUITable.getScreenID());
                    if (dynamicUITable1 != null) {
                        dynamicUIDao.updateIsValid(tag, dynamicUITable.getScreenID(), false);
                        dynamicUIDao.updateErrorMessage(tag, dynamicUITable.getScreenID(), ERROR_MSG_NO_OF_DAYS);
                    }
                } else {
                    DynamicUITable dynamicUITable1 = dynamicUIDao.getRowByTAGandScreen(tag, dynamicUITable.getScreenID());
                    if (dynamicUITable1 != null) {
                        dynamicUIDao.updateIsValid(tag, dynamicUITable.getScreenID(), true);
                    }
                }

                int totalAvgSalesWeekly = 0, totalAvgSalesMonthly;
                if (!TextUtils.isEmpty(goodDays) && !TextUtils.isEmpty(goodDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(goodDays) * Integer.parseInt(goodDayDailySales));
                }
                if (!TextUtils.isEmpty(regDays) && !TextUtils.isEmpty(regDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(regDays) * Integer.parseInt(regDayDailySales));
                }
                if (!TextUtils.isEmpty(badDays) && !TextUtils.isEmpty(badDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(badDays) * Integer.parseInt(badDayDailySales));

                }

                DynamicUITable avgWeeklySales = dynamicUIDao.getRowByTAGandScreen(tagToDisplayResult, dynamicUITable.getScreenID());
                if (avgWeeklySales != null) {
                    dynamicUIDao.updateDynamicTableValue(tagToDisplayResult, dynamicUITable.getScreenID(), String.valueOf(totalAvgSalesWeekly));
                }

                String updatedAvgWeeklySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), tagToDisplayResult);
                DynamicUITable avgMonthlySales = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY,
                        dynamicUITable.getScreenID());

                if (avgMonthlySales != null && !TextUtils.isEmpty(updatedAvgWeeklySales)) {
                    totalAvgSalesMonthly = 4 * Integer.valueOf(updatedAvgWeeklySales);
                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY, dynamicUITable.getScreenID(),
                            String.valueOf(totalAvgSalesMonthly));
                }

                List<String> tagNameList = new ArrayList<>();
                tagNameList.add(tagToDisplayResult);
                tagNameList.add(TAG_NAME_AVERGAE_MONTHLY_SALES_FOR_DAILY);
                tagNameList.add(tag);
                data.postValue(dynamicUIDao.getDynamicTableByTagNames(dynamicUITableList.get(0).getScreenID(), tagNameList));
            } else if (tag.equalsIgnoreCase(TAG_NAME_GOOD_WEEKLY)
                    || tag.equalsIgnoreCase(TAG_NAME_REGULAR_WEEKLY)
                    || tag.equalsIgnoreCase(TAG_NAME_BAD_WEEKLY)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_GOOD_WEEKS_IN_A_MONTH)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_REGULAR_WEEKS_IN_A_MONTH)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_BAD_WEEKS_IN_A_MONTH)) {

                // TODO: AVERAGE MONTHLY SALES

                String goodDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_GOOD_WEEKS_IN_A_MONTH);
                String regDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_REGULAR_WEEKS_IN_A_MONTH);
                String badDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_BAD_WEEKS_IN_A_MONTH);

                String goodDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_GOOD_WEEKLY);
                String regDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_REGULAR_WEEKLY);
                String badDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_BAD_WEEKLY);

                int totalNoFromDB = 0;
                if (!TextUtils.isEmpty(goodDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(goodDays);
                }
                if (!TextUtils.isEmpty(regDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(regDays);
                }
                if (!TextUtils.isEmpty(badDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(badDays);
                }
                if (totalNoFromDB > totalNo) {
                    DynamicUITable dynamicUITable1 = dynamicUIDao.getRowByTAGandScreen(tag, dynamicUITable.getScreenID());
                    if (dynamicUITable1 != null) {
                        dynamicUIDao.updateIsValid(tag, dynamicUITable.getScreenID(), false);
                        dynamicUIDao.updateErrorMessage(tag, dynamicUITable.getScreenID(), ERROR_MSG_NO_OF_WEEKS);
                    }
                } else {
                    DynamicUITable dynamicUITable1 = dynamicUIDao.getRowByTAGandScreen(tag, dynamicUITable.getScreenID());
                    if (dynamicUITable1 != null) {
                        dynamicUIDao.updateIsValid(tag, dynamicUITable.getScreenID(), true);
                    }
                }

                int totalAvgSalesWeekly = 0;
                if (!TextUtils.isEmpty(goodDays) && !TextUtils.isEmpty(goodDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(goodDays) * Integer.parseInt(goodDayDailySales));
                }
                if (!TextUtils.isEmpty(regDays) && !TextUtils.isEmpty(regDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(regDays) * Integer.parseInt(regDayDailySales));
                }
                if (!TextUtils.isEmpty(badDays) && !TextUtils.isEmpty(badDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(badDays) * Integer.parseInt(badDayDailySales));
                }

                DynamicUITable avgWeeklySales = dynamicUIDao.getRowByTAGandScreen(tagToDisplayResult, dynamicUITable.getScreenID());
                if (avgWeeklySales != null) {
                    dynamicUIDao.updateDynamicTableValue(tagToDisplayResult, dynamicUITable.getScreenID(), String.valueOf(totalAvgSalesWeekly));
                }
                List<String> tagNameList = new ArrayList<>();
                tagNameList.add(tagToDisplayResult);
                tagNameList.add(tag);
                data.postValue(dynamicUIDao.getDynamicTableByTagNames(dynamicUITableList.get(0).getScreenID(), tagNameList));
            } else if (tag.equalsIgnoreCase(TAG_NAME_GOOD_YEARLY)
                    || tag.equalsIgnoreCase(TAG_NAME_REGULAR_YEARLY)
                    || tag.equalsIgnoreCase(TAG_NAME_BAD_YEARLY)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_GOOD_MONTHS_IN_AN_YEAR)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_REGULAR_MONTHS_IN_AN_YEAR)
                    || tag.equalsIgnoreCase(TAG_NAME_NO_OF_BAD_MONTHS_IN_AN_YEAR)) {

                // TODO: AVERAGE YEARLY SALES

                String goodDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_GOOD_MONTHS_IN_AN_YEAR);
                String regDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_REGULAR_MONTHS_IN_AN_YEAR);
                String badDays = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_NO_OF_BAD_MONTHS_IN_AN_YEAR);

                String goodDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_GOOD_YEARLY);
                String regDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_REGULAR_YEARLY);
                String badDayDailySales = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_BAD_YEARLY);

                int totalNoFromDB = 0;
                if (!TextUtils.isEmpty(goodDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(goodDays);
                }
                if (!TextUtils.isEmpty(regDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(regDays);
                }
                if (!TextUtils.isEmpty(badDays)) {
                    totalNoFromDB = totalNoFromDB + Integer.parseInt(badDays);
                }
                if (totalNoFromDB > totalNo) {
                    DynamicUITable dynamicUITable1 = dynamicUIDao.getRowByTAGandScreen(tag, dynamicUITable.getScreenID());
                    if (dynamicUITable1 != null) {
                        dynamicUIDao.updateIsValid(tag, dynamicUITable.getScreenID(), false);
                        dynamicUIDao.updateErrorMessage(tag, dynamicUITable.getScreenID(), ERROR_MSG_NO_OF_MONTHS);
                    }
                } else {
                    DynamicUITable dynamicUITable1 = dynamicUIDao.getRowByTAGandScreen(tag, dynamicUITable.getScreenID());
                    if (dynamicUITable1 != null) {
                        dynamicUIDao.updateIsValid(tag, dynamicUITable.getScreenID(), true);
                    }
                }

                int totalAvgSalesWeekly = 0;
                if (!TextUtils.isEmpty(goodDays) && !TextUtils.isEmpty(goodDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(goodDays) * Integer.parseInt(goodDayDailySales));
                }
                if (!TextUtils.isEmpty(regDays) && !TextUtils.isEmpty(regDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(regDays) * Integer.parseInt(regDayDailySales));
                }
                if (!TextUtils.isEmpty(badDays) && !TextUtils.isEmpty(badDayDailySales)) {
                    totalAvgSalesWeekly = totalAvgSalesWeekly + (Integer.parseInt(badDays) * Integer.parseInt(badDayDailySales));
                }

                DynamicUITable avgWeeklySales = dynamicUIDao.getRowByTAGandScreen(tagToDisplayResult, dynamicUITable.getScreenID());
                if (avgWeeklySales != null) {
                    dynamicUIDao.updateDynamicTableValue(tagToDisplayResult, dynamicUITable.getScreenID(), String.valueOf(totalAvgSalesWeekly));
                }

                List<String> tagNameList = new ArrayList<>();
                tagNameList.add(tagToDisplayResult);
                tagNameList.add(tag);
                data.postValue(dynamicUIDao.getDynamicTableByTagNames(dynamicUITableList.get(0).getScreenID(), tagNameList));
            }

        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }

    public LiveData<List<DynamicUITable>> changePinCodeFields
            (List<PincodeParameterInfo> parameterInfoList, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(parameterInfoList.get(0).getscreenName()) != null);
            if (dataExist) {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: Need to uncomment
                for (PincodeParameterInfo parameterInfo : parameterInfoList) {
                    dynamicUIDao.changePinCodeFields(parameterInfo.getscreenName(), parameterInfo.isVisibilty(),
                            parameterInfo.getFieldName(), parameterInfo.getValue(), parameterInfo.isEnabled(),
                            parameterInfo.getFieldType(), DataTypeConverter.someObjectListToString(parameterInfo.getParamvalues()));
                }

                data.postValue(dynamicUIDao.loadUpdatedDataNew(parameterInfoList.get(0).getscreenName()));
            }
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }

    public LiveData<List<DynamicUITable>> changeBankDetailFields
            (List<BankDetailsParameterInfo> parameterInfoList, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(parameterInfoList.get(0).getScreenName()) != null);
            if (dataExist) {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: Need to uncomment
                for (BankDetailsParameterInfo parameterInfo : parameterInfoList) {
                    dynamicUIDao.changePinCodeFields(parameterInfo.getScreenName(), parameterInfo.isVisibilty(),
                            parameterInfo.getFieldName(), parameterInfo.getValue(), parameterInfo.isEnabled(),
                            parameterInfo.getFieldType(), DataTypeConverter.someObjectListToString(parameterInfo.getParamvalues()));
                }

                data.postValue(dynamicUIDao.loadUpdatedDataNew(parameterInfoList.get(0).getScreenName()));
            }
        });
//        return  dynamicUIDao.loadUpdatedData(parameterInfoList.get(0).getscreenName());
        return data;
    }

    public LiveData<List<DynamicUITable>> changeSpinnerList(String FieldTag, String
            spinnerItemList, String screenNo, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTableBasedOnScreen(screenNo) != null);
            if (dataExist) {
                dynamicUIDao.updateDynamicUITable(dynamicUITableList);
                dynamicUIDao.changeSpinnerList(FieldTag, spinnerItemList, screenNo);
                data.postValue(dynamicUIDao.loadUpdatedDataNew(screenNo));//data update
            }
        });
        return data;
//        return  dynamicUIDao.loadUpdatedData(screenNo);
    }

    public LiveData<LocationTable> insertGPS(LocationTable locationTable) {
        final MutableLiveData<LocationTable> data = new MutableLiveData<>();
        executor.execute(() -> {
//            boolean dataExist = (dynamicUIDao.loadGPS() != null);
//            if (dataExist) {
            dynamicUIDao.insertGPS(locationTable);
            data.postValue(dynamicUIDao.loadGPS());
//            }
        });
        return data;
    }

    public LiveData<NetworkStrengthTable> insertNetworkStrength(NetworkStrengthTable networkStrengthTable) {
        final MutableLiveData<NetworkStrengthTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.insertNetworkStrengthTable(networkStrengthTable);
            data.postValue(dynamicUIDao.loadNetworkStrengthTable());
        });
        return data;
    }

    public LiveData<List<GroupTable>> deleteMembersInGroupTable(List<MasterTable> masterTableList, String groupName, String groupId) {
        final MutableLiveData<List<GroupTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            for (MasterTable masterTable : masterTableList) {

                dynamicUIDao.deleteGroupTable(masterTable.getClientId());
            }

            List<GroupTable> groupTableList = dynamicUIDao.getGroupTableListByGroupId(masterTableList.get(0).getCenterId(),
                    masterTableList.get(0).getLoan_type(), groupId);

            data.postValue(groupTableList);

        });
        return data;
    }

    public LiveData<List<GroupTable>> insertAndDeleteGroupTableListByMemberId(List<GroupTable> groupTableList) {
        final MutableLiveData<List<GroupTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (groupTableList != null && groupTableList.size() > 0) {

              /* for(GroupTable groupTable: groupTableList) {
                   dynamicUIDao.insertAndDeleteGroupTable(groupTable,groupTable.getMemberId());
               }*/

                dynamicUIDao.updateGroupTableList(groupTableList);

                List<GroupTable> groupTableListFromDb = dynamicUIDao.getGroupTableList(groupTableList.get(0).getCenterId(),
                        groupTableList.get(0).getLoan_type());
                data.postValue(groupTableListFromDb);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<List<CGTAttendanceTable>> updateCGTTableAttendance(List<CGTAttendanceTable> cgtAttendanceTableList,
                                                                       CGTTable cgtTable) {
        final MutableLiveData<List<CGTAttendanceTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (cgtAttendanceTableList != null && cgtAttendanceTableList.size() > 0) {

                if (cgtTable != null && cgtTable.isCycleOneCompleted()) {
                    // TODO: Update CGT TWO Attendance
                    for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                        dynamicUIDao.updateCGTAttendanceTableCGTTwoAttendance(cgtAttendanceTable.isCGT2Attendance(),
                                cgtAttendanceTable.getCGT2AbsentReason(),
                                cgtAttendanceTable.getId());
                    }

                    List<CGTAttendanceTable> cgtAttendanceTableListFromDB = dynamicUIDao.getCGTAttendanceTableForCGT2(cgtTable.getCenterId());
                    data.postValue(cgtAttendanceTableListFromDB);
                } else {
                    // TODO: Update CGT ONE Attendance
                    for (CGTAttendanceTable cgtAttendanceTable : cgtAttendanceTableList) {
                        dynamicUIDao.updateCGTAttendanceTableCGTOneAttendance(cgtAttendanceTable.isCGT1Attendance(),
                                cgtAttendanceTable.getCGT1AbsentReason(),
                                cgtAttendanceTable.getId());
                    }

                    List<CGTAttendanceTable> cgtAttendanceTableListFromDB = dynamicUIDao.getCGTAttendanceTableForCGT1(cgtTable.getCenterId());
                    data.postValue(cgtAttendanceTableListFromDB);
                }

            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }
    public LiveData<List<GRTAttendanceTable>> updateGRTTableAttendance(List<GRTAttendanceTable> grtAttendanceTableList,
                                                                       GRTTable grtTable) {
        final MutableLiveData<List<GRTAttendanceTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (grtAttendanceTableList != null && grtAttendanceTableList.size() > 0) {

                // TODO: Update GRT Attendance
                for (GRTAttendanceTable grtAttendanceTable : grtAttendanceTableList) {
                    dynamicUIDao.updateGRTAttendanceTable(grtAttendanceTable.isAttendance(),
                            grtAttendanceTable.getAbsentReason(),
                            grtAttendanceTable.getId());
                }

                List<GRTAttendanceTable> grtAttendanceTableListFromDB = dynamicUIDao.getGRTAttendanceTable(grtTable.getCenterId());
                data.postValue(grtAttendanceTableListFromDB);

            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<List<CenterMeetingAttendanceDTO>> updateCenterMeetingAttendance(List<CenterMeetingAttendanceDTO> centerMeetingAttendanceDTOList, CMPhotoTable cmCaptionPhotoTable) {
        final MutableLiveData<List<CenterMeetingAttendanceDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (centerMeetingAttendanceDTOList != null && centerMeetingAttendanceDTOList.size() > 0) {
                List<CenterMeetingAttendanceTable> centerMeetingAttendanceTableList = new ArrayList<>();
                for (CenterMeetingAttendanceDTO centerMeetingAttendanceDTO : centerMeetingAttendanceDTOList) {
                    if (centerMeetingAttendanceDTO.getCenterMeetingAttendanceTableList() != null &&
                            centerMeetingAttendanceDTO.getCenterMeetingAttendanceTableList().size() > 0) {
                        for (CenterMeetingAttendanceTable centerMeetingAttendanceTable : centerMeetingAttendanceDTO.getCenterMeetingAttendanceTableList()) {
                            centerMeetingAttendanceTableList.add(centerMeetingAttendanceTable);
                        }
                    }
                }

                if (centerMeetingAttendanceTableList.size() > 0) {
                    dynamicUIDao.deleteAndInsertCenterMeetingAttendanceTable(centerMeetingAttendanceTableList,
                            centerMeetingAttendanceTableList.get(0).getCenterId());
                }

                data.postValue(centerMeetingAttendanceDTOList);
            } else {
                data.postValue(new ArrayList<>());
            }
            if (cmCaptionPhotoTable != null && !TextUtils.isEmpty(cmCaptionPhotoTable.getCenterName())) {
                CMPhotoTable cmCaptionPhotoTableDB = dynamicUIDao.getTopCMCaptionData(cmCaptionPhotoTable.getCenterName());
                if (cmCaptionPhotoTableDB != null) {
                    cmCaptionPhotoTable.setId(cmCaptionPhotoTableDB.getId());
                    dynamicUIDao.insertCMCaptionPhotoTable(cmCaptionPhotoTable);
                } else {
                    dynamicUIDao.insertCMCaptionPhotoTable(cmCaptionPhotoTable);
                }
            }

        });
        return data;
    }

    // TODO: IMAGE UPLOAD SERVICE CALL
    public LiveData<String> uploadCMCaptionImageToServer(File file, String fileName, String staffId) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
//            AppWebService.changeApiBaseUrl(DOCUMENT_UPLOAD_URL);
            executor.execute(() -> {
                String url = DOCUMENT_UPLOAD_URL; // TODO: Document Upload URL
                Log.i(TAG, "URL FOR IMAGE UPLOADING-------> " + url);
                Uri uri = Uri.fromFile(file);
                String filePath = FileUtils.getPath(App.context, uri);
//                final String tag = documentUploadTableNew1.getDocument_tag();
                final String tag = "TAG";
                String fileExtension = filePath.substring
                        (filePath.lastIndexOf(".") + 1).toUpperCase();
                RequestBody rbClientId = RequestBody.create(MediaType.parse("multipart/form-data"), staffId);
                RequestBody rbFileName = RequestBody.create(MediaType.parse("multipart/form-data"), fileName);
                RequestBody rbExtension = RequestBody.create(MediaType.parse("multipart/form-data"), fileExtension);
                RequestBody rbFileType = RequestBody.create(MediaType.parse("multipart/form-data"), IMAGE_UPLOAD_FOLDER_NAME + "\\" + tag); // TODO: 29-03-2019 Hardcoded
                RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);
//                RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), decryptedByteArrayImage);
                String productType = "MSME";
                RequestBody rbProductType = RequestBody.create(MediaType.parse("multipart/form-data"),
                        productType);
                MultipartBody.Part multiPart = MultipartBody.Part.createFormData("UploadedFile", fileName, rbFile);

                DynamicUIWebService.createService(DynamicUIWebservice.class).
                        uploadCMImageToWebServerNew(url, rbClientId, rbFileName, rbExtension,
                                rbFileType, rbProductType, multiPart,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""))
                        .enqueue(new Callback<String>() {
                            @Override
                            public void onResponse(Call<String> call, Response<String> response) {
                                Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        Log.d(TAG, "onResponse  ==> " + response.body());
                                        data.postValue(response.body());
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<String> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(t.getMessage());
                                });
                            }
                        });
            });
        } catch (Exception ex) {
            Log.e("TAG", ex.toString());
            executor.execute(() -> {
                data.postValue(ex.getMessage());
            });
        }
        return data;
    }

    public LiveData<List<FetchOtherDayCMDTO>> saveCenterMeetingDetails(List<FetchOtherDayCMDTO> fetchOtherDayCMDTOList) {
        final MutableLiveData<List<FetchOtherDayCMDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (fetchOtherDayCMDTOList != null && fetchOtherDayCMDTOList.size() > 0) {
                List<FetchOtherDayCMTable> fetchOtherDayCMTableList = new ArrayList<>();

                for (FetchOtherDayCMDTO fetchOtherDayCMDTO : fetchOtherDayCMDTOList) {
                    if (fetchOtherDayCMDTO != null && !TextUtils.isEmpty(fetchOtherDayCMDTO.getCenterName()) && fetchOtherDayCMDTO.isSelected()) {
                        List<FetchOtherDayCMTable> fetchOtherDayCMTableListByCenterName = dynamicUIDao.getFetchOtherDayCMTableList(fetchOtherDayCMDTO.getCenterName());
                        if (fetchOtherDayCMTableListByCenterName != null && fetchOtherDayCMTableListByCenterName.size() > 0) {
                            for (FetchOtherDayCMTable fetchOtherDayCMTable : fetchOtherDayCMTableListByCenterName) {
                                fetchOtherDayCMTableList.add(fetchOtherDayCMTable);
                            }
                        }
                    }
                }

                if (fetchOtherDayCMTableList.size() > 0) {
                    for (FetchOtherDayCMTable fetchOtherDayCMTable : fetchOtherDayCMTableList) {
                        if (fetchOtherDayCMTable != null) {
                            String tableJson = new Gson().toJson(fetchOtherDayCMTable, FetchOtherDayCMTable.class);
                            if (!TextUtils.isEmpty(tableJson)) {
                                CenterMeetingTable centerMeetingTable = new Gson().fromJson(tableJson, CenterMeetingTable.class);
                                if (centerMeetingTable != null) {
                                    CenterMeetingTable centerMeetingTableFromDB = dynamicUIDao.getCenterMeetingTableByCenterMeetingDateAndCenterIdAndLoanAccountNumber(centerMeetingTable.getCenterMeetingDate(), centerMeetingTable.getCenterId(), centerMeetingTable.getLoanAccountNumber());
                                    if (centerMeetingTableFromDB == null) {
                                        dynamicUIDao.insertCenterMeetingTable(centerMeetingTable);
                                    }
                                }
                            }
                        }
                    }
                }

                data.postValue(fetchOtherDayCMDTOList);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<List<EMIDetailsDTO>> saveEMIDetailsCenterMeetingCollection(List<EMIDetailsDTO> emiDetailsDTOList) {
        final MutableLiveData<List<EMIDetailsDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (emiDetailsDTOList != null && emiDetailsDTOList.size() > 0) {
                for (EMIDetailsDTO emiDetailsDTO : emiDetailsDTOList) {
                    dynamicUIDao.updateCenterMeetingEmiDetails(emiDetailsDTO.getLAN(), emiDetailsDTO.getCollection(),
                            emiDetailsDTO.getArrearReason(), emiDetailsDTO.isPaidByOtherMember(), emiDetailsDTO.getPTPDate());
                }

                data.postValue(emiDetailsDTOList);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<List<EMIDetailsDTO>> saveEMIDetailsCenterMeetingDigitalCollection(List<EMIDetailsDTO> emiDetailsDTOList) {
        final MutableLiveData<List<EMIDetailsDTO>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (emiDetailsDTOList != null && emiDetailsDTOList.size() > 0) {
                for (EMIDetailsDTO emiDetailsDTO : emiDetailsDTOList) {
                    dynamicUIDao.updateCenterMeetingDigitalEmiDetails(emiDetailsDTO.getLAN(), emiDetailsDTO.getCollection(),
                            emiDetailsDTO.isAccountCreated(), emiDetailsDTO.isSmsTriggered(), emiDetailsDTO.isPaymentStatus(), emiDetailsDTO.getRequestId());
                }

                data.postValue(emiDetailsDTOList);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<String> syncCashCollectionSummary(List<CashCollectionSummaryDTO.IndividualCenterCollection> cashCollectionSummaryList) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (cashCollectionSummaryList != null && cashCollectionSummaryList.size() > 0) {
                for (CashCollectionSummaryDTO.IndividualCenterCollection individualCenterCollection : cashCollectionSummaryList) {

                    dynamicUIDao.syncCashCollectionSummary(individualCenterCollection.getCenterName(),
                            individualCenterCollection.getCollectionDate(), individualCenterCollection.getCollectionDate(),
                            true, SUCCESS_RESPONSE_MESSAGE);
                }

                data.postValue(ERROR_MESSAGE_SYNC_SUCCESS);
            } else {
                data.postValue(ERROR_MESSAGE_SYNC_FAILED);
            }

        });
        return data;
    }

    public LiveData<List<CenterMeetingAttendanceTable>> checkAttendance(String centerName) {
        final MutableLiveData<List<CenterMeetingAttendanceTable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<CenterMeetingAttendanceTable> centerMeetingAttendanceTableList = dynamicUIDao.getCenterMeetingAttendanceTableListByCenterName(centerName);

            data.postValue(centerMeetingAttendanceTableList);
        });
        return data;
    }

    public LiveData<String> insertStaffActivity(String centerName, String staffId, String activity, int status) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        executor.execute(() -> {

            StaffActivityTable staffActivityTable = new StaffActivityTable();
            staffActivityTable.setCenterName(centerName);
            staffActivityTable.setStaffId(staffId);
            staffActivityTable.setActivity(activity);
            staffActivityTable.setStatus(status);

            String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_HH_MM_SS_SSS2);
            if (!TextUtils.isEmpty(timeStamp)) {
                Date date = TimestampConverter.toDate(timeStamp);

                staffActivityTable.setTimeStamp(timeStamp);
            }
            int battery = appHelper.getBatteryPercentage(App.context);
            staffActivityTable.setBattery(battery);

            NetworkStrengthTable networkStrengthTable = dynamicUIDao.loadNetworkStrengthTable();
            if (networkStrengthTable != null) {
                int networkSignal = networkStrengthTable.getNetwork_strength();
                staffActivityTable.setNetworkSignal(networkSignal);
            }

            LocationTable locationTable = dynamicUIDao.loadGPS();
            if (locationTable != null) {
                String latitude = locationTable.getLatitude();
                String longitude = locationTable.getLongitude();
                if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                    staffActivityTable.setLatitude(latitude);
                    staffActivityTable.setLongitude(longitude);
                }
            }

            String timeStampForRefId = new SimpleDateFormat("yyMMddHHmmssSSS",
                    Locale.getDefault()).format(new Date());
            String EMP_LAST_5_DIGIT = staffId.substring(3);
            String REF_ID = EMP_LAST_5_DIGIT + timeStampForRefId;
            staffActivityTable.setRefId(REF_ID);

            // TODO: Insert Record
            dynamicUIDao.insertStaffActivityTable(staffActivityTable);


            // TODO: Final Result
            data.postValue(SUCCESS_RESPONSE_MESSAGE);
        });
        return data;
    }

    public LiveData<CMCollectionLocalResponseDTO> checkCenterMeetingCollection(String centerName) {
        final MutableLiveData<CMCollectionLocalResponseDTO> data = new MutableLiveData<>();
        CMCollectionLocalResponseDTO collectionLocalResponseDTO = new CMCollectionLocalResponseDTO();
        try {
            executor.execute(() -> {
                boolean isAllSaved = false;

                List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCenterName(centerName);
                if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                        if (centerMeetingCollectionTable.isSaved()) {
                            isAllSaved = true;
                        } else {
                            isAllSaved = false;
                            break;
                        }
                    }
                }

                if (isAllSaved) {

                    collectionLocalResponseDTO.setValid(true);
                    collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_COLLECTION_SUCCESS);

                    data.postValue(collectionLocalResponseDTO);
                } else {
                    collectionLocalResponseDTO.setValid(false);
                    collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_CONFIRM_ALL_COLLECTION);

                    data.postValue(collectionLocalResponseDTO);
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            collectionLocalResponseDTO.setValid(false);
            collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_COLLECTION_FAILED);
        }
        return data;
    }

    public LiveData<CMCollectionLocalResponseDTO> saveCenterMeetingCollection(String centerName, String collectionType) {
        final MutableLiveData<CMCollectionLocalResponseDTO> data = new MutableLiveData<>();
        CMCollectionLocalResponseDTO collectionLocalResponseDTO = new CMCollectionLocalResponseDTO();
        try {
            executor.execute(() -> {
                boolean isAllConfirmed = false;
                int totalNormalCollection = 0;
                int totalSavingCollection = 0;
                int overallTotalCollection = 0;
                List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCenterName(centerName);
//                List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCenterNameAndCollectionType(centerName, collectionType);
                if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                        if (centerMeetingCollectionTable.getConfirmCount() > 0) {
                            isAllConfirmed = true;
                            if (centerMeetingCollectionTable.isConfirm()) {
//                                totalNormalCollection = totalNormalCollection + centerMeetingCollectionTable.getCollectedAmount();
//                                overallTotalCollection = overallTotalCollection + centerMeetingCollectionTable.getCollectedAmount();
                                totalNormalCollection = totalNormalCollection + centerMeetingCollectionTable.getCashCollectedAmount();
                                overallTotalCollection = overallTotalCollection + centerMeetingCollectionTable.getCashCollectedAmount();
                            }
                        } else {
                            isAllConfirmed = false;
                            break;
                        }

                    }
                }

                if (isAllConfirmed) {
                    if (!TextUtils.isEmpty(collectionType) && collectionType.equalsIgnoreCase(COLLECTION_TYPE_REGULAR)) {
                        List<CenterMeetingCollectionTable> centerMeetingCollectionTableListByCustomerName = dynamicUIDao.getCenterMeetingCollectionTableListByCenterNameAndCustomerName(centerName);
                        if (centerMeetingCollectionTableListByCustomerName != null && centerMeetingCollectionTableListByCustomerName.size() > 0) {
                            for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableListByCustomerName) {
                                if (centerMeetingCollectionTable.isConfirm() && centerMeetingCollectionTable.isSavingsConfirm()) {
                                    totalSavingCollection = totalSavingCollection + centerMeetingCollectionTable.getSavingsCollection();
                                    overallTotalCollection = overallTotalCollection + centerMeetingCollectionTable.getSavingsCollection();
                                }
                            }
                        }
                    }
                    // TODO: isSaved centerMeetingCollectionTable
                    dynamicUIDao.isSavedCenterMeetingCollectionTableByCenterName(centerName);
//                    dynamicUIDao.isSavedCenterMeetingCollectionTableByCenterNameAndCollectionType(centerName, collectionType);

                    collectionLocalResponseDTO.setValid(true);
                    collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_COLLECTION_SUCCESS);
                    collectionLocalResponseDTO.setTotalNormalCollection(totalNormalCollection);
                    collectionLocalResponseDTO.setTotalSavingCollection(totalSavingCollection);
                    collectionLocalResponseDTO.setOverallTotalCollection(overallTotalCollection);

                    String message = "Collections in " + centerName + " are saved \n" + "Collected amount : \n" +
                            " Normal Collection : " + totalNormalCollection + " \n" +
                            " Saving Collection : " + totalSavingCollection + " \n" +
                            " Total Collection : " + overallTotalCollection;

                    collectionLocalResponseDTO.setResponse(message);

                    data.postValue(collectionLocalResponseDTO);
                } else {
                    collectionLocalResponseDTO.setValid(false);
                    collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_CONFIRM_ALL_COLLECTION);

                    data.postValue(collectionLocalResponseDTO);
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            collectionLocalResponseDTO.setValid(false);
            collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_COLLECTION_FAILED);
        }
        return data;
    }

    public LiveData<CMCollectionLocalResponseDTO> saveCenterMeetingDigitalCollection(String centerName) {
        final MutableLiveData<CMCollectionLocalResponseDTO> data = new MutableLiveData<>();
        CMCollectionLocalResponseDTO collectionLocalResponseDTO = new CMCollectionLocalResponseDTO();
        try {
            executor.execute(() -> {
                boolean isAllConfirmed = false;

                List<CenterMeetingCollectionTable> centerMeetingCollectionTableList = dynamicUIDao.getCMCollectionTableListByCenterName(centerName);
                if (centerMeetingCollectionTableList != null && centerMeetingCollectionTableList.size() > 0) {
                    for (CenterMeetingCollectionTable centerMeetingCollectionTable : centerMeetingCollectionTableList) {
                        if (centerMeetingCollectionTable.isDigitalPayment()) {
                            if (centerMeetingCollectionTable.isSmsTriggered()) {
                                isAllConfirmed = true;
                            } else {
                                isAllConfirmed = false;
                                break;
                            }
                        }

                    }
                }

                if (isAllConfirmed) {
                    collectionLocalResponseDTO.setValid(true);
                    collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_DIGITAL_COLLECTION_SUCCESS);

                    data.postValue(collectionLocalResponseDTO);
                } else {
                    collectionLocalResponseDTO.setValid(false);
                    collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_CONFIRM_ALL_COLLECTION);

                    data.postValue(collectionLocalResponseDTO);
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            collectionLocalResponseDTO.setValid(false);
            collectionLocalResponseDTO.setResponse(ERROR_MESSAGE_COLLECTION_FAILED);
        }
        return data;
    }

    public LiveData<List<MasterTable>> updateMasterTableListForAttendance(List<MasterTable> masterTableList, CGTTable cgtTable) {
        final MutableLiveData<List<MasterTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (masterTableList != null && masterTableList.size() > 0) {

                dynamicUIDao.updateMasterTableList(masterTableList);

                if (cgtTable != null && cgtTable.isCycleOneCompleted()) {
                    // TODO: Update CGT TWO Attendance
//                    dynamicUIDao.updateCGTTableCycleTwoAttendance(true, cgtTable.getId());
                } else {
                    // TODO: Update CGT ONE Attendance
//                    dynamicUIDao.updateCGTTableCycleOneAttendance(true, cgtTable.getId());
                }


                List<MasterTable> masterTableByCenterId = dynamicUIDao.getMasterTableByCenterId(masterTableList.get(0).getCenterId(),
                        masterTableList.get(0).getLoan_type());
                data.postValue(masterTableByCenterId);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<List<CGTTable>> updateCGTRejected(List<CGTTable> cgtTableList) {
        final MutableLiveData<List<CGTTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (cgtTableList != null && cgtTableList.size() > 0) {

                dynamicUIDao.updateCGTTableList(cgtTableList);

                List<CGTTable> cgtTableListByCenterId = dynamicUIDao.getCGTTableListByCenterId(cgtTableList.get(0).getCenterId(),
                        cgtTableList.get(0).getLoan_type());
                data.postValue(cgtTableListByCenterId);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<List<CGTTable>> deleteDropOutCustomers(List<CGTTable> cgtTableList) {
        final MutableLiveData<List<CGTTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (cgtTableList != null && cgtTableList.size() > 0) {

                for (CGTTable cgtTable : cgtTableList) {
                    String clientId = cgtTable.getClientId();

                    // TODO: Delete from Master Table
                    dynamicUIDao.deleteMasterTable(clientId);
                    // TODO: Delete from Loan Table
                    dynamicUIDao.deleteLoanTableByClientId(clientId);
                    // TODO: Delete from Raw Data Table
                    dynamicUIDao.deleteRawDataByClientId(clientId);
                    // TODO: Delete from Document Upload Table
                    dynamicUIDao.deleteDocumentFromTableByClientId(clientId);
                    // TODO: Delete from OTP Table
                    dynamicUIDao.deleteOTPVerificationByClientId(clientId);
                    // TODO: Delete from CB Table
                    dynamicUIDao.deleteCBCheckTableByClientId(clientId);
                    // TODO: Delete from CGT Table
                    dynamicUIDao.deleteCGTTableByClientId(clientId);
                    // TODO: Delete from GRT Table
                    dynamicUIDao.deleteGRTTableByClientId(clientId);
                    // TODO: Delete from Group Table
                    dynamicUIDao.deleteGroupTable(clientId);
                    // TODO: Delete from House Verification Table
                    dynamicUIDao.deleteHouseVerificationTable(clientId);
                    // TODO: Delete from CGT Attendance Table
                    dynamicUIDao.deleteCGTAttendanceTableByClientId(clientId);
                    // TODO: Update Center Creation Member count as 0
                    CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterID(cgtTable.getCenterId(),
                            cgtTable.getLoan_type());
                    if (centerCreationTable != null) {
                        if (centerCreationTable.getNoOfMembers() > 0) {
                            int count = centerCreationTable.getNoOfMembers() - 1;
                            dynamicUIDao.updateCenterCreationTableMembersCount(count, centerCreationTable.getId());
                        }
                    }
                }

                List<CGTTable> cgtTableListByCenterId = dynamicUIDao.getCGTTableForDropOut(cgtTableList.get(0).getCenterId(),
                        cgtTableList.get(0).getLoan_type(), false);

                // TODO: Final Result
                data.postValue(cgtTableListByCenterId);
            } else {
                data.postValue(new ArrayList<>());
            }

        });
        return data;
    }

    public LiveData<String> insertEligibleLoans(List<List<EligibilityTable>> listOfEligibilityList) {
        final MutableLiveData<String> data = new MutableLiveData<>();

        executor.execute(() -> {

            String CENTER_ID = "";

            if (listOfEligibilityList != null && listOfEligibilityList.size() > 0) {

                for (List<EligibilityTable> eligibilityTableList : listOfEligibilityList) {

                    if (eligibilityTableList != null && eligibilityTableList.size() > 0) {

                        // TODO: Update Eligibility Table List
                        dynamicUIDao.updateEligibilityTableList(eligibilityTableList);


                        for (EligibilityTable eligibilityTable : eligibilityTableList) {
                            if (eligibilityTable != null && eligibilityTable.isInterested()) {

                                LoanTable loanTableFromDB = dynamicUIDao.getLoanTableByLoanProductName(
                                        eligibilityTable.getCustomerId(), eligibilityTable.getProductName());
                                if (loanTableFromDB == null) {
                                    CenterMeetingTable centerMeetingTable = dynamicUIDao.getCenterMeetingTableByClientId(eligibilityTable.getCustomerId());
                                    if (centerMeetingTable != null) {

                                        CENTER_ID = centerMeetingTable.getCenterId();

                                        LogInTable logInTable = dynamicUIDao.getLoginTable(centerMeetingTable.getLoanOfficerId());
                                        if (logInTable != null) {

                                            // TODO: Insert into Center Creation Table
                                            CenterCreationTable centerCreationTableFromDB = dynamicUIDao.getCenterCreationTableByCenterID(centerMeetingTable.getCenterId(),
                                                    LOAN_NAME_JLG);
                                            if (centerCreationTableFromDB == null) {
                                                CenterCreationTable centerCreationTable = new CenterCreationTable();
                                                centerCreationTable.setCenterId(centerMeetingTable.getCenterId());
                                                centerCreationTable.setCenterName(centerMeetingTable.getCenterName());
//                                                centerCreationTable.setVillageName(centerMeetingTable.getVillageName());
//                                                centerCreationTable.setVillageId(centerMeetingTable.getVillageId());

                                                centerCreationTable.setStatus(FINAL_STATUS_PENDING);
                                                centerCreationTable.setSync(false);
                                                centerCreationTable.setLoan_type(LOAN_NAME_JLG); // TODO: LOAN TYPE
                                                centerCreationTable.setBranchId(logInTable.getBranchID());
                                                centerCreationTable.setBranchGSTcode(logInTable.getBranchGSTCode());
                                                centerCreationTable.setCreatedBy(logInTable.getUserID()); // TODO: STAFF ID
                                                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_DD_MM_YYYY2);
                                                centerCreationTable.setCreated_date(dateTime);

                                                // TODO: insert center creation table
                                                dynamicUIDao.insertCenterCreationTable(centerCreationTable);
                                            }

                                            centerCreationTableFromDB = dynamicUIDao.getCenterCreationTableByCenterID(centerMeetingTable.getCenterId(),
                                                    LOAN_NAME_JLG);

                                            // TODO: Insert into Loan Table
                                            LoanTable loanTable = new LoanTable();

                                            String timeStamp = new SimpleDateFormat("yyMMddHHmmss",
                                                    Locale.getDefault()).format(new Date());
                                            String EMP_LAST_5_DIGIT = logInTable.getUserID().substring(3);
                                            String loanId = EMP_LAST_5_DIGIT + timeStamp;
                                            String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);

                                            loanTable.setLoanId(loanId);
                                            loanTable.setLoanProductName(eligibilityTable.getProductName());
                                            loanTable.setLoanProductCode(eligibilityTable.getProductCode());
                                            loanTable.setBranchGSTcode(logInTable.getBranchGSTCode());
                                            loanTable.setBranchId(logInTable.getBranchID());
                                            loanTable.setCenterId(centerMeetingTable.getCenterId());
                                            loanTable.setCenterName(centerMeetingTable.getCenterName());
                                            loanTable.setClientId(centerMeetingTable.getCustomerId());
                                            loanTable.setClientName(centerMeetingTable.getCustomerName());
                                            loanTable.setCreatedBy(centerMeetingTable.getLoanOfficerId());
                                            loanTable.setCreated_date(dateTime);
                                            loanTable.setLoan_type(LOAN_NAME_JLG);
//                                            loanTable.setPhoneNo(centerMeetingTable.get()); // TODO: Phone Number Needs to add
                                            loanTable.setApplicationStatus(APPLICATION_STATUS_NEW);
                                            loanTable.setFinalStatus(FINAL_STATUS_PENDING);
                                            loanTable.setSync(false);
                                            loanTable.setAllDataCaptured(false);
                                            loanTable.setExistingCustomer(true);
                                            loanTable.setInterested(true);
                                            dynamicUIDao.insertLoanTable(loanTable);

                                            // TODO: Insert into Master Table
                                            MasterTable masterTableFromDb = dynamicUIDao.getMasterTableByClientId(eligibilityTable.getCustomerId());

                                            if (masterTableFromDb == null) {
                                                MasterTable masterTableToInsert = new MasterTable();
                                                masterTableToInsert.setClientId(eligibilityTable.getCustomerId());
                                                masterTableToInsert.setClientName(centerMeetingTable.getCustomerName());
                                                masterTableToInsert.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                masterTableToInsert.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                masterTableToInsert.setFinalStatus(FINAL_STATUS_NEW);
                                                masterTableToInsert.setSync(false);
                                                masterTableToInsert.setLoan_type(LOAN_NAME_JLG); // TODO: LOAN TYPE
                                                masterTableToInsert.setAllDataCaptured(false);
                                                masterTableToInsert.setCBStatus(INT_CB_STATUS_ACCEPT);
                                                masterTableToInsert.setBranchId(logInTable.getBranchID());
                                                masterTableToInsert.setBranchGSTcode(logInTable.getBranchGSTCode());
                                                masterTableToInsert.setCreatedBy(logInTable.getUserID()); // TODO: STAFF ID
                                                masterTableToInsert.setReviewBy(logInTable.getUserID()); // TODO: STAFF ID
                                                masterTableToInsert.setCreated_date(TimestampConverter.toDate(dateTime));
                                                masterTableToInsert.setCenterName(centerMeetingTable.getCenterName());
                                                masterTableToInsert.setCenterId(centerMeetingTable.getCenterId());

                                                dynamicUIDao.insertMasterTableData(masterTableToInsert);

                                                List<MasterTable> masterTableListFromDB = dynamicUIDao.getMasterTableByCenterId(masterTableToInsert.getCenterId(), masterTableToInsert.getLoan_type());
                                                if (centerCreationTableFromDB != null && masterTableListFromDB != null && masterTableListFromDB.size() > 0) {
                                                    dynamicUIDao.updateCenterCreationTableMembersCount(masterTableListFromDB.size(), centerCreationTableFromDB.getId());
                                                }
                                            }

                                            // TODO: Insert into CGT Table
                                            CGTTable cgtTable = new CGTTable();
                                            cgtTable.setCenterId(centerMeetingTable.getCenterId());
                                            cgtTable.setCenterName(centerMeetingTable.getCenterName());
                                            cgtTable.setLoanId(loanId);
                                            cgtTable.setLoanProduct(eligibilityTable.getProductName());
                                            cgtTable.setLoanProductCode(eligibilityTable.getProductCode());
                                            cgtTable.setClientId(eligibilityTable.getCustomerId());
                                            cgtTable.setClientName(eligibilityTable.getCustomerName());
//                                                cgtTable.setPhoneNo(masterTable.getPhoneNo());
//                                            cgtTable.setVillageName(centerMeetingTable.getVillageName());
//                                            cgtTable.setVillageId(centerMeetingTable.getVillageId());
                                            cgtTable.setStatus(FINAL_STATUS_PENDING);
                                            cgtTable.setSync(false);
                                            cgtTable.setLoan_type(LOAN_NAME_JLG); // TODO: LOAN TYPE
                                            cgtTable.setBranchId(logInTable.getBranchID());
                                            cgtTable.setBranchGSTcode(logInTable.getBranchGSTCode());
                                            cgtTable.setCreatedBy(logInTable.getUserID()); // TODO: STAFF ID
                                            cgtTable.setCreated_date(dateTime);
                                            cgtTable.setExistingCustomer(false);

                                            dynamicUIDao.insertCGTTable(cgtTable);
                                        }

                                    }
                                } else {

                                    CENTER_ID = loanTableFromDB.getCenterId();
                                    loanTableFromDB.setInterested(true);
                                    dynamicUIDao.insertLoanTable(loanTableFromDB);
                                }

                            } else {
                                // TODO: Update Loan Table as Not Interested
                                LoanTable loanTableFromDB = dynamicUIDao.getLoanTableByLoanProductName(
                                        eligibilityTable.getCustomerId(), eligibilityTable.getProductName());
                                if (loanTableFromDB != null) {
                                    CENTER_ID = loanTableFromDB.getCenterId();
                                    loanTableFromDB.setInterested(false);
                                    dynamicUIDao.insertLoanTable(loanTableFromDB);
                                }
                            }
                        }
                    }
                }

                data.postValue(CENTER_ID);
            } else {
                data.postValue(CENTER_ID);
            }

        });
        return data;
    }

    public LiveData<LoanProductCodeTable> insertLoanProductCodeTable(String loanProductCode, String loanProductName) {
        final MutableLiveData<LoanProductCodeTable> data = new MutableLiveData<>();

        executor.execute(() -> {
            if (!TextUtils.isEmpty(loanProductCode) && !TextUtils.isEmpty(loanProductName)) {
                // TODO: Delete & Insert Loan Product Code Table
                LoanProductCodeTable loanProductCodeTable = new LoanProductCodeTable();
                loanProductCodeTable.setLoanProductCode(loanProductCode);
                loanProductCodeTable.setLoanProductName(loanProductName);

                dynamicUIDao.deleteAndInsertLoanProductCodeTable(loanProductCodeTable);

                LoanProductCodeTable loanProductCodeTableFromDB = dynamicUIDao.getLoanProductCodeTable();

                // TODO: Success Case
                data.postValue(loanProductCodeTableFromDB);
            } else {
                // TODO: Failure Case
                data.postValue(null);
            }

        });
        return data;
    }

    public LiveData<SODTable> insertorUpdateSODData(String userName, String userId, String branchId, String branchGSTcode, boolean isChecked) {
        final MutableLiveData<SODTable> data = new MutableLiveData<>();

        executor.execute(() -> {
            if (isChecked) {
                // TODO: insert sod data
                SODTable sodTable = new SODTable();
                sodTable.setStaffName(userName);
                sodTable.setStaffId(userId);
                sodTable.setBranchId(branchId);
                sodTable.setBranchGSTcode(branchGSTcode);

                LocationTable locationTable = dynamicUIDao.loadGPS();
                if (locationTable != null) {
                    String latitude = locationTable.getLatitude();
                    String longitude = locationTable.getLongitude();
                    if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                        sodTable.setSOD_Latitude(latitude);
                        sodTable.setSOD_Longitue(longitude);
                    }
                }
                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                sodTable.setCreated_date(dateTime);
                sodTable.setSOD(true);

                dynamicUIDao.insertSODTable(sodTable);
            } else {
                SODTable sodTableFromDB = dynamicUIDao.getTopSODData(userId);
                if (sodTableFromDB != null) {
                    LocationTable locationTable = dynamicUIDao.loadGPS();
                    if (locationTable != null) {
                        String latitude = locationTable.getLatitude();
                        String longitude = locationTable.getLongitude();
                        if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                            sodTableFromDB.setEOD_Latitude(latitude);
                            sodTableFromDB.setEOD_Longitude(longitude);
                        }
                    }
                    sodTableFromDB.setEOD(true);

                    dynamicUIDao.insertSODTable(sodTableFromDB);
                } else {
                    // TODO: insert sod data
                    SODTable sodTable = new SODTable();
                    sodTable.setStaffName(userName);
                    sodTable.setStaffId(userId);
                    sodTable.setBranchId(branchId);
                    sodTable.setBranchGSTcode(branchGSTcode);

                    LocationTable locationTable = dynamicUIDao.loadGPS();
                    if (locationTable != null) {
                        String latitude = locationTable.getLatitude();
                        String longitude = locationTable.getLongitude();
                        if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                            sodTable.setSOD_Latitude(latitude);
                            sodTable.setSOD_Longitue(longitude);
                        }
                    }
                    String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                    sodTable.setCreated_date(dateTime);
                    sodTable.setSOD(true);

                    dynamicUIDao.insertSODTable(sodTable);
                }
            }

            // TODO: Sending result
            data.postValue(dynamicUIDao.getTopSODData(userId));
        });
        return data;
    }

    public LiveData<CenterCreationTable> insertOrUpdateCenterCreationData(CenterCreationTable centerCreationTable) {
        final MutableLiveData<CenterCreationTable> data = new MutableLiveData<>();

        executor.execute(() -> {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

            final CenterNameRequestDTO centerNameRequestDTO = new CenterNameRequestDTO();

            centerNameRequestDTO.setIMEINumber(appHelper.getIMEI());
            CenterNameRequestDTO.SpNameWithParameterClass spNameWithParameter = new CenterNameRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_CENTER_NAME);
            CenterNameRequestDTO.SpParametersClass spParametersClass = new CenterNameRequestDTO.SpParametersClass();
            spParametersClass.setStaffId(centerCreationTable.getCreatedBy()); // TODO: user id
            spParametersClass.setBranchId(centerCreationTable.getBranchId()); // TODO: branch id
            spParametersClass.setVillageName(centerCreationTable.getAreaName()); // TODO: area name
            String zoneName = centerCreationTable.getZoneName();
            if (!TextUtils.isEmpty(zoneName)) {
                String sequenceNumber = String.valueOf(zoneName.charAt(zoneName.length() - 1));
                spParametersClass.setSequenceNumber(sequenceNumber); // TODO: Sequence number
            }
            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<CenterNameRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<CenterNameRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            centerNameRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
            String baseString = new Gson().toJson(centerNameRequestDTO, CenterNameRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            DynamicUIWebService.createService(DynamicUIWebservice.class).getCenterNameFromServer(centerNameRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).

                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        String key = json.keys().next();

                                        String tableJson = json.get(key).toString();
                                        CenterNameResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, CenterNameResponseDTO.class);
                                        Log.d(TAG, "get center name tvName server");
                                        List<CenterNameResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                        if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                            com.saartak.el.models.CenterNameResponseDTO.Table table = rawDataResponseDTOList.get(0);
                                            String centerNameFromServer = table.getNewCenterName();

//                                            String[] arr = centerNameFromServer.split(" ", 2);
                                            centerCreationTable.setCenterName(centerNameFromServer);

//                                            centerCreationTable.setCenterName(arr[1]);
                                            // TODO: insert center creation table
                                            dynamicUIDao.insertAndDeleteCenterCreationTable(centerCreationTable, centerCreationTable.getCenterId());
                                            // TODO: Sending result
                                            data.postValue(centerCreationTable);
                                        } else {
                                            // TODO: Sending result
                                            data.postValue(centerCreationTable);
                                        }

                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        // TODO: Sending result
                                        data.postValue(null);
                                        //  insertLog("getApplicationStatusFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                    }
                                } else {
                                    data.postValue(null);
                                    // TODO: Sending result
                                    //  insertLog("getApplicationStatusFromServer", response.tvMobNo(), "", "", TAG, "", "", "");
                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result
                            executor.execute(() -> {
                                data.postValue(null);
                                //  insertLog("getApplicationStatusFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            });
                        }
                    });


        });
        return data;
    }

    public LiveData<String> getGroupNameFromServer(GroupNameRequestDTO groupNameRequestDTO) {
        final MutableLiveData<String> data = new MutableLiveData<>();

        executor.execute(() -> {

            DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
            String baseString = new Gson().toJson(groupNameRequestDTO, GroupNameRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);

            DynamicUIWebService.createService(DynamicUIWebservice.class).getGroupNameFromServer(groupNameRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).

                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        String key = json.keys().next();

                                        String tableJson = json.get(key).toString();
                                        GroupNameResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, GroupNameResponseDTO.class);
                                        Log.d(TAG, "get group name tvName server");
                                        List<GroupNameResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                        if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                            GroupNameResponseDTO.Table table = rawDataResponseDTOList.get(0);
                                            String groupNameFromServer = table.getNewGroupName();

//                                            String[] arr = centerNameFromServer.split(" ", 2);
                                            //  centerCreationTable.setCenterName(centerNameFromServer);

                                            // TODO: Sending result
                                            data.postValue(groupNameFromServer);
                                        } else {
                                            // TODO: Sending result
                                            data.postValue(null);
                                        }

                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        // TODO: Sending result
                                        data.postValue(null);
                                        //  insertLog("getApplicationStatusFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                    }
                                } else {
                                    data.postValue(null);
                                    // TODO: Sending result
                                    //  insertLog("getApplicationStatusFromServer", response.tvMobNo(), "", "", TAG, "", "", "");
                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result
                            executor.execute(() -> {
                                data.postValue(null);
                                //  insertLog("getApplicationStatusFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            });
                        }
                    });


        });
        return data;
    }

    public LiveData<CashDenominationTable> saveCashDenomination(CashDenominationTable cashDenominationTable) {
        final MutableLiveData<CashDenominationTable> data = new MutableLiveData<>();

        executor.execute(() -> {

            cashDenominationTable.setSync(false);
            // TODO: insert center creation table
            dynamicUIDao.deleteAndInsertCashDenominationTable(cashDenominationTable);

            CashDenominationTable cashDenominationTableFromDB = dynamicUIDao.getCashDenominationTable(cashDenominationTable.getStaffId(),
                    cashDenominationTable.getCMDate());

            // TODO: Sending result
            data.postValue(cashDenominationTableFromDB);
        });
        return data;
    }

    public LiveData<PlannerTable> insertorUpdatePlannerData(PlannerTable plannerTableActvity, boolean isChecked) {
        final MutableLiveData<PlannerTable> data = new MutableLiveData<>();

        executor.execute(() -> {
            if (isChecked) {
                // TODO: insert sod data
                LocationTable locationTable = dynamicUIDao.loadGPS();
                if (locationTable != null) {
                    String latitude = locationTable.getLatitude();
                    String longitude = locationTable.getLongitude();
                    if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                        plannerTableActvity.setStartLat(latitude);
                        plannerTableActvity.setStartLong(longitude);
                    }
                }
                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                plannerTableActvity.setCreated_date(dateTime);
                plannerTableActvity.setTripStart(true);

                dynamicUIDao.insertPlannerTable(plannerTableActvity);
            } else {
                PlannerTable plannerTableFromDB = dynamicUIDao.getTopPlannerData(plannerTableActvity.getStaffId(), plannerTableActvity.getClientId());
                if (plannerTableFromDB != null) {
                    LocationTable locationTable = dynamicUIDao.loadGPS();
                    if (locationTable != null) {
                        String latitude = locationTable.getLatitude();
                        String longitude = locationTable.getLongitude();
                        if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                            plannerTableFromDB.setEndLat(latitude);
                            plannerTableFromDB.setEndLong(longitude);
                        }
                    }
                    if (!TextUtils.isEmpty(plannerTableFromDB.getStartLat()) && !TextUtils.isEmpty(plannerTableFromDB.getStartLong()) && !TextUtils.isEmpty(plannerTableFromDB.getEndLat()) && !TextUtils.isEmpty(plannerTableFromDB.getEndLong())) {
                        float[] results = new float[1];
                        Location.distanceBetween(Double.valueOf(plannerTableFromDB.getStartLat()), Double.valueOf(plannerTableFromDB.getStartLong()),
                                Double.valueOf(plannerTableFromDB.getEndLat()), Double.valueOf(plannerTableFromDB.getEndLong()), results);
                        float distance = results[0];
                        if (distance != 0) {
                            plannerTableFromDB.setDistance(String.valueOf(distance));
                        } else {
                            plannerTableFromDB.setDistance("0.0");
                        }
                    }
                    plannerTableFromDB.setTripEnd(true);
                    if (!TextUtils.isEmpty(plannerTableActvity.getShopName())) {
                        plannerTableFromDB.setShopName(plannerTableActvity.getShopName());
                    }

                    dynamicUIDao.insertPlannerTable(plannerTableFromDB);
                } else {
                    // TODO: insert sod data
                    LocationTable locationTable = dynamicUIDao.loadGPS();
                    if (locationTable != null) {
                        String latitude = locationTable.getLatitude();
                        String longitude = locationTable.getLongitude();
                        if (!TextUtils.isEmpty(latitude) && !TextUtils.isEmpty(longitude)) {
                            plannerTableActvity.setStartLat(latitude);
                            plannerTableActvity.setStartLong(longitude);
                        }
                    }
                    String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                    plannerTableActvity.setCreated_date(dateTime);
                    plannerTableActvity.setTripStart(true);

                    dynamicUIDao.insertPlannerTable(plannerTableActvity);
                }
            }

            // TODO: Sending result
            data.postValue(dynamicUIDao.getTopPlannerData(plannerTableActvity.getStaffId(), plannerTableActvity.getClientId()));
        });
        return data;
    }
    public void insertLeadDataFromServer(RawDataTable rawDataTable, DynamicUITable dynamicUITable) {
//        executor.execute(() -> {

        LeadTable leadTableFromDB = dynamicUIDao.getTopLeadData(rawDataTable.getClient_id());

        if (leadTableFromDB == null) {
            LeadTable leadTable = new LeadTable();
            leadTable.setClientId(rawDataTable.getClient_id());
            leadTable.setCreatedBy(rawDataTable.getUser_id());
            String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
            leadTable.setCreated_date(dateTime);
            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);

            if (hashMap != null && hashMap.size() > 0) {
                if (hashMap.containsKey(TAG_NAME_STUDENT_FULL_NAME)) {
                    leadTable.setClientName(hashMap.get(TAG_NAME_STUDENT_FULL_NAME).toString());
                }
                if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                    leadTable.setMobileNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                }
                leadTable.setInterestedInLoan(1);
                if (hashMap.containsKey(TAG_NAME_LEAD_STATUS)) {
                    String leadStatus = hashMap.get(TAG_NAME_LEAD_STATUS).toString();
                    if (!TextUtils.isEmpty(leadStatus)) {
                        leadTable.setLeadStatus(leadStatus);
                    }
                }
            }
            leadTable.setLoan_type(rawDataTable.getLoan_type());
            leadTable.setIsDataCaptured(true);
            leadTable.setSync(true);

            dynamicUIDao.insertLeadTable(leadTable);
        }
//        });
    }

    public void insertorUpdateLeadData(RawDataTable rawDataTable, DynamicUITable dynamicUITable) {
        executor.execute(() -> {

            LeadTable leadTableFromDB = dynamicUIDao.getTopLeadData(rawDataTable.getClient_id());

            if (leadTableFromDB != null) {
                if (leadTableFromDB.isSync() && leadTableFromDB.getInterestedInLoan() == 1) {
                    // TODO: no need to insert or update---------is sync 1 or 0
                } else {
                //Sync the data in lead details and fetch the synced data from application stage
                    leadTableFromDB.setSync(true);
                    leadTableFromDB.setIsDataCaptured(true);

                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_STUDENT_FULL_NAME)) {
                            leadTableFromDB.setClientName(hashMap.get(TAG_NAME_STUDENT_FULL_NAME).toString());
                        } else if (hashMap.containsKey(TAG_NAME_STUDENT_FULL_NAME)) {
                            String firstName = hashMap.get(TAG_NAME_STUDENT_FULL_NAME).toString();
                            if (!TextUtils.isEmpty(firstName)) {
                                leadTableFromDB.setClientName(firstName);
                            }
                        }
                        if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                            leadTableFromDB.setMobileNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                        } else if (hashMap.containsKey(TAG_NAME_MOBILENUMBER)) {
                            String mobilenumber = hashMap.get(TAG_NAME_MOBILENUMBER).toString();
                            if (!TextUtils.isEmpty(mobilenumber)) {
                                leadTableFromDB.setMobileNo(mobilenumber);
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_INTERESTED_IN_LOAN)) {
                            String interested = hashMap.get(TAG_NAME_INTERESTED_IN_LOAN).toString();
                            if (!TextUtils.isEmpty(interested) && interested.equalsIgnoreCase("yes")) {
                                leadTableFromDB.setInterestedInLoan(1);
                            } else {
                                leadTableFromDB.setInterestedInLoan(0);
                            }
                        }

                        //update status
                        if (hashMap.containsKey(TAG_NAME_LEAD_STATUS)) {
                            String leadStatus = hashMap.get(TAG_NAME_LEAD_STATUS).toString();
                            if (!TextUtils.isEmpty(leadStatus)) {
                                leadTableFromDB.setLeadStatus(leadStatus);
                            }
                        }
                    }
                    dynamicUIDao.insertLeadTable(leadTableFromDB);
                }

            } else {
                LeadTable leadTable = new LeadTable();
                leadTable.setClientId(rawDataTable.getClient_id());
                leadTable.setCreatedBy(rawDataTable.getUser_id());
                leadTable.setSync(false);
                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                leadTable.setCreated_date(dateTime);
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);

                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_STUDENT_FULL_NAME)) {
                        leadTable.setClientName(hashMap.get(TAG_NAME_STUDENT_FULL_NAME).toString());
                    }
                    if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                        leadTable.setMobileNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                    }
                    if (hashMap.containsKey(TAG_NAME_INTERESTED_IN_LOAN)) {
                        String interestedInLoan = hashMap.get(TAG_NAME_INTERESTED_IN_LOAN).toString();
                        if (!TextUtils.isEmpty(interestedInLoan) && interestedInLoan.equalsIgnoreCase("yes")) {
                            leadTable.setInterestedInLoan(1);
                        } else {
                            leadTable.setInterestedInLoan(0);
                        }

                    }
                }
                leadTable.setLoan_type(rawDataTable.getLoan_type());
                leadTable.setIsDataCaptured(false);
                leadTable.setSync(false);

                dynamicUIDao.insertLeadTable(leadTable);
            }
        });
    }

    public LiveData<List<RawDataTable>> insertRawData(RawDataTable rawDataTable, List<DynamicUITable> viewParametersList,
                                                      DynamicUITable dynamicUITable, boolean isDataFromServer) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            // TODO: old query
            RawDataTable rawDataTableFromDB = dynamicUIDao.getTopRawData(dynamicUITable.getScreenID(), rawDataTable.getClient_id());

            if (rawDataTableFromDB != null) {
                if (rawDataTableFromDB.getRef_id() != 0) {
                    int refId = rawDataTableFromDB.getRef_id() + 1;
                    rawDataTable.setRef_id(refId);
                    rawDataTable.setUniqueId(String.valueOf(refId));
                    String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                    rawDataTable.setTag_name(rawDataTag);
                    dynamicUITable.setValue(rawDataTag);
                    rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                    rawDataTable.setProductId(dynamicUITable.getProductId());
                }
            } else {
                int refId = 1;
                rawDataTable.setRef_id(refId);
                rawDataTable.setUniqueId(String.valueOf(refId));
                String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                rawDataTable.setTag_name(rawDataTag);
                dynamicUITable.setValue(rawDataTag);
                rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                rawDataTable.setProductId(dynamicUITable.getProductId());
            }
            try {
                JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                // TODO: Adding save button as tag
                jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());

                // TODO: ONLY FOR LEAD SCREEN
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                    try {
                        PackageInfo packageInfo = App.context.getPackageManager().getPackageInfo(App.context.getPackageName(), 0);
                        String appVersion = packageInfo.versionName;
                        if (!TextUtils.isEmpty(appVersion)) {
                            jsonObject.put(TAG_NAME_MOBILE_APP_VERSION, appVersion);
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                try {
                    // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                    DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                    if (uniqueIdObj != null) {
                        jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                    }
                    DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                    if (correlationIdObj != null) {
                        jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                    }

                    // TODO: inserting IS VERIFIED in raw data bag
                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                            || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                        DynamicUITable isVerifiedObj = getObjectByTAG(TAG_NAME_IS_VERIFIED, viewParametersList);
                        if (isVerifiedObj != null) {
                            if (!TextUtils.isEmpty(isVerifiedObj.getValue()) && isVerifiedObj.getValue().equalsIgnoreCase(IS_VERIFIED_TRUE)) {
                                jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_TRUE);
                            } else {
                                jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_FALSE);
                            }
                        }
                    }

                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)) {
                        DynamicUITable isnegativeResultObj = getObjectByTAG(TAG_NAME_NEGATIVE_RESULT, viewParametersList);
                        if (isnegativeResultObj != null) {
                            if (!TextUtils.isEmpty(isnegativeResultObj.getValue())) {
                                jsonObject.put(isnegativeResultObj.getFieldTag(), isnegativeResultObj.getValue());
                            } else {
                                jsonObject.put(isnegativeResultObj.getFieldTag(), "");
                            }
                        }
                    }

                    // TODO: inserting ISDEVIATION in raw data bag
                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LOAN_SUGGESTION_MSME)) {
                        DynamicUITable isDeviationObj = getObjectByTAG(TAG_NAME_ISDEVIATION_IN_LOAN_SUGGESTION_MSME, viewParametersList);
                        if (isDeviationObj != null) {
                            jsonObject.put(isDeviationObj.getFieldTag(), 0);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                rawDataTable.setRawdata(jsonObject.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            dynamicUIDao.updateDynamicUITable(viewParametersList); // TODO: First update DynamicUITable list values

            String dynamicUiRawData = new Gson().toJson(viewParametersList);
            if (!TextUtils.isEmpty(dynamicUiRawData)) {
                rawDataTable.setDynamic_ui_rawdata(dynamicUiRawData);
            }

            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                        rawDataTable.setField_name(hashMap.get(TAG_NAME_FULL_NAME).toString());
                    }
                }
            } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                HashMap<String, Object> hashMapRawData = setKeyValueForObject(rawDataTable);
                if (hashMapRawData != null && hashMapRawData.size() > 0) {
                    if (hashMapRawData.containsKey(TAG_NAME_FULL_NAME)) {
                        rawDataTable.setField_name(hashMapRawData.get(TAG_NAME_FULL_NAME).toString());

                        if (!TextUtils.isEmpty(rawDataTable.getClient_id()) && !TextUtils.isEmpty(rawDataTable.getLoan_type())
                                && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                            // TODO: INSERTING NEW CLIENT IN MASTER TABLE

                            MasterTable masterTableToInsert = new MasterTable();
                            masterTableToInsert.setClientId(rawDataTable.getClient_id());
                            masterTableToInsert.setClientName(hashMapRawData.get(TAG_NAME_FULL_NAME).toString());
                            masterTableToInsert.setCurrentStage(CURRENT_STAGE_APPLICATION);
                            masterTableToInsert.setApplicationStatus(APPLICATION_STATUS_NEW);
                            masterTableToInsert.setFinalStatus(FINAL_STATUS_PENDING);
                            masterTableToInsert.setSync(false);
                            masterTableToInsert.setLoan_type(rawDataTable.getLoan_type()); // TODO: LOAN TYPE
                            masterTableToInsert.setAllDataCaptured(false);
                            if (!TextUtils.isEmpty(LOSBaseActivity.branchId)) {
                                masterTableToInsert.setBranchId(LOSBaseActivity.branchId);

                            }
                            if (!TextUtils.isEmpty(LOSBaseActivity.branchGSTcode)) {
                                masterTableToInsert.setBranchGSTcode(LOSBaseActivity.branchGSTcode);
                            }
                            if (hashMapRawData.containsKey(TAG_NAME_CENTER_NAME)) {
                                String centerName = hashMapRawData.get(TAG_NAME_CENTER_NAME).toString();
                                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterName(
                                        centerName, rawDataTable.getUser_id(), rawDataTable.getLoan_type());
                                if (centerCreationTable != null && !TextUtils.isEmpty(centerCreationTable.getCenterId())) {
                                    masterTableToInsert.setCenterId(centerCreationTable.getCenterId()); // TODO: CENTER ID
                                    masterTableToInsert.setCenterName(centerCreationTable.getCenterName()); // TODO: CENTER NAME

                                }
                                if (centerCreationTable != null && !TextUtils.isEmpty(centerCreationTable.getBranchGSTcode())) {
                                    masterTableToInsert.setBranchGSTcode(centerCreationTable.getBranchGSTcode());
                                }
                            }

                            masterTableToInsert.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                            masterTableToInsert.setReviewBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                            String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                            masterTableToInsert.setCreated_date(TimestampConverter.toDate(dateTime));

                            // TODO: Insert Master table
                            dynamicUIDao.insertAndDeleteMasterTable(masterTableToInsert, rawDataTable.getClient_id());

                            // TODO: To update No Of Customers
                            if (hashMapRawData.containsKey(TAG_NAME_CENTER_NAME)) {
                                String centerName = hashMapRawData.get(TAG_NAME_CENTER_NAME).toString();
                                CenterCreationTable centerCreationTable = dynamicUIDao.getCenterCreationTableByCenterName(
                                        centerName, rawDataTable.getUser_id(), rawDataTable.getLoan_type());
                                if (centerCreationTable != null && !TextUtils.isEmpty(centerCreationTable.getCenterId())) {
                                    List<MasterTable> masterTableListFromDB = dynamicUIDao.getMasterTableByCenterId(centerCreationTable.getCenterId(), centerCreationTable.getLoan_type());
                                    if (masterTableListFromDB != null && masterTableListFromDB.size() > 0) {
                                        dynamicUIDao.updateCenterCreationTableMembersCount(masterTableListFromDB.size(), centerCreationTable.getId());
                                    }
                                }
                            }

                        }
                    }
                }
            }  else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_VILLAGE_SURVEY)) {
                HashMap<String, Object> hashMapRawData = setKeyValueForObject(rawDataTable);
                if (hashMapRawData != null && hashMapRawData.size() > 0) {
                    if (hashMapRawData.containsKey(TAG_NAME_VILLAGE_NAME_IN_VILLAGE_SURVEY)) {
                        rawDataTable.setField_name(hashMapRawData.get(TAG_NAME_VILLAGE_NAME_IN_VILLAGE_SURVEY).toString());

                        if (!TextUtils.isEmpty(rawDataTable.getClient_id()) && !TextUtils.isEmpty(rawDataTable.getLoan_type())
                                && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                            // TODO: INSERT INTO VILLAGE SURVEY TABLE

                            VillageSurveyTable villageSurveyTable = new VillageSurveyTable();
                            villageSurveyTable.setVillageId(rawDataTable.getClient_id());
                            villageSurveyTable.setVillageName(hashMapRawData.get(TAG_NAME_VILLAGE_NAME_IN_VILLAGE_SURVEY).toString());

                            if (hashMapRawData.containsKey(TAG_NAME_DISTRICT_IN_VILLAGE_SURVEY)) {
                                villageSurveyTable.setDistrict(hashMapRawData.get(TAG_NAME_DISTRICT_IN_VILLAGE_SURVEY).toString());
                            }
                            if (hashMapRawData.containsKey(TAG_NAME_PINCODE_IN_VILLAGE_SURVEY)) {
                                villageSurveyTable.setPincode(hashMapRawData.get(TAG_NAME_PINCODE_IN_VILLAGE_SURVEY).toString());
                            }
                            if (hashMapRawData.containsKey(TAG_NAME_CITY_IN_VILLAGE_SURVEY)) {
                                villageSurveyTable.setCity(hashMapRawData.get(TAG_NAME_CITY_IN_VILLAGE_SURVEY).toString());
                            }
                            villageSurveyTable.setStatus(FINAL_STATUS_PENDING);
                            villageSurveyTable.setSync(false);
                            villageSurveyTable.setLoan_type(rawDataTable.getLoan_type()); // TODO: LOAN TYPE

                            if (!TextUtils.isEmpty(LOSBaseActivity.branchId)) {
                                villageSurveyTable.setBranchId(LOSBaseActivity.branchId);
                            }
                            if (!TextUtils.isEmpty(branchGSTcode)) {
                                villageSurveyTable.setBranchGSTcode(branchGSTcode);
                            }
                            villageSurveyTable.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                            String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_DD_MM_YYYY2);
                            villageSurveyTable.setCreated_date(dateTime);

                            // TODO: insert village survey table
                            dynamicUIDao.insertAndDeleteVillageSurveyTable(villageSurveyTable, rawDataTable.getClient_id());
                        }
                    }
                }
            } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CENTER_CREATION)) {
                HashMap<String, Object> hashMapRawData = setKeyValueForObject(rawDataTable);
                if (hashMapRawData != null && hashMapRawData.size() > 0) {
                    if (hashMapRawData.containsKey(TAG_NAME_CENTER_NAME_IN_CENTER_CREATION)) {
                        rawDataTable.setField_name(hashMapRawData.get(TAG_NAME_CENTER_NAME_IN_CENTER_CREATION).toString());


                        if (!TextUtils.isEmpty(rawDataTable.getClient_id()) && !TextUtils.isEmpty(rawDataTable.getLoan_type())
                                && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                            // TODO: INSERT INTO CENTER CREATION TABLE

                            CenterCreationTable centerCreationTable = new CenterCreationTable();
                            centerCreationTable.setCenterId(rawDataTable.getClient_id());
                            centerCreationTable.setCenterName(hashMapRawData.get(TAG_NAME_CENTER_NAME_IN_CENTER_CREATION).toString());
                            if (hashMapRawData.containsKey(TAG_NAME_VILLAGE_NAME_IN_CENTER_CREATION)) {
                                centerCreationTable.setVillageName(hashMapRawData.get(TAG_NAME_VILLAGE_NAME_IN_CENTER_CREATION).toString());
                            }

                            centerCreationTable.setStatus(FINAL_STATUS_PENDING);
                            centerCreationTable.setSync(false);
                            centerCreationTable.setLoan_type(rawDataTable.getLoan_type()); // TODO: LOAN TYPE

                            if (!TextUtils.isEmpty(LOSBaseActivity.branchId)) {
                                centerCreationTable.setBranchId(LOSBaseActivity.branchId);
                            }
                            if (!TextUtils.isEmpty(branchGSTcode)) {
                                centerCreationTable.setBranchGSTcode(branchGSTcode);
                            }
                            centerCreationTable.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                            String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_DD_MM_YYYY2);
                            centerCreationTable.setCreated_date(dateTime);

                            // TODO: insert center creation table
                            dynamicUIDao.insertAndDeleteCenterCreationTable(centerCreationTable, rawDataTable.getClient_id());
                        }
                    }
                }
            }

            dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table

            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME)) {
                // TODO: insert lead data
                insertorUpdateLeadData(rawDataTable, dynamicUITable);
            } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                // TODO: insert lead data
                insertorUpdateLeadData(rawDataTable, dynamicUITable);
            } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
                // TODO: insert lead data
                insertorUpdateLeadData(rawDataTable, dynamicUITable);
            }  else {
                // TODO: insert lead data
                insertorUpdateLeadData(rawDataTable, dynamicUITable);
            }


            // TODO: Master table validation
            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameList(dynamicUITable.getScreenName(), dynamicUITable.getClientID(),
                        dynamicUITable.getModuleType());

                if (rawDataTableList != null && rawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable1 : rawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable1);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {
                                if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                        MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                                        if (masterTable != null) {
                                            dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                                    masterTable.getId());
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {//code
                            if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                                    if (masterTable != null) {
                                        dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                                masterTable.getId());


                                    }
                                }
                            }
                        }
                    }
                }
            }

            RawDataTable newlyAddedRow = dynamicUIDao.loadSingleRawData(rawDataTable.getScreen_no(), rawDataTable.getScreen_name(),
                    rawDataTable.getClient_id(), rawDataTable.getModuleType());

            // TODO: Update loan amount
            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)
                    && dynamicUITable.getModuleType().equalsIgnoreCase(MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE)) {
                Type type = new TypeToken<List<DynamicUITable>>() {
                }.getType();
                List<DynamicUITable> dynamicUITableList = new Gson().fromJson(newlyAddedRow.getDynamic_ui_rawdata(), type);
                if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                    DynamicUITable dynamicUITable1 = null;
                    //  DynamicUITable dynamicUITable1=null;

                    dynamicUITable1 = getObjectByTAG(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITableList);
                    MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(newlyAddedRow.getClient_id());
                    if (masterTable != null)
                        dynamicUIDao.updateLoanAmountInMasterTable(dynamicUITable1.getValue(), masterTable.getId());
                }
            }


            // TODO: ********* validation for document upload *************

            documentUploadNew(newlyAddedRow, dynamicUITable);

            // TODO: ********* validation for document upload *************
            //
            // TODO: ********* OTP Verification *************

            otpVerification(newlyAddedRow, dynamicUITable, isDataFromServer);

            // TODO: ********* OTP Verification *************

            // TODO: ********* CIBIL *************

            // TODO: data should not be tvName server
            if (!isDataFromServer) {
                insertIntoCIBILTable(newlyAddedRow, dynamicUITable);
            }

            // TODO: ********* CIBIL *************

            data.postValue(dynamicUIDao.loadRawData(rawDataTable.getScreen_no()));
//            }
        });
        return data;
    }

    public LiveData<List<RawDataTable>> salesToolApiCall(RawDataTable
                                                                 rawDataTable, List<DynamicUITable> viewParametersList,
                                                         DynamicUITable dynamicUITable, boolean isDataFromServer) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(SALES_TOOL_URL);

        executor.execute(() -> {

            // TODO: old query
            RawDataTable rawDataTableFromDB = dynamicUIDao.getTopRawData(dynamicUITable.getScreenID(), rawDataTable.getClient_id());

            if (rawDataTableFromDB != null) {
                if (rawDataTableFromDB.getRef_id() != 0) {
                    int refId = rawDataTableFromDB.getRef_id() + 1;
                    rawDataTable.setRef_id(refId);
                    rawDataTable.setUniqueId(String.valueOf(refId));
                    String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                    rawDataTable.setTag_name(rawDataTag);
                    dynamicUITable.setValue(rawDataTag);
                    rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                    rawDataTable.setProductId(dynamicUITable.getProductId());
                }
            } else {
                int refId = 1;
                rawDataTable.setRef_id(refId);
                rawDataTable.setUniqueId(String.valueOf(refId));
                String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                rawDataTable.setTag_name(rawDataTag);
                dynamicUITable.setValue(rawDataTag);
                rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                rawDataTable.setProductId(dynamicUITable.getProductId());
            }
            try {
                JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                // TODO: Adding save button as tag
                jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());

                try {
                    // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                    DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                    if (uniqueIdObj != null) {
                        jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                    }
                    DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                    if (correlationIdObj != null) {
                        jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                rawDataTable.setRawdata(jsonObject.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            dynamicUIDao.updateDynamicUITable(viewParametersList); // TODO: First update DynamicUITable list values

            String dynamicUiRawData = new Gson().toJson(viewParametersList);
            if (!TextUtils.isEmpty(dynamicUiRawData)) {
                rawDataTable.setDynamic_ui_rawdata(dynamicUiRawData);
            }

//            dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table

//            data.postValue(dynamicUIDao.loadRawData(rawDataTable.getScreen_no()));
        });
        return data;
    }

    public void insertRawDataFromServer(RawDataTable rawDataTable, List<DynamicUITable> viewParametersList,
                                        DynamicUITable dynamicUITable) {

        // TODO: old query
        RawDataTable rawDataTableFromDB = dynamicUIDao.getTopRawData(dynamicUITable.getScreenID(), rawDataTable.getClient_id());

        if (rawDataTableFromDB != null) {
            if (rawDataTableFromDB.getRef_id() != 0) {
                int refId = rawDataTableFromDB.getRef_id() + 1;
                rawDataTable.setRef_id(refId);
                rawDataTable.setUniqueId(String.valueOf(refId));
                String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                rawDataTable.setTag_name(rawDataTag);
                dynamicUITable.setValue(rawDataTag);
                rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                rawDataTable.setProductId(dynamicUITable.getProductId());
            }
        } else {
            int refId = 1;
            rawDataTable.setRef_id(refId);
            rawDataTable.setUniqueId(String.valueOf(refId));
            String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
            rawDataTable.setTag_name(rawDataTag);
            dynamicUITable.setValue(rawDataTag);
            rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
            rawDataTable.setProductId(dynamicUITable.getProductId());
        }
        try {
            JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
            // TODO: Adding save button as tag
            jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());

            // TODO: ONLY FOR LEAD SCREEN
            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                try {
                    PackageInfo packageInfo = App.context.getPackageManager().getPackageInfo(App.context.getPackageName(), 0);
                    String appVersion = packageInfo.versionName;
                    if (!TextUtils.isEmpty(appVersion)) {
                        jsonObject.put(TAG_NAME_MOBILE_APP_VERSION, appVersion);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } // TODO: LOAN PROPOSAL SCREEN
            else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)
                    && rawDataTable.getModuleType().equalsIgnoreCase(MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE)) {
                try {
                    MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                    if (masterTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                // TODO: UPDATING MASTER TABLE LOAN AMOUNT
                                dynamicUIDao.updateMasterTableLoanAmount(hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString(),
                                        masterTable.getId());
                            }
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            try {
                // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                if (uniqueIdObj != null) {
                    jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                }
                DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                if (correlationIdObj != null) {
                    jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                }

                // TODO: inserting IS VERIFIED in raw data bag
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                    DynamicUITable isVerifiedObj = getObjectByTAG(TAG_NAME_IS_VERIFIED, viewParametersList);
                    if (isVerifiedObj != null) {
                        if (!TextUtils.isEmpty(isVerifiedObj.getValue()) && isVerifiedObj.getValue().equalsIgnoreCase(IS_VERIFIED_TRUE)) {
                            jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_TRUE);
                        } else {
                            jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_FALSE);
                        }
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            rawDataTable.setRawdata(jsonObject.toString());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        dynamicUIDao.updateDynamicUITable(viewParametersList); // TODO: First update DynamicUITable list values

        String dynamicUiRawData = new Gson().toJson(viewParametersList);
        if (!TextUtils.isEmpty(dynamicUiRawData)) {
            rawDataTable.setDynamic_ui_rawdata(dynamicUiRawData);
        }

        if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
            if (hashMap != null && hashMap.size() > 0) {
                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                    rawDataTable.setField_name(hashMap.get(TAG_NAME_FULL_NAME).toString());
                }
            }
        } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
            HashMap<String, Object> hashMapRawData = setKeyValueForObject(rawDataTable);
            if (hashMapRawData != null && hashMapRawData.size() > 0) {
                if (hashMapRawData.containsKey(TAG_NAME_FULL_NAME)) {
                    rawDataTable.setField_name(hashMapRawData.get(TAG_NAME_FULL_NAME).toString());
                }
            }
        }

        dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table

        if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
            List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameList(dynamicUITable.getScreenName(), dynamicUITable.getClientID(),
                    dynamicUITable.getModuleType());

            if (rawDataTableList != null && rawDataTableList.size() > 0) {
                for (RawDataTable rawDataTable1 : rawDataTableList) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable1);
                    if (hashMap != null && hashMap.size() > 0) {

                        // TODO: Updating client Name In Master Table
                        if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                            MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                            if (masterTable != null && TextUtils.isEmpty(masterTable.getClientName())) {
                                dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                        masterTable.getId());
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {
                            if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                                    if (masterTable != null) {
                                        dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                                masterTable.getId());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                if (hashMap != null && hashMap.size() > 0) {

                    // TODO: Updating client Name In Master Table
                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                        MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                        if (masterTable != null && TextUtils.isEmpty(masterTable.getClientName())) {
                            dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                    masterTable.getId());
                        }
                    }

                    if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {//code
                        if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                                if (masterTable != null) {
                                    dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                            masterTable.getId());
                                }
                            }
                        }
                    }
                }
            }
        }

        RawDataTable newlyAddedRow = dynamicUIDao.loadSingleRawData(rawDataTable.getScreen_no(), rawDataTable.getScreen_name(),
                rawDataTable.getClient_id(), rawDataTable.getModuleType());

        // TODO: ********* validation for document upload *************

//        documentUploadNew(newlyAddedRow, dynamicUITable);

        // TODO: ********* validation for document upload *************
        //
        // TODO: ********* OTP Verification *************

        otpVerification(newlyAddedRow, dynamicUITable, true);

        // TODO: ********* OTP Verification *************

    }

    private void documentUploadNew(RawDataTable rawDataTable, DynamicUITable dynamicUITable) {
        try {
            // TODO: ********* validation for document upload *************
            int applicantAgeValue=0;
            String outSideIndia = "", earningCapacityOfStudent = "";
            RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
            if (leadRawData != null) {
                HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                if (hashMap != null && hashMap.size() > 0) {
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_APPLICATION_ENTER_AGE)) {
                            applicantAgeValue = Integer.valueOf(hashMap.get(TAG_NAME_APPLICATION_ENTER_AGE).toString());
                        }
                        if (hashMap.containsKey(TAG_NAME_EARNING_CAPACITY_OF_STUDENT)) {
                            earningCapacityOfStudent = hashMap.get(TAG_NAME_EARNING_CAPACITY_OF_STUDENT).toString();
                        }
                    }
                }
            }


            // TODO: APPLICANT KYC SCREEN
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                DynamicUITable applicantKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_KYC_TYPE, rawDataTable.getScreen_no());
                if (applicantKycType != null && !TextUtils.isEmpty(applicantKycType.getValue())) {

                    // TODO: Document upload table

                    // TODO: Applicant Photo
                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                            DOCUMENT_NAME_APPLICANT_PHOTO, rawDataTable, "", "");
                    if(applicantAgeValue >= 19 && earningCapacityOfStudent.equalsIgnoreCase("Yes")){
                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_APPLICANT_STUDENT_ADMIT_LETTER, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_APPLICANT_FEE_STRUCTURE, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_10_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_12_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_GRADUATION, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_EXAM_SCORE_CARD, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_FEE_INSTITUTE, rawDataTable, "", "");

//                        // TODO: House Photo
//                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
//                                DOCUMENT_NAME_HOUSE_PHOTO, rawDataTable, "", "");
                    }else{
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_APPLICANT_STUDENT_ADMIT_LETTER, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_APPLICANT_FEE_STRUCTURE, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_10_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_12_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_GRADUATION, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_EXAM_SCORE_CARD, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_FEE_INSTITUTE, rawDataTable, "", "");

                        // TODO: House Photo
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_HOUSE_PHOTO, rawDataTable, "", "");
                    }


                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                        // TODO: Shop Photo
                        if (leadRawData != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {

                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {

                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
                                    }
                                }

                            }
                        }


                        // TODO: Income Proof Bank Statement
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");

                       /* insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");*/

                    }


                    /*if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
                        // TODO: Shop Photo

                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                        if (leadRawData != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {

                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {

                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
                                    }
                                }

                            }
                        }


                        // TODO: Income Proof Bank Statement
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");

                        *//*insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");*//*

                    }
                    else {
                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                        if (leadRawData != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {

                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {

                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
                                    }
                                }

                            }
                        }


                        // TODO: Income Proof Bank Statement
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");

                        *//*insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");*//*
                    }*/


                    // TODO: Others Photos
                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                            , DOCUMENT_NAME_OTHERS, rawDataTable, "", "");

                    /*insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                            , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");*/

                    // TODO: ID PROOF
                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id(),
                            applicantKycType.getValue(), rawDataTable, "", "");

                }
            }

            // TODO: PERSONAL DETAILS SCREEN

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {

                // TODO: Only for JLG
                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {

                    RawDataTable rawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PERSONAL_DETAIL, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                    if (rawDataPersonalDetail != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataPersonalDetail);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
                                String maritialStatus = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
                                if (!TextUtils.isEmpty(maritialStatus) && maritialStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {
                                    // TODO: Spouse KYC
                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
                                } else {
                                    // TODO: deletee Spouse KYC
                                    deleteDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
                                }
                            }
                        }
                    }
                }


            }
           /* if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ENACH)) {
                RawDataTable rawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_ENACH, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                if (rawDataPersonalDetail != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataPersonalDetail);
                    if (hashMap != null && hashMap.size() > 0) {
                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
                    }
                }
            }*/

            // TODO: Nominee DETAILS SCREEN

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)) {

                // TODO: Only for JLG
                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {

                    RawDataTable rawDataNomineeDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_NOMINEE_DETAIL, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                    if (rawDataNomineeDetail != null) {
                        // TODO: Nominee KYC
                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                , DOCUMENT_NAME_NOMINEE_KYC, rawDataTable, "", "");

//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataNomineeDetail);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
//                                String maritialStatus = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
//                                if (!TextUtils.isEmpty(maritialStatus) && maritialStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {
//                                    // TODO: Spouse KYC
//                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
//                                }else {
//                                    // TODO: deletee Spouse KYC
//                                    deleteDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
//                                }
//                            }
//                        }
                    }
                }


            }

            // TODO: APPLICANT BANK DETAILS SCREEN

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)) {

                // TODO: BANK ACCOUNT DETAILS
                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                        , DOCUMENT_NAME_BANK_ACCOUNT_DETAILS, rawDataTable, "", "");

                // TODO: Only for JLG
                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                    RawDataTable rawDataBankDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_BANK_DETAILS, rawDataTable.getClient_id(), rawDataTable.getLoan_type());

                    if (rawDataBankDetail != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataBankDetail);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_DUAL_NAME_DECLARATION)) {
                                String dualNameDeclaration = hashMap.get(TAG_NAME_DUAL_NAME_DECLARATION).toString();
                                if (!TextUtils.isEmpty(dualNameDeclaration) && dualNameDeclaration.equalsIgnoreCase(CHECKBOX_DUAL_NAME_DECLARATION_YES)) {
                                    // TODO: Dual Name Declaration
                                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                            , DOCUMENT_NAME_DUAL_NAME_DECLARATION, rawDataTable, "", "");


                                } else {
                                    // TODO:deletion of Dual Name Declaration
                                    deleteDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                            , DOCUMENT_NAME_DUAL_NAME_DECLARATION, rawDataTable, "", "");
                                }
                            } else {
                                // TODO: Delation of Dual Name Declaration
                                deleteDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                                        , DOCUMENT_NAME_DUAL_NAME_DECLARATION, rawDataTable, "", "");
                            }
                        }
                    }

                }


            }

            // TODO: CO APPLICANT BANK DETAILS SCREEN

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {

               /* // TODO: Document upload table
                String documentName = "coappbankproof";
                String photoDisplayName = DOCUMENT_DISPLAY_NAME_CO_APPLICANT_BANK_PHOTO;
                String photoTagName = DOCUMENT_TAG_NAME_CO_APPLICANT_BANK_STATEMENT;

                if (!TextUtils.isEmpty(rawDataTable.getModuleType())) {
                    String noOfCoApplicant;
                    noOfCoApplicant = rawDataTable.getModuleType().substring(rawDataTable.getModuleType().length() - 1);

                    photoTagName = photoTagName.replace("coapbankst", DOCUMENT_TAG_NAME_CO_APPLICANT_BANK_STATEMENT + noOfCoApplicant);
                    photoDisplayName = photoDisplayName.replace("CoApplicant", rawDataTable.getModuleType());
                }

                // TODO: Co App Bank Photo
                insertDocumentUpload(rawDataTable.getId(),
                        rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                        documentName, photoTagName, photoDisplayName,
                        dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/

                // TODO: CO APPLICANT BANK ACCOUNT DETAILS
                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                        , DOCUMENT_NAME_BANK_ACCOUNT_DETAILS, rawDataTable, "", "");


            }
            // TODO: APPLICANT ADDRESS DETAIL SCREEN
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)) {
                // TODO: Only for MSME & IL & AHL & PHL
                if (!rawDataTable.getLoan_type().equalsIgnoreCase("")) {
                    DynamicUITable permAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
                    DynamicUITable commAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, rawDataTable.getScreen_no());

                /*if (permAddress != null && commAddress != null) {
                    // TODO: Delete document if already exist
                    DocumentUploadTable documentUploadTable = dynamicUIDao.getDocumentUploadByRawId(rawDataTable.getId());
                    if (documentUploadTable != null) {
                        dynamicUIDao.deleteDocumentByRawId(rawDataTable.getId());
                    }
                }*/

                    if (permAddress != null && !TextUtils.isEmpty(permAddress.getValue())) {

                        if (permAddress.getValue().equalsIgnoreCase("no")) {
                            DynamicUITable permKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_KYC_TYPE, rawDataTable.getScreen_no());
                            if (permKycType != null && !TextUtils.isEmpty(permKycType.getValue())) {

//                            String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_PERMANENT_ADDRESS_PROOF.replace("Permanent Address", permKycType.getValue());

                 /*           // TODO: Document upload table
                            insertDocumentUpload(rawDataTable.getId(),
                                    rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                    permKycType.getValue(), DOCUMENT_TAG_NAME_APPLICANT_PERMANENT_ADDRESS_PROOF, displayName,
                                    dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/

                                // TODO: APPLICANT PERMANENT ADDRESS
                                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                        , permKycType.getValue(), rawDataTable, "", "");

                            }
                        }
                    }
                    if (commAddress != null && !TextUtils.isEmpty(commAddress.getValue())) {

                        if (commAddress.getValue().equalsIgnoreCase("no")) {
                            DynamicUITable comKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_KYC_TYPE, rawDataTable.getScreen_no());
                            if (comKycType != null && !TextUtils.isEmpty(comKycType.getValue())) {

                                String value = removeSpace(comKycType.getValue());
                                if (!TextUtils.isEmpty(value)) {
                                    List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
                                    if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
                                        boolean isExist = false;

                                        for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
                                            if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
                                                    && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
                                                isExist = true;
                                            }
                                        }

                                        if (!isExist) {

//                            String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_COMMUNICATION_ADDRESS_PROOF.replace("Communication Address", comKycType.getValue());

                          /*  insertDocumentUpload(rawDataTable.getId(),
                                    rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                    comKycType.getValue(), DOCUMENT_TAG_NAME_APPLICANT_COMMUNICATION_ADDRESS_PROOF, displayName,
                                    dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/

                                            // TODO: APPLICANT COMMUNICATION ADDRESS
                                            insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                                    , comKycType.getValue(), rawDataTable, "", "");
                                        }
                                    }
                                }

                            }
                        }
                    }
                }

                // TODO: Only for JLG
                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                    DynamicUITable permAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());

                    if (permAddress != null && !TextUtils.isEmpty(permAddress.getValue())) {
                        // TODO: APPLICANT PERMANENT ADDRESS
                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                , DOCUMENT_NAME_ADDRESS_PROOF, rawDataTable, "", "");
                    }
                }
            }
            // TODO: BUSINESS ID PROOF SCREEN
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {

                DynamicUITable businessIdProof = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_BUSINESS_DOCUMENT_PROOF, rawDataTable.getScreen_no());
                if (businessIdProof != null && !TextUtils.isEmpty(businessIdProof.getValue())) {

                    String value = removeSpace(businessIdProof.getValue());
                    if (!TextUtils.isEmpty(value)) {
                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
                            boolean isExist = false;

                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
                                if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
                                        && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
                                    isExist = true;
                                }
                            }

                            if (!isExist) {

//                                String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_BUSINESS_PROOF.replace("Business", businessIdProof.getValue());

                                /*insertDocumentUpload(rawDataTable.getId(),
                                        rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                        businessIdProof.getValue(), DOCUMENT_TAG_NAME_APPLICANT_BUSINESS_PROOF, displayName,
                                        dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/

                                // TODO: BUSINESS PROOF
                                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                        , businessIdProof.getValue(), rawDataTable, "", "");

                            }
                        }
                    }
                }

            } // TODO: BUSINESS ADDRESS PROOF SCREEN
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_ADDRESS_PROOF)) {

                DynamicUITable businessAddressProof = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_BUSINESS_ADDRESS_PROOF, rawDataTable.getScreen_no());
                if (businessAddressProof != null && !TextUtils.isEmpty(businessAddressProof.getValue())) {

                    String value = removeSpace(businessAddressProof.getValue());
                    if (!TextUtils.isEmpty(value)) {
                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
                            boolean isExist = false;

                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
                                if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
                                        && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
                                    isExist = true;
                                }
                            }

                            if (!isExist) {

                                if (!businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_PERMANENT_ADDRESS)
                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_COMMUNICATION_ADDRESS)
                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_KYC_ID_PROOF)
                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_BUSINESS_PROOF)) {

//                                    String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_BUSINESS_PROOF.replace("Business", businessAddressProof.getValue());

                                    /*insertDocumentUpload(rawDataTable.getId(),
                                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                            businessAddressProof.getValue(), DOCUMENT_TAG_NAME_APPLICANT_BUSINESS_ADDRESS_PROOF, displayName,
                                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/


                                    // TODO: BUSINESS ADDRESS PROOF
                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                            , businessAddressProof.getValue(), rawDataTable, "", "");


                                }
                            }
                        }
                    }
                }

            }
            // TODO: Office ADDRESS PROOF SCREEN
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_OFFICE_ADDRESS_PROOF)) {

                DynamicUITable officeAddressProof = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_ADDRESS_PROOF_IN_OFFICE_ADDRESS_PROOF, rawDataTable.getScreen_no());
                if (officeAddressProof != null && !TextUtils.isEmpty(officeAddressProof.getValue())) {

                    String value = removeSpace(officeAddressProof.getValue());
                    if (!TextUtils.isEmpty(value)) {
                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
                            boolean isExist = false;

                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
                                if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
                                        && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
                                    isExist = true;
                                }
                            }

                            if (!isExist) {

                               /* if (!businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_PERMANENT_ADDRESS)
                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_COMMUNICATION_ADDRESS)
                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_KYC_ID_PROOF)
                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_BUSINESS_PROOF)) {
*/
//                                    String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_BUSINESS_PROOF.replace("Business", businessAddressProof.getValue());

                                    /*insertDocumentUpload(rawDataTable.getId(),
                                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                            businessAddressProof.getValue(), DOCUMENT_TAG_NAME_APPLICANT_BUSINESS_ADDRESS_PROOF, displayName,
                                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/


                                if (!officeAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_NOT_AVAILABLE)
                                        || !officeAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_OTHERS))
                                    // TODO: Office ADDRESS PROOF
                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                            , officeAddressProof.getValue(), rawDataTable, "", "");


                            }
                        }
                    }
                }

            }

            // TODO: SALARY PROFILE SCREEN
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_SALARY_PROFILE)) {
                // TODO: ONLY FOR AHL
                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
                    RawDataTable rawDataSalaryProfile = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SALARY_PROFILE, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                    if (rawDataSalaryProfile != null) {
                        // TODO: Nominee KYC
                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                , DOCUMENT_NAME_SALARY_PROOF, rawDataTable, "", "");


                    }
                }
                // TODO: ONLY FOR PHL
                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                    RawDataTable rawDataSalaryProfile = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SALARY_PROFILE, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                    if (rawDataSalaryProfile != null) {
                        // TODO: Nominee KYC
                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                , DOCUMENT_NAME_SALARY_PROOF, rawDataTable, "", "");


                    }
                } else {
                    RawDataTable rawDataSalaryProfile = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SALARY_PROFILE, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                    if (rawDataSalaryProfile != null) {
                        // TODO: Nominee KYC
                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                , DOCUMENT_NAME_SALARY_PROOF, rawDataTable, "", "");


                    }
                }

            }

            // TODO: CO APPLICANT KYC SCREEN
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                DynamicUITable coApplicantKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_KYC_TYPE, rawDataTable.getScreen_no());
                if (coApplicantKycType != null && !TextUtils.isEmpty(coApplicantKycType.getValue())) {

                    // TODO: Co Applicant Photo
                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
                            , DOCUMENT_NAME_CO_APPLICANT_PHOTO, rawDataTable, "", "");

                    // TODO: CO APPLICANT ID PROOF
                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                            , coApplicantKycType.getValue(), rawDataTable, "", "");

                    if(applicantAgeValue <= 18 || earningCapacityOfStudent.equalsIgnoreCase("No")){

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_APPLICANT_STUDENT_ADMIT_LETTER, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_APPLICANT_FEE_STRUCTURE , rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_10_MARK_SHEET , rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_12_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_GRADUATION, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_EXAM_SCORE_CARD, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_N0_DOCUMENT_UPLOAD_EL, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_CO_FEE_INSTITUTE , rawDataTable, "", "");
                    }else {
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_APPLICANT_STUDENT_ADMIT_LETTER, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_APPLICANT_FEE_STRUCTURE, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_10_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_12_MARK_SHEET, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_GRADUATION, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_EXAM_SCORE_CARD, rawDataTable, "", "");

                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_FEE_INSTITUTE, rawDataTable, "", "");

                        // TODO: House Photo
                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
                                DOCUMENT_NAME_HOUSE_PHOTO, rawDataTable, "", "");
                    }
                }
            }
//            // TODO: CO APPLICANT ADDRESS DETAIL SCREEN  old validation
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
//                DynamicUITable commAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
//
//                if (commAddress != null && !TextUtils.isEmpty(commAddress.getValue())) {
//                    // TODO: Delete document upload if already exist
////                    DocumentUploadTable documentUploadTable = dynamicUIDao.getDocumentUploadByRawId(rawDataTable.getId());
////                    if (documentUploadTable != null) {
////                        dynamicUIDao.deleteDocumentByRawId(rawDataTable.getId());
////                    }
//
//                    if (commAddress.getValue().equalsIgnoreCase("no")) {
//                        DynamicUITable comKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_KYC_TYPE, rawDataTable.getScreen_no());
//                        if (comKycType != null && !TextUtils.isEmpty(comKycType.getValue())) {
//
//                            // TODO: should not add if drop down item is applicant permanent and communication address
//                            if (!comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)
//                                    && !comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {
//
//                                /*String noOfCoApplicant;
//                                noOfCoApplicant = rawDataTable.getModuleType().substring(rawDataTable.getModuleType().length() - 1);
//
//                                String displayName = DOCUMENT_DISPLAY_NAME_CO_APPLICANT_COMMUNICATION_ADDRESS_PROOF;
//                                String proofTagName = DOCUMENT_TAG_NAME_CO_APPLICANT_COMMUNICATION_ADDRESS_PROOF;
//                                proofTagName = proofTagName.replace("coappcomadd", DOCUMENT_TAG_NAME_CO_APPLICANT_COMMUNICATION_ADDRESS_PROOF + noOfCoApplicant);
//                                displayName = displayName.replace("CoApplicant", rawDataTable.getModuleType());
//                                displayName = displayName.replace("Communication Address", comKycType.getValue());
//
//                                // TODO: Document upload table
//                                insertDocumentUpload(rawDataTable.getId(),
//                                        rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                                        comKycType.getValue(), proofTagName, displayName,
//                                        dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//                                // TODO: CO APPLICANT ADDRESS PROOF
//                                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                        , comKycType.getValue(), rawDataTable, "", "");
//
//
//                            }
//                        }
//                    }
//                }
//            }

            // TODO: CO APPLICANT ADDRESS DETAIL SCREEN  new validation
            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
                // TODO: Only for MSME & IL & AHL
                if (!rawDataTable.getLoan_type().equalsIgnoreCase("")) {
                    DynamicUITable permAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
                    DynamicUITable commAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, rawDataTable.getScreen_no());


                    if (permAddress != null && !TextUtils.isEmpty(permAddress.getValue())) {

                        if (permAddress.getValue().equalsIgnoreCase("no")) {
                            DynamicUITable permKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_KYC_TYPE, rawDataTable.getScreen_no());
                            if (permKycType != null && !TextUtils.isEmpty(permKycType.getValue())) {
                                // TODO: should not add if drop down item is applicant permanent and communication address
                                if (!permKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)
                                        && !permKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {

                                    // TODO: APPLICANT PERMANENT ADDRESS
                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                            , permKycType.getValue(), rawDataTable, "", "");
                                }

                            }
                        }
                    }
                    if (commAddress != null && !TextUtils.isEmpty(commAddress.getValue())) {

                        if (commAddress.getValue().equalsIgnoreCase("no")) {
                            DynamicUITable comKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_KYC_TYPE, rawDataTable.getScreen_no());
                            if (comKycType != null && !TextUtils.isEmpty(comKycType.getValue())) {
                                // TODO: should not add if drop down item is applicant permanent and communication address
                                if (!comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)
                                        && !comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {

                                    // TODO: APPLICANT COMMUNICATION ADDRESS
                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
                                            , comKycType.getValue(), rawDataTable, "", "");
                                }

                            }
                        }
                    }
                }
            }


            // TODO: ********* validation for document upload *************
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

//    private void documentUploadNew(RawDataTable rawDataTable, DynamicUITable dynamicUITable) {
//        try {
//            // TODO: ********* validation for document upload *************
//
//            // TODO: APPLICANT KYC SCREEN
//
//            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
//                DynamicUITable applicantKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_KYC_TYPE, rawDataTable.getScreen_no());
//                if (applicantKycType != null && !TextUtils.isEmpty(applicantKycType.getValue())) {
//
//                    // TODO: Document upload table
//
//                    // TODO: Applicant Photo
//                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                            , DOCUMENT_NAME_APPLICANT_PHOTO, rawDataTable, "", "");
//
//                    // TODO: House Photo
//                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                            , DOCUMENT_NAME_HOUSE_PHOTO, rawDataTable, "", "");
//
//                    // TODO: Only for MSME & IL
//                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME)
//                            || rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)
//                    ) {
//                        // TODO: Shop Photo
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
//
//                        // TODO: Income Proof Bank Statement
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");
//
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//
//                        // TODO: Ownership proof ( only for applicant )
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_OWNERSHIP_PROOF, rawDataTable, DOCUMENT_DISPLAY_NAME_OWNERSHIP_PROOF, "");
//                    }
//
//                    // TODO: Only for AHL
//                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
//                        // TODO: Shop Photo
//
//                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                        if (leadRawData != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
//                            if (hashMap != null && hashMap.size() > 0) {
//                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
//
//                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
//                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
//                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {
//
//                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
//                                    }
//                                }
//
//                            }
//                        }
//
//
//                        // TODO: Income Proof Bank Statement
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");
//
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//
//                    }
//                    // TODO: Only for PHL
//                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {
//                        // TODO: Shop Photo
//
//                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                        if (leadRawData != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
//                            if (hashMap != null && hashMap.size() > 0) {
//                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
//
//                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
//                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED))
//                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
//
//                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
//                                    }
//                                }
//
//                            }
//                        }
//
//
//                        // TODO: Income Proof Bank Statement
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");
//
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//
//                    }
////                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_UCL)) {
////                        // TODO: Shop Photo
////
////                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
////                        if (leadRawData != null) {
////                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
////                            if (hashMap != null && hashMap.size() > 0) {
////                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
////
////                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
////                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
////                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {
////
////                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
////                                    }
////                                }
////
////                            }
////                        }
////
////
////                        // TODO: Income Proof Bank Statement
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");
////
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
////
////                    }
//
//
//                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
//                        // TODO: Shop Photo
//
//                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                        if (leadRawData != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
//                            if (hashMap != null && hashMap.size() > 0) {
//                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
//
//                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
//                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
//                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {
//
//                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
//                                    }
//                                }
//
//                            }
//                        }
//
//
//                        // TODO: Income Proof Bank Statement
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");
//
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//
//                    }
//                    else {
//                        RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                        if (leadRawData != null) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
//                            if (hashMap != null && hashMap.size() > 0) {
//                                if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
//
//                                    String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
//                                    if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
//                                            || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP))) {
//
//                                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                                , DOCUMENT_NAME_SHOP_PHOTO, rawDataTable, "", "");
//                                    }
//                                }
//
//                            }
//                        }
//
//
//                        // TODO: Income Proof Bank Statement
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_BANK_STATEMENT, rawDataTable, "", "");
//
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//                    }
//
//
//                    // TODO: Only for JLG
//                    if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
//
////                        // TODO: Spouse KYC
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
//
////                        // TODO: Nominee KYC
////                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                                , DOCUMENT_NAME_NOMINEE_KYC, rawDataTable, "", "");
//
//                        // TODO: Signature Photo
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id(),
//                                DOCUMENT_NAME_SIGNATURE_PHOTO, rawDataTable, "", "");
//
//
//                        // TODO: AOF
//                        insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_AOF, rawDataTable, "", "");
//                    }
//
//
//                    // TODO: Others Photos
//                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                            , DOCUMENT_NAME_OTHERS, rawDataTable, "", "");
//
////                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
////                            , DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//
//                    // TODO: ID PROOF
//                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id(),
//                            applicantKycType.getValue(), rawDataTable, "", "");
//
//                }
//            }
//
//            // TODO: PERSONAL DETAILS SCREEN
//
//            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
//
//                // TODO: Only for JLG
//                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
//
//                    RawDataTable rawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PERSONAL_DETAIL, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                    if (rawDataPersonalDetail != null) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataPersonalDetail);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
//                                String maritialStatus = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
//                                if (!TextUtils.isEmpty(maritialStatus) && maritialStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {
//                                    // TODO: Spouse KYC
//                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
//                                } else {
//                                    // TODO: deletee Spouse KYC
//                                    deleteDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
//                                }
//                            }
//                        }
//                    }
//                }
//
//
//            }
//           /* if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ENACH)) {
//                RawDataTable rawDataPersonalDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_ENACH, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                if (rawDataPersonalDetail != null) {
//                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataPersonalDetail);
//                    if (hashMap != null && hashMap.size() > 0) {
//                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), DOCUMENT_NAME_M_NACH, rawDataTable, "", "");
//                    }
//                }
//            }*/
//
//            // TODO: Nominee DETAILS SCREEN
//
//            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)) {
//
//                // TODO: Only for JLG
//                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
//
//                    RawDataTable rawDataNomineeDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_NOMINEE_DETAIL, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                    if (rawDataNomineeDetail != null) {
//                        // TODO: Nominee KYC
//                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_NOMINEE_KYC, rawDataTable, "", "");
//
////                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataNomineeDetail);
////                        if (hashMap != null && hashMap.size() > 0) {
////                            if (hashMap.containsKey(TAG_NAME_MARITAL_STATUS)) {
////                                String maritialStatus = hashMap.get(TAG_NAME_MARITAL_STATUS).toString();
////                                if (!TextUtils.isEmpty(maritialStatus) && maritialStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {
////                                    // TODO: Spouse KYC
////                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
////                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
////                                }else {
////                                    // TODO: deletee Spouse KYC
////                                    deleteDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
////                                            , DOCUMENT_NAME_SPOUSE_KYC, rawDataTable, "", "");
////                                }
////                            }
////                        }
//                    }
//                }
//
//
//            }
//
//            // TODO: APPLICANT BANK DETAILS SCREEN
//
//            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)) {
//
//                // TODO: BANK ACCOUNT DETAILS
//                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                        , DOCUMENT_NAME_BANK_ACCOUNT_DETAILS, rawDataTable, "", "");
//
//                // TODO: Only for JLG
//                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
//                    RawDataTable rawDataBankDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_BANK_DETAILS, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//
//                    if (rawDataBankDetail != null) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataBankDetail);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_DUAL_NAME_DECLARATION)) {
//                                String dualNameDeclaration = hashMap.get(TAG_NAME_DUAL_NAME_DECLARATION).toString();
//                                if (!TextUtils.isEmpty(dualNameDeclaration) && dualNameDeclaration.equalsIgnoreCase(CHECKBOX_DUAL_NAME_DECLARATION_YES)) {
//                                    // TODO: Dual Name Declaration
//                                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                            , DOCUMENT_NAME_DUAL_NAME_DECLARATION, rawDataTable, "", "");
//
//
//                                } else {
//                                    // TODO:deletion of Dual Name Declaration
//                                    deleteDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                            , DOCUMENT_NAME_DUAL_NAME_DECLARATION, rawDataTable, "", "");
//                                }
//                            } else {
//                                // TODO: Delation of Dual Name Declaration
//                                deleteDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                                        , DOCUMENT_NAME_DUAL_NAME_DECLARATION, rawDataTable, "", "");
//                            }
//                        }
//                    }
//
//                }
//
//
//            }
//
//            // TODO: CO APPLICANT BANK DETAILS SCREEN
//
//            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
//
//               /* // TODO: Document upload table
//                String documentName = "coappbankproof";
//                String photoDisplayName = DOCUMENT_DISPLAY_NAME_CO_APPLICANT_BANK_PHOTO;
//                String photoTagName = DOCUMENT_TAG_NAME_CO_APPLICANT_BANK_STATEMENT;
//
//                if (!TextUtils.isEmpty(rawDataTable.getModuleType())) {
//                    String noOfCoApplicant;
//                    noOfCoApplicant = rawDataTable.getModuleType().substring(rawDataTable.getModuleType().length() - 1);
//
//                    photoTagName = photoTagName.replace("coapbankst", DOCUMENT_TAG_NAME_CO_APPLICANT_BANK_STATEMENT + noOfCoApplicant);
//                    photoDisplayName = photoDisplayName.replace("CoApplicant", rawDataTable.getModuleType());
//                }
//
//                // TODO: Co App Bank Photo
//                insertDocumentUpload(rawDataTable.getId(),
//                        rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                        documentName, photoTagName, photoDisplayName,
//                        dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//                // TODO: CO APPLICANT BANK ACCOUNT DETAILS
//                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                        , DOCUMENT_NAME_BANK_ACCOUNT_DETAILS, rawDataTable, "", "");
//
//
//            }
//
//            // TODO: FAMILY MEMBER INCOME SCREEN
//
//         /*   if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_FAMILY_MEMBER_INCOME)) {
//                DynamicUITable documentType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_DOCUMENT_TYPE, rawDataTable.getScreen_no());
//                if (documentType != null && !TextUtils.isEmpty(documentType.getValue())) {
//
//                    // TODO: Document upload table
//
//                    // TODO: SALARY PROOF
//                    String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_SALARY_PROOF.replace("Id", documentType.getValue());
//
//                    insertDocumentUpload(rawDataTable.getId(),
//                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                            documentType.getValue(), DOCUMENT_TAG_NAME_SALARY_SLIP, displayName,
//                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());
//                }
//            }*/
//
//
//            // TODO: APPLICANT ADDRESS DETAIL SCREEN
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL)) {
//                // TODO: Only for MSME & IL & AHL & PHL
//                if (!rawDataTable.getLoan_type().equalsIgnoreCase("")) {
//                    DynamicUITable permAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
//                    DynamicUITable commAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, rawDataTable.getScreen_no());
//
//                /*if (permAddress != null && commAddress != null) {
//                    // TODO: Delete document if already exist
//                    DocumentUploadTable documentUploadTable = dynamicUIDao.getDocumentUploadByRawId(rawDataTable.getId());
//                    if (documentUploadTable != null) {
//                        dynamicUIDao.deleteDocumentByRawId(rawDataTable.getId());
//                    }
//                }*/
//
//                    if (permAddress != null && !TextUtils.isEmpty(permAddress.getValue())) {
//
//                        if (permAddress.getValue().equalsIgnoreCase("no")) {
//                            DynamicUITable permKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_KYC_TYPE, rawDataTable.getScreen_no());
//                            if (permKycType != null && !TextUtils.isEmpty(permKycType.getValue())) {
//
////                            String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_PERMANENT_ADDRESS_PROOF.replace("Permanent Address", permKycType.getValue());
//
//                 /*           // TODO: Document upload table
//                            insertDocumentUpload(rawDataTable.getId(),
//                                    rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                                    permKycType.getValue(), DOCUMENT_TAG_NAME_APPLICANT_PERMANENT_ADDRESS_PROOF, displayName,
//                                    dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//                                // TODO: APPLICANT PERMANENT ADDRESS
//                                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                        , permKycType.getValue(), rawDataTable, "", "");
//
//                            }
//                        }
//                    }
//                    if (commAddress != null && !TextUtils.isEmpty(commAddress.getValue())) {
//
//                        if (commAddress.getValue().equalsIgnoreCase("no")) {
//                            DynamicUITable comKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_KYC_TYPE, rawDataTable.getScreen_no());
//                            if (comKycType != null && !TextUtils.isEmpty(comKycType.getValue())) {
//
//                                String value = removeSpace(comKycType.getValue());
//                                if (!TextUtils.isEmpty(value)) {
//                                    List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
//                                    if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
//                                        boolean isExist = false;
//
//                                        for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
//                                            if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
//                                                    && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
//                                                isExist = true;
//                                            }
//                                        }
//
//                                        if (!isExist) {
//
////                            String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_COMMUNICATION_ADDRESS_PROOF.replace("Communication Address", comKycType.getValue());
//
//                          /*  insertDocumentUpload(rawDataTable.getId(),
//                                    rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                                    comKycType.getValue(), DOCUMENT_TAG_NAME_APPLICANT_COMMUNICATION_ADDRESS_PROOF, displayName,
//                                    dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//                                            // TODO: APPLICANT COMMUNICATION ADDRESS
//                                            insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                                    , comKycType.getValue(), rawDataTable, "", "");
//                                        }
//                                    }
//                                }
//
//                            }
//                        }
//                    }
//                }
//
//                // TODO: Only for JLG
//                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
//                    DynamicUITable permAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
//
//                    if (permAddress != null && !TextUtils.isEmpty(permAddress.getValue())) {
//                        // TODO: APPLICANT PERMANENT ADDRESS
//                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_ADDRESS_PROOF, rawDataTable, "", "");
//                    }
//                }
//            }
//            // TODO: BUSINESS ID PROOF SCREEN
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
//
//                DynamicUITable businessIdProof = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_BUSINESS_DOCUMENT_PROOF, rawDataTable.getScreen_no());
//                if (businessIdProof != null && !TextUtils.isEmpty(businessIdProof.getValue())) {
//
//                    String value = removeSpace(businessIdProof.getValue());
//                    if (!TextUtils.isEmpty(value)) {
//                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
//                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
//                            boolean isExist = false;
//
//                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
//                                if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
//                                        && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
//                                    isExist = true;
//                                }
//                            }
//
//                            if (!isExist) {
//
////                                String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_BUSINESS_PROOF.replace("Business", businessIdProof.getValue());
//
//                                /*insertDocumentUpload(rawDataTable.getId(),
//                                        rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                                        businessIdProof.getValue(), DOCUMENT_TAG_NAME_APPLICANT_BUSINESS_PROOF, displayName,
//                                        dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//                                // TODO: BUSINESS PROOF
//                                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                        , businessIdProof.getValue(), rawDataTable, "", "");
//
//                            }
//                        }
//                    }
//                }
//
//            } // TODO: BUSINESS ADDRESS PROOF SCREEN
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_ADDRESS_PROOF)) {
//
//                DynamicUITable businessAddressProof = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_BUSINESS_ADDRESS_PROOF, rawDataTable.getScreen_no());
//                if (businessAddressProof != null && !TextUtils.isEmpty(businessAddressProof.getValue())) {
//
//                    String value = removeSpace(businessAddressProof.getValue());
//                    if (!TextUtils.isEmpty(value)) {
//                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
//                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
//                            boolean isExist = false;
//
//                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
//                                if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
//                                        && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
//                                    isExist = true;
//                                }
//                            }
//
//                            if (!isExist) {
//
//                                if (!businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_PERMANENT_ADDRESS)
//                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_COMMUNICATION_ADDRESS)
//                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_KYC_ID_PROOF)
//                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_BUSINESS_PROOF)) {
//
////                                    String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_BUSINESS_PROOF.replace("Business", businessAddressProof.getValue());
//
//                                    /*insertDocumentUpload(rawDataTable.getId(),
//                                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                                            businessAddressProof.getValue(), DOCUMENT_TAG_NAME_APPLICANT_BUSINESS_ADDRESS_PROOF, displayName,
//                                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//
//                                    // TODO: BUSINESS ADDRESS PROOF
//                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , businessAddressProof.getValue(), rawDataTable, "", "");
//
//
//                                }
//                            }
//                        }
//                    }
//                }
//
//            }
//            // TODO: Office ADDRESS PROOF SCREEN
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_OFFICE_ADDRESS_PROOF)) {
//
//                DynamicUITable officeAddressProof = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_ADDRESS_PROOF_IN_OFFICE_ADDRESS_PROOF, rawDataTable.getScreen_no());
//                if (officeAddressProof != null && !TextUtils.isEmpty(officeAddressProof.getValue())) {
//
//                    String value = removeSpace(officeAddressProof.getValue());
//                    if (!TextUtils.isEmpty(value)) {
//                        List<DocumentUploadTableNew> documentUploadTableList = dynamicUIDao.getDocumentUploadTableList(dynamicUITable.getClientID());
//                        if (documentUploadTableList != null && documentUploadTableList.size() > 0) {
//                            boolean isExist = false;
//
//                            for (DocumentUploadTableNew documentUploadTable : documentUploadTableList) {
//                                if (!TextUtils.isEmpty(documentUploadTable.getDocument_name())
//                                        && documentUploadTable.getDocument_name().equalsIgnoreCase(value)) {
//                                    isExist = true;
//                                }
//                            }
//
//                            if (!isExist) {
//
//                               /* if (!businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_PERMANENT_ADDRESS)
//                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_COMMUNICATION_ADDRESS)
//                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_KYC_ID_PROOF)
//                                        && !businessAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_BUSINESS_PROOF)) {
//*/
////                                    String displayName = DOCUMENT_DISPLAY_NAME_APPLICANT_BUSINESS_PROOF.replace("Business", businessAddressProof.getValue());
//
//                                    /*insertDocumentUpload(rawDataTable.getId(),
//                                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                                            businessAddressProof.getValue(), DOCUMENT_TAG_NAME_APPLICANT_BUSINESS_ADDRESS_PROOF, displayName,
//                                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//
//                                if (!officeAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_NOT_AVAILABLE)
//                                        || !officeAddressProof.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_OTHERS))
//                                    // TODO: Office ADDRESS PROOF
//                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , officeAddressProof.getValue(), rawDataTable, "", "");
//
//
//                            }
//                        }
//                    }
//                }
//
//            }
//
//            // TODO: SALARY PROFILE SCREEN
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_SALARY_PROFILE)) {
//                // TODO: ONLY FOR AHL
//                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
//                    RawDataTable rawDataSalaryProfile = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SALARY_PROFILE, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                    if (rawDataSalaryProfile != null) {
//                        // TODO: Nominee KYC
//                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_SALARY_PROOF, rawDataTable, "", "");
//
//
//                    }
//                }
//                // TODO: ONLY FOR PHL
//                if (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL) || rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL) || rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
//                    RawDataTable rawDataSalaryProfile = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SALARY_PROFILE, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                    if (rawDataSalaryProfile != null) {
//                        // TODO: Nominee KYC
//                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_SALARY_PROOF, rawDataTable, "", "");
//
//
//                    }
//                } else {
//                    RawDataTable rawDataSalaryProfile = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_SALARY_PROFILE, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
//                    if (rawDataSalaryProfile != null) {
//                        // TODO: Nominee KYC
//                        insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                , DOCUMENT_NAME_SALARY_PROOF, rawDataTable, "", "");
//
//
//                    }
//                }
//
//            }
//
//            // TODO: CO APPLICANT KYC SCREEN
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
//                DynamicUITable coApplicantKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_KYC_TYPE, rawDataTable.getScreen_no());
//                if (coApplicantKycType != null && !TextUtils.isEmpty(coApplicantKycType.getValue())) {
//
//                   /* // TODO: Document upload table
//                    String documentName = "CoApplicant Photo";
//                    String photoDisplayName = DOCUMENT_DISPLAY_NAME_CO_APPLICANT_PHOTO;
//                    String idProofDisplayName = DOCUMENT_DISPLAY_NAME_CO_APPLICANT_ID_PROOF;
//                    String photoTagName = DOCUMENT_TAG_NAME_CO_APPLICANT_PHOTO;
//                    String idProofTagName = DOCUMENT_TAG_NAME_CO_APPLICANT_ID_PROOF;
//
//                    if (!TextUtils.isEmpty(rawDataTable.getModuleType())) {
//                        String noOfCoApplicant;
//                        noOfCoApplicant = rawDataTable.getModuleType().substring(rawDataTable.getModuleType().length() - 1);
//
//                        photoTagName = photoTagName.replace("coappphoto", DOCUMENT_TAG_NAME_CO_APPLICANT_PHOTO + noOfCoApplicant);
//                        idProofTagName = idProofTagName.replace("coapp", DOCUMENT_TAG_NAME_CO_APPLICANT_ID_PROOF + noOfCoApplicant);
//                        photoDisplayName = photoDisplayName.replace("CoApplicant", rawDataTable.getModuleType());
//                        idProofDisplayName = idProofDisplayName.replace("CoApplicant", rawDataTable.getModuleType());
//                        idProofDisplayName = idProofDisplayName.replace("Id", coApplicantKycType.getValue());
//                    }
//
//                    // TODO: Co Applicant Photo
//                    insertDocumentUpload(rawDataTable.getId(),
//                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                            documentName, photoTagName, photoDisplayName,
//                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());
//
//                    // TODO: Co Applicant ID Proof
//                    insertDocumentUpload(rawDataTable.getId(),
//                            rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
//                            coApplicantKycType.getValue(), idProofTagName, idProofDisplayName,
//                            dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
//
//                    // TODO: Co Applicant Photo
//                    insertDocumentUploadHeader(SCREEN_NO_ZERO, rawDataTable.getClient_id()
//                            , DOCUMENT_NAME_CO_APPLICANT_PHOTO, rawDataTable, "", "");
//
//                    // TODO: CO APPLICANT ID PROOF
//                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                            , coApplicantKycType.getValue(), rawDataTable, "", "");
//
//
//                }
//
//            }
////            // TODO: CO APPLICANT ADDRESS DETAIL SCREEN  old validation
////            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
////                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
////                DynamicUITable commAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
////
////                if (commAddress != null && !TextUtils.isEmpty(commAddress.getValue())) {
////                    // TODO: Delete document upload if already exist
//////                    DocumentUploadTable documentUploadTable = dynamicUIDao.getDocumentUploadByRawId(rawDataTable.getId());
//////                    if (documentUploadTable != null) {
//////                        dynamicUIDao.deleteDocumentByRawId(rawDataTable.getId());
//////                    }
////
////                    if (commAddress.getValue().equalsIgnoreCase("no")) {
////                        DynamicUITable comKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_KYC_TYPE, rawDataTable.getScreen_no());
////                        if (comKycType != null && !TextUtils.isEmpty(comKycType.getValue())) {
////
////                            // TODO: should not add if drop down item is applicant permanent and communication address
////                            if (!comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)
////                                    && !comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {
////
////                                /*String noOfCoApplicant;
////                                noOfCoApplicant = rawDataTable.getModuleType().substring(rawDataTable.getModuleType().length() - 1);
////
////                                String displayName = DOCUMENT_DISPLAY_NAME_CO_APPLICANT_COMMUNICATION_ADDRESS_PROOF;
////                                String proofTagName = DOCUMENT_TAG_NAME_CO_APPLICANT_COMMUNICATION_ADDRESS_PROOF;
////                                proofTagName = proofTagName.replace("coappcomadd", DOCUMENT_TAG_NAME_CO_APPLICANT_COMMUNICATION_ADDRESS_PROOF + noOfCoApplicant);
////                                displayName = displayName.replace("CoApplicant", rawDataTable.getModuleType());
////                                displayName = displayName.replace("Communication Address", comKycType.getValue());
////
////                                // TODO: Document upload table
////                                insertDocumentUpload(rawDataTable.getId(),
////                                        rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
////                                        comKycType.getValue(), proofTagName, displayName,
////                                        dynamicUITable.getLoanType(), dynamicUITable.getModuleType());*/
////
////                                // TODO: CO APPLICANT ADDRESS PROOF
////                                insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
////                                        , comKycType.getValue(), rawDataTable, "", "");
////
////
////                            }
////                        }
////                    }
////                }
////            }
//
//            // TODO: CO APPLICANT ADDRESS DETAIL SCREEN  new validation
//            else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
//                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL)) {
//                // TODO: Only for MSME & IL & AHL
//                if (!rawDataTable.getLoan_type().equalsIgnoreCase("")) {
//                    DynamicUITable permAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC, rawDataTable.getScreen_no());
//                    DynamicUITable commAddress = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_ADDRESS_SAME_AS_PERMANENT, rawDataTable.getScreen_no());
//
//
//                    if (permAddress != null && !TextUtils.isEmpty(permAddress.getValue())) {
//
//                        if (permAddress.getValue().equalsIgnoreCase("no")) {
//                            DynamicUITable permKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_PERMANENT_KYC_TYPE, rawDataTable.getScreen_no());
//                            if (permKycType != null && !TextUtils.isEmpty(permKycType.getValue())) {
//                                // TODO: should not add if drop down item is applicant permanent and communication address
//                                if (!permKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)
//                                        && !permKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {
//
//                                    // TODO: APPLICANT PERMANENT ADDRESS
//                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , permKycType.getValue(), rawDataTable, "", "");
//                                }
//
//                            }
//                        }
//                    }
//                    if (commAddress != null && !TextUtils.isEmpty(commAddress.getValue())) {
//
//                        if (commAddress.getValue().equalsIgnoreCase("no")) {
//                            DynamicUITable comKycType = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_COMMUNICATION_KYC_TYPE, rawDataTable.getScreen_no());
//                            if (comKycType != null && !TextUtils.isEmpty(comKycType.getValue())) {
//                                // TODO: should not add if drop down item is applicant permanent and communication address
//                                if (!comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_PERMANENT_ADDRESS)
//                                        && !comKycType.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SAME_AS_APPLICANT_COMMUNICATION_ADDRESS)) {
//
//                                    // TODO: APPLICANT COMMUNICATION ADDRESS
//                                    insertDocumentUploadHeader(rawDataTable.getScreen_no(), rawDataTable.getClient_id()
//                                            , comKycType.getValue(), rawDataTable, "", "");
//                                }
//
//                            }
//                        }
//                    }
//                }
//            }
//
//
//            // TODO: ********* validation for document upload *************
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//    }

    private void otpVerification(RawDataTable rawDataTable, DynamicUITable dynamicUITable, boolean isDataFromServer) {

        try {
            // TODO: ********* OTP Verification *************

            // TODO: PERSONAL DETAIL SCREEN & CO APPLICANT PERSONAL DETAIL SCREEN
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)
                    || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                DynamicUITable mobileNumberObj = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_CONTACT_NO_1, rawDataTable.getScreen_no());
                if (mobileNumberObj != null && !TextUtils.isEmpty(mobileNumberObj.getValue())) {
                    String name = "";
                    List<RawDataTable> applicantNameList;

                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                        applicantNameList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                    } else {
                        applicantNameList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                    }

                    if (applicantNameList != null && applicantNameList.size() > 0) {
                        RawDataTable applicantNameObj = applicantNameList.get(0);
                        HashMap<String, Object> hashMap = setKeyValueForObject(applicantNameObj);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                name = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                name = hashMap.get(TAG_NAME_FULL_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_PARTNERSHIP_FIRM_NAME)) {
                                name = hashMap.get(TAG_NAME_PARTNERSHIP_FIRM_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_PROPRIETORSHIP_FIRM_NAME)) {
                                name = hashMap.get(TAG_NAME_PROPRIETORSHIP_FIRM_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_COMPANY_NAME)) {
                                name = hashMap.get(TAG_NAME_COMPANY_NAME).toString();
                            }
                        }
                    }

                    if (!TextUtils.isEmpty(name)) {
                        // TODO: OTP Verification Table

                        OTPVerificationTable otpVerificationTable = new OTPVerificationTable(rawDataTable.getId(),
                                rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                rawDataTable.getModuleType().toUpperCase(), rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                mobileNumberObj.getValue(), name);

                        if (mobileNumberObj != null && !TextUtils.isEmpty(mobileNumberObj.getValue())) {
                            otpVerificationTable.setMobileNumber(mobileNumberObj.getValue());

                            // TODO: update master table mobile number
                            MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                            if (masterTable != null) {
                                dynamicUIDao.updateMasterTableMobileNumber(mobileNumberObj.getValue(),
                                        masterTable.getId());
                            }

                            // TODO: ONLY FOR JLG
                            if (!TextUtils.isEmpty(rawDataTable.getLoan_type()) &&
                                    rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                                // TODO: update cgt table mobile number
                                CGTTable cgtTable = dynamicUIDao.getCGTTableByClientId(rawDataTable.getClient_id());
                                if (cgtTable != null) {
                                    dynamicUIDao.updateCGTTableMobileNumber(mobileNumberObj.getValue(),
                                            cgtTable.getId());
                                }
                            }
                        }

                        OTPVerificationTable otpVerificationTableFromDB = dynamicUIDao.
                                getOTPVerificationByModuleTypeAndScreenName(rawDataTable.getClient_id(), rawDataTable.getModuleType(),
                                        rawDataTable.getScreen_name());

                        if (otpVerificationTableFromDB == null) {
                            // TODO: if not exist then insert
                            dynamicUIDao.insertOTPVerification(otpVerificationTable);

                        } else {

                            OTPVerificationTable otpVerificationTableAgainstMobile = dynamicUIDao.
                                    getOTPVerificationByMobile(mobileNumberObj.getValue(), mobileNumberObj.getClientID());

                            if (otpVerificationTableAgainstMobile != null && !TextUtils.isEmpty(otpVerificationTableAgainstMobile.getMobileNumber())) {

                                if (otpVerificationTableFromDB.getId() == otpVerificationTableAgainstMobile.getId()) {
                                    // TODO: update mobile number and status
                                    dynamicUIDao.updateOTPVerificationTableMobileNumber(otpVerificationTableFromDB.getId(),
                                            mobileNumberObj.getValue(), "", otpVerificationTableFromDB.isOTPVerified(), otpVerificationTableFromDB.isOTPGenerated());
                                } else {
                                    // TODO: mobile number already exist , then delete it
                                    dynamicUIDao.deleteOTPVerificationById(otpVerificationTableFromDB.getId());
                                }
                            } else {
                                // TODO: update mobile number and status
                                dynamicUIDao.updateOTPVerificationTableMobileNumber(otpVerificationTableFromDB.getId(),
                                        mobileNumberObj.getValue(), "", otpVerificationTableFromDB.isOTPVerified(), false);
                            }
                        }
                    }
                }

                // TODO: KYC SCREEN - UPDATE NAME
            } else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                    || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {

                DynamicUITable fullnameObj = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_FULL_NAME, rawDataTable.getScreen_no());

                if (fullnameObj != null && !TextUtils.isEmpty(fullnameObj.getValue())) {
                    String mob = "";
                    String screen_name = "";
                    String screen_no = "";
                    List<RawDataTable> mobileRawDataList;

                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                        mobileRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                        screen_name = SCREEN_NAME_PERSONAL_DETAIL;
                        screen_no = SCREEN_NO_PERSONAL_DETAIL_MSME;
                    } else {
                        mobileRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());

                        screen_name = SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL;
                        screen_no = SCREEN_NO_COAPPLICANT_PERSONAL_DETAIL_MSME;
                    }

                    if (mobileRawDataList != null && mobileRawDataList.size() > 0) {
                        RawDataTable mobileObj = mobileRawDataList.get(0);
                        HashMap<String, Object> hashMap = setKeyValueForObject(mobileObj);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                mob = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                            }
                        }
                    }

                    if (!TextUtils.isEmpty(mob)) {
                        // TODO: OTP Verification Table

                        OTPVerificationTable otpVerificationTable = new OTPVerificationTable(rawDataTable.getId(),
                                screen_no, screen_name, rawDataTable.getClient_id(),
                                rawDataTable.getModuleType().toUpperCase(), rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                mob, fullnameObj.getValue());

                        OTPVerificationTable otpVerificationTableFromDB = null;
                        if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                            otpVerificationTableFromDB = dynamicUIDao.
                                    getOTPVerificationByModuleTypeAndScreenName(rawDataTable.getClient_id(), rawDataTable.getModuleType(), SCREEN_NAME_PERSONAL_DETAIL);
                        } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                            otpVerificationTableFromDB = dynamicUIDao.
                                    getOTPVerificationByModuleTypeAndScreenName(rawDataTable.getClient_id(), rawDataTable.getModuleType(), SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL);
                        }
                        // TODO: update name
                        if (otpVerificationTableFromDB != null) {
                            dynamicUIDao.updateOTPVerificationTableFullName(otpVerificationTableFromDB.getId(),
                                    fullnameObj.getValue());
                        } else {
                            // TODO: if not exist then insert
                            dynamicUIDao.insertOTPVerification(otpVerificationTable);
                        }
                    }
                }
            }

            // TODO: update otp verified only for Raw data tvName server
            if (isDataFromServer) {
                OTPVerificationTable otpVerificationTableDB = dynamicUIDao.
                        getOTPVerificationByModuleTypeAndScreenName(rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getScreen_name());
                if (otpVerificationTableDB != null)
                    dynamicUIDao.updateOTPVerified(otpVerificationTableDB.getId(), otpVerificationTableDB.getMobileNumber(),true);
            }

            // TODO: ********* OTP Verification *************
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void insertIntoCIBILTable(RawDataTable rawDataTable, DynamicUITable dynamicUITable) {

        try {
            // TODO: ********* CIBIL *************

            // TODO: PERSONAL DETAIL SCREEN & CO APPLICANT PERSONAL DETAIL SCREEN
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)
                    || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                DynamicUITable mobileNumberObj = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_CONTACT_NO_1, rawDataTable.getScreen_no());
                if (mobileNumberObj != null && !TextUtils.isEmpty(mobileNumberObj.getValue())) {
                    String name = "";
                    List<RawDataTable> applicantNameList;

                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                        applicantNameList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                    } else {
                        applicantNameList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                    }

                    if (applicantNameList != null && applicantNameList.size() > 0) {
                        RawDataTable applicantNameObj = applicantNameList.get(0);
                        HashMap<String, Object> hashMap = setKeyValueForObject(applicantNameObj);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                name = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                name = hashMap.get(TAG_NAME_FULL_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_PARTNERSHIP_FIRM_NAME)) {
                                name = hashMap.get(TAG_NAME_PARTNERSHIP_FIRM_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_PROPRIETORSHIP_FIRM_NAME)) {
                                name = hashMap.get(TAG_NAME_PROPRIETORSHIP_FIRM_NAME).toString();
                            } else if (hashMap.containsKey(TAG_NAME_COMPANY_NAME)) {
                                name = hashMap.get(TAG_NAME_COMPANY_NAME).toString();
                            }
                        }
                    }

                    if (!TextUtils.isEmpty(name)) {
                        // TODO: CIBIL Table

                        CIBILTable cibilTable = new CIBILTable(rawDataTable.getId(),
                                rawDataTable.getScreen_no(), rawDataTable.getScreen_name(), rawDataTable.getClient_id(),
                                rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                mobileNumberObj.getValue(), name, rawDataTable.getUser_id());

                        if (mobileNumberObj != null && !TextUtils.isEmpty(mobileNumberObj.getValue())) {
                            cibilTable.setMobileNumber(mobileNumberObj.getValue());

                            // TODO: update master table mobile number
                            MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                            if (masterTable != null) {
                                dynamicUIDao.updateMasterTableMobileNumber(mobileNumberObj.getValue(),
                                        masterTable.getId());
                            }
                        }

                        CIBILTable cibilTableFromDB = dynamicUIDao.
                                getCIBILTableByModuleType(rawDataTable.getClient_id(), rawDataTable.getModuleType());

                        if (cibilTableFromDB == null) {
                            // TODO: if not exist then insert
                            dynamicUIDao.insertCIBILTable(cibilTable);

                        } else {

                            // TODO: update mobile number & name
                            dynamicUIDao.updateCIBILTableMobileAndName(cibilTableFromDB.getId(),
                                    mobileNumberObj.getValue(), name, cibilTableFromDB.isCBChecked());
                        }
                    }
                }

                // TODO: KYC SCREEN - UPDATE NAME
            } else if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                    || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {

                DynamicUITable fullnameObj = dynamicUIDao.getRowByTAGandScreen(TAG_NAME_FULL_NAME, rawDataTable.getScreen_no());

                if (fullnameObj != null && !TextUtils.isEmpty(fullnameObj.getValue())) {
                    String mob = "";
                    String screen_name = "";
                    String screen_no = "";
                    List<RawDataTable> mobileRawDataList;

                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                        mobileRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                        screen_name = SCREEN_NAME_PERSONAL_DETAIL;
                        screen_no = SCREEN_NO_PERSONAL_DETAIL_MSME;
                    } else {
                        mobileRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL,
                                rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());

                        screen_name = SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL;
                        screen_no = SCREEN_NO_COAPPLICANT_PERSONAL_DETAIL_MSME;
                    }

                    if (mobileRawDataList != null && mobileRawDataList.size() > 0) {
                        RawDataTable mobileObj = mobileRawDataList.get(0);
                        HashMap<String, Object> hashMap = setKeyValueForObject(mobileObj);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                mob = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                            }
                        }
                    }

                    if (!TextUtils.isEmpty(mob)) {
                        // TODO: CIBIL Table

                        CIBILTable cibilTable = new CIBILTable(rawDataTable.getId(),
                                screen_no, screen_name, rawDataTable.getClient_id(),
                                rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                mob, fullnameObj.getValue(), rawDataTable.getUser_id());

                        CIBILTable cibilTableFromDB = dynamicUIDao.
                                getCIBILTableByModuleType(rawDataTable.getClient_id(), rawDataTable.getModuleType());

                        if (cibilTableFromDB != null) {

                            // TODO: update mobile number & name
                            dynamicUIDao.updateCIBILTableMobileAndName(cibilTableFromDB.getId(),
                                    mob, fullnameObj.getValue(), cibilTableFromDB.isCBChecked());
                        } else {
                            // TODO: if not exist then insert
                            dynamicUIDao.insertCIBILTable(cibilTable);
                        }
                    }
                }
            }

            // TODO: ********* CIBIL *************
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public LiveData<List<RawDataTable>> insertOrUpdateParentRawDataObserver
            (RawDataTable rawDataTable, List<DynamicUITable> viewParametersList,
             DynamicUITable dynamicUITable) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(viewParametersList); // TODO: First update DynamicUITable list values

            RawDataTable rawDataTableFromDB = dynamicUIDao.getTopRawData(dynamicUITable.getScreenID(), rawDataTable.getClient_id());

            if (rawDataTableFromDB != null) {
                // TODO: only for SCREEN_NAME_PRODUCT_ESTIMATE_DETAIL_MSME & SCREEN_NAME_SERVICE_ESTIMATE_DETAIL_MSME
                if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PRODUCT_ESTIMATE_DETAIL_MSME)
                        || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_SERVICE_ESTIMATE_DETAIL_MSME)) {
                    RawDataTable rawDataTableFromDBByCorrelationId = dynamicUIDao.getTopRawDataByCorrelationId(dynamicUITable.getScreenID(), rawDataTable.getClient_id(), dynamicUITable.getCoRelationID());

                    if (rawDataTableFromDBByCorrelationId != null) {
                        // TODO: update
                        try {
                            JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                            jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());

                            // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                            DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                            if (uniqueIdObj != null) {
                                jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                            }
                            DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                            if (correlationIdObj != null) {
                                jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                            }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                        dynamicUIDao.updateRawDataBagAndDynamicRawData(rawDataTableFromDBByCorrelationId.getScreen_no(),
                                rawDataTableFromDBByCorrelationId.getId(), rawDataTable.getRawdata(), rawDataTable.getDynamic_ui_rawdata());
                    } else if (rawDataTableFromDB.getRef_id() != 0) {
                        // TODO: insert new record
                        int refId = rawDataTableFromDB.getRef_id() + 1;
                        rawDataTable.setRef_id(refId);
                        rawDataTable.setUniqueId(String.valueOf(refId));
                        String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                        rawDataTable.setTag_name(rawDataTag);
                        dynamicUITable.setValue(rawDataTag);
                        rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                        rawDataTable.setProductId(dynamicUITable.getProductId());

                        try {
                            JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                            jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());
                            try {
                                // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                                DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                                if (uniqueIdObj != null) {
                                    jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                                }
                                DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                                if (correlationIdObj != null) {
                                    jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                                }
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                            rawDataTable.setRawdata(jsonObject.toString());

                            dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }

                    }
                } else {
                    // TODO: (Update) For remaining all screens
                    try {
                        JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                        jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());

                        // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                        DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                        if (uniqueIdObj != null) {
                            jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                        }
                        DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                        if (correlationIdObj != null) {
                            jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                        }
                        // TODO: inserting IS VERIFIED in raw data bag

                        if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                            DynamicUITable isVerifiedObj = getObjectByTAG(TAG_NAME_IS_VERIFIED, viewParametersList);
                            if (isVerifiedObj != null) {
                                if (isVerifiedObj.getValue().equalsIgnoreCase(IS_VERIFIED_TRUE)) {
                                    jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_TRUE);
                                } else {
                                    jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_FALSE);
                                }
                            }
                        }


                        // TODO: inserting ISDEVIATION in raw data bag
                        if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_LOAN_SUGGESTION_MSME)) {
                            DynamicUITable isDeviationObj = getObjectByTAG(TAG_NAME_ISDEVIATION_IN_LOAN_SUGGESTION_MSME, viewParametersList);
                            if (isDeviationObj != null) {
                                jsonObject.put(isDeviationObj.getFieldTag(), 0);
                            }
                        }

                        rawDataTable.setRawdata(jsonObject.toString());

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    dynamicUIDao.updateRawDataBagAndDynamicRawData(rawDataTableFromDB.getScreen_no(),
                            rawDataTableFromDB.getId(), rawDataTable.getRawdata(), rawDataTable.getDynamic_ui_rawdata());
                }

            } else {
                int refId = 1;
                rawDataTable.setRef_id(refId);
                rawDataTable.setUniqueId(String.valueOf(refId));
                String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + 1;
                rawDataTable.setTag_name(rawDataTag);
                dynamicUITable.setValue(rawDataTag);
                rawDataTable.setProductId(dynamicUITable.getProductId());

                try {
                    JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                    jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());
                    try {
                        // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                        DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                        if (uniqueIdObj != null) {
                            jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTable.getTag_name().substring(rawDataTable.getTag_name().length() - 1));
                        }
                        DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                        if (correlationIdObj != null) {
                            jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                        }
                        // TODO: inserting IS VERIFIED in raw data bag

                        if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                            DynamicUITable isVerifiedObj = getObjectByTAG(TAG_NAME_IS_VERIFIED, viewParametersList);
                            if (isVerifiedObj != null) {
                                if (isVerifiedObj.getValue().equalsIgnoreCase(IS_VERIFIED_TRUE)) {
                                    jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_TRUE);
                                } else {
                                    jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_FALSE);
                                }
                            }
                        }
                        // TODO: inserting ISDEVIATION in raw data bag
                        if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_LOAN_SUGGESTION_MSME)) {
                            DynamicUITable isDeviationObj = getObjectByTAG(TAG_NAME_ISDEVIATION_IN_LOAN_SUGGESTION_MSME, viewParametersList);
                            if (isDeviationObj != null) {
                                jsonObject.put(isDeviationObj.getFieldTag(), 0);
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    rawDataTable.setRawdata(jsonObject.toString());

                    dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

            List<RawDataTable> finalRawDataList = dynamicUIDao.loadRawData(rawDataTable.getScreen_no());
            data.postValue(finalRawDataList);
        });
        return data;
    }


    /*private void insertDocumentUpload(int id, String screen_no, String
            screen_name, String client_id, String value, String tagName, String displayName, String
                                              loanType, String moduleType) {
        try {
            boolean frontAndBack;
            if (!TextUtils.isEmpty(value) && (value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)
                    || value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VID)
                    || value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)
                    || value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_BANK_PASSBOOK_WITH_PHOTOGRAPH)
                    || value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_BANK_STATEMENT)
                    || value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)
            )) {
                frontAndBack = true;
            } else {
                frontAndBack = false;
            }

            if (!frontAndBack) {
                // TODO: Only Front Image
                String fileName = getDocFileName(client_id,
                        removeSpace(tagName),
                        removeSpace(value), DOCUMENT_FRONT_IMAGE, true);

                DocumentUploadTable documentUploadTable = new DocumentUploadTable(id,
                        screen_no, screen_name, client_id,
                        removeSpace(value), removeSpace(tagName), displayName,
                        DOCUMENT_FRONT_IMAGE, fileName, loanType, moduleType);

                DocumentUploadTable documentUploadTableRow = dynamicUIDao.
                        getDocumentUploadRowByTAGandClientId(removeSpace(tagName), client_id, DOCUMENT_FRONT_IMAGE, displayName);
                if (documentUploadTableRow == null) {
                    // TODO: if not exist then insert
                    dynamicUIDao.insertDocumentUpload(documentUploadTable);
                }
            } else {
                // TODO: Both Front & Back Image
                // TODO: Front Image
                String fileNameFront = getDocFileName(client_id,
                        removeSpace(tagName),
                        removeSpace(value), DOCUMENT_FRONT_IMAGE, true);

                displayName = displayName + " Front";

                DocumentUploadTable documentUploadTableFront = new DocumentUploadTable(id,
                        screen_no, screen_name, client_id,
                        removeSpace(value), removeSpace(tagName), displayName,
                        DOCUMENT_FRONT_IMAGE, fileNameFront, loanType, moduleType);
                String tag = removeSpace(tagName);

                DocumentUploadTable documentUploadTableRowFront = dynamicUIDao.
                        getDocumentUploadRowByTAGandClientId(tag, client_id, DOCUMENT_FRONT_IMAGE, displayName);

                if (documentUploadTableRowFront == null) {
                    // TODO: if not exist then insert
                    dynamicUIDao.insertDocumentUpload(documentUploadTableFront);
                }

                // TODO: Back Image
                String fileNameBack = getDocFileName(client_id,
                        removeSpace(tagName),
                        removeSpace(value), DOCUMENT_BACK_IMAGE, true);

                displayName = displayName + " Back";

                DocumentUploadTable documentUploadTableBack = new DocumentUploadTable(id,
                        screen_no, screen_name, client_id,
                        removeSpace(value), removeSpace(tagName), displayName,
                        DOCUMENT_BACK_IMAGE, fileNameBack, loanType, moduleType);

                DocumentUploadTable documentUploadTableRowBack = dynamicUIDao.
                        getDocumentUploadRowByTAGandClientId(removeSpace(tagName), client_id, DOCUMENT_BACK_IMAGE, displayName);
                if (documentUploadTableRowBack == null) {
                    // TODO: if not exist then insert
                    dynamicUIDao.insertDocumentUpload(documentUploadTableBack);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/


    private void insertDocumentUploadHeader(String screen_no, String client_id, String value,
                                            RawDataTable rawDataTable, String displayNameToCheck, String fFormat) {
        try {
            DocumentMasterTable documentMasterTable = null;

            String moduleType = rawDataTable.getModuleType();
            String customerType = moduleType;
            // TODO: statically set customertypento applicant for address jlg
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL) &&
                    rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                customerType = MODULE_TYPE_APPLICANT;
            }

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL) &&
                    rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                customerType = MODULE_TYPE_APPLICANT;
            }

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS) &&
                    rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                customerType = MODULE_TYPE_APPLICANT;
            }

            // TODO: statically set customertype for BUSINESS ADDRESS PROOF in AHL and MSME PHL

            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_ADDRESS_PROOF) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL) || rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME))) {
                customerType = MODULE_TYPE_APPLICANT;
                dynamicUIDao.deleteDocumentUploadTableNewByScreenNoClientIDAndLoanType(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
            }
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_ADDRESS_PROOF) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL) || rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME))) {
                customerType = MODULE_TYPE_APPLICANT;
                dynamicUIDao.deleteDocumentUploadTableNewByScreenNoClientIDAndLoanType(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
            }

            // TODO: statically set customertype for BUSINESS PROOF in AHL and MSME PHL
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL) || rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME))) {
                customerType = MODULE_TYPE_APPLICANT;

            }
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                customerType = MODULE_TYPE_APPLICANT;

            }

            // TODO: statically set customertype for OFFICE ADDRESS PROOF in AHL PHL
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_OFFICE_ADDRESS_PROOF) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL))) {
                customerType = MODULE_TYPE_APPLICANT;
                dynamicUIDao.deleteDocumentUploadTableNewByScreenNoClientIDAndLoanType(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());

            }
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_OFFICE_ADDRESS_PROOF)) {
                customerType = MODULE_TYPE_APPLICANT;
                dynamicUIDao.deleteDocumentUploadTableNewByScreenNoClientIDAndLoanType(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());

            }
           /* if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_OFFICE_ADDRESS_PROOF) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_UCL)) {
                customerType = MODULE_TYPE_APPLICANT;
                dynamicUIDao.deleteDocumentUploadTableNewByScreenNoClientIDAndLoanType(rawDataTable.getScreen_no(), rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());

            }*/


            // TODO: statically set customertype for BUSINESS PROOF in AHL
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_SALARY_PROFILE) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL))) {
                customerType = MODULE_TYPE_APPLICANT;
            }
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_SALARY_PROFILE)) {
                customerType = MODULE_TYPE_APPLICANT;
            }

          /*  if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_SALARY_PROFILE) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_UCL))) {
                customerType = MODULE_TYPE_APPLICANT;
            }*/

            if (moduleType.contains(MODULE_TYPE_CO_APPLICANT)) {
                customerType = moduleType.substring(0, moduleType.length() - 1);
            }
            if (!TextUtils.isEmpty(fFormat)) {
                documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndFileFormat(screen_no, fFormat);
            } else if (!TextUtils.isEmpty(displayNameToCheck)) {
                documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDisplayName(screen_no, value, displayNameToCheck,
                        customerType);
            } else {
                documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(screen_no, value, customerType);
            }

            if (documentMasterTable != null) {

                String documentName = documentMasterTable.getDocumentName();
                String documentFullName = documentMasterTable.getDisplayName() + " " + documentMasterTable.getDocumentName();
                String displayName = documentMasterTable.getDisplayName();
                String displayFullName = moduleType + " " + documentMasterTable.getDisplayName() + " " + documentMasterTable.getDocumentName();
                String documentTagName = documentMasterTable.getTagName();
                String fileFormat = documentMasterTable.getFileFormat();
                // TODO: Only for Co Applicant
                if (moduleType.contains("CoApplicant")) {
                    String noOfCoApplicant = moduleType.substring(moduleType.length() - 1);
                    String tagNameToReplace = documentTagName + noOfCoApplicant;
                    fileFormat = fileFormat.replace(documentTagName, tagNameToReplace);
                }
                int noOfImagesToCapture = getNoOfImagesToCapture(rawDataTable, documentName);

                DocumentUploadTableNew documentUploadTableNew = new DocumentUploadTableNew(
                        screen_no, client_id, documentName, documentFullName, documentTagName, customerType,
                        displayName, displayFullName, fileFormat, rawDataTable.getLoan_type(), moduleType,
                        rawDataTable.getUser_id(), rawDataTable.getProductId(), true, noOfImagesToCapture, true);

                DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                        getDocumentHeaderByFileFormatAndModuleType(fileFormat, client_id, moduleType, true);
                if (documentUploadTableRow == null) {
                    // TODO: if not exist then insert
                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNew);
                } else {
                    // TODO: statically set editable true or false
                    if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                            rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_ADDRESS_DETAIL) &&
                            rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                        // TODO: applicant KYC  Details
                        List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                                rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                        RawDataTable rawDataAddressDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_ADDRESS_DETAIL, rawDataTable.getClient_id(), rawDataTable.getLoan_type());
                        if (rawDataAddressDetail != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataAddressDetail);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                                    String permvalue = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC).toString();
                                    String permkyctypevalue = hashMap.get(TAG_NAME_PERMANENT_KYC_TYPE).toString();
                                    DocumentMasterTable documentMasterTableaddresproof = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_ADDRESS_DETAIL_JLG, DOCUMENT_NAME_ADDRESS_PROOF, MODULE_TYPE_APPLICANT);
                                    if (documentMasterTableaddresproof != null) {
                                        String fileFormataddproof = documentMasterTableaddresproof.getFileFormat();
                                        DocumentUploadTableNew documentUploadTableRowaddressproofHeader = dynamicUIDao.
                                                getDocumentHeaderByFileFormatAndModuleType(fileFormat, rawDataTable.getClient_id(), MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, true);
                                        if (documentUploadTableRowaddressproofHeader != null) {
                                            List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRowaddressproofHeader.getClient_id(),
                                                    documentUploadTableRowaddressproofHeader.getLoan_type(), false, documentUploadTableRowaddressproofHeader.getDocument_name(),
                                                    documentUploadTableRowaddressproofHeader.getModule_type());

                                            if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                                                if (!TextUtils.isEmpty(permvalue) && permvalue.equalsIgnoreCase("Yes")) {

                                                    if (applicantKTCDetailRawDataList != null) {
                                                        if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                                                            for (RawDataTable applicantPersonalRawData : applicantKTCDetailRawDataList) {
                                                                if (applicantPersonalRawData != null) {
                                                                    HashMap<String, Object> hashMapApplicant = setKeyValueForObject(applicantPersonalRawData);
                                                                    if (hashMapApplicant != null && hashMapApplicant.size() > 0) {
                                                                        if (hashMapApplicant.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                            String kycvalue = hashMapApplicant.get(TAG_NAME_KYC_TYPE).toString();
                                                                            if (!TextUtils.isEmpty(kycvalue) && kycvalue.equalsIgnoreCase(permkyctypevalue)) {
                                                                                DocumentMasterTable documentMasterTableapplicant = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_APPLICANT_KYC_JLG, kycvalue, MODULE_TYPE_APPLICANT);
                                                                                if (documentMasterTableapplicant != null) {
                                                                                    String fileFormatapplicant = documentMasterTableapplicant.getFileFormat();
                                                                                    DocumentUploadTableNew documentUploadTableRowapplicant = dynamicUIDao.
                                                                                            getDocumentHeaderByFileFormatAndModuleType(fileFormatapplicant, rawDataTable.getClient_id(), MODULE_TYPE_APPLICANT, true);
                                                                                    if (documentUploadTableRowapplicant != null) {
                                                                                        List<DocumentUploadTableNew> documentUploadTableNewListapplicant = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRowapplicant.getClient_id(),
                                                                                                documentUploadTableRowapplicant.getLoan_type(), false, documentUploadTableRowapplicant.getDocument_name(),
                                                                                                documentUploadTableRowapplicant.getModule_type());

                                                                                        if (documentUploadTableNewListapplicant != null && documentUploadTableNewListapplicant.size() > 0) {

                                                                                            for (int i = 0; i < documentUploadTableNewListapplicant.size(); i++) {

                                                                                                // TODO: add filepath
                                                                                                if (!TextUtils.isEmpty(documentUploadTableNewList.get(i).getFile_name())) {
                                                                                                    documentUploadTableNewList.get(i).setFile_name(documentUploadTableNewList.get(i).getFile_name() + ".jpg");
                                                                                                }
                                                                                                if (!TextUtils.isEmpty(documentUploadTableNewListapplicant.get(i).getFile_name())) {
                                                                                                    documentUploadTableNewList.get(i).setFile_path(documentUploadTableNewListapplicant.get(i).getFile_path());
                                                                                                }
                                                                                                documentUploadTableNewList.get(i).setEditable(false);
                                                                                            }
                                                                                        } else {
                                                                                            for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                                                                                                documentUploadTableNewList.get(i).setEditable(false);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                                                            documentUploadTableNewList.get(i).setEditable(false);
                                                        }
                                                    }
                                                } else {
                                                    for (DocumentUploadTableNew documentUploadTableNew1 : documentUploadTableNewList) {
                                                        if (!documentUploadTableNew1.isEditable()) {
                                                            // TODO: add filepath
                                                            documentUploadTableNew1.setFile_path("");
                                                            documentUploadTableNew1.setEditable(true);
                                                        }
                                                    }
                                                }
                                                for (DocumentUploadTableNew documentUploadTableNew1 : documentUploadTableNewList) {
                                                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNew1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void deleteDocumentUploadHeader(String screen_no, String client_id, String value,
                                            RawDataTable rawDataTable, String displayNameToCheck, String fFormat) {
        try {
            DocumentMasterTable documentMasterTable = null;

            String moduleType = rawDataTable.getModuleType();
            String customerType = moduleType;

            if (moduleType.contains(MODULE_TYPE_CO_APPLICANT)) {
                customerType = moduleType.substring(0, moduleType.length() - 1);
            }

            // TODO: statically set customertype for BUSINESS PROOF in AHL
            if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                    rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS) &&
                    (rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG))) {
                customerType = MODULE_TYPE_APPLICANT;
            }

            if (!TextUtils.isEmpty(fFormat)) {
                documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndFileFormat(screen_no, fFormat);
            } else if (!TextUtils.isEmpty(displayNameToCheck)) {
                documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDisplayName(screen_no, value, displayNameToCheck,
                        customerType);
            } else {
                documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(screen_no, value, customerType);
            }

            if (documentMasterTable != null) {

                String documentName = documentMasterTable.getDocumentName();
                String documentFullName = documentMasterTable.getDisplayName() + " " + documentMasterTable.getDocumentName();
                String displayName = documentMasterTable.getDisplayName();
                String displayFullName = moduleType + " " + documentMasterTable.getDisplayName() + " " + documentMasterTable.getDocumentName();
                String documentTagName = documentMasterTable.getTagName();
                String fileFormat = documentMasterTable.getFileFormat();
                // TODO: Only for Co Applicant
                if (moduleType.contains("CoApplicant")) {
                    String noOfCoApplicant = moduleType.substring(moduleType.length() - 1);
                    String tagNameToReplace = documentTagName + noOfCoApplicant;
                    fileFormat = fileFormat.replace(documentTagName, tagNameToReplace);
                }

                int noOfImagesToCapture = getNoOfImagesToCapture(rawDataTable, documentName);
                DocumentUploadTableNew documentUploadTableNew = new DocumentUploadTableNew(
                        screen_no, client_id, documentName, documentFullName, documentTagName, customerType,
                        displayName, displayFullName, fileFormat, rawDataTable.getLoan_type(), moduleType,
                        rawDataTable.getUser_id(), rawDataTable.getProductId(), true, noOfImagesToCapture, true);

                DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                        getDocumentHeaderByFileFormatAndModuleType(fileFormat, client_id, moduleType, true);
                if (documentUploadTableRow != null) {
                    // TODO: if  exist then delete
                    dynamicUIDao.deleteDocumentUploadTableNew(documentName, client_id, moduleType, rawDataTable.getLoan_type());
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private int getNoOfImagesToCapture(RawDataTable rawDataTable, String documentName) {
        int noOfImagesToCapture = 0;
        try {
            if (rawDataTable != null && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                // TODO: get limit for image capture
                noOfImagesToCapture = getLimitImagesToCapture(documentName);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return noOfImagesToCapture;
    }

    public LiveData<RawDataTable> updateRawDataBag(RawDataTable rawDataTable, List<DynamicUITable> viewParametersList,
                                                   DynamicUITable dynamicUITable, boolean isDataFromServer) {
        final MutableLiveData<RawDataTable> data = new MutableLiveData<>();
        executor.execute(() -> {

            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                    || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                // TODO: only for Plus Button
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_ADD_ANOTHER_KYC_PLUS_BUTTON)) {
                    dynamicUITable.setFieldName(TAG_NAME_ADD_ANOTHER_KYC_PLUS_BUTTON);
                }

                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SAVE_BUTTON))
                    dynamicUITable.setFieldName(TAG_NAME_SAVE_BUTTON);

            }
            else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)) {
                // TODO: only for Plus Button
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_ADD_ANOTHER_REFERENCE)) {
                    dynamicUITable.setFieldName(TAG_NAME_ADD_ANOTHER_REFERENCE);
                }

                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SAVE_BUTTON))
                    dynamicUITable.setFieldName(TAG_NAME_SAVE_BUTTON);

            }  /*else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_GUARANTOR_DETAILS)) {
                // TODO: only for Plus Button
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_ADD_ANOTHER_KYC_PLUS_BUTTON)) {
                    dynamicUITable.setFieldName(TAG_NAME_ADD_ANOTHER_KYC_PLUS_BUTTON);
                }

                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SAVE_BUTTON))
                    dynamicUITable.setFieldName(TAG_NAME_SAVE_BUTTON);

            }*/
            else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_GENERAL_INCOME)) {
                // TODO: only for Plus Button
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SAVE_AND_ADD_GENERAL_INCOME)) {
                    dynamicUITable.setFieldName(TAG_NAME_SAVE_AND_ADD_GENERAL_INCOME);
                }

            }
            else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_OTHER_INCOME_SOURCE)) {
                // TODO: only for Plus Button
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_SAVE_AND_ADD_INCOME_DETAIL)) {
                    dynamicUITable.setFieldName(TAG_NAME_SAVE_AND_ADD_INCOME_DETAIL);
                }

            }
            RawDataTable rawDataTableForID = null;
            // TODO: old query
            if (isDataFromServer) {
                rawDataTableForID = dynamicUIDao.getRawDataByID(rawDataTable.getId());
            } else {
                rawDataTableForID = dynamicUIDao.getRawDataByTAG(rawDataTable.getScreen_no(), rawDataTable.getClient_id(),
                        dynamicUITable.getValue());
            }

            if (rawDataTableForID != null) {
                try {
                    JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                    jsonObject.put(dynamicUITable.getFieldTag(), rawDataTableForID.getTag_name());

                    // TODO: ONLY FOR LEAD SCREEN
                    if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                        try {
                            PackageInfo packageInfo = App.context.getPackageManager().getPackageInfo(App.context.getPackageName(), 0);
                            String appVersion = packageInfo.versionName;
                            if (!TextUtils.isEmpty(appVersion)) {
                                jsonObject.put(TAG_NAME_MOBILE_APP_VERSION, appVersion);
                            }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }

                    try {
                        // TODO: inserting UNIQUE ID and CORRELATION ID in raw data bag
                        DynamicUITable uniqueIdObj = getObjectByTAG(TAG_NAME_UNIQUE_ID, viewParametersList);
                        if (uniqueIdObj != null) {
                            jsonObject.put(uniqueIdObj.getFieldTag(), rawDataTableForID.getTag_name().substring(rawDataTableForID.getTag_name().length() - 1));
                        }
                        DynamicUITable correlationIdObj = getObjectByTAG(TAG_NAME_CORRELATION_ID, viewParametersList);
                        if (correlationIdObj != null) {
                            jsonObject.put(correlationIdObj.getFieldTag(), dynamicUITable.getCoRelationID());
                        }
                        // TODO: inserting IS VERIFIED in raw data bag

                        if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                            DynamicUITable isVerifiedObj = getObjectByTAG(TAG_NAME_IS_VERIFIED, viewParametersList);
                            if (isVerifiedObj != null) {
                                if (isVerifiedObj.getValue().equalsIgnoreCase(IS_VERIFIED_TRUE)) {
                                    jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_TRUE);
                                } else {
                                    jsonObject.put(isVerifiedObj.getFieldTag(), IS_VERIFIED_FALSE);
                                }
                            }
                        }
                        // TODO: inserting ISDEVIATION in raw data bag
                        if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LOAN_SUGGESTION_MSME)) {
                            DynamicUITable isDeviationObj = getObjectByTAG(TAG_NAME_ISDEVIATION_IN_LOAN_SUGGESTION_MSME, viewParametersList);
                            if (isDeviationObj != null) {
                                jsonObject.put(isDeviationObj.getFieldTag(), 0);
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    rawDataTable.setRawdata(jsonObject.toString());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                dynamicUIDao.updateRawDataBag(rawDataTable.getScreen_no(), rawDataTableForID.getId(), rawDataTable.getRawdata()); // TODO: update json in raw data table

                 if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_MSME)) {
                    // TODO: insert lead data
                    insertorUpdateLeadData(rawDataTable, dynamicUITable);
                }
                // TODO: AHL insert lead data
                else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
                    // TODO: insert lead data
                    insertorUpdateLeadData(rawDataTable, dynamicUITable);
                }
                // TODO: PHL insert lead data
                else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {
                    // TODO: insert lead data
                    insertorUpdateLeadData(rawDataTable, dynamicUITable);
                } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                    // TODO: insert lead data
                    insertorUpdateLeadData(rawDataTable, dynamicUITable);
                } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD) && rawDataTable.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
                    // TODO: insert lead data
                    insertorUpdateLeadData(rawDataTable, dynamicUITable);
                }
                // TODO: update field name for co-applicants
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                            rawDataTable.setField_name(hashMap.get(TAG_NAME_FULL_NAME).toString());
                            dynamicUIDao.updateRawDataFieldName(rawDataTable.getScreen_no(), rawDataTableForID.getId(), rawDataTable.getField_name());
                        }
                    }
                }
                // TODO: SCREEN NAME LIABILITIES
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LIABILITIES)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PRODUCT)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_DEBTS)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_FAMILY_MEMBER_INCOME)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_HOUSE_EXPENSES)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_DECLARED_SALES_WEEKLY)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_PURCHASE_ANALYSIS)
                        || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_OPERATING_EXPENSE)
                ) {
                    // TODO: Delete the following screens
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_SUMMARY);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_SUMMARY_LOAN_PROPOSAL);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_LOAN_PROPOSAL);
                }
                // TODO: SCREEN NAME BUSINESS PROFILE
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROFILE)) {
                    // TODO: Delete the following screens
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_PRODUCT_ESTIMATE_MSME);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_PRODUCT_ESTIMATE_DETAIL_MSME);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_PRODUCT_RAW_MATERIAL_MSME);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_SERVICE_ESTIMATE_MSME);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_SERVICE_ESTIMATE_DETAIL_MSME);
                    dynamicUIDao.deleteRawDataByScreenName(SCREEN_NAME_SERVICE_RAW_MATERIAL_MSME);
                }

                dynamicUIDao.updateDynamicUITable(viewParametersList); // TODO: First update DynamicUITable list values

            }

            if (rawDataTableForID != null) {
                try {
                    JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                    jsonObject.put(dynamicUITable.getFieldTag(), rawDataTableForID.getTag_name());
                    rawDataTable.setRawdata(jsonObject.toString());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

//                dynamicUIDao.updateRawDataBag(rawDataTable.getScreen_no(), rawDataTableForID.getId(), rawDataTable.getRawdata()); // TODO: updat json in raw data table
                String dynamicUIRawdata = new Gson().toJson(viewParametersList);
                if (!TextUtils.isEmpty(dynamicUIRawdata)) {
                    rawDataTable.setDynamic_ui_rawdata(dynamicUIRawdata);
                }
                dynamicUIDao.updateRawDataBagAndDynamicRawData(rawDataTable.getScreen_no(), rawDataTableForID.getId()
                        , rawDataTable.getRawdata(), rawDataTable.getDynamic_ui_rawdata());

                // TODO: New condition
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                    List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameList(dynamicUITable.getScreenName(), dynamicUITable.getClientID(),
                            dynamicUITable.getModuleType());

                    if (rawDataTableList != null && rawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable1 : rawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable1);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {
                                    // TODO: update client name in mastertable based on Proof_type contains "ID"
                                    if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                        if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                            MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                                            if (masterTable != null) {
                                                dynamicUIDao.updateMasterTableClientName(hashMap.get(TAG_NAME_FULL_NAME).toString(),
                                                        masterTable.getId());
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // TODO: SCREEN NAME VILLAGE SURVEY CREATION
                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_VILLAGE_SURVEY)) {

                    Type type = new TypeToken<List<DynamicUITable>>() {
                    }.getType();
                    List<DynamicUITable> dynamicUITableListFromDB = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                    if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                        DynamicUITable villageDynamicUITable = getObjectByTAG(TAG_NAME_VILLAGE_NAME_IN_VILLAGE_SURVEY, dynamicUITableListFromDB);
                        DynamicUITable districtDynamicUITable = getObjectByTAG(TAG_NAME_DISTRICT, dynamicUITableListFromDB);
                        DynamicUITable pincodeDynamicUITable = getObjectByTAG(TAG_NAME_PINCODE, dynamicUITableListFromDB);
                        DynamicUITable cityDynamicUITable = getObjectByTAG(TAG_NAME_CITY, dynamicUITableListFromDB);
                        dynamicUIDao.updateVillageSurveyTable(villageDynamicUITable.getValue(), districtDynamicUITable.getValue(),
                                pincodeDynamicUITable.getValue(), cityDynamicUITable.getValue(), dynamicUITable.getClientID());
                    }
                }

                // TODO: Update loan amount
                if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)
                        && dynamicUITable.getModuleType().equalsIgnoreCase(MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE)) {
                    Type type = new TypeToken<List<DynamicUITable>>() {
                    }.getType();

                    List<DynamicUITable> dynamicUITableList = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                    if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                        DynamicUITable dynamicUITable1 = null;
                        //  DynamicUITable dynamicUITable1=null;

                        dynamicUITable1 = getObjectByTAG(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITableList);
                        MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(rawDataTable.getClient_id());
                        if (masterTable != null)
                            dynamicUIDao.updateLoanAmountInMasterTable(dynamicUITable1.getValue(), masterTable.getId());

                    }
                }


                // TODO: ********* validation for document upload *************

                documentUploadNew(rawDataTableForID, dynamicUITable);

                // TODO: ********* validation for document upload *************

                // TODO: ********* OTP Verification *************

                otpVerification(rawDataTableForID, dynamicUITable, isDataFromServer);

                // TODO: ********* OTP Verification *************

                // TODO: ********* CIBIL *************

                if (!isDataFromServer) {
                    insertIntoCIBILTable(rawDataTableForID, dynamicUITable);
                }

                // TODO: ********* CIBIL *************

                data.postValue(dynamicUIDao.getRawDataByTAG(rawDataTable.getScreen_no(), rawDataTable.getClient_id(),
                        dynamicUITable.getValue()));
            } else {
                data.postValue(dynamicUIDao.getRawDataByTAG(rawDataTable.getScreen_no(), rawDataTable.getClient_id(),
                        dynamicUITable.getValue()));
            }

        });
        return data;
    }

    public LiveData<List<RawDataTable>> getLeadRawData(String screenNo, String userId) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.loadRawDataFromDB(screenNo, userId) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));
            }
        });
        return data;
    }

    public LiveData<SODTable> getSODDataFromLocalDB(String userId) {
        final MutableLiveData<SODTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTopSODData(userId) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getTopSODData(userId));
            } else {
                data.postValue(null);
//                data.postValue(new SODTable());
            }
        });
        return data;
    }

    public LiveData<CMFetchTable> getCMFetchDataFromLocalDB(String userId, String date) {
        final MutableLiveData<CMFetchTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            CMFetchTable cmFetchTable = dynamicUIDao.getTopCMFetchData(userId, date);
            if (cmFetchTable != null) {
                data.postValue(cmFetchTable);
            } else {
                data.postValue(null);
            }
        });
        return data;
    }

    public LiveData<PlannerTable> getPlannerataFromLocalDB(String userId, String clientId) {
        final MutableLiveData<PlannerTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getTopPlannerData(userId, clientId) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getTopPlannerData(userId, clientId));
            } else {
                data.postValue(null);
//                data.postValue(new SODTable());
            }
        });
        return data;
    }

    public LiveData<PlannerTable> getPlannerDataByPurposeAndCurrentDate(String userId, String purpose) {
        final MutableLiveData<PlannerTable> data = new MutableLiveData<>();
        executor.execute(() -> {

            String currentDate = appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD);
            boolean dataExist = (dynamicUIDao.getPlannerDataByPurposeAndCurrentDate(userId, purpose, currentDate) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getPlannerDataByPurposeAndCurrentDate(userId, purpose, currentDate));
            } else {
                data.postValue(null);
//                data.postValue(new SODTable());
            }
        });
        return data;
    }

    public LiveData<List<ColdCallTable>> getColdCallingData(String screenNo, String userId, String loanType) {
        final MutableLiveData<List<ColdCallTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.loadColdCallDataFromDB(userId, loanType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.loadColdCallDataFromDB(userId, loanType));
            }
        });
        return data;
    }

    public LiveData<List<SalesToolTable>> getSalesToolData(String screenNo, String userId, String loanType) {
        final MutableLiveData<List<SalesToolTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.loadSalesToolDataFromDB(userId, loanType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.loadSalesToolDataFromDB(userId, loanType));
            }
        });
        return data;
    }

    public LiveData<List<PlannerTable>> getPlannerData(String screenNo, String userId, String loanType) {
        final MutableLiveData<List<PlannerTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.loadPlannerTableDataFromDB(userId, loanType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.loadPlannerTableDataFromDB(userId, loanType));
            }
        });
        return data;
    }

    // TODO: Old method to get Lead Data
    public LiveData<List<LeadTable>> getLeadData(String screenNo, String userId, String loanType) {
        final MutableLiveData<List<LeadTable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<LeadTable> leadDataList = dynamicUIDao.getLeadTableListFromDBTop300(userId, loanType);
            data.postValue(leadDataList);

        });
        return data;
    }

    public LiveData<List<GetKYCDropDownIDProofTable>> getKYCDropDownIDProofList() {
        final MutableLiveData<List<GetKYCDropDownIDProofTable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<GetKYCDropDownIDProofTable> leadDataList = dynamicUIDao.getKYCDropDownIDProofList();
            data.postValue(leadDataList);

        });
        return data;
    }

    // TODO: New method to get Lead Data
//    public LiveData<List<LeadTable>> getLeadData(String screenNo, String
//            userId, String loanType) {
//        final MutableLiveData<List<LeadTable>> data = new MutableLiveData<>();
//        executor.execute(() -> {
//
//            List<LeadTable> leadDataList=dynamicUIDao.getLeadTableListFromDBbyDesc(userId, loanType);
//            if(leadDataList !=null && leadDataList.size()>100){
//                List<LeadTable> leadDataListTop100=dynamicUIDao.getLeadTableListFromDBTop300(userId, loanType);
//                // TODO: First send top 100
//                data.postValue(leadDataListTop100);
//
//                try {
//                    Thread.sleep(5000);
//                    // TODO: Then send remaining data
//                    data.postValue(leadDataList);
//                } catch (InterruptedException ex) {}
//
//            }
//            else {
//                data.postValue(leadDataList);
//            }
//        });
//        return data;
//    }

    public LiveData<List<CollectionTable>> getCollectiondata(String screenNo, String userId) {
        final MutableLiveData<List<CollectionTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
//            boolean dataExist = (dynamicUIDao.loadCollectionDataFromDB(userId) != null);
//            if (dataExist) {
//                data.postValue(dynamicUIDao.loadCollectionDataFromDB(userId));
//            }
        });
        return data;
    }

    public LiveData<List<LeadTable>> getLeadTableDataFromServer(String screenNo, String screenName, String loanType,
                                                                String userId, DynamicUITable dynamicUITable,
                                                                List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<LeadTable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            final LeadRawDataRequestDTO rawDataRequestDTO = new LeadRawDataRequestDTO();
            rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            LeadRawDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new LeadRawDataRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_LEAD_RAW_DATA);
            LeadRawDataRequestDTO.SpParametersClass spParametersClass = new LeadRawDataRequestDTO.SpParametersClass();
            spParametersClass.setEmpId(userId); // TODO: user id
            spParametersClass.setProductId(dynamicUITable.getProductId()); // TODO: product id
            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<LeadRawDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<LeadRawDataRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
            String baseString = new Gson().toJson(rawDataRequestDTO, LeadRawDataRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            DynamicUIWebService.createService(DynamicUIWebservice.class).LeadRawDataFromServer(rawDataRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        String key = json.keys().next();

                                        String tableJson = json.get(key).toString();
                                        LeadRawDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, LeadRawDataResponseDTO.class);
                                        if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                            Log.d(TAG, "raw data tvName server");
                                            List<LeadRawDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                            if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                for (LeadRawDataResponseDTO.Table table : rawDataResponseDTOList) {

                                                    if (!TextUtils.isEmpty(table.getRaws())) {

                                                        // TODO:  insert or update raw data table
                                                        JSONArray jsonArray = new JSONArray(table.getRaws());
                                                        if (jsonArray.length() > 0) {
                                                            for (int i = 0; i < jsonArray.length(); i++) {
                                                                JSONObject jsonObject = jsonArray.getJSONObject(i);
                                                                if (jsonObject != null) {
                                                                    if (jsonArray.length() > 1) {
                                                                        // TODO: need to add screen numbers which has add multiple option
                                                                        // TODO: Multiple JSON object
                                                                    } else {
                                                                        // TODO: Single JSON object
                                                                        RawDataTable rawDataTableFromLocalDB = dynamicUIDao.getRawDataByClient(String.valueOf(table.getScreenId()),
                                                                                table.getUniqueId());
                                                                        if (rawDataTableFromLocalDB != null) {
                                                                            // TODO: No need to update
//                                                                            dynamicUIDao.updateRawDataBag(String.valueOf(table.getScreenId()), rawDataTableFromLocalDB.getId(), jsonObject.toString());
//                                                                            dynamicUIDao.updateRawDataSync(true, rawDataTableFromLocalDB.getId());

                                                                        } else {
                                                                            // TODO: ************** INSERT INTO RAW DATA TABLE [BEGIN] ***************
                                                                            final RawDataTable rawDataTableToInsert = new RawDataTable(
                                                                                    jsonObject.toString(), String.valueOf(table.getScreenId()),
                                                                                    screenName,
                                                                                    "", table.getUniqueId(),
                                                                                    loanType, userId, MODULE_TYPE_LEAD
                                                                                    , "");

                                                                            int refId = 1;
                                                                            rawDataTableToInsert.setRef_id(refId);
                                                                            rawDataTableToInsert.setUniqueId(String.valueOf(refId));
                                                                            String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                                                                            rawDataTableToInsert.setTag_name(rawDataTag);
                                                                            dynamicUITable.setValue(rawDataTag);
                                                                            rawDataTableToInsert.setCoRelationID(dynamicUITable.getCoRelationID());
                                                                            rawDataTableToInsert.setProductId(dynamicUITable.getProductId());
                                                                            rawDataTableToInsert.setSync(true);
                                                                            try {
                                                                                // TODO: Adding save button as tag
                                                                                jsonObject.put(dynamicUITable.getFieldTag(), rawDataTableToInsert.getTag_name());

                                                                                // TODO: ONLY FOR LEAD SCREEN
                                                                                if (rawDataTableToInsert.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                                                                                    try {
                                                                                        PackageInfo packageInfo = App.context.getPackageManager().getPackageInfo(App.context.getPackageName(), 0);
                                                                                        String appVersion = packageInfo.versionName;
                                                                                        if (!TextUtils.isEmpty(appVersion)) {
                                                                                            jsonObject.put(TAG_NAME_MOBILE_APP_VERSION, appVersion);
                                                                                        }
                                                                                    } catch (
                                                                                            Exception ex) {
                                                                                        ex.printStackTrace();

                                                                                        insertLog("getLeadTableDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                                                    }
                                                                                }

                                                                                rawDataTableToInsert.setRawdata(jsonObject.toString());

                                                                            } catch (Exception ex) {
                                                                                ex.printStackTrace();
                                                                                insertLog("getLeadTableDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                                            }

                                                                            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: First update DynamicUITable list values

                                                                            String dynamicUiRawData = new Gson().toJson(dynamicUITableList);
                                                                            if (!TextUtils.isEmpty(dynamicUiRawData)) {
                                                                                rawDataTableToInsert.setDynamic_ui_rawdata(dynamicUiRawData);
                                                                            }

                                                                            dynamicUIDao.insertRawData(rawDataTableToInsert); // TODO: Then insert json in raw data table

                                                                            // TODO: ************** INSERT INTO RAW DATA TABLE [END] ***************

                                                                            // TODO: Insert into Lead Table
                                                                            insertLeadDataFromServer(rawDataTableToInsert, dynamicUITable);
                                                                            // TODO: for MSME only we are inserting data in to sales tool table else master table
                                                                            if (loanType.equalsIgnoreCase(LOAN_NAME_MSME)) {
                                                                                // TODO: Insert into Sales tool Table
                                                                                SalesToolTable salesToolTableFromDB = dynamicUIDao.getSalesToolTableByClientId(rawDataTableToInsert.getClient_id());
                                                                                if (salesToolTableFromDB == null) {
                                                                                    SalesToolTable salesToolTable = new SalesToolTable();
                                                                                    salesToolTable.setClientId(rawDataTableToInsert.getClient_id());
                                                                                    salesToolTable.setLoan_type(loanType);
                                                                                    salesToolTable.setCreatedBy(rawDataTableToInsert.getUser_id());
                                                                                    salesToolTable.setDataCaptured(false);
                                                                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableToInsert);
                                                                                    if (hashMap != null && hashMap.size() > 0) {
                                                                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                                                            salesToolTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                                                        }
                                                                                        if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                                                                            salesToolTable.setMobileNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                                                                                        }
                                                                                    }

                                                                                    ApplicationStatusTable applicationStatusTable = dynamicUIDao.getApplicationStatusByClientId(
                                                                                            rawDataTableToInsert.getClient_id());
                                                                                    if (applicationStatusTable != null &&
                                                                                            !applicationStatusTable.getCurrentStage().equalsIgnoreCase(CURRENT_STAGE_APPLICATION)) {
                                                                                        salesToolTable.setSync(true);
                                                                                        salesToolTable.setDataCaptured(true);
                                                                                    }

                                                                                    dynamicUIDao.insertSalesToolTableData(salesToolTable);
                                                                                }
                                                                            } else {
                                                                                // TODO: Insert into Master Table
                                                                                MasterTable masterTableFromDB = dynamicUIDao.getMasterTableByClientId(rawDataTableToInsert.getClient_id());
                                                                                if (masterTableFromDB == null) {
                                                                                    MasterTable masterTable = new MasterTable();
                                                                                    masterTable.setClientId(rawDataTableToInsert.getClient_id());
                                                                                    masterTable.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                                                    masterTable.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                                                    masterTable.setFinalStatus(FINAL_STATUS_PENDING);
                                                                                    masterTable.setSync(false);
                                                                                    masterTable.setLoan_type(loanType); // TODO: LOAN TYPE
                                                                                    masterTable.setAllDataCaptured(false);
                                                                                    masterTable.setBranchId(table.getBCID()); // TODO: BCID
                                                                                    masterTable.setBranchGSTcode(table.getBCBRID()); // TODO: BRANCH GST CODE
                                                                                    masterTable.setCreatedBy(rawDataTableToInsert.getUser_id()); // TODO: STAFF ID
                                                                                    masterTable.setReviewBy(rawDataTableToInsert.getUser_id()); // TODO: STAFF ID
                                                                                    masterTable.setDataNeedsToCaptureFromServer(true);// TODO: data needs to capture true
                                                                                    String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                                                                    masterTable.setCreated_date(TimestampConverter.toDate(dateTime));

                                                                                    ApplicationStatusTable applicationStatusTable = dynamicUIDao.getApplicationStatusByClientId(
                                                                                            rawDataTableToInsert.getClient_id());
                                                                                    if (applicationStatusTable != null &&
                                                                                            !applicationStatusTable.getCurrentStage().equalsIgnoreCase(CURRENT_STAGE_APPLICATION)) {
                                                                                        masterTable.setCurrentStage(applicationStatusTable.getCurrentStage());
                                                                                        masterTable.setRemarks(applicationStatusTable.getRemarks());
                                                                                        masterTable.setApplicationStatus(APPLICATION_STATUS_DATA_SYNCED);
                                                                                        masterTable.setFinalStatus(FINAL_STATUS_SUBMITTED);
                                                                                        //TODO: I make it setSync false because of submit data in Esign and Estamp (not done)
                                                                                        masterTable.setSync(true);
                                                                                        // masterTable.setSync(false);
                                                                                        masterTable.setAllDataCaptured(true);
                                                                                        masterTable.setDataNeedsToCaptureFromServer(false);// TODO: data needs to capture false
                                                                                    }

                                                                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTableToInsert);

                                                                                    dynamicUIDao.insertMasterTableData(masterTable);

                                                                                    if (hashMap != null && hashMap.size() > 0) {
                                                                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                                                            masterTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                                                        } else if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                                                            masterTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                                                        }
                                                                                        if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                                                                            masterTable.setPhoneNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                                                                                        } else if (hashMap.containsKey(TAG_NAME_MOBILENUMBER)) {
                                                                                            masterTable.setPhoneNo(hashMap.get(TAG_NAME_MOBILENUMBER).toString());
                                                                                        }
                                                                                        if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                                                                            masterTable.setLoan_amount(hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString());
                                                                                        }
                                                                                        if (hashMap.containsKey(TAG_NAME_INTERESTED_IN_LOAN)) {
                                                                                            String interestedInLoan = hashMap.get(TAG_NAME_INTERESTED_IN_LOAN).toString();
                                                                                            if (!TextUtils.isEmpty(interestedInLoan) && interestedInLoan.equalsIgnoreCase("yes")) {

                                                                                                // TODO: Insert Master Table
                                                                                                dynamicUIDao.insertMasterTableData(masterTable);

                                                                                            }

                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                            }
                                        }


                                        // TODO: SENDING FINAL RESULT AFTER ALL VALIDATION
                                        data.postValue(dynamicUIDao.getLeadTableListFromDBTop300(userId, loanType));

                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        // TODO: Sending result for exception case
                                        data.postValue(dynamicUIDao.getLeadTableListFromDBTop300(userId, loanType));

                                        insertLog("getLeadTableDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                    }
                                } else {
                                    // TODO: Sending result for failure response tvName server
                                    data.postValue(dynamicUIDao.getLeadTableListFromDBTop300(userId, loanType));

                                    insertLog("getLeadTableDataFromServer", response.message(), "", "", TAG, "", "", "");
                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result for failure response tvName server
                            executor.execute(() -> {
                                data.postValue(dynamicUIDao.getLeadTableListFromDBTop300(userId, loanType));

                                insertLog("getLeadTableDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            });
                        }
                    });
        });
        return data;
    }

    public LiveData<List<RawDataTable>> getLeadRawDataFromServer(String screenNo, String screenName, String loanType,
                                                                 String userId, DynamicUITable dynamicUITable,
                                                                 List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            final LeadRawDataRequestDTO rawDataRequestDTO = new LeadRawDataRequestDTO();
            rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            LeadRawDataRequestDTO.SpNameWithParameterClass spNameWithParameter = new LeadRawDataRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_LEAD_RAW_DATA);
            LeadRawDataRequestDTO.SpParametersClass spParametersClass = new LeadRawDataRequestDTO.SpParametersClass();
            spParametersClass.setEmpId(userId); // TODO: user id
            spParametersClass.setProductId(dynamicUITable.getProductId()); // TODO: product id
            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<LeadRawDataRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<LeadRawDataRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);

            String baseString = new Gson().toJson(rawDataRequestDTO, LeadRawDataRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            DynamicUIWebService.createService(DynamicUIWebservice.class).LeadRawDataFromServer(rawDataRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        String key = json.keys().next();

                                        String tableJson = json.get(key).toString();
                                        LeadRawDataResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, LeadRawDataResponseDTO.class);
                                        if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                            Log.d(TAG, "raw data tvName server");
                                            List<LeadRawDataResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                            if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {
                                                List<RawDataFromServerTable> rawDataFromServerTableList = new ArrayList<>();
                                                for (LeadRawDataResponseDTO.Table table : rawDataResponseDTOList) {
                                                    RawDataFromServerTable rawDataFromServerTable = new RawDataFromServerTable();
                                                    if (!TextUtils.isEmpty(table.getUniqueId())) {
                                                        rawDataFromServerTable.setCustomerId(table.getUniqueId());
                                                    }
                                                    if (!TextUtils.isEmpty(table.getCreatedOn())) {
                                                        rawDataFromServerTable.setCreatedOn(table.getCreatedOn());
                                                    }
                                                    if (!TextUtils.isEmpty(table.getRaws())) {
                                                        rawDataFromServerTable.setRwas(table.getRaws());

                                                        // TODO: update raw data table
                                                        JSONArray jsonArray = new JSONArray(table.getRaws());
                                                        if (jsonArray.length() > 0) {
                                                            for (int i = 0; i < jsonArray.length(); i++) {
                                                                JSONObject jsonObject = jsonArray.getJSONObject(i);
                                                                if (jsonObject != null) {
                                                                    if (jsonArray.length() > 1) {
                                                                        // TODO: need to add screen numbers which has add multiple option
                                                                        // TODO: Multiple JSON Object Raw Data

                                                                    } else {
                                                                        // TODO: Single JSON Object Raw Data
                                                                        RawDataTable rawDataTableFromLocalDB = dynamicUIDao.getRawDataByClient(String.valueOf(table.getScreenId()),
                                                                                table.getUniqueId());
                                                                        if (rawDataTableFromLocalDB != null) {
                                                                            // TODO: No need to update
//                                                                            dynamicUIDao.updateRawDataBag(String.valueOf(table.getScreenId()), rawDataTableFromLocalDB.getId(), jsonObject.toString());
//                                                                            dynamicUIDao.updateRawDataSync(true, rawDataTableFromLocalDB.getId());

                                                                        } else {
                                                                            // TODO: INSERT INTO RAW DATA TABLE
                                                                            final RawDataTable rawDataTable = new RawDataTable(
                                                                                    jsonObject.toString(), String.valueOf(table.getScreenId()),
                                                                                    screenName,
                                                                                    "", table.getUniqueId(),
                                                                                    loanType, userId, MODULE_TYPE_LEAD
                                                                                    , "");

//                                                                            dynamicUIDao.insertRawData(newRawDataTable);


                                                                            RawDataTable rawDataTableFromDB = dynamicUIDao.getTopRawData(dynamicUITable.getScreenID(), rawDataTable.getClient_id());

                                                                            if (rawDataTableFromDB != null) {
                                                                                if (rawDataTableFromDB.getRef_id() != 0) {
                                                                                    int refId = rawDataTableFromDB.getRef_id() + 1;
                                                                                    rawDataTable.setRef_id(refId);
                                                                                    rawDataTable.setUniqueId(String.valueOf(refId));
                                                                                    String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                                                                                    rawDataTable.setTag_name(rawDataTag);
                                                                                    dynamicUITable.setValue(rawDataTag);
                                                                                    rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                                                                                    rawDataTable.setProductId(dynamicUITable.getProductId());
                                                                                    rawDataTable.setSync(true);
                                                                                }
                                                                            } else {
                                                                                int refId = 1;
                                                                                rawDataTable.setRef_id(refId);
                                                                                rawDataTable.setUniqueId(String.valueOf(refId));
                                                                                String rawDataTag = dynamicUITable.getScreenName() + "_" + dynamicUITable.getFieldTag() + "_" + refId;
                                                                                rawDataTable.setTag_name(rawDataTag);
                                                                                dynamicUITable.setValue(rawDataTag);
                                                                                rawDataTable.setCoRelationID(dynamicUITable.getCoRelationID());
                                                                                rawDataTable.setProductId(dynamicUITable.getProductId());
                                                                                rawDataTable.setSync(true);
                                                                            }
                                                                            try {
//                                                                                JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata());
                                                                                // TODO: Adding save button as tag
                                                                                jsonObject.put(dynamicUITable.getFieldTag(), rawDataTable.getTag_name());

                                                                                // TODO: ONLY FOR LEAD SCREEN
                                                                                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_LEAD)) {
                                                                                    try {
                                                                                        PackageInfo packageInfo = App.context.getPackageManager().getPackageInfo(App.context.getPackageName(), 0);
                                                                                        String appVersion = packageInfo.versionName;
                                                                                        if (!TextUtils.isEmpty(appVersion)) {
                                                                                            jsonObject.put(TAG_NAME_MOBILE_APP_VERSION, appVersion);
                                                                                        }
                                                                                    } catch (
                                                                                            Exception ex) {
                                                                                        ex.printStackTrace();

                                                                                        insertLog("getLeadRawDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                                                    }
                                                                                }

                                                                                rawDataTable.setRawdata(jsonObject.toString());
                                                                            } catch (Exception ex) {
                                                                                ex.printStackTrace();

                                                                                insertLog("getLeadRawDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                                                            }

                                                                            dynamicUIDao.updateDynamicUITable(dynamicUITableList); // TODO: First update DynamicUITable list values

                                                                            String dynamicUiRawData = new Gson().toJson(dynamicUITableList);
                                                                            if (!TextUtils.isEmpty(dynamicUiRawData)) {
                                                                                rawDataTable.setDynamic_ui_rawdata(dynamicUiRawData);
                                                                            }

                                                                            if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                                                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                                                                if (hashMap != null && hashMap.size() > 0) {
                                                                                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                                                                        rawDataTable.setField_name(hashMap.get(TAG_NAME_FULL_NAME).toString());
                                                                                    }
                                                                                }
                                                                            } else if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                                                                                HashMap<String, Object> hashMapRawData = setKeyValueForObject(rawDataTable);
                                                                                if (hashMapRawData != null && hashMapRawData.size() > 0) {
                                                                                    if (hashMapRawData.containsKey(TAG_NAME_FULL_NAME)) {
                                                                                        rawDataTable.setField_name(hashMapRawData.get(TAG_NAME_FULL_NAME).toString());
                                                                                    }
                                                                                }
                                                                            }

                                                                            dynamicUIDao.insertRawData(rawDataTable); // TODO: Then insert json in raw data table


                                                                            if (rawDataTable != null) {
                                                                                MasterTable masterTable = new MasterTable();
                                                                                masterTable.setClientId(rawDataFromServerTable.getCustomerId());
                                                                                masterTable.setCurrentStage(CURRENT_STAGE_APPLICATION);
                                                                                masterTable.setApplicationStatus(APPLICATION_STATUS_NEW);
                                                                                masterTable.setFinalStatus(FINAL_STATUS_PENDING);
                                                                                masterTable.setSync(false);
                                                                                masterTable.setLoan_type(loanType); // TODO: LOAN TYPE
                                                                                masterTable.setAllDataCaptured(false);
                                                                                masterTable.setBranchId(table.getBCID()); // TODO: BCID
                                                                                masterTable.setBranchGSTcode(table.getBCBRID()); // TODO: BRANCH GST CODE
                                                                                masterTable.setCreatedBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                                                                masterTable.setReviewBy(rawDataTable.getUser_id()); // TODO: STAFF ID
                                                                                String dateTime = appHelper.getCurrentDateTime(AppConstant.DATE_FORMAT_YYYY_MM_DD);
                                                                                masterTable.setCreated_date(TimestampConverter.toDate(dateTime));
                                                                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);

                                                                                if (hashMap != null && hashMap.size() > 0) {
                                                                                    if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                                                        masterTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                                                    } else if (hashMap.containsKey(TAG_NAME_APPLICANT_FULL_NAME)) {
                                                                                        masterTable.setClientName(hashMap.get(TAG_NAME_APPLICANT_FULL_NAME).toString());
                                                                                    }
                                                                                    if (hashMap.containsKey(TAG_NAME_MOBILE_NUMBER)) {
                                                                                        masterTable.setPhoneNo(hashMap.get(TAG_NAME_MOBILE_NUMBER).toString());
                                                                                    } else if (hashMap.containsKey(TAG_NAME_MOBILENUMBER)) {
                                                                                        masterTable.setPhoneNo(hashMap.get(TAG_NAME_MOBILENUMBER).toString());
                                                                                    }
                                                                                    if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                                                                        masterTable.setLoan_amount(hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString());
                                                                                    }
                                                                                    if (hashMap.containsKey(TAG_NAME_INTERESTED_IN_LOAN)) {
                                                                                        String interestedInLoan = hashMap.get(TAG_NAME_INTERESTED_IN_LOAN).toString();
                                                                                        if (!TextUtils.isEmpty(interestedInLoan) && interestedInLoan.equalsIgnoreCase("yes")) {

                                                                                            // TODO: Insert Master Table
                                                                                            dynamicUIDao.insertAndDeleteMasterTable(masterTable,
                                                                                                    rawDataTable.getClient_id());

                                                                                        }

                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            // TODO: Sending result
                                                            data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));
                                                        }

                                                    }
                                                    if (!TextUtils.isEmpty(String.valueOf(table.getScreenId()))) {
                                                        rawDataFromServerTable.setScreenId(String.valueOf(table.getScreenId()));
                                                    }

                                                    rawDataFromServerTableList.add(rawDataFromServerTable);

                                                }
                                                if (rawDataFromServerTableList.size() > 0) {
                                                    dynamicUIDao.deleteAndInsertRawDataFromServer(rawDataFromServerTableList);
                                                }
                                                // TODO: Sending result
                                                data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));
                                            } else {
                                                // TODO: Sending result
                                                data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));
                                            }
                                        } else {
                                            // TODO: Sending result
                                            data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));
                                        }
                                    } catch (Exception ex) {
                                        ex.printStackTrace();

                                        insertLog("getLeadRawDataFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                    }
                                } else {
                                    // TODO: Sending result
                                    data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));

                                    insertLog("getLeadRawDataFromServer", response.message(), "", "", TAG, "", "", "");
                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result
                            executor.execute(() -> {
                                data.postValue(dynamicUIDao.loadRawDataFromDB(screenNo, userId));

                                insertLog("getLeadRawDataFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            });
                        }
                    });
        });
        return data;
    }


    // TODO: 16-07-2020 GET ROLENAMES FROM SERVER
    public LiveData<List<RoleNameTable>> getRoleNamesServiceCall(RoleNamesRequestDTO roleNamesRequestDTO, String userId) {
        final MutableLiveData<List<RoleNameTable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(GET_ROLE_NAMES_URL);

        executor.execute(() -> {
            String baseString = new Gson().toJson(roleNamesRequestDTO, RoleNamesRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            DynamicUIWebService.createService(DynamicUIWebservice.class).getRoleNamesServiceCall(roleNamesRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        // String key = json.keys().next();
                                        String tableJson = json.toString();
                                        RoleNamesResponseDTO roleNamesResponseDTO = new Gson().fromJson(tableJson, RoleNamesResponseDTO.class);

                                        if (roleNamesResponseDTO != null && roleNamesResponseDTO.getTable().size() > 0) {
                                            Log.d(TAG, "raw data from server");
                                            List<RoleNamesResponseDTO.Table> roleNamesResponseDTOList = roleNamesResponseDTO.getTable();
                                            List<RoleNameTable> roleNameTableList = new LinkedList<>();

                                            for (com.saartak.el.models.RoleNamesResponseDTO.Table table : roleNamesResponseDTOList) {
                                                RoleNameTable roleNameTable = new RoleNameTable();
                                                roleNameTable.setStaffId(userId);
                                                roleNameTable.setRoleId(table.getRoleID());
                                                roleNameTable.setRolename(table.getRoles());
                                                // TODO: ONLY FOR TESTING [ NEEDS TO REMOVE IN PRODUCTION RELEASE ]
                                                //   roleNameTable.setRolename(ROLE_NAME_LO);
                                                roleNameTableList.add(roleNameTable);
                                            }

                                            dynamicUIDao.deleteAndInsertRoleNameListFromServer(roleNameTableList);
                                            // TODO: Sending result
                                            data.postValue(dynamicUIDao.getRoleNameListFromDB(userId));

                                        } else {
                                            // TODO: Sending result
                                            data.postValue(dynamicUIDao.getRoleNameListFromDB(userId));
                                        }
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        data.postValue(dynamicUIDao.getRoleNameListFromDB(userId));

                                    }
                                } else {
                                    // TODO: Sending result
                                    data.postValue(dynamicUIDao.getRoleNameListFromDB(userId));
                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result
                            executor.execute(() -> {
                                data.postValue(dynamicUIDao.getRoleNameListFromDB(userId));
                            });
                        }
                    });
        });
        return data;
    }

    public LiveData<List<KnowledgeBankTable>> getKnowledgeBankFromServer(List<KnowledgeBankTable> knowledgeBankTableList) {
        final MutableLiveData<List<KnowledgeBankTable>> data = new MutableLiveData<>();

        executor.execute(() -> {
            for (KnowledgeBankTable knowledgeBankTable : knowledgeBankTableList) {
                KnowledgeBankTable knowledgeBankTableFromDB = dynamicUIDao.getTopKnowledgeBankData(knowledgeBankTable.getDocumentName());
                if (knowledgeBankTableFromDB == null) {
                    dynamicUIDao.insertKnowledgeBankTable(knowledgeBankTable);
                }
            }

            // TODO: Sending result
            data.postValue(dynamicUIDao.getKnowledgeBankList());
        });
        return data;
    }


    public LiveData<List<ApplicationStatusTable>> getApplicationStatusFromServer(String userId, String workflowId, String loanType, String fromDate, String toDate) {
        final MutableLiveData<List<ApplicationStatusTable>> data = new MutableLiveData<>();

        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            Date fromDateObj = TimestampConverter.toDate(fromDate);
            Date toDateObj = TimestampConverter.toDate(toDate);

            final WorkFlowHistoryRequestDTO customerViewDataRequestDTO = new WorkFlowHistoryRequestDTO();
            customerViewDataRequestDTO.setIMEINumber(appHelper.getIMEI());
            WorkFlowHistoryRequestDTO.SpNameWithParameterClass spNameWithParameter = new WorkFlowHistoryRequestDTO.SpNameWithParameterClass();
            spNameWithParameter.setSpName(SP_NAME_TO_GET_CUSTOMERS_VIEW);
            WorkFlowHistoryRequestDTO.SpParametersClass spParametersClass = new WorkFlowHistoryRequestDTO.SpParametersClass();
            spParametersClass.setUserid(userId); // TODO: user id
            spParametersClass.setWf(workflowId); // TODO: product id
            spParametersClass.setFromDate(fromDate); // TODO: fromDate":"2020-01-01"
            spParametersClass.setToDate(toDate); // TODO: "toDate":"2020-04-30"

            spNameWithParameter.setSpParameters(spParametersClass);
            ArrayList<WorkFlowHistoryRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<WorkFlowHistoryRequestDTO.SpNameWithParameterClass>();
            SpNameWithParameterList.add(spNameWithParameter);
            customerViewDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
            String baseString = new Gson().toJson(customerViewDataRequestDTO, WorkFlowHistoryRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            DynamicUIWebService.createService(DynamicUIWebservice.class).getWorkflowhistoryFromServer(customerViewDataRequestDTO,
                            appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                    enqueue(new Callback<ResponseBody>() {
                        @Override
                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                            executor.execute(() -> {
                                if (response.isSuccessful()) {
                                    try {
                                        String strResponse = response.body().string();
                                        JSONObject json = new JSONObject(strResponse);
                                        String key = json.keys().next();

                                        String tableJson = json.get(key).toString();

                                        WorkflowHistoryResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, WorkflowHistoryResponseDTO.class);

                                        if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                            Log.d(TAG, "raw data tvName server");
                                            List<WorkflowHistoryResponseDTO.Table> rawDataResponseDTOList = rawDataResponseDTO.getTable();
                                            if (rawDataResponseDTOList != null && rawDataResponseDTOList.size() > 0) {

                                                List<ApplicationStatusTable> applicationStatusTableList = dynamicUIDao.getApplicationStatusTableByUserIdAndLoanType(userId, loanType);

                                                for (WorkflowHistoryResponseDTO.Table table : rawDataResponseDTOList) {

                                                    if (table != null) {
                                                        // TODO: 04-05-2020 branch code, current stage id, Branch GST code
                                                        ApplicationStatusTable applicationStatusTable = new ApplicationStatusTable();
                                                        applicationStatusTable.setClientId(table.getCustomerUniqueId());
                                                        applicationStatusTable.setCurrentStage(table.getCurrentStageName());
                                                        applicationStatusTable.setRemarks(table.getStageRemark());
                                                        applicationStatusTable.setReviewBy(userId);
                                                        applicationStatusTable.setCreatedBy(userId);
                                                        applicationStatusTable.setLoan_type(loanType);
                                                        applicationStatusTable.setCurrentStageId(table.getCurrentStage());
                                                        applicationStatusTable.setClientName(table.getFullName());
                                                        applicationStatusTable.setRemarks(table.getStageRemark());

                                                        String dateTime = appHelper.convertServerDateToGivenFormat(table.getCreatedOn(), AppConstants.DATE_FORMAT_YYYY_MM_DD);
                                                        applicationStatusTable.setCreated_date(TimestampConverter.toDate(dateTime));

                                                        if (applicationStatusTableList != null && applicationStatusTableList.size() > 0) {
                                                            MasterTable masterTableFromDB = dynamicUIDao.getMasterTableByClientId(table.getCustomerUniqueId());
                                                            if (masterTableFromDB != null && table.getCustomerUniqueId().equalsIgnoreCase(masterTableFromDB.getClientId())) {
                                                                //update master table
                                                                dynamicUIDao.updateApplicationStatusTableCurrentStage(table.getCurrentStageName(), masterTableFromDB.getClientId());

                                                            } else {

                                                                // TODO: Insert Application Status Table
                                                                dynamicUIDao.deleteAndInsertApplicationStatusTable(applicationStatusTable, table.getCustomerUniqueId());

                                                            }
                                                        } else {
                                                            // TODO: Insert Application Status Table
                                                            dynamicUIDao.deleteAndInsertApplicationStatusTable(applicationStatusTable, table.getCustomerUniqueId());

                                                        }
                                                    }


                                                }

                                                data.postValue(dynamicUIDao.getApplicationStatusTableDataByUserIDLoanTypeAndSelectedDates(userId, loanType, fromDateObj, toDateObj));

                                            }
                                        } else
                                            data.postValue(dynamicUIDao.getApplicationStatusTableDataByUserIDLoanTypeAndSelectedDates(userId, loanType, fromDateObj, toDateObj));


                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        // TODO: Sending result
                                        data.postValue(dynamicUIDao.getApplicationStatusTableDataByUserIDLoanTypeAndSelectedDates(userId, loanType, fromDateObj, toDateObj));

                                        insertLog("getApplicationStatusFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                    }
                                } else {
                                    // TODO: Sending result
                                    data.postValue(dynamicUIDao.getApplicationStatusTableDataByUserIDLoanTypeAndSelectedDates(userId, loanType, fromDateObj, toDateObj));
                                    insertLog("getApplicationStatusFromServer", response.message(), "", "", TAG, "", "", "");
                                }

                            });
                        }

                        @Override
                        public void onFailure(Call<ResponseBody> call, Throwable t) {
                            t.printStackTrace();
                            // TODO: Sending result
                            executor.execute(() -> {
                                data.postValue(dynamicUIDao.getApplicationStatusTableDataByUserIDLoanTypeAndSelectedDates(userId, loanType, fromDateObj, toDateObj));
                                insertLog("getApplicationStatusFromServer", t.getMessage(), "", "", TAG, "", "", "");
                            });
                        }
                    });
        });
        return data;
    }

    // TODO: Product Master Table
    public LiveData<ProductMasterTable> getProductMasterTableData(String screen_id, String clientID, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<ProductMasterTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            DynamicUITable loanSchemeObj = getObjectByTAG(TAG_NAME_LOAN_SCHEME, dynamicUITableList);
            DynamicUITable loanProductObj = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);

            boolean dataExist = (dynamicUIDao.getTenureByScheme(loanSchemeObj.getValue(), loanProductObj.getValue()) != null);
            if (dataExist) {

                data.postValue(dynamicUIDao.getTenureByScheme(loanSchemeObj.getValue(), loanProductObj.getValue()));
            }
        });
        return data;

    }


    public LiveData<DynamicUITable> loanAmountValidation(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<DynamicUITable> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(dynamicUITableList);

            String loanScheme = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_LOAN_SCHEME);
            String loanProduct = dynamicUIDao.getValueByTAGname(dynamicUITable.getScreenID(), TAG_NAME_LOAN_PRODUCT);

            if (!TextUtils.isEmpty(loanScheme) && !TextUtils.isEmpty(loanProduct) && !TextUtils.isEmpty(dynamicUITable.getValue())) {

                ProductMasterTable productMasterTable = dynamicUIDao.getTenureByScheme(loanScheme, loanProduct);

                if (productMasterTable != null && !TextUtils.isEmpty(productMasterTable.getMinLoanAmount())
                        && !TextUtils.isEmpty(productMasterTable.getMaxLoanAmount())) {
                    int minLoanAmount = (int) Double.parseDouble(productMasterTable.getMinLoanAmount());
                    int maxLoanAmount = (int) Double.parseDouble(productMasterTable.getMaxLoanAmount());
                    if (Integer.parseInt(dynamicUITable.getValue()) < minLoanAmount
                            || Integer.parseInt(dynamicUITable.getValue()) > maxLoanAmount) {
                        String error = "Requested loan amount should be between " + minLoanAmount + " and " + maxLoanAmount;
                        dynamicUITable.setValid(false);
                        dynamicUITable.setErrorMessage(error);

                    } else {
                        dynamicUITable.setValid(true);
                        dynamicUITable.setErrorMessage("");
                    }

                    data.postValue(dynamicUITable);
                }
            }
        });
        return data;

    }

    public LiveData<DynamicUITable> ageValidationJLG(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<DynamicUITable> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(dynamicUITableList);

            // TODO: Personal Details
            List<RawDataTable> personalDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_PERSONAL_DETAIL,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)) {
                String error = "";
                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_NOMINEE_AGE)) {
                    DynamicUITable nomineeRelationObj = getObjectByTAG(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITableList);
                    if (nomineeRelationObj != null && nomineeRelationObj.getValue().equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                        int nomineeAge = Integer.parseInt(dynamicUITable.getValue());

                        if (personalDetailRawDataList != null && personalDetailRawDataList.size() > 0) {
                            for (RawDataTable applicantPersonalRawData : personalDetailRawDataList) {
                                if (applicantPersonalRawData != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(applicantPersonalRawData);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        // TODO: value tvName marital status for applicant
                                        if (hashMap.containsKey(TAG_NAME_APPLICANT_MARITAL_STATUS)) {
                                            String maritalStatus = hashMap.get(TAG_NAME_APPLICANT_MARITAL_STATUS).toString();
                                            if (!TextUtils.isEmpty(maritalStatus) && maritalStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {
                                                if (nomineeAge < 18) {
                                                    error = ERROR_MESSAGE_FOR_MIN_AGE_JLG;
                                                    dynamicUITable.setErrorMessage(error);
                                                    dynamicUITable.setValid(false);
                                                    break;
                                                } else {
                                                    dynamicUITable.setErrorMessage("");
                                                    dynamicUITable.setValid(true);
                                                }
                                            } else {
                                                dynamicUITable.setErrorMessage("");
                                                dynamicUITable.setValid(true);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_GUARDIAN_AGE)) {
                    if (Integer.parseInt(dynamicUITable.getValue()) < 18) {
                        error = ERROR_MESSAGE_FOR_MIN_AGE_JLG;
                        dynamicUITable.setErrorMessage(error);
                        dynamicUITable.setValid(false);
                    }
                }
            } else {

                // TODO: set min and max
                int minLoanAmount = 18;
                int maxLoanAmount = 55;
                String error = ERROR_MESSAGE_FOR_MIN_AGE_JLG;

                if (personalDetailRawDataList != null && personalDetailRawDataList.size() > 0) {
                    for (RawDataTable applicantPersonalRawData : personalDetailRawDataList) {
                        if (applicantPersonalRawData != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(applicantPersonalRawData);
                            if (hashMap != null && hashMap.size() > 0) {
                                // TODO: value tvName marital status for applicant
                                if (hashMap.containsKey(TAG_NAME_APPLICANT_MARITAL_STATUS)) {
                                    String maritalStatus = hashMap.get(TAG_NAME_APPLICANT_MARITAL_STATUS).toString();
                                    if (!TextUtils.isEmpty(maritalStatus) && maritalStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SINGLE)) {
                                        minLoanAmount = 35;
                                        error = ERROR_MESSAGE_FOR_MIN_AGE_JLG_SINGLE;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                if (Integer.parseInt(dynamicUITable.getValue()) < minLoanAmount) {
                    dynamicUITable.setValid(false);
                    dynamicUITable.setErrorMessage(error);
                } else if (Integer.parseInt(dynamicUITable.getValue()) > maxLoanAmount) {
                    dynamicUITable.setValid(false);
                    dynamicUITable.setErrorMessage(ERROR_MESSAGE_FOR_MAX_AGE_JLG);
                } else {
                    dynamicUITable.setValid(true);
                    dynamicUITable.setErrorMessage("");

                }
            }

            data.postValue(dynamicUITable);
        });
        return data;

    }

    public LiveData<DynamicUITable> ageValidationJLG_Radio(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<DynamicUITable> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(dynamicUITableList);

            // TODO: applicant KYC  Details
            List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                for (RawDataTable applicantPersonalRawData : applicantKTCDetailRawDataList) {
                    if (applicantPersonalRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(applicantPersonalRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            // TODO: value tvName marital status for applicant

                            if (hashMap.containsKey(TAG_NAME_CONTAINS_AGE)) {
                                String value = hashMap.get(TAG_NAME_CONTAINS_AGE).toString();
                                if (!TextUtils.isEmpty(value) && Integer.parseInt(value) < 35) {
//                                    dynamicUITable.setValue("");
                                    dynamicUITable.setValid(false);
//                                    dynamicUITable.setErrorMessage("age values greater than or equal to 35 in" + SCREEN_NAME_APPLICANT_KYC + "if you want to select single");
                                    dynamicUITable.setErrorMessage(ERROR_MESSAGE_FOR_SINGLE);
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            data.postValue(dynamicUITable);
        });
        return data;

    }

    public LiveData<DynamicUITable> deDupValidationforMonthInPD(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList, String month_datepicker) {
        final MutableLiveData<DynamicUITable> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(dynamicUITableList);
            // TODO: MONTHLY TRANSACTION DETAIL
            List<RawDataTable> rawDataTableListMonthlyDetails = dynamicUIDao.getRawDataListByScreenNameAndLoanType(dynamicUITable.getScreenName(),
                    dynamicUITable.getClientID(), dynamicUITable.getLoanType());

            if (rawDataTableListMonthlyDetails != null && rawDataTableListMonthlyDetails.size() > 0) {
                boolean matched = false;

                for (RawDataTable rawDataTable : rawDataTableListMonthlyDetails) {
                    if (rawDataTable != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String month = "";
                            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_MONTHLY_TRANSACTION_DETAIL_MSME) && hashMap.containsKey(TAG_NAME_MONTH_IN_BANKING_HISTORY)) {
                                month = hashMap.get(TAG_NAME_MONTH_IN_BANKING_HISTORY).toString();
                            } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_SALES_BILLS_DETAIL_MSME) && hashMap.containsKey(TAG_NAME_DATE_IN_SALES_BILLS)) {
                                month = hashMap.get(TAG_NAME_DATE_IN_SALES_BILLS).toString();
                            } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PURCHASE_BILLS_DETAIL_MSME) && hashMap.containsKey(TAG_NAME_DATE_IN_PURCHASE_BILLS)) {
                                month = hashMap.get(TAG_NAME_DATE_IN_PURCHASE_BILLS).toString();
                            }

                            // TODO: month year format need to set
                            month = appHelper.getMonthByDate(AppConstant.DATE_FORMAT_YYYY_MM_DD, month);
                            if (!TextUtils.isEmpty(month)) {
                                if (month.equalsIgnoreCase(month_datepicker)) {
                                    // TODO: set error to dynamicuitable
                                    matched = true;
                                    break;
                                }

                            }

                        }
                    }
                }

                if (matched) {
                    String error = "Month Already Exists";
                    dynamicUITable.setValid(false);
                    dynamicUITable.setErrorMessage(error);

                } else {
                    dynamicUITable.setValid(true);
                    dynamicUITable.setErrorMessage("");
                }

                data.postValue(dynamicUITable);

            }
        });
        return data;

    }


    public LiveData<DynamicUITable> deDupeValidationForAllScreen(DynamicUITable dynamicUITable, List<DynamicUITable> dynamicUITableList) {
        final MutableLiveData<DynamicUITable> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.updateDynamicUITable(dynamicUITableList);

            if (dynamicUITable.getLoanType().equalsIgnoreCase(LOAN_NAME_JLG)) {

                if (dynamicUITable.getFieldName().equalsIgnoreCase(FIELD_NAME_KYC_ID) || dynamicUITable.getFieldName().equalsIgnoreCase(FIELD_NAME_RE_ENTER_KYC_ID)) {
                    // TODO: DE-DUPE VALIDATION FOR APPLICANT & PERSONAL SCREEN ( KYC ID)//
                    if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                            || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)
                            || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)) {

                        // TODO: all kyc detail list initialize
                        List<RawDataTable> allKYCDetailRawDataList = new ArrayList<>();

                        // TODO: APPLICANT KYC
                        List<RawDataTable> applicantKYCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                                dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                        // TODO: PERSONAL KYC
                        List<RawDataTable> personalKYCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_PERSONAL_DETAIL,
                                dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                        // TODO: NOMINEE KYC
                        List<RawDataTable> nomineeKYCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_NOMINEE_DETAIL,
                                dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                        if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                            // TODO: add personal KYC details
                            if (personalKYCDetailRawDataList != null && personalKYCDetailRawDataList.size() > 0) {
                                allKYCDetailRawDataList.addAll(personalKYCDetailRawDataList);
                            }

                            // TODO: add nominee KYC details
                            if (nomineeKYCDetailRawDataList != null && nomineeKYCDetailRawDataList.size() > 0) {
                                RawDataTable rawDataTable = nomineeKYCDetailRawDataList.get(0);

                                if (rawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                            String name = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                            if (!TextUtils.isEmpty(name) && !name.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                                allKYCDetailRawDataList.addAll(nomineeKYCDetailRawDataList);
                                            }
                                        }
                                    }
                                }
                            }

                        } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                            // TODO: add applicant KYC details
                            if (applicantKYCDetailRawDataList != null && applicantKYCDetailRawDataList.size() > 0) {
                                allKYCDetailRawDataList.addAll(applicantKYCDetailRawDataList);
                            }
                            // TODO: add nominee KYC details
                            if (nomineeKYCDetailRawDataList != null && nomineeKYCDetailRawDataList.size() > 0) {
                                RawDataTable rawDataTable = nomineeKYCDetailRawDataList.get(0);

                                if (rawDataTable != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                            String name = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                            if (!TextUtils.isEmpty(name) && !name.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                                allKYCDetailRawDataList.addAll(nomineeKYCDetailRawDataList);
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_NOMINEE_DETAIL)) {
                            // TODO: add applicant KYC details
                            if (applicantKYCDetailRawDataList != null && applicantKYCDetailRawDataList.size() > 0) {
                                allKYCDetailRawDataList.addAll(applicantKYCDetailRawDataList);
                            }
                            // TODO: add personal KYC details
                            if (personalKYCDetailRawDataList != null && personalKYCDetailRawDataList.size() > 0) {
                                allKYCDetailRawDataList.addAll(personalKYCDetailRawDataList);
                            }
                        }

                        // TODO: kycid not same for different client id's
                        boolean isKycUnique = true;

                        if (allKYCDetailRawDataList != null && allKYCDetailRawDataList.size() > 0) {
                            for (RawDataTable rawDataTable : allKYCDetailRawDataList) {
                                HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                if (hashMap != null) {

                                    String valueFromDB = "";

                                    if (hashMap.containsKey(TAG_NAME_KYC_ID) && hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                        valueFromDB = hashMap.get(TAG_NAME_KYC_ID).toString();
                                    } else if (hashMap.containsKey(TAG_NAME_NOMINEE_KYC_ID) && hashMap.containsKey(TAG_NAME_NOMINEE_KYC_TYPE)) {
                                        valueFromDB = hashMap.get(TAG_NAME_NOMINEE_KYC_ID).toString();
                                    }
                                    if (!TextUtils.isEmpty(valueFromDB)) {

                                        if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_KYC_TYPE_RE_ENTER_AADHAAR)) {
                                            if (valueFromDB.equalsIgnoreCase(dynamicUITable.getOptional())) {
                                                if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                                    String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                                    if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                        dynamicUITable.setValid(false);
                                                        dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG);
                                                        isKycUnique = false;
                                                        break;
                                                    }
                                                } else {
                                                    dynamicUITable.setValid(false);
                                                    dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG);
                                                    isKycUnique = false;
                                                    break;
                                                }
                                            }
                                        } else {
                                            // TODO: Remaining Kyc Types
                                            if (valueFromDB.equalsIgnoreCase(dynamicUITable.getValue())) {
                                                if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                                    String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                                    if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                        dynamicUITable.setValid(false);
                                                        dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG);
                                                        isKycUnique = false;
                                                        break;
                                                    }
                                                } else {
                                                    dynamicUITable.setValid(false);
                                                    dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG);
                                                    isKycUnique = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (isKycUnique) {
                            if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                                // TODO: ALL CLIENT'S APPLICANT KYC
                                List<RawDataTable> allClientsApplicantKYCRawDataList = dynamicUIDao.LeadRawDataList(SCREEN_NAME_APPLICANT_KYC,
                                        dynamicUITable.getLoanType());

                                if (allClientsApplicantKYCRawDataList != null && allClientsApplicantKYCRawDataList.size() > 0) {
                                    for (RawDataTable rawDataTable : allClientsApplicantKYCRawDataList) {
                                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                        if (hashMap != null) {

                                            String valueFromDB = "";

                                            if (hashMap.containsKey(TAG_NAME_KYC_ID) && hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                valueFromDB = hashMap.get(TAG_NAME_KYC_ID).toString();
                                            } else if (hashMap.containsKey(TAG_NAME_NOMINEE_KYC_ID) && hashMap.containsKey(TAG_NAME_NOMINEE_KYC_TYPE)) {
                                                valueFromDB = hashMap.get(TAG_NAME_NOMINEE_KYC_ID).toString();
                                            }
                                            if (!TextUtils.isEmpty(valueFromDB) && !TextUtils.isEmpty(dynamicUITable.getClientID()) && !dynamicUITable.getClientID().equalsIgnoreCase(rawDataTable.getClient_id())) {

                                                if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_KYC_TYPE_RE_ENTER_AADHAAR)) {
                                                    if (valueFromDB.equalsIgnoreCase(dynamicUITable.getValue())) {
                                                        if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                                            String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                                            if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                                dynamicUITable.setValid(false);
                                                                dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG_FOR_ALL_CLIENTS);
                                                                break;
                                                            }
                                                        } else {
                                                            dynamicUITable.setValid(false);
                                                            dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG_FOR_ALL_CLIENTS);
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    // TODO: Remaining Kyc Types
                                                    if (valueFromDB.equalsIgnoreCase(dynamicUITable.getValue())) {
                                                        if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                                            String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                                            if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                                dynamicUITable.setValid(false);
                                                                dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG_FOR_ALL_CLIENTS);
                                                                break;
                                                            }
                                                        } else {
                                                            dynamicUITable.setValid(false);
                                                            dynamicUITable.setErrorMessage(ERROR_MESSAGE_KYC_ID_NOT_SAME_JLG_FOR_ALL_CLIENTS);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }

                } else if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_CONTACT_NO_1)) {
                    // TODO: all personal detail list intialize
                    List<RawDataTable> allPersonalDetailRawDataList = new ArrayList<>();

                    // TODO: PERSONAL DETAIL
                    List<RawDataTable> applicantPersonalDetailRawDataList = dynamicUIDao.getRawDataListONLYByScreenName(SCREEN_NAME_PERSONAL_DETAIL,
                            dynamicUITable.getLoanType(), dynamicUITable.getUser_id());

                    if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                        // TODO: add applicant personal details
                        if (applicantPersonalDetailRawDataList != null && applicantPersonalDetailRawDataList.size() > 0) {
                            allPersonalDetailRawDataList.addAll(applicantPersonalDetailRawDataList);
                        }

                    }

                    if (allPersonalDetailRawDataList != null && allPersonalDetailRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : allPersonalDetailRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null) {
                                if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                    String mob_db = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                    mob_db = mob_db.replaceAll(" ", "");
                                    if (mob_db.equalsIgnoreCase(dynamicUITable.getValue())) {

                                        dynamicUITable.setValid(false);
                                        dynamicUITable.setErrorMessage("Contact number already exists");
                                        break;

                                    }
                                }
                            }
                        }
                    }


                }
            } else {
                // TODO: DE-DUPE VALIDATION FOR LEAD SCREENn ( MOBILE NUMBER )
                if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_LEAD)) {

                    // TODO: all lead details
                    List<RawDataTable> allLeadRawDataList = dynamicUIDao.LeadRawDataList(SCREEN_NAME_LEAD
                            , dynamicUITable.getLoanType());

                    if (allLeadRawDataList != null && allLeadRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : allLeadRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null) {
                                if (hashMap.containsKey(dynamicUITable.getFieldTag())) {
                                    String leadMobile_db = hashMap.get(dynamicUITable.getFieldTag()).toString();
                                    leadMobile_db = leadMobile_db.replaceAll(" ", "");

                                    // TODO : REMOVE THIS CONDITION FOR ADDING MULTIPLE LEADS
                                    /*if (leadMobile_db.equalsIgnoreCase(dynamicUITable.getValue())) {
                                        dynamicUITable.setValid(false);
                                        dynamicUITable.setErrorMessage("Mobile No Already Exist");
                                        break;
                                    }*/
                                }
                            }
                        }
                    }
                }

                // TODO: DE-DUPE VALIDATION FOR COLD CALLING SCREENn ( MOBILE NUMBER )
                else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COLD_CALLING)) {
                    boolean exist = false;

                    // TODO: all cold calls
                    List<ColdCallTable> coldCallTableList = dynamicUIDao.loadColdCallDataFromDB(dynamicUITable.getUser_id(), dynamicUITable.getLoanType());

                    if (coldCallTableList != null && coldCallTableList.size() > 0) {
                        for (ColdCallTable coldCallTable : coldCallTableList) {
                            if (coldCallTable != null) {
                                if (!TextUtils.isEmpty(coldCallTable.getMobileNo())) {
                                    if (coldCallTable.getMobileNo().equalsIgnoreCase(dynamicUITable.getValue())) {
                                        dynamicUITable.setValid(false);
                                        dynamicUITable.setErrorMessage("Mobile No Already Exist");
                                        exist = true;
                                        break;
                                    }
//                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_MOBILE_NUMBER, toScreenNo, coldCallTableFromDB.getMobileNo());
                                }
                            }
                        }
                    }

                    if (!exist) {
                        // TODO: all lead table
                        List<LeadTable> leadTableList = dynamicUIDao.getLeadTableListFromDB(dynamicUITable.getUser_id(), dynamicUITable.getLoanType());

                        if (leadTableList != null && leadTableList.size() > 0) {
                            for (LeadTable leadTable : leadTableList) {
                                if (leadTable != null) {
                                    if (!TextUtils.isEmpty(leadTable.getMobileNo())) {
                                        // TODO : REMOVE THIS CONDITION FOR ADDING MULTIPLE LEADS
                                        /*if (leadTable.getMobileNo().equalsIgnoreCase(dynamicUITable.getValue())) {
                                            dynamicUITable.setValid(false);
                                            dynamicUITable.setErrorMessage("Mobile No Already Exist");
                                            break;
                                        }*/
//                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_MOBILE_NUMBER, toScreenNo, coldCallTableFromDB.getMobileNo());
                                    }
                                }
                            }
                        }
                    }
                }

                // TODO: DE-DUPE VALIDATION FOR APPLICANT & CO APPLICANT KYC SCREEN ( KYC ID)
                else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                        || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {

                    // TODO: all kyc detail list initialize
                    List<RawDataTable> allKYCDetailRawDataList = new ArrayList<>();

                    // TODO: APPLICANT KYC
                    List<RawDataTable> applicantKYCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    // TODO: CO APPLICANT KYC
                    List<RawDataTable> coApplicantKYCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_CO_APPLICANT_KYC,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                        // TODO: add co applicant KYC details
                        if (coApplicantKYCDetailRawDataList != null && coApplicantKYCDetailRawDataList.size() > 0) {
                            allKYCDetailRawDataList.addAll(coApplicantKYCDetailRawDataList);
                        }

                    } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {
                        // TODO: add applicant KYC details
                        if (applicantKYCDetailRawDataList != null && applicantKYCDetailRawDataList.size() > 0) {
                            allKYCDetailRawDataList.addAll(applicantKYCDetailRawDataList);
                        }
                        // TODO: add coapplicant KYC details
                        if (coApplicantKYCDetailRawDataList != null && coApplicantKYCDetailRawDataList.size() > 0) {
                            allKYCDetailRawDataList.addAll(coApplicantKYCDetailRawDataList);
                        }
                    }

                    if (allKYCDetailRawDataList != null && allKYCDetailRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : allKYCDetailRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null) {
                                if (hashMap.containsKey(TAG_NAME_KYC_ID) && hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
//                                String kyctype_db = hashMap.get(TAG_NAME_KYC_TYPE).toString();
//                                kyctype_db = kyctype_db.replaceAll(" ", "");
                                    String valueFromDB = hashMap.get(TAG_NAME_KYC_ID).toString();

                                    if (dynamicUITable.getFieldTag().equalsIgnoreCase(TAG_NAME_KYC_TYPE_RE_ENTER_AADHAAR)) {
                                        if (valueFromDB.equalsIgnoreCase(dynamicUITable.getOptional())) {
                                            if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                                String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                                if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                    dynamicUITable.setValid(false);
                                                    dynamicUITable.setErrorMessage("Applicant and CoApplicant KYC Ids should not be same");
                                                    break;
                                                }
                                            } else {
                                                dynamicUITable.setValid(false);
                                                dynamicUITable.setErrorMessage("Applicant and CoApplicant KYC Ids should not be same");
                                                break;
                                            }
                                        }
                                    } else {
                                        // TODO: Remaining Kyc Types
                                        if (valueFromDB.equalsIgnoreCase(dynamicUITable.getValue())) {
                                            if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                                String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                                if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                    dynamicUITable.setValid(false);
                                                    dynamicUITable.setErrorMessage("Applicant and CoApplicant KYC Ids should not be same");
                                                    break;
                                                }
                                            } else {
                                                dynamicUITable.setValid(false);
                                                dynamicUITable.setErrorMessage("Applicant and CoApplicant KYC Ids should not be same");
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // TODO: DE-DUPE VALIDATION FOR APPLICANT & CO APPLICANT PERSONAL DETAIL SCREEN ( MOBILE NUMBER )
                else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)
                        || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {

                    // TODO: all personal detail list intialize
                    List<RawDataTable> allPersonalDetailRawDataList = new ArrayList<>();

                    // TODO: PERSONAL DETAIL
                    List<RawDataTable> applicantPersonalDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_PERSONAL_DETAIL,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    // TODO: COAPPLICANT PERSONAL DETAIL
                    List<RawDataTable> coApplicantPersonalDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                        // TODO: add coapplicant personal details
                        if (coApplicantPersonalDetailRawDataList != null && coApplicantPersonalDetailRawDataList.size() > 0) {
                            allPersonalDetailRawDataList.addAll(coApplicantPersonalDetailRawDataList);
                        }

                    } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                        // TODO: add applicant personal details
                        if (applicantPersonalDetailRawDataList != null && applicantPersonalDetailRawDataList.size() > 0) {
                            allPersonalDetailRawDataList.addAll(applicantPersonalDetailRawDataList);
                        }
                        // TODO: add coapplicant personal details
                        if (coApplicantPersonalDetailRawDataList != null && coApplicantPersonalDetailRawDataList.size() > 0) {
                            allPersonalDetailRawDataList.addAll(coApplicantPersonalDetailRawDataList);
                        }
                    }

                    if (allPersonalDetailRawDataList != null && allPersonalDetailRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : allPersonalDetailRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null) {
                                if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                    String mob_db = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                    mob_db = mob_db.replaceAll(" ", "");
                                    if (mob_db.equalsIgnoreCase(dynamicUITable.getValue())) {
                                        if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                            String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                            if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                dynamicUITable.setValid(false);
                                                dynamicUITable.setErrorMessage("Applicant and CoApplicant Mobile number's should not be same");
                                                break;
                                            }
                                        } else {
                                            dynamicUITable.setValid(false);
                                            dynamicUITable.setErrorMessage("Applicant and CoApplicant Mobile number's should not be same");
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // TODO: DE-DUPE VALIDATION FOR APPLICANT & CO APPLICANT BANK DETAIL SCREEN ( ACCOUNT NUMBER )
                else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                        || dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {

                    // TODO: all bank detail list intialize
                    List<RawDataTable> allBankDetailRawDataList = new ArrayList<>();

                    // TODO: APPLICANT bank
                    List<RawDataTable> applicantBankDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_BANK_DETAILS,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());
                    // TODO: COAPPLICANT bank
                    List<RawDataTable> coApplicantBankDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS,
                            dynamicUITable.getClientID(), dynamicUITable.getLoanType());

                    if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)) {
                        // TODO: add coapplicant bank details
                        if (coApplicantBankDetailRawDataList != null && coApplicantBankDetailRawDataList.size() > 0) {
                            allBankDetailRawDataList.addAll(coApplicantBankDetailRawDataList);
                        }

                    } else if (dynamicUITable.getScreenName().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)) {
                        // TODO: add applicant bank details
                        if (applicantBankDetailRawDataList != null && applicantBankDetailRawDataList.size() > 0) {
                            allBankDetailRawDataList.addAll(applicantBankDetailRawDataList);
                        }
                        // TODO: add coapplicant bank details
                        if (coApplicantBankDetailRawDataList != null && coApplicantBankDetailRawDataList.size() > 0) {
                            allBankDetailRawDataList.addAll(coApplicantBankDetailRawDataList);
                        }
                    }

                    if (allBankDetailRawDataList != null && allBankDetailRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : allBankDetailRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null) {
                                if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
                                    String accnum_db = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
                                    accnum_db = accnum_db.replaceAll(" ", "");

                                    if (accnum_db.equalsIgnoreCase(dynamicUITable.getValue())) {
                                        if (hashMap.containsKey(TAG_NAME_MODULE_TYPE)) {
                                            String moduletype_db = hashMap.get(TAG_NAME_MODULE_TYPE).toString();
                                            if (!TextUtils.isEmpty(moduletype_db) && !moduletype_db.equalsIgnoreCase(dynamicUITable.getModuleType())) {
                                                dynamicUITable.setValid(false);
                                                dynamicUITable.setErrorMessage("Applicant and CoApplicant ACC num's should not be same");
                                                break;
                                            }
                                        } else {
                                            dynamicUITable.setValid(false);
                                            dynamicUITable.setErrorMessage("Applicant and CoApplicant ACC num's should not be same");
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }

            // TODO: FINAL RESULT
            data.postValue(dynamicUITable);
        });
        return data;

    }


    // TODO: 21-08-2019
    public LiveData<List<RawDataTable>> getApplicantKycRawData(String
                                                                       fromScreenName, String fieldTag, String clientID) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getRawDataByClientAndScreenName(fromScreenName, clientID) != null);
            if (dataExist) {

                data.postValue(dynamicUIDao.getRawDataByClientAndScreenName(fromScreenName, clientID));
            }
        });
        return data;
    }

    public LiveData<List<RawDataTable>> getRawDataForAllClient
            (List<String> screenNoList, List<String> clientIdList, String userId) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {

            data.postValue(dynamicUIDao.getRawDataForAllClient(screenNoList, clientIdList, userId));

        });
        return data;
    }

    public LiveData<List<RawDataTable>> getRawDataForSingleClient
            (List<String> screenNameList, String clietid, String loanType, String
                    moduleType) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataForSingleClient(screenNameList, clietid, loanType, moduleType);
            data.postValue(rawDataTableList);

        });
        return data;
    }

    public LiveData<List<ClientDetailsAdapter>> getRawDataForCoApplicantSection
            (List<String> screenNameList, List<String> screenNoList,
             String clientId, String loanType,
             String moduleType, Context context,
             ClientDetailsAdapter.ClientDetailsInterface clientDetailsInterface) {
        final MutableLiveData<List<ClientDetailsAdapter>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<ClientDetailsAdapter> clientDetailsAdapterList = new ArrayList<>();
            List<String> noOfCoApplicants = dynamicUIDao.getNoOfCoApplicants(clientId, loanType, moduleType);
            if (noOfCoApplicants != null && noOfCoApplicants.size() > 0) {
                for (String coAppModuleType : noOfCoApplicants) {
                    List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataForSingleClient(screenNameList, clientId, loanType, coAppModuleType);
                    if (rawDataTableList != null && rawDataTableList.size() > 0) {
                        ArrayList<HashMap<String, Object>> hashMapArrayList = new ArrayList<>();
                        for (RawDataTable rawDataTable : rawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            hashMapArrayList.add(hashMap);
                        }
                        Log.d(TAG, "HashMapList ==> " + hashMapArrayList.toString());

                        ClientDetailsAdapter clientDetailsAdapter = new ClientDetailsAdapter(context,
                                rawDataTableList, hashMapArrayList, appHelper, screenNameList, screenNoList, coAppModuleType,
                                clientDetailsInterface);
                        clientDetailsAdapterList.add(clientDetailsAdapter);
                    }
                }
            }

            data.postValue(clientDetailsAdapterList);

        });
        return data;
    }

    public LiveData<NumberOfCoApplicant> getNoOfCoApplicants(String
                                                                     screenName, String clientId, String userId,
                                                             String loanType, String fieldTag) {
        final MutableLiveData<NumberOfCoApplicant> data = new MutableLiveData<>();
        executor.execute(() -> {
            NumberOfCoApplicant numberOfCoApplicantObj = new NumberOfCoApplicant();
            DynamicUITable dynamicUITable = dynamicUIDao.GetDynamicTableRowByScreenName(screenName, clientId, fieldTag);
            if (dynamicUITable != null && !TextUtils.isEmpty(dynamicUITable.getMinLength())) {
                int noOfCoApp = Integer.parseInt(dynamicUITable.getMinLength());
                if (noOfCoApp > 0) {
                    List<String> coApplicantsList = dynamicUIDao.getNoOfCoApplicants(screenName, clientId, userId, loanType);
                    if (coApplicantsList != null && coApplicantsList.size() > 0) {
                        int noOfRemainingCoApplicants = noOfCoApp - coApplicantsList.size();
                        numberOfCoApplicantObj.setRemainingCoApplicant(noOfRemainingCoApplicants);
                        numberOfCoApplicantObj.setNextCoApplicant(coApplicantsList.size() + 1);
                    }
                }

            }
            data.postValue(numberOfCoApplicantObj);
        });
        return data;
    }

    public LiveData<List<RawDataTable>> getRawData(String screenNo, String
            clientId, String moduleType) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getRawDataByClientAndModuleType(screenNo, clientId, moduleType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getRawDataByClientAndModuleType(screenNo, clientId, moduleType));
            }
        });
        return data;
    }

    public LiveData<List<RawDataTable>> getRawDataRowCountByScreenName(String screenName, String clientId, String moduleType) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            data.postValue(dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(screenName, clientId, moduleType));
        });
        return data;
    }

    public LiveData<List<RawDataTable>> getRawDataByClientIDAndModuleType(String screenName, String clientId, String moduleType) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getRawDataByClientIDAndModuleType(screenName, clientId, moduleType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getRawDataByClientIDAndModuleType(screenName, clientId, moduleType));
            }
        });
        return data;
    }

    public LiveData<String> getModuleType(String loanType, String clientId) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                String moduleType = "";

                // TODO: BUSINESS PROFILE RAW DATA
                RawDataTable rawDataTable = dynamicUIDao.getRawDataByScreenNameAndLoanType(SCREEN_NAME_BUSINESS_PROFILE,
                        clientId, loanType);
                if (rawDataTable != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_INDUSTRY_CLASS)) {
                            String industryClass = hashMap.get(TAG_NAME_INDUSTRY_CLASS).toString();
                            if (!TextUtils.isEmpty(industryClass)) {
                                if (industryClass.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MANUFACTURE)) {
                                    moduleType = MODULE_TYPE_MANUFACTURE_BUSINESS_INCOME;
                                } else if (industryClass.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SERVICE)) {
                                    moduleType = MODULE_TYPE_SERVICE_BUSINESS_INCOME;
                                } else if (industryClass.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_TRADE)) {
                                    moduleType = MODULE_TYPE_MANUFACTURE_BUSINESS_INCOME;
                                }
                            }
                        }
                    }
                }

                // TODO: Final output
                data.postValue(moduleType);
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return data;
    }

    // TODO: AHL SALARY MODULETYPE VALIDATION
    public LiveData<String> getAHLModuleType(String loanType, String clientId) {
        final MutableLiveData<String> data = new MutableLiveData<>();
        try {
            executor.execute(() -> {

                String moduleType = "";

                // TODO: LEAD RAW DATA
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                            String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                            if (!TextUtils.isEmpty(customerType)) {
                                if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SELF_EMPLOYED)
                                        || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SEP) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                    moduleType = MODULE_TYPE_BUSINESS;
                                } else if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_CASH_SALARIED)) {
                                    moduleType = MODULE_TYPE_SALARY;
                                } else if (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_BANK_SALARIED) || customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SALARIED)) {
                                    moduleType = MODULE_TYPE_SALARY;
                                }
                            }

                        }
                    }
                }

                // TODO: Final output
                data.postValue(moduleType);
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return data;
    }


    // TODO: 04-12-2019
    public LiveData<List<DynamicUITable>> getSpouseName(DynamicUITable dynamicUITable, String fromScreenNo, List<DynamicUITable> viewParametersList) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            dynamicUIDao.updateDynamicUITable(viewParametersList);
            boolean dataExist = (dynamicUIDao.getRawDataByScreenNoAndClientId(fromScreenNo, dynamicUITable.getClientID()) != null);
            if (dataExist) {
                List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByScreenNoAndClientId(fromScreenNo, dynamicUITable.getClientID());
                if (rawDataTableList != null && rawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable1 : rawDataTableList) {
                        // TODO: spouse name autopopulate based on prooftype contains ID
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable1);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PROOF_TYPE)) {
                                if (hashMap.get(TAG_NAME_PROOF_TYPE).toString().contains("ID")) {
                                    if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                        dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_SPOUSE_NAME, dynamicUITable.getScreenName(), hashMap.get(TAG_NAME_FULL_NAME).toString(), false);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                List<DynamicUITable> dynamicUITableList = dynamicUIDao.loadTableList(dynamicUITable.getScreenID());
                data.postValue(dynamicUITableList);
            }
        });
        return data;
    }


    public LiveData<List<RawDataTable>> getMultipleRawData
            (List<String> screenNoS, String clientId) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getMultipleRawData(screenNoS, clientId) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.getMultipleRawData(screenNoS, clientId));
            }
        });
        return data;
    }

    public LiveData<RawDataTable> getRawDataForChildFragment(String screenName, String clientId, String fieldTag, String loanType) {
        final MutableLiveData<RawDataTable> data = new MutableLiveData<>();
        executor.execute(() -> {
            RawDataTable rawDataTable = (dynamicUIDao.getRawDataForChildFragment(screenName, clientId, fieldTag, loanType));
            if (rawDataTable != null) {

                if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                    List<OTPVerificationTable> otpVerificationTableList = dynamicUIDao.getOTPVerifiedTable(clientId);

                    if (otpVerificationTableList != null && otpVerificationTableList.size() > 0) {
                        for (OTPVerificationTable otpVerificationTable : otpVerificationTableList) {
                            if (otpVerificationTable.isOTPVerified()) {
                                Type type = new TypeToken<List<DynamicUITable>>() {
                                }.getType();
                                List<DynamicUITable> dynamicUITableList = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                                if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                                    DynamicUITable dynamicUITable = null;
                                    //  DynamicUITable dynamicUITable1=null;

                                    dynamicUITable = getObjectByTAG(TAG_NAME_FULL_NAME, dynamicUITableList);

                                    if (dynamicUITable != null) {
                                        dynamicUITable.setEditable(false);
                                        String dynamicUIRawdata = new Gson().toJson(dynamicUITableList);
                                        dynamicUIDao.updateDynamicUIRawData(rawDataTable.getScreen_no(), rawDataTable.getId(), dynamicUIRawdata);
                                    }

                                }
                            }//if-isOtpverified
                        }
                    }
                }


                if (!TextUtils.isEmpty(rawDataTable.getDynamic_ui_rawdata())) {
                    Type type = new TypeToken<List<DynamicUITable>>() {
                    }.getType();
                    List<DynamicUITable> dynamicUITableListFromDB = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                    if (dynamicUITableListFromDB != null && dynamicUITableListFromDB.size() > 0) {

                        // TODO: Common for all screen
                        DynamicUITable dynamicUITable = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableListFromDB);
                        if (dynamicUITable != null) {
                            dynamicUITable.setFieldName(FIELD_NAME_UPDATE);
                        }

                        // TODO: Validation for Applicant KYC screen
                        if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                || screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                || screenName.equalsIgnoreCase(SCREEN_NAME_GUARANTOR_DETAILS)
                        ) {
                            DynamicUITable saveObj = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableListFromDB);
                            if (saveObj != null) {
                                saveObj.setVisibility(false);
                            }

                            DynamicUITable kycTypeObj = getObjectByTAG(TAG_NAME_KYC_TYPE, dynamicUITableListFromDB);
                            if (kycTypeObj != null) {
                                kycTypeObj.setEditable(false);
                                kycTypeObj.setFieldType(FIELD_TYPE_TEXT_BOX);
                            }

                            DynamicUITable isVerifiedObj = getObjectByTAG(TAG_NAME_IS_VERIFIED, dynamicUITableListFromDB);
                            DynamicUITable kycIdObj = getObjectByFieldName(TAG_NAME_KYC_ID, dynamicUITableListFromDB);
                            DynamicUITable reEnterkycIdObj = getObjectByFieldName(TAG_NAME_RE_ENTER_KYC_ID, dynamicUITableListFromDB);

                            if (isVerifiedObj != null && !TextUtils.isEmpty(isVerifiedObj.getValue()) && isVerifiedObj.getValue().equalsIgnoreCase(IS_VERIFIED_TRUE)) {

                                if (kycIdObj != null) {
                                    kycIdObj.setEditable(false);
                                }
                                if (reEnterkycIdObj != null) {
                                    reEnterkycIdObj.setEditable(false);
                                }
                            } else {
                                if (kycIdObj != null) {
                                    kycIdObj.setEditable(true);
                                }
                                if (reEnterkycIdObj != null) {
                                    reEnterkycIdObj.setEditable(true);
                                }
                            }
                        }
                        if (screenName.equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK)) {
                            DynamicUITable saveObj = getObjectByTAG(TAG_NAME_SAVE_BUTTON, dynamicUITableListFromDB);
                            if (saveObj != null) {
                                saveObj.setVisibility(false);
                            }
                        }
                        // TODO: year field need to editable false when update time
                        if (screenName.equalsIgnoreCase(SCREEN_NAME_ITR_DETAIL_MSME)) {
                            DynamicUITable yearObj = getObjectByTAG(TAG_NAME_YEAR_IN_ITR_DETAIL, dynamicUITableListFromDB);
                            if (yearObj != null) {
                                yearObj.setEditable(false);
                            }
                        }

                        // TODO: full name field need to editable false when update time
                        if (screenName.equalsIgnoreCase(SCREEN_NAME_REFERENCES)) {
                            DynamicUITable fullNameObj = getObjectByTAG(TAG_NAME_FULL_NAME, dynamicUITableListFromDB);
                            if (fullNameObj != null) {
                                fullNameObj.setEditable(false);
                            }
                        }

                        // TODO: 07-11-2019  common for all screens
                        for (DynamicUITable dynamicUITableApplicantKYC : dynamicUITableListFromDB) {

                            if (dynamicUITableApplicantKYC.getFieldType().equalsIgnoreCase(FIELD_TYPE_PLUS_BUTTON)
                                    || dynamicUITableApplicantKYC.getFieldType().equalsIgnoreCase(FIELD_TYPE_NEW_ROW)
                            ) {
                                if ((screenName.equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_GUARANTOR_DETAILS)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_OTHER_INCOME_SOURCE)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_GENERAL_INCOME)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS)
                                        || screenName.equalsIgnoreCase(SCREEN_NAME_REFERENCE_CHECK))
                                        && dynamicUITableApplicantKYC.getFieldType().equalsIgnoreCase(FIELD_TYPE_PLUS_BUTTON)) {
                                    dynamicUITableApplicantKYC.setVisibility(true);
                                    dynamicUITableApplicantKYC.setFieldName(FIELD_NAME_UPDATE);

                                } else {
                                    dynamicUITableApplicantKYC.setVisibility(false);
                                }
                            }
                        }


                        if (screenName.equalsIgnoreCase(SCREEN_NAME_BUSINESS_PROOF)) {
                            DynamicUITable businessProofObj = getObjectByFieldName(TAG_NAME_BUSINESS_PROOF, dynamicUITableListFromDB);
                            businessProofObj.setEditable(false);
                            businessProofObj.setFieldType(FIELD_TYPE_TEXT_BOX); // TODO: Changing the KYC Field type to text box
                        }


                        String dynamicUiRawData = new Gson().toJson(dynamicUITableListFromDB);
                        dynamicUIDao.updateDynamicUIRawData(rawDataTable.getScreen_no(), rawDataTable.getId(), dynamicUiRawData);

                    }
                }

                // TODO: Final result
                RawDataTable rawDataTableFromDb = dynamicUIDao.getRawDataForChildFragment(screenName, clientId, fieldTag, loanType);
                data.postValue(rawDataTableFromDb);
            }
        });
        return data;
    }


    public LiveData<List<RawDataTable>> getTagNameList(String screenName, String
            clientId, String moduleType, String correlationId) {
        final MutableLiveData<List<RawDataTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            // TODO: old query
//            boolean dataExist = (dynamicUIDao.getTagNameList(screenName, clientId, moduleType) != null);
            // TODO: new query
            boolean dataExist = (dynamicUIDao.getRawDataListByCorrelationId(screenName, clientId, moduleType, correlationId) != null);
            if (dataExist) {
                if (screenName.equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)
                        || screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)
                        || screenName.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)
                        || screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                ) {
                    List<RawDataTable> rawDataTableList = dynamicUIDao.getTagNameList(screenName, clientId, moduleType);
                    boolean isOTPVerified = false;
                    if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)) {
                        isOTPVerified = dynamicUIDao.getOTPVerificationByOTPVerifiedStatus(clientId, MODULE_TYPE_APPLICANT, SCREEN_NAME_PERSONAL_DETAIL);
                    } else {
                        isOTPVerified = dynamicUIDao.getOTPVerificationByOTPVerifiedStatus(clientId, moduleType, screenName);

                    }

                    for (RawDataTable rawDataTable : rawDataTableList) {
                        Type type = new TypeToken<List<DynamicUITable>>() {
                        }.getType();
                        List<DynamicUITable> dynamicUITableList = new Gson().fromJson(rawDataTable.getDynamic_ui_rawdata(), type);
                        if (dynamicUITableList != null && dynamicUITableList.size() > 0) {
                            DynamicUITable dynamicUITable = null;
                            DynamicUITable dynamicUITable1 = null;
                            DynamicUITable dynamicUITable2 = null;
                            DynamicUITable dynamicUITable3 = null;
                            if (isOTPVerified) {
                                if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)) {
//                                    dynamicUITable = getObjectByTAG(TAG_NAME_REQUESTED_LOAN_AMOUNT, dynamicUITableList);
//                                    dynamicUITable1 = getObjectByTAG(TAG_NAME_LOAN_TYPE, dynamicUITableList);
//                                    dynamicUITable2 = getObjectByTAG(TAG_NAME_LOAN_PRODUCT, dynamicUITableList);
//                                    dynamicUITable3 = getObjectByTAG(TAG_NAME_LOAN_SCHEME, dynamicUITableList);
                                } else if (screenName.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                                    dynamicUITable = getObjectByTAG(TAG_NAME_CONTACT_NO_1, dynamicUITableList);
                                    dynamicUITable1 = getObjectByTAG(TAG_NAME_RE_ENTER_CONTACT_NO_1, dynamicUITableList);

                                    DynamicUITable dynamicUITableRelation = getObjectByTAG(TAG_NAME_COAPPLICANT_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITableList);

                                    if (dynamicUITableRelation != null) {
                                        // TODO: condition to remove added kyc type tvName spinner list
                                        String[] newSpinnerItems = {};

                                        List<String> spinnerList = addRemoveSpouseInCoPersonal(dynamicUITableRelation);

                                        if (spinnerList != null && spinnerList.size() > 0) {

                                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);

                                            dynamicUITableRelation.setParamlist(newSpinnerItems);
                                        }
                                    }
                                } else {

                                    dynamicUITable = getObjectByTAG(TAG_NAME_CONTACT_NO_1, dynamicUITableList);
                                    dynamicUITable1 = getObjectByTAG(TAG_NAME_RE_ENTER_CONTACT_NO_1, dynamicUITableList);
                                }

                                if (dynamicUITable != null) {
                                    dynamicUITable.setEditable(false);
                                }
                                if (dynamicUITable1 != null) {
                                    dynamicUITable1.setEditable(false);
                                }
                                if (dynamicUITable2 != null) {
                                    dynamicUITable2.setEditable(false);
                                }
                                if (dynamicUITable3 != null) {
                                    dynamicUITable3.setEditable(false);
                                }
                            } else {
                                if (screenName.equalsIgnoreCase(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL)) {
                                    dynamicUITable = getObjectByTAG(TAG_NAME_COAPPLICANT_RELATIONSHIP_WITH_THE_APPLICANT, dynamicUITableList);

                                    if (dynamicUITable != null) {

                                        // TODO: condition to remove added kyc type from spinner list
                                        String[] newSpinnerItems = {};

                                        List<String> spinnerList = addRemoveSpouseInCoPersonal(dynamicUITable);

                                        if (spinnerList != null && spinnerList.size() > 0) {

                                            newSpinnerItems = spinnerList.toArray(new String[spinnerList.size()]);

                                            dynamicUITable.setParamlist(newSpinnerItems);
                                        }
                                    }
                                }
                            }

                            String dynamicUIRawdata = new Gson().toJson(dynamicUITableList);
                            dynamicUIDao.updateDynamicUIRawData(rawDataTable.getScreen_no(), rawDataTable.getId(), dynamicUIRawdata);
                            break;


                        }
                    }


                }

                // TODO: screen references in PD getlist without corelationid
                if (screenName.equalsIgnoreCase(SCREEN_NAME_REFERENCES)) {
                    List<RawDataTable> finalRawDataList = dynamicUIDao.getTagNameList(screenName, clientId, moduleType);
                    data.postValue(finalRawDataList);
                } else {
                    List<RawDataTable> finalRawDataList = dynamicUIDao.getRawDataListByCorrelationId(screenName, clientId, moduleType, correlationId);
                    data.postValue(finalRawDataList);
                }
                if (screenName.equalsIgnoreCase(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {

                                String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_INCOME_SOURCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, customerType, false, true);

                                if (!TextUtils.isEmpty(customerType) && (customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SALARIED))) {

                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OWNERSHIP_OF_BUSINESS_PREMISES, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                            "", true, false);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DURATION_OF_BUSINESS_IN_PRESENT_ADDRESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL,
                                            "", true, false);
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", true, false);

                                }
                                String typeOfProdession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(customerType) && !TextUtils.isEmpty(typeOfProdession) && customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                    if (typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNERSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PROPRIETORSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PRIVATE_LIMITED) ||
                                            typeOfProdession.equalsIgnoreCase(TAG_NAME_PUBLIC_LIMITED) || typeOfProdession.equalsIgnoreCase(TAG_NAME_LLP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_HUF)) {
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RELIGION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SOCIAL_STATUS, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_DISABLED, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_DISABILITY_TYPE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_WORKING_FAMILY_MEMBER, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_OCCUPATION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_APPLICANT_EDUCATION, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_HOUSE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_RESIDING_SINCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_YEARS_OF_EXPERIENCE, SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, "", false, false);
                                    }
                                }
                            }
                        }
                    }
                }

                if (screenName.equalsIgnoreCase(SCREEN_NAME_PERSONAL_DETAIL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                String typeOfProdession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(customerType) && !TextUtils.isEmpty(typeOfProdession) && customerType.equalsIgnoreCase(RADIO_BUTTON_ITEM_SENP)) {
                                    if (typeOfProdession.equalsIgnoreCase(TAG_NAME_PARTNERSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PROPRIETORSHIP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_PRIVATE_LIMITED) ||
                                            typeOfProdession.equalsIgnoreCase(TAG_NAME_PUBLIC_LIMITED) || typeOfProdession.equalsIgnoreCase(TAG_NAME_LLP) || typeOfProdession.equalsIgnoreCase(TAG_NAME_HUF)) {
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MARITAL_STATUS, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SPOUSE_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SPOUSE_DATE_OF_BIRTH, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_SPOUSE_AGE, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOTHER_MAIDEN_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_FATHER_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                        dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_MOTHER_NAME, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                       // dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_BORROWER_TYPE, SCREEN_NAME_PERSONAL_DETAIL, "", false, false);
                                    }
                                }
                            }
                        }
                    }
                }

                if (screenName.equalsIgnoreCase(SCREEN_NAME_BANK_DETAILS)) {
                    List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                            clientId, loanType);
                    if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantKTCDetailRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_ACCOUNT_HOLDER_NAME, SCREEN_NAME_BANK_DETAILS, value, true, true);
                                }
                            }
                        }
                    }
                }
                if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL)) {
                    RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String loanAmount = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                dynamicUIDao.updateDynamicTableValueAndVisibility(TAG_NAME_REQUESTED_LOAN_AMOUNT, SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, loanAmount, true, true);
                            }
                            if (hashMap.containsKey(TAG_NAME_LOAN_TENURE)) {
                                String tenure = hashMap.get(TAG_NAME_LOAN_TENURE).toString();
                                if (!TextUtils.isEmpty(tenure)) {
                                    dynamicUIDao.updateDynamicTableValue(TAG_NAME_LOAN_TENURE_IN_MONTHS, SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, tenure);
                                }
                            }
                        }
                    }
                }
            }
        });
        return data;
    }

    public LiveData<List<DocumentUploadTable>> getDocumentUploadData(String clientId, String loanType) {
        final MutableLiveData<List<DocumentUploadTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.loadDocumentUploadData(clientId, loanType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.loadDocumentUploadData(clientId, loanType));
            }
        });
        return data;
    }

    public LiveData<List<String>> getDocumentUploadHeader(String clientId, String loanType, boolean isHeader) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<String> headerList = new ArrayList<>();
            if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_JLG)) {
                // TODO: Only for JLG
                headerList = dynamicUIDao.getDocumentUploadHeaderForJLG(clientId, loanType, isHeader, MODULE_TYPE_APPLICANT);
            } else {
                headerList = dynamicUIDao.getDocumentUploadHeader(clientId, loanType, isHeader);
            }
            data.postValue(headerList);
        });
        return data;
    }

    public LiveData<List<String>> getDocumentUploadHeaderEL(String clientId, String loanType, boolean isHeader) {
        final MutableLiveData<List<String>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<String> headerList = new ArrayList<>();
            if (!TextUtils.isEmpty(loanType) && loanType.equalsIgnoreCase(LOAN_NAME_EL)) {
                // TODO: Only for JLG
                headerList = dynamicUIDao.getDocumentUploadHeaderForJLG(clientId, loanType, isHeader, MODULE_TYPE_APPLICANT);
            } else {
                headerList = dynamicUIDao.getDocumentUploadHeader(clientId, loanType, isHeader);
            }
            data.postValue(headerList);
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> getDocumentUploadSubHeader(String clientId, String loanType, boolean isHeader) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.getDocumentUploadSubHeader(clientId, loanType, isHeader) != null); // get the sub header by doc table new
            if (dataExist) {
                data.postValue(dynamicUIDao.getDocumentUploadSubHeader(clientId, loanType, isHeader));
            }
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> uploadDocumentsToServer(DocumentUploadTableNew documentUploadTableNew) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {
            List<DocumentUploadTableNew> documentListwithfilepath = dynamicUIDao.getUnUploadedDocuments(documentUploadTableNew.getClient_id(),
                    documentUploadTableNew.getLoan_type(), false, false);
            List<DocumentUploadTableNew> documentList = new ArrayList<>();
            // List<String> documentTypeCompare = new ArrayList<>();

            // TODO: some time file path coming empty string so filter fun temporary
            if (documentListwithfilepath != null && documentListwithfilepath.size() > 0) {
                for (DocumentUploadTableNew documentUploadTableNewfilepath : documentListwithfilepath) {
                    if (!TextUtils.isEmpty(documentUploadTableNewfilepath.getFile_path())) {
                        //documentTypeCompare.add(DOCUMENT_FILE);
                        documentList.add(documentUploadTableNewfilepath);
                    }
                }
            }

            if (documentList != null && documentList.size() > 0) {

                // TODO: IMAGE UPLOAD SERVICE CALL

                DynamicUIWebservice service = DynamicUIWebService.createService(DynamicUIWebservice.class);

                List<Observable<String>> requests = new ArrayList<>();

                JealousSky jealousSky = JealousSky.getInstance();

                try {
                    jealousSky.initialize(IMAGE_ENC_PSWD, IMAGE_ENC_SALT);

                } catch (Exception ex) {
                    ex.printStackTrace();

                    insertLog("uploadDocumentsToServer", ex.getMessage(), "", "", TAG, "", "", "");
                }

                // Make a collection of all requests you need to call at once, there can be any number of requests, not only 3. You can have 2 or 5, or 100.
                for (DocumentUploadTableNew documentUploadTableNew1 : documentList) {

                    String url = DOCUMENT_UPLOAD_URL; // TODO: Document Upload URL
                    Log.i(TAG, "URL FOR IMAGE UPLOADING-------> " + url);
                    File file = new File(documentUploadTableNew1.getFile_path());

                    // TODO: IMAGE DECRYPTION ****** BEGIN **********
                    byte[] decryptedByteArrayImage = null;
                    try {
                        InputStream inputStream = new FileInputStream(documentUploadTableNew1.getFile_path());
                        decryptedByteArrayImage = jealousSky.decrypt(inputStream);
                    } catch (Exception ex) {
                        ex.printStackTrace();

                        insertLog("uploadDocumentsToServer", ex.getMessage(), "", "", TAG, "", "", "");
                    }

                    // TODO: IMAGE DECRYPTION ****** END **********

                    if (decryptedByteArrayImage != null) {

                        Uri uri = Uri.fromFile(file);
                        String filePath = FileUtils.getPath(App.context, uri);
                        final String tag = documentUploadTableNew1.getDocument_tag();
                        String fileExtension = filePath.substring
                                (filePath.lastIndexOf(".") + 1).toUpperCase();

                        RequestBody rbClientId = RequestBody.create(MediaType.parse("multipart/form-data"), documentUploadTableNew1.getClient_id());
                        RequestBody rbFileName = RequestBody.create(MediaType.parse("multipart/form-data"), documentUploadTableNew1.getFile_name());
                        RequestBody rbExtension = RequestBody.create(MediaType.parse("multipart/form-data"), fileExtension);
                        RequestBody rbFileType = RequestBody.create(MediaType.parse("multipart/form-data"), IMAGE_UPLOAD_FOLDER_NAME + "\\" + tag); // TODO: 29-03-2019 Hardcoded

//                    RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);
//                        RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), decryptedByteArrayImage);

                        String base64 = Base64.encodeToString(decryptedByteArrayImage, Base64.DEFAULT);
                        RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), base64);

                        String productType = "";
                        if (!TextUtils.isEmpty(documentUploadTableNew1.getLoan_type()) &&
                                documentUploadTableNew1.getLoan_type().equalsIgnoreCase(LOAN_NAME_INDIVIDUAL)) {
                            productType = "IL";
                        } else {
                            productType = documentUploadTableNew1.getLoan_type();
                        }
                        RequestBody rbProductType = RequestBody.create(MediaType.parse("multipart/form-data"),
                                productType);

                        MultipartBody.Part multiPart = MultipartBody.Part.createFormData("UploadedFile", documentUploadTableNew1.getFile_name(), rbFile);

                        requests.add(service.uploadImageToWebServerNew(url, rbClientId, rbFileName, rbExtension,
                                rbFileType, rbProductType, multiPart,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")));
                    }
                }

                // paste here
                //String applicantKycPhoto="/9j/4AAQSkZJRgABAgAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCADIAKADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwC7jgUoBOMUuM04CoOcb+FLinbeaUigQykxxT8etBH+TQMSkP8Ak0m7B5/Kgkk8YzSuAvsaaSoOGYD2JqOVslV6k9faljUYIC9Dgn/CgCUFMDNOXB75qF9qc9OMmoJ762tCDNOkY9GPP4Dv0piL232owBVS31CO6G5A4ToNyFc/nVpHVx8pz60ALScnil79KOnSgYh6Unt0pTnPSigBOopCO9OxkUhGfWgQg65pwBpi9aeDQhjhRRkdKr3l1HaWsk8pPlxqWbHoKAHT3MVsheVwq9fU1hz+LLKM4Xcw9QP8f/r1xGr+I5tQnJPyoeQuf8/l/Ws3zmnJyc/WnYpRPRovFmnSDa3mRkdOP5Vaj1m0lUN5425xnkfn6V5XK6oMcAfmaiS+miGEbA6UWHynp9/r9nZyEQkSzsPuh8KPcn+gyf0rHuPE8cb486U8Y2xgIPb1Yfn+FcGblwMZ5NR+Yx6k0WQch103iYzfLG1wOMZknd8/gTVYavcBso6bifmYj5j/AMC61zqvjqePSrcUgIxlR9aY+VI6rT/EcUcgW8tY5FJ5dVGR9eMmu2tJRLFHNGv7t1yBu5/wryIwHO5ZCD6irFnq9zY4WOeWIjukjDP4dKViXHsexj0pT0965/QPEcOqRKkjxLOByA2M/QH/ABroRg/SkSMPFGflzg0/GetBA9KQDByKU/jS4oIpgRDk4xTxnA4pNuGzTxUoY3t0rz7xXrLXcbojlbdXKRqP4yOSx/THsQe9dzqc4tdMuZtwDJE7Lk9wCa8e1G8M7CNeIo+FA7+9UhpFLILZqSOQAEbefrUagHgZNWFg5Gcj0qiyJw7dAAB6CoGUj8fWtEJt5yPTBqvLDyTtI9xQMpHikzUpQjtTce340ANDc1IshB4qPBJoHXqQKYWNO3ckYJbpyBxTJohkkH8M5qCIqDn5j7VZeUtGVA4/KkIhtruWzuFlibDryuQDj8DXqXhfxKmsQiGUhbsDnOfmx3+vtXkzggkkVqaDqH2LUoZA+1Q3PPGKGKSPasUVFbypNAksbBkdQysvQg9CKmqTK43v0o6ilpcUDIm+bim+YsSEsQFUZOacACc1V1Hyl0+4eUfu1jZn5x8oGT+lSM878S+I21W8CRZWCMkJz97Pcj/PWuZnUhjTpmUysw6ZyOv9Sf50ocSKVI+bqDVlpWIkw2D3HWr42yRrg/drNBZTwcVJHM6MW6g0yrF3BZSBkD35BpvlSR98j0BpYpRIM4wfcVIEDZ2IT2JWpvYVmU5ELdsH0zmoltmZuQea3bXSZrgj92VB6HFalvogTjaWA65FZSqqJqoM5hrCRYg2wkVQkR426EV3clssUmOi+9ZV9pgc748Z9COtRCtrqW6emhz0Lgn5gD+FWdoC5wcfnSSWYV+AV7YPNK8eEI3A10XuYtdCrKck47UyPHmYbpRKCp6k0wctiqEeyeG5WGiWo3q6gEKwOcjJrZEma4XwJM7WdxGznYjAqM9Mj/61dmhz9akysWQ2akFQKc+uamB4ouIZisXxGhl0K7UMy4jJyBk/T6Hp+NbJIx1rA8V2pvNBuAmd6DzByecdenXjPXvSGjyeQYPNR529DxU3yj5XPHqOSKYygN8hDj6VZqhpOTkjn1pQM44qzaxG5mG4ARrzj1rZito8/wCrX8qzlUUS4xuZ1nGz4QRsQfSuj07T0DI0mCfQ9FqS1smJG0ACtyzsXDKR1B5rlnWbNo00tWT2toxUBiE9Qozn8ati1iWPGTg8ZPepRbtsO4blxyD/AFqUApkcYJ7Vm3dDMO9s0ZGUDt+NY7WjRpySfrXUzxZHA4rPuLbPQ9azvYtHI31ojqTjBrnbhXhYg5I7Gu3vbVjnHaucv7bcGyK6qMzOpG5glt3enxqC3WmOmxtp7U+EkSAgBsetdhzHW+Eopre6DuMLKPkz/Ef6cZ5r0FG4HauS8O2FxvF7dgK+0iJB/CD1PtmuqQ/LUsze5aVjxzU2eDVaMjANTZ560hCHgmqGpyeVYXEgONkbNn6An+lXpMk1k67IYtGunVA7BD8pxgg8HqDnjNIZ5EygHnNC8nApXOW5xUtom+dR6c1behqaNrD5cQB4J6mrqSOcLBGznuR/IU6C3EjAHgd600lgskVUGWrlnLXU3itCGHUbq1G0x49z/jV+18WLFIqzwHb3IbOf0FLFKLhWLb1B4AVM8/XP9KqPY2s0hRnZGJx+8Ax+PAxU3T3Qcr6M67T/ABFp9wF3bVkOOG4BGPy962khgufmhctwOCenX8q82i08QyNGcqwOMZ4H0rrtCunUhS5XnJIOPX8qhuN9B2aJ7p0jwGYdMkGsm81C3gG0yLx2qvrErrLId2ACQec+/wDhXLm1uNQnEcZYsewP6mpjBN6lNtGjc69bljtRifpWPcX6z7iIGC571fOhi35aSJ8Hs5/wpDBaZKmNVb3HWtlyR2RFpPc5W/UJOccqQCK1PDGmLeXnmSjMcfJ+vbiq+rWywyBlPynIArpPCkXl6bvx/rGJrpTvEwnodREAoAq3GBxVSIn1q3HSMSynAp+eKjUZFKaAJnGap3kEdzbSwyjKSKVYexGDV5jjqKy9W1GLTbUyOpdmO1Ix1Y/0Hqf5nAoGtTynVbZLTUp4Y2DRBzsYdxT9NjzJ+FaOqW39pXkl0gMJkOdjA9cY6nGelV9Nj2SspXleDRzJrQ15WrXNi3TbHuHaqskcslyoZjGhIy3t9e1X7Y5G0Crog81RuTI+lcnNyy1OpK6MTU9BuG1APppSeCUBVIkBIJGCGBOR65+lbum6RbJpMEB87+0E8wuEwozyVX5yoPIA3cjB69DU0dg7AFIicd88VOtjOR5e7Cnriq9tdak+zs7oz8F5oiNuFQAjGP8APp+ArR0+5Eb5HHNNniSBCAAe1RQB4szLGZGPAUVzt3NERa0NyswwMmqejhPP+zPIIRO2GlIJG3rg8j0/PGc4rS1FHlt8lCh64J6VjwwmbmM4Yc1dN2WpMlqU7y/nSH7LE0st8Z9qGOKMxvHjGFwm5m3A85xjHGaZqtvcadNGk7q7FQXwMFT39jzWqyXLgeZubbxnriqUtkZJC7ksOozW/PF9CORoxtSJnhiwerYrsNNgNrZwwp8wXgkmuemtYQ0fm8QiQFvp6V2NtGpjVlIIPII7itov3Tnqbk8Q9BVyNSMVFGvI4q2iYFMyHAcYpDTwMCkC5amBK3Xk1y2rSo+o3LyKri2XYqknAyqnP15/QeldWy1yvimJodkqA7ZhsbHTcORn3I/9BqJp8prSaU9TIUSG0d3wsb57ZJ9hWUiNb6jcROu1gQcE5xnB6+tdFHcKfKVkBXYCgPQ1g6gktvqitKOZctn15rGlu0dNTa5p2O0v/Ot2Aoo5IBPeubt5dh9K04bg7gS3TtWVSLuXDY6SN1BWNQQCc7d2OPf9auRwKERQwd3HGBgevSsSzuU8xSACM7juroo7iG3h87YvmgYTIyVPfn8B+GPwhJbjZzV3btLqL2qcbDhsevcZq5ZxR20oWQbsHJFUJmmtr2cRsR5mCJvvbc9c+9V7PR7lL2WaPU57mU8lJGwMd8jp+WKOUDX1qS1cloV2huik5xXN2UTQXDAjJPzAVJqFreyTxiS9Foi8lgu7NOimM15EFbzAgwzgYBprRC3NAqu3fjGepqGaKNlyCMVNM3lo2ADnp7VnXEoUFgcZHIrNeRehl36IXZOCprptOAFhbY6eUn8hXI3E33nOPSuxsIzFZwIwwyooIx3xXfTulqcVY0IhwKtKOKgiFWFNamArdKIxk0xjk1LGOlK4D3PHWqF/bJfWktu/RxwfQ9QfzxVpzmoHY+tA1ocW8Egf7NNGNyHkdefaqerWqosTKoUryQo6c1117aJcukmSsi9wOo9DWdeWHm27oWB4JAAxk9s+tY8jUtDp9opR1Ofhb5gKtAkMGH41TjGDnHSrCnJB4qZrU1hsadvMzMOg55rYjn3KMtwOOtc6j7Mk4HFOW5ygeRyFB6d8Vhytltm5NeqnCYZjTYGuss6wO2eScdBj/P6VirqZJK20bFgeWUc/n2pGur1ZBi3OfVWGf51oqbQblrUVu2w5ic5HGcGmWd9FICm3Y46iqs093ne8LnPc9aqPMsy5I2Sg9e+Kfs9BPTY2p7kBOe1ZFzNngdKg+0uSUc9uKicknpxTjTsQ5E9nD9o1C2jIBXfvYH0HPNdrF2rntFtmVmuGxgrtX1966KDFdCWhyTepcReBUyjjrUSnink4WnYgOrVZRcAVVT71W04AoAgaoHBzVgioWHrTsMqSCqkoBBq7IKgELzSpDGN0jnCigDlL2PyL18dG+YUxOTk1a14LFeIykNH8yBh/HtPLfmSPwqmpwuQcj2rGcb6o6actLE5G5WAPX0pEjLLgqGHoaakgHNX7fDY4/SsHeJtuVlnaJwG+X2FasOoROg3BCw6HjNSJZxSjdIQOM/dzSf2BaOrB4Xx/eYn+nFVGfNuO/KM1DUIHtNoiiVj/ABKqg4+o6/8A6q5qRsyF2QNn161tHRrZXO13/HpVeaCOHjFPnSdkJ6oyDGd4Y09UZ2AA5JwKlZRuIH5VcsbY7hK44/hraKMJuxr2ieXGidQoxWlCMVThHSrsYxWhzMsg8cUM3FMzgUZ6UATx5NW1qpEPlFWV+70oARgT0FQshNWME8YJJqWOwuJeQu0erHFMDLdCe1WIIpbTS7i9TAeVvs0bH+EkZJHv0A+prbi0Ibd0zE8E8naP8aj1eZNL8IpdpDuW0kNxtPRiHOBz7jGe340NCueZ+IooYLqKyjnWWa23pMAc7DkYU/59ax8PHypoSSWaeWaaQyTyuZJXPV2Ykk/iSanKZGcVlKVmdUI6WIPPz14P6VoWVwMgEg81ntGCfem+VIhzGxH0qXaSKV0dTDfBHBB7YGO1XhrRWMR5+TPTNcO11cR8MD9cUg1J8HIGT3NSqXZlufdHT3N6GbqM9OKybm4LdKzzqbkdBVd7iWU8nr29acaVtWTKbexc+0CIHGGftntXY+D7eLVbGWEjdIpJx3z/AJz+lcGq5wTXX/DK78jxkLdiuy4U43f3wOOPoWP4VsmYTTtc6lfDzyEi3J8zG7a3Q+w9P1qKXTLu0YrLCwIrszbj+3Hij+VjuKnHAPB/+tWvA8F3AUmjG4ZVlYdCOoq7aHPc8tIIPIx9aE5NejXfh22lBKfIT0I6Gsabw+sLDzrfKnjfDx+fP+P1FKw7nNxjirCfL71Hpt9Y32oJpl3ZjTr6R3RIkuTK4ZQT86kDClQWVl3Kw7jjOnc6VJbOQrbwOhI2k/gaB3NsWUKAFIlC+1XLaONPmVQTnAPpUptiI9qglRxuJ64/xpqlISRzwRjHGeuDVEXI58LBswd00m3d7d/zrF121lvPBl4kEQdzFNDjuA4O3H/Awn4Vtaid1upjXaBJkAemMU7TRG8M1nJkq6kYzzyKGNHznbkMzN681ejXK/Wp9Y0dtC1m4sigWLJkgwePKJIXuemCvPdTUURxjmuWod9N3VyKWLb0FJGxFW2AYHNV9mGxwRUJ30ZbLULwum11Un3qpdQwdFjX8BTmTPTOab5Zzk80JK9w6FJ4EHRcUsdru5x1qyyZcLVjARBgVblpoSkUXi2DHpWt4DH/ABXukk5z5rDpzzG44/Os2bk4Heuo+GOnm58cW0xjkK2sck25RwDt2gH3wxx9KumZ1dj10ADxbjk8H+lWGxa6pcRnOHIkUZ456/qP5VBb/P4jSc4JcHIzyD0rR1m3AMN5t5iO1v8AdPH88VujiCO4i3FN46Z5HbtTiY2BDhdrY6jAI59ayiSCJRyVI3D1zg/1q1MjCYADCgEE+pzQwK82nASiRUSYAFVcY3op5xnqRx2/wxEyxEIjRlePkRlKlsegPWnTsyFcZPGcfTp+tTSMxjZRggj7p5B+tILE0mVhTKAA5yRyQfrVa6jwomTqPve9FFUBOUE0cI67v8DVJA9q6zY+eB8OPVe/+NFFAIp+OfBY8T2kd3YMq38KM8YP3ZQQMqT2zgYPtXickckMrxSxtHLGxV0YYKsOoPvRRWNVdTqoSexIjnGKjcEHIoormvqdQLO3dc0rSu3QYoop9QuNUbSSeTQ7EmiimAwoAC7HAHJzXtXgDw62gaZ5k0LC8nAlnU4+Q7SFjyP7oPT+8zc8gAorakjmxDasjV0sNLr00rEj/ZPbiuhvIvOtJoj/ABoVyO2aKK2OU52xfzVl3qQPNAK+mFUGtS6HI6ck5/SiihiKDKJGYenQ0JzEmepUE/WiigZ //9k=";

                    /*if (applicantKycPhoto != null && !TextUtils.isEmpty(applicantKycPhoto)) {
                        String url = DOCUMENT_UPLOAD_URL; // TODO: Document Upload URL
                        RequestBody rbClientId = RequestBody.create(MediaType.parse("multipart/form-data"), documentUploadTableNew.getClient_id());
                        RequestBody rbFileName = RequestBody.create(MediaType.parse("multipart/form-data"), documentUploadTableNew.getClient_id() + "_EKYC_Aadhaar_Applicant.jpg");
                        RequestBody rbExtension = RequestBody.create(MediaType.parse("multipart/form-data"), ".jpg");
                        RequestBody rbFileType = RequestBody.create(MediaType.parse("multipart/form-data"), IMAGE_UPLOAD_FOLDER_NAME + "\\" + "Aadhaar"); // TODO: 29-03-2019 Hardcoded
                        RequestBody rbFile = RequestBody.create(MediaType.parse("multipart/form-data"), applicantKycPhoto);
                        RequestBody displayName = RequestBody.create(MediaType.parse("multipart/form-data"), "Ekyc Aadhar Applicant Photo");
                        RequestBody P1 = RequestBody.create(MediaType.parse("multipart/form-data"), "e1");
                        RequestBody documentName = RequestBody.create(MediaType.parse("multipart/form-data"), "Ekyc Aadhar");
                        RequestBody ScreenId = RequestBody.create(MediaType.parse("multipart/form-data"), SCREEN_N0_DOCUMENT_UPLOAD_PHL);
                        RequestBody Customertype = RequestBody.create(MediaType.parse("multipart/form-data"), "Applicant");
                        RequestBody fileCount = RequestBody.create(MediaType.parse("multipart/form-data"), "1");

                        String productType = "", documentNo = "";
                        productType = documentUploadTableNew.getLoan_type();
                        documentNo = documentUploadTableNew.getClient_id().substring(documentUploadTableNew.getClient_id().length() - 4) + ""+ "" + "EKYC_A1";
                        RequestBody rbProductType = RequestBody.create(MediaType.parse("multipart/form-data"), productType);
                        String timeStamp = appHelper.getCurrentDateTime(DATE_FORMAT_DDMMYYYYSMS);
                        RequestBody rbUniqueId = RequestBody.create(MediaType.parse("multipart/form-data"), timeStamp);
                        MultipartBody.Part multiPart = MultipartBody.Part.createFormData("UploadedFile", "EKYC_Aadhaar_Applicant_" + documentUploadTableNew.getClient_id(), rbFile);
                        requests.add(service.uploadImageToWebServerNew(url, rbClientId, rbFileName, rbExtension,
                                rbFileType, rbProductType, multiPart,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, "")));

                        DocumentUploadTableNew documentListnew = new DocumentUploadTableNew();
                        documentTypeCompare.add(EKYC);
                        documentList.add(documentListnew);
                    }*/

                if (requests.size() > 0) {
                    // Zip all requests with the Function, which will receive the results.
                    Disposable disposable = Observable.zip(requests,
                            new Function<Object[], List<DocumentUploadTableNew>>() {
                                @Override
                                public List<DocumentUploadTableNew> apply(Object[] objects) throws Exception {
                                    try {
                                        if (objects != null && objects.length > 0) {
                                            if (documentList.size() == objects.length) {
                                                for (int i = 0; i < documentList.size(); i++) {
                                                    DocumentUploadTableNew documentUploadTable = documentList.get(i);
                                                    String response = objects[i].toString();
                                                    documentUploadTable.setResponseMessage(response);
                                                }
                                            }
                                        }
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                    }
                                    return documentList;
                                }
                            }).subscribe(new Consumer<List<DocumentUploadTableNew>>() {
                                             @Override
                                             public void accept(List<DocumentUploadTableNew> documentUploadTableNewList) throws Exception {

                                                 if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {

                                                     // TODO: Updating Status And Response Message

                                                     for (DocumentUploadTableNew documentUploadTableNew1 : documentUploadTableNewList) {
                                                         if (!TextUtils.isEmpty(documentUploadTableNew1.getResponseMessage())
                                                                 && documentUploadTableNew1.getResponseMessage().equalsIgnoreCase(SUCCESS_RESPONSE_MESSAGE)) {

                                                             // TODO: Updating Response Message and Status For Header
                                                             dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNew1.getResponseMessage(),
                                                                     true, documentUploadTableNew1.getClient_id(), documentUploadTableNew1.getLoan_type(), true,
                                                                     documentUploadTableNew1.getDocument_name(), documentUploadTableNew1.getModule_type());

                                                             // TODO: Updating Response Message and Status For SubHeader
                                                             dynamicUIDao.updateDocumentResponseAndStatusByID(documentUploadTableNew1.getResponseMessage(),
                                                                     true, documentUploadTableNew1.getId());

                                                         } else {

                                                             // TODO: Updating Response Message and Status For Header
                                                             dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNew1.getResponseMessage(),
                                                                     false, documentUploadTableNew1.getClient_id(),
                                                                     documentUploadTableNew1.getLoan_type(), true,
                                                                     documentUploadTableNew1.getDocument_name(), documentUploadTableNew1.getModule_type());

                                                             // TODO: Updating Response Message and Status For SubHeader
                                                             dynamicUIDao.updateDocumentResponseAndStatusByID(documentUploadTableNew1.getResponseMessage(),
                                                                     true, documentUploadTableNew1.getId());
                                                             break;
                                                         }
                                                     }

                                                     if (!TextUtils.isEmpty(documentUploadTableNew.getLoan_type()) && documentUploadTableNew.getLoan_type().equalsIgnoreCase(LOAN_NAME_AHL)) {
                                                         // TODO: Insert or Update Document Upload Raw Data
                                                         insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_AHL, documentUploadTableNewList.get(0),
                                                                 documentUploadTableNewList);
                                                     }
                                                     if (!TextUtils.isEmpty(documentUploadTableNew.getLoan_type()) && documentUploadTableNew.getLoan_type().equalsIgnoreCase(LOAN_NAME_PHL)) {
                                                         // TODO: Insert or Update Document Upload Raw Data
                                                         insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                 documentUploadTableNewList);
                                                     }
                                                     if (!TextUtils.isEmpty(documentUploadTableNew.getLoan_type()) && documentUploadTableNew.getLoan_type().equalsIgnoreCase(LOAN_NAME_EL)) {
                                                         // TODO: Insert or Update Document Upload Raw Data
                                                         insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_EL, documentUploadTableNewList.get(0),
                                                                 documentUploadTableNewList);
                                                     }
                                                     if (!TextUtils.isEmpty(documentUploadTableNew.getLoan_type()) && documentUploadTableNew.getLoan_type().equalsIgnoreCase(LOAN_NAME_TWL)) {
                                                         // TODO: Insert or Update Document Upload Raw Data
                                                         insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                 documentUploadTableNewList);
                                                     } else {
                                                         // TODO: Insert or Update Document Upload Raw Data
                                                         insertDocumentRawData(SCREEN_N0_DOCUMENT_UPLOAD_PHL, documentUploadTableNewList.get(0),
                                                                 documentUploadTableNewList);
                                                     }

                                                     // TODO: Final Result
                                                     List<DocumentUploadTableNew> documentUploadTableNewListResult = dynamicUIDao.getDocumentUploadSubHeader(documentUploadTableNew.getClient_id(),
                                                             documentUploadTableNew.getLoan_type(), false);
                                                     List<DocumentUploadTableNew> documentListnew = new ArrayList<>();

                                                     // TODO: some time file path coming empty string so filter fun temporary
                                                     if (documentUploadTableNewListResult != null && documentUploadTableNewListResult.size() > 0) {
                                                         for (DocumentUploadTableNew documentUploadTableNewfilepath : documentUploadTableNewListResult) {
                                                             if (!TextUtils.isEmpty(documentUploadTableNewfilepath.getFile_path())) {
                                                                 documentListnew.add(documentUploadTableNewfilepath);
                                                             }
                                                         }
                                                     }
                                                     ((MutableLiveData<List<DocumentUploadTableNew>>) data).postValue(documentListnew);
                                                 }
                                             }
                                         },
                            // Will be triggered if any error during requests will happen
                            new Consumer<Throwable>() {
                                @Override
                                public void accept(Throwable e) throws Exception {
                                    //Do something on error completion of requests
                                    Log.d(TAG, "Consumer Exception ==> " + e.getMessage());

                                    // TODO: Final Result
                                    List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentUploadSubHeader(documentUploadTableNew.getClient_id(),
                                            documentUploadTableNew.getLoan_type(), false);

                                    List<DocumentUploadTableNew> documentListnew = new ArrayList<>();

                                    // TODO: some time file path coming empty string so filter fun temporary
                                    if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                                        for (DocumentUploadTableNew documentUploadTableNewfilepath : documentUploadTableNewList) {
                                            if (!TextUtils.isEmpty(documentUploadTableNewfilepath.getFile_path())) {
                                                documentListnew.add(documentUploadTableNewfilepath);
                                            }
                                        }
                                    }

                                    ((MutableLiveData<List<DocumentUploadTableNew>>) data).postValue(documentListnew);

                                    insertLog("uploadDocumentsToServer", e.getMessage(), "", "", TAG, "", "", "");
                                }
                            }
                    );
                } else {
                  // TODO: Final Result
                    List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentUploadSubHeader(documentUploadTableNew.getClient_id(),
                            documentUploadTableNew.getLoan_type(), false);

                    List<DocumentUploadTableNew> documentListnew = new ArrayList<>();

                    // TODO: some time file path coming empty string so filter fun temporary
                    if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                        for (DocumentUploadTableNew documentUploadTableNewfilepath : documentUploadTableNewList) {
                            if (!TextUtils.isEmpty(documentUploadTableNewfilepath.getFile_path())) {
                                documentListnew.add(documentUploadTableNewfilepath);
                            }
                        }
                    }

                    ((MutableLiveData<List<DocumentUploadTableNew>>) data).postValue(documentListnew);

                    insertLog("uploadDocumentsToServer", "Empty list", "", "", TAG, "", "", "");
                }

            } else {
                // TODO: Final Result
                List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentUploadSubHeader(documentUploadTableNew.getClient_id(),
                        documentUploadTableNew.getLoan_type(), false);
                List<DocumentUploadTableNew> documentListnew = new ArrayList<>();

                // TODO: some time file path coming empty string so filter fun temporaryy
                if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                    for (DocumentUploadTableNew documentUploadTableNewfilepath : documentUploadTableNewList) {
                        if (!TextUtils.isEmpty(documentUploadTableNewfilepath.getFile_path())) {
                            documentListnew.add(documentUploadTableNewfilepath);
                        }
                    }
                }
                ((MutableLiveData<List<DocumentUploadTableNew>>) data).postValue(documentListnew);
            }
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> insertNewCapturedImageInTable(DocumentUploadTableNew documentUploadTableNewImage) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {

            dynamicUIDao.insertDocumentUploadNew(documentUploadTableNewImage);

            // TODO: Only for JLG
            if (!TextUtils.isEmpty(documentUploadTableNewImage.getLoan_type()) && documentUploadTableNewImage.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                if (!TextUtils.isEmpty(documentUploadTableNewImage.getScreen_id()) && documentUploadTableNewImage.getScreen_id().equalsIgnoreCase(SCREEN_NO_APPLICANT_KYC_JLG)) {
                    // TODO: applicant KYC  Details
                    List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                            documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());

                    RawDataTable rawDataAddressDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_ADDRESS_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                    if (rawDataAddressDetail != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataAddressDetail);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                                String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC).toString();
                                String permkyctypevalue = hashMap.get(TAG_NAME_PERMANENT_KYC_TYPE).toString();
                                if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase("Yes")) {
                                    if (applicantKTCDetailRawDataList != null) {
                                        if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                                            for (RawDataTable applicantPersonalRawData : applicantKTCDetailRawDataList) {
                                                if (applicantPersonalRawData != null) {
                                                    HashMap<String, Object> hashMapApplicant = setKeyValueForObject(applicantPersonalRawData);
                                                    if (hashMapApplicant != null && hashMapApplicant.size() > 0) {
                                                        if (hashMapApplicant.containsKey(TAG_NAME_KYC_TYPE)) {
                                                            String kycvalue = hashMapApplicant.get(TAG_NAME_KYC_TYPE).toString();
                                                            if (!TextUtils.isEmpty(kycvalue) && kycvalue.equalsIgnoreCase(permkyctypevalue)) {
                                                                if (!TextUtils.isEmpty(kycvalue) && kycvalue.equalsIgnoreCase(documentUploadTableNewImage.getDocument_name())) {
                                                                    DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_ADDRESS_DETAIL_JLG, DOCUMENT_NAME_ADDRESS_PROOF, MODULE_TYPE_APPLICANT);
                                                                    if (documentMasterTable != null) {
                                                                        String fileFormat = documentMasterTable.getFileFormat();
                                                                        DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                                                                                getDocumentHeaderByFileFormatAndModuleType(fileFormat, documentUploadTableNewImage.getClient_id(), MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, true);
                                                                        if (documentUploadTableRow != null) {
                                                                            List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRow.getClient_id(),
                                                                                    documentUploadTableRow.getLoan_type(), false, documentUploadTableRow.getDocument_name(),
                                                                                    documentUploadTableRow.getModule_type());

                                                                            if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                                                                                if (documentUploadTableNewImage.getFileCount() == 2) {
                                                                                    // TODO: add filepath
                                                                                    if (!TextUtils.isEmpty(documentUploadTableNewList.get(1).getFile_name())) {
                                                                                        documentUploadTableNewList.get(1).setFile_name(documentUploadTableNewList.get(1).getFile_name() + ".jpg");
                                                                                    }
                                                                                    documentUploadTableNewList.get(1).setFile_path(documentUploadTableNewImage.getFile_path());
                                                                                    documentUploadTableNewList.get(1).setEditable(false);
                                                                                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNewList.get(1));
                                                                                } else {
                                                                                    // TODO: add filepath
                                                                                    if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getFile_name())) {
                                                                                        documentUploadTableNewList.get(0).setFile_name(documentUploadTableNewList.get(0).getFile_name() + ".jpg");
                                                                                    }
                                                                                    documentUploadTableNewList.get(0).setFile_path(documentUploadTableNewImage.getFile_path());
                                                                                    documentUploadTableNewList.get(0).setEditable(false);
                                                                                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNewList.get(0));
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // TODO: personal detail
                if (!TextUtils.isEmpty(documentUploadTableNewImage.getScreen_id()) && documentUploadTableNewImage.getScreen_id().equalsIgnoreCase(SCREEN_NO_PERSONAL_DETAIL_JLG)) {
                    RawDataTable rawDataNomineeDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_NOMINEE_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                    if (rawDataNomineeDetail != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataNomineeDetail);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                String value = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                    DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_NOMINEE_DETAILS_JLG, DOCUMENT_NAME_NOMINEE_KYC, MODULE_TYPE_APPLICANT);
                                    if (documentMasterTable != null) {
                                        String fileFormat = documentMasterTable.getFileFormat();
                                        DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                                                getDocumentHeaderByFileFormatAndModuleType(fileFormat, documentUploadTableNewImage.getClient_id(), MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, true);
                                        if (documentUploadTableRow != null) {
                                            List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRow.getClient_id(),
                                                    documentUploadTableRow.getLoan_type(), false, documentUploadTableRow.getDocument_name(),
                                                    documentUploadTableRow.getModule_type());

                                            if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                                                if (documentUploadTableNewImage.getFileCount() == 2) {
                                                    // TODO: add filepath
                                                    if (!TextUtils.isEmpty(documentUploadTableNewList.get(1).getFile_name())) {
                                                        documentUploadTableNewList.get(1).setFile_name(documentUploadTableNewList.get(1).getFile_name() + ".jpg");
                                                    }
                                                    documentUploadTableNewList.get(1).setFile_path(documentUploadTableNewImage.getFile_path());
                                                    documentUploadTableNewList.get(1).setEditable(false);
                                                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNewList.get(1));
                                                } else {
                                                    // TODO: add filepath
                                                    if (!TextUtils.isEmpty(documentUploadTableNewList.get(0).getFile_name())) {
                                                        documentUploadTableNewList.get(0).setFile_name(documentUploadTableNewList.get(0).getFile_name() + ".jpg");
                                                    }
                                                    documentUploadTableNewList.get(0).setFile_path(documentUploadTableNewImage.getFile_path());
                                                    documentUploadTableNewList.get(0).setEditable(false);
                                                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNewList.get(0));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    //kjbdjh
                                }
                            }
                        }
                    }
                }
            }
            data.postValue(dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewImage.getClient_id(),
                    documentUploadTableNewImage.getLoan_type(), false, documentUploadTableNewImage.getDocument_name(),
                    documentUploadTableNewImage.getModule_type()));
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> insertNewImageListInTable(List<DocumentUploadTableNew> documentUploadTableNewList) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                // TODO: Only for JLG
                DocumentUploadTableNew documentUploadTableNewImage = documentUploadTableNewList.get(0);
                if (!TextUtils.isEmpty(documentUploadTableNewImage.getLoan_type()) && documentUploadTableNewImage.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                    if (!TextUtils.isEmpty(documentUploadTableNewImage.getScreen_id()) && documentUploadTableNewImage.getScreen_id().equalsIgnoreCase(SCREEN_NO_ADDRESS_DETAIL_JLG)) {
                        RawDataTable rawDataAddressDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_ADDRESS_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        // TODO: applicant KYC  Details
                        List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                                documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        if (rawDataAddressDetail != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataAddressDetail);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC).toString();
                                    String permkyctypevalue = hashMap.get(TAG_NAME_PERMANENT_KYC_TYPE).toString();
                                    if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase("Yes")) {

                                        if (applicantKTCDetailRawDataList != null) {
                                            if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                                                for (RawDataTable applicantPersonalRawData : applicantKTCDetailRawDataList) {
                                                    if (applicantPersonalRawData != null) {
                                                        HashMap<String, Object> hashMapApplicant = setKeyValueForObject(applicantPersonalRawData);
                                                        if (hashMapApplicant != null && hashMapApplicant.size() > 0) {
                                                            if (hashMapApplicant.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                String kycvalue = hashMapApplicant.get(TAG_NAME_KYC_TYPE).toString();
                                                                if (!TextUtils.isEmpty(kycvalue) && kycvalue.equalsIgnoreCase(permkyctypevalue)) {
                                                                    DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_APPLICANT_KYC_JLG, kycvalue, MODULE_TYPE_APPLICANT);
                                                                    if (documentMasterTable != null) {
                                                                        String fileFormat = documentMasterTable.getFileFormat();
                                                                        DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                                                                                getDocumentHeaderByFileFormatAndModuleType(fileFormat, documentUploadTableNewImage.getClient_id(), MODULE_TYPE_APPLICANT, true);
                                                                        if (documentUploadTableRow != null) {
                                                                            List<DocumentUploadTableNew> documentUploadTableNewListapplicant = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRow.getClient_id(),
                                                                                    documentUploadTableRow.getLoan_type(), false, documentUploadTableRow.getDocument_name(),
                                                                                    documentUploadTableRow.getModule_type());

                                                                            if (documentUploadTableNewListapplicant != null && documentUploadTableNewListapplicant.size() > 0) {

                                                                                for (int i = 0; i < documentUploadTableNewListapplicant.size(); i++) {

                                                                                    // TODO: add filepath
                                                                                    if (!TextUtils.isEmpty(documentUploadTableNewList.get(i).getFile_name())) {
                                                                                        documentUploadTableNewList.get(i).setFile_name(documentUploadTableNewList.get(i).getFile_name() + ".jpg");
                                                                                    }
                                                                                    if (!TextUtils.isEmpty(documentUploadTableNewListapplicant.get(i).getFile_name())) {
                                                                                        documentUploadTableNewList.get(i).setFile_path(documentUploadTableNewListapplicant.get(i).getFile_path());
                                                                                    }
                                                                                    documentUploadTableNewList.get(i).setEditable(false);
                                                                                }
                                                                            } else {
                                                                                for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                                                                                    documentUploadTableNewList.get(i).setEditable(false);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                                                documentUploadTableNewList.get(i).setEditable(false);
                                            }
                                        }
                                    } else {
                                        // TODO: delete Spouse KYC
                                    }
                                }
                            }
                        }
                    }
                    if (!TextUtils.isEmpty(documentUploadTableNewImage.getScreen_id()) && documentUploadTableNewImage.getScreen_id().equalsIgnoreCase(SCREEN_NO_NOMINEE_DETAILS_JLG)) {
                        RawDataTable rawDataAddressDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_NOMINEE_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        RawDataTable rawDataApplicantDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_PERSONAL_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        if (rawDataAddressDetail != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataAddressDetail);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                    String value = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                    if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                        if (rawDataApplicantDetail != null) {
                                            HashMap<String, Object> hashMapPersonal = setKeyValueForObject(rawDataApplicantDetail);
                                            if (hashMapPersonal != null && hashMapPersonal.size() > 0) {
                                                if (hashMapPersonal.containsKey(TAG_NAME_MARITAL_STATUS)) {
                                                    String maritalStatus = hashMapPersonal.get(TAG_NAME_MARITAL_STATUS).toString();
                                                    if (!TextUtils.isEmpty(maritalStatus) && maritalStatus.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_MARRIED)) {
                                                        DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_PERSONAL_DETAIL_JLG, DOCUMENT_NAME_SPOUSE_KYC, MODULE_TYPE_APPLICANT);
                                                        if (documentMasterTable != null) {
                                                            String fileFormat = documentMasterTable.getFileFormat();
                                                            DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                                                                    getDocumentHeaderByFileFormatAndModuleType(fileFormat, documentUploadTableNewImage.getClient_id(), MODULE_TYPE_APPLICANT, true);
                                                            if (documentUploadTableRow != null) {
                                                                List<DocumentUploadTableNew> documentUploadTableNewListapplicant = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRow.getClient_id(),
                                                                        documentUploadTableRow.getLoan_type(), false, documentUploadTableRow.getDocument_name(),
                                                                        documentUploadTableRow.getModule_type());

                                                                if (documentUploadTableNewListapplicant != null && documentUploadTableNewListapplicant.size() > 0) {

                                                                    for (int i = 0; i < documentUploadTableNewListapplicant.size(); i++) {

                                                                        // TODO: add filepath
                                                                        if (!TextUtils.isEmpty(documentUploadTableNewList.get(i).getFile_name())) {
                                                                            documentUploadTableNewList.get(i).setFile_name(documentUploadTableNewList.get(i).getFile_name() + ".jpg");
                                                                        }
                                                                        if (!TextUtils.isEmpty(documentUploadTableNewListapplicant.get(i).getFile_name())) {
                                                                            documentUploadTableNewList.get(i).setFile_path(documentUploadTableNewListapplicant.get(i).getFile_path());
                                                                        }
                                                                        documentUploadTableNewList.get(i).setEditable(false);
                                                                    }
                                                                } else {
                                                                    for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                                                                        documentUploadTableNewList.get(i).setEditable(false);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
//                                            HashMap<String, Object> hashMapapplicant = setKeyValueForObject(rawDataApplicantDetail);
//                                            if (hashMapapplicant != null && hashMapapplicant.size() > 0) {
//                                                if (hashMapapplicant.containsKey(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
//                                                    String value = hashMapapplicant.get(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC).toString();
//                                                    if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase("Yes")) {
//
//                                                    }
//                                                }
//                                            }
                                        } else {
                                            for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                                                documentUploadTableNewList.get(i).setEditable(false);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                for (DocumentUploadTableNew documentUploadTableNew : documentUploadTableNewList) {
                    dynamicUIDao.insertDocumentUploadNew(documentUploadTableNew);
                }

                data.postValue(dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewList.get(0).getClient_id(),
                        documentUploadTableNewList.get(0).getLoan_type(), false, documentUploadTableNewList.get(0).getDocument_name(),
                        documentUploadTableNewList.get(0).getModule_type()));
            } else {
                data.postValue(new ArrayList<>());
            }
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> removeCapturedImageFromTable(DocumentUploadTableNew documentUploadTableNewImage) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                if (documentUploadTableNewImage != null && !TextUtils.isEmpty(documentUploadTableNewImage.getFile_path())) {
                    File file = new File(documentUploadTableNewImage.getFile_path());
                    if (file.exists()) {
                        if (file.delete()) {
                            Log.i(TAG, "File Delete Successful");
                            int id = documentUploadTableNewImage.getId();

                            dynamicUIDao.deleteDocumentFromTable(id);

                        }
                    } else {
                        // TODO: File path exist in DB but file not exist in folder
                        int id = documentUploadTableNewImage.getId();

                        dynamicUIDao.deleteDocumentFromTable(id);

                    }

                } else {
                    // TODO: File path not exists in DB
                    int id = documentUploadTableNewImage.getId();

                    dynamicUIDao.deleteDocumentFromTable(id);

                }

                // TODO: VALIDATION FOR RENAMING FILE IN TABLE & FOLDER
                List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewImage.getClient_id(),
                        documentUploadTableNewImage.getLoan_type(), false, documentUploadTableNewImage.getDocument_name(),
                        documentUploadTableNewImage.getModule_type());

                if (documentUploadTableNewList == null || documentUploadTableNewList.size() == 0) {
                    // TODO: Updating Response Message and Status For Header
                    dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNewImage.getResponseMessage(),
                            false, documentUploadTableNewImage.getClient_id(),
                            documentUploadTableNewImage.getLoan_type(), true,
                            documentUploadTableNewImage.getDocument_name(), documentUploadTableNewImage.getModule_type());
                } else {
                    for (int i = 0; i < documentUploadTableNewList.size(); i++) {
                        DocumentUploadTableNew documentUploadTable = documentUploadTableNewList.get(i);
                        String fileName = documentUploadTable.getFile_format();
                        fileName = fileName.replace("{0}", documentUploadTable.getClient_id());
                        fileName = fileName.replace("{1}", String.valueOf(i + 1));
                        fileName = fileName + "." + EXTENSION_JPG;
                        documentUploadTableNewImage.setFile_name(fileName);

                        if (!TextUtils.isEmpty(documentUploadTable.getFile_path())) {
                            String filePath = documentUploadTable.getFile_path();
                            String[] filePathArray = filePath.split("/");

                            if (filePathArray.length > 0) {
                                String oldFileName = filePathArray[filePathArray.length - 1];
                                if (!TextUtils.isEmpty(oldFileName)) {
                                    String newFilePath = filePath.replace(oldFileName, fileName);
                                    File oldFile = new File(documentUploadTable.getFile_path());
                                    File newFile = new File(newFilePath);
                                    if (oldFile.renameTo(newFile)) {
                                        Log.i(TAG, "Rename Successful");
                                        dynamicUIDao.updateDocumentFileNameAndFilePathByID(fileName, newFilePath, documentUploadTable.getId());
                                    } else {
                                        Log.i(TAG, "Rename Failed");
                                    }
                                }
                            }
                        }

                    }

                }

                // TODO: Final Document List Result
                List<DocumentUploadTableNew> documentUploadTableNewFinalList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewImage.getClient_id(),
                        documentUploadTableNewImage.getLoan_type(), false, documentUploadTableNewImage.getDocument_name(),
                        documentUploadTableNewImage.getModule_type());

                data.postValue(documentUploadTableNewFinalList);

            } catch (Exception ex) {
                ex.printStackTrace();

                // TODO: Final Document List Result
                List<DocumentUploadTableNew> documentUploadTableNewFinalList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewImage.getClient_id(),
                        documentUploadTableNewImage.getLoan_type(), false, documentUploadTableNewImage.getDocument_name(),
                        documentUploadTableNewImage.getModule_type());

                data.postValue(documentUploadTableNewFinalList);

                insertLog("removeCapturedImageFromTable", ex.getMessage(), "", "", TAG, "", "", "");
            }
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> removeCapturedImageFromTableJLG(DocumentUploadTableNew documentUploadTableNewImage) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {

            File file = new File(documentUploadTableNewImage.getFile_path());
            if (file.delete()) {
                Log.i(TAG, "File Delete Successful");

                // TODO: Updating Response Message and Status For Header
                dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNewImage.getResponseMessage(),
                        false, documentUploadTableNewImage.getClient_id(),
                        documentUploadTableNewImage.getLoan_type(), true,
                        documentUploadTableNewImage.getDocument_name(), documentUploadTableNewImage.getModule_type());

                dynamicUIDao.updateDocumentFilePathAndStatusByID("", false, documentUploadTableNewImage.getId());

                // TODO: Only for JLG
                if (!TextUtils.isEmpty(documentUploadTableNewImage.getLoan_type()) && documentUploadTableNewImage.getLoan_type().equalsIgnoreCase(LOAN_NAME_JLG)) {
                    if (!TextUtils.isEmpty(documentUploadTableNewImage.getScreen_id()) && documentUploadTableNewImage.getScreen_id().equalsIgnoreCase(SCREEN_NO_APPLICANT_KYC_JLG)) {
                        // TODO: applicant KYC  Details
                        List<RawDataTable> applicantKTCDetailRawDataList = dynamicUIDao.getRawDataListByScreenNameAndLoanType(SCREEN_NAME_APPLICANT_KYC,
                                documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        RawDataTable rawDataAddressDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_ADDRESS_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        if (rawDataAddressDetail != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataAddressDetail);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_SAME_AS_KYC).toString();
                                    String permkyctypevalue = hashMap.get(TAG_NAME_PERMANENT_KYC_TYPE).toString();
                                    if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase("Yes")) {
                                        if (applicantKTCDetailRawDataList != null) {
                                            if (applicantKTCDetailRawDataList != null && applicantKTCDetailRawDataList.size() > 0) {
                                                for (RawDataTable applicantPersonalRawData : applicantKTCDetailRawDataList) {
                                                    if (applicantPersonalRawData != null) {
                                                        HashMap<String, Object> hashMapApplicant = setKeyValueForObject(applicantPersonalRawData);
                                                        if (hashMapApplicant != null && hashMapApplicant.size() > 0) {
                                                            if (hashMapApplicant.containsKey(TAG_NAME_KYC_TYPE)) {
                                                                String kycvalue = hashMapApplicant.get(TAG_NAME_KYC_TYPE).toString();
                                                                if (!TextUtils.isEmpty(kycvalue) && kycvalue.equalsIgnoreCase(permkyctypevalue)) {
                                                                    if (!TextUtils.isEmpty(kycvalue) && kycvalue.equalsIgnoreCase(documentUploadTableNewImage.getDocument_name())) {
                                                                        DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_ADDRESS_DETAIL_JLG, DOCUMENT_NAME_ADDRESS_PROOF, MODULE_TYPE_APPLICANT);
                                                                        if (documentMasterTable != null) {
                                                                            String fileFormat = documentMasterTable.getFileFormat();
                                                                            DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                                                                                    getDocumentHeaderByFileFormatAndModuleType(fileFormat, documentUploadTableNewImage.getClient_id(), MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, true);
                                                                            if (documentUploadTableRow != null) {
                                                                                // TODO: Updating Response Message and Status For Header
                                                                                dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNewImage.getResponseMessage(),
                                                                                        false, documentUploadTableNewImage.getClient_id(),
                                                                                        documentUploadTableNewImage.getLoan_type(), true,
                                                                                        documentUploadTableRow.getDocument_name(), documentUploadTableRow.getModule_type());

                                                                                List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRow.getClient_id(),
                                                                                        documentUploadTableRow.getLoan_type(), false, documentUploadTableRow.getDocument_name(),
                                                                                        documentUploadTableRow.getModule_type());

                                                                                if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                                                                                    if (documentUploadTableNewImage.getFileCount() == 2) {
                                                                                        // TODO: remove filepath
                                                                                        dynamicUIDao.updateDocumentFilePathAndStatusByID("", false, documentUploadTableNewList.get(1).getId());
                                                                                    } else {
                                                                                        // TODO: remove filepath
                                                                                        dynamicUIDao.updateDocumentFilePathAndStatusByID("", false, documentUploadTableNewList.get(0).getId());
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        //djd
                                    }
                                }
                            }
                        }
                    }
                    // TODO: personal details
                    if (!TextUtils.isEmpty(documentUploadTableNewImage.getScreen_id()) && documentUploadTableNewImage.getScreen_id().equalsIgnoreCase(SCREEN_NO_PERSONAL_DETAIL_JLG)) {
                        RawDataTable rawDataNomineeDetail = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_NOMINEE_DETAIL, documentUploadTableNewImage.getClient_id(), documentUploadTableNewImage.getLoan_type());
                        if (rawDataNomineeDetail != null) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataNomineeDetail);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT)) {
                                    String value = hashMap.get(TAG_NAME_NOMINEE_RELATIONSHIP_WITH_THE_APPLICANT).toString();
                                    if (!TextUtils.isEmpty(value) && value.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_SPOUSE)) {
                                        DocumentMasterTable documentMasterTable = dynamicUIDao.getDocumentMasterByScreenAndDocumentName(SCREEN_NO_NOMINEE_DETAILS_JLG, DOCUMENT_NAME_NOMINEE_KYC, MODULE_TYPE_APPLICANT);
                                        if (documentMasterTable != null) {
                                            String fileFormat = documentMasterTable.getFileFormat();
                                            DocumentUploadTableNew documentUploadTableRow = dynamicUIDao.
                                                    getDocumentHeaderByFileFormatAndModuleType(fileFormat, documentUploadTableNewImage.getClient_id(), MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, true);
                                            if (documentUploadTableRow != null) {
                                                // TODO: Updating Response Message and Status For Header
                                                dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNewImage.getResponseMessage(),
                                                        false, documentUploadTableNewImage.getClient_id(),
                                                        documentUploadTableNewImage.getLoan_type(), true,
                                                        documentUploadTableRow.getDocument_name(), documentUploadTableRow.getModule_type());

                                                List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableRow.getClient_id(),
                                                        documentUploadTableRow.getLoan_type(), false, documentUploadTableRow.getDocument_name(),
                                                        documentUploadTableRow.getModule_type());

                                                if (documentUploadTableNewList != null && documentUploadTableNewList.size() > 0) {
                                                    if (documentUploadTableNewImage.getFileCount() == 2) {
                                                        // TODO: remove filepath
                                                        dynamicUIDao.updateDocumentFilePathAndStatusByID("", false, documentUploadTableNewList.get(1).getId());
                                                    } else {
                                                        // TODO: remove filepath
                                                        dynamicUIDao.updateDocumentFilePathAndStatusByID("", false, documentUploadTableNewList.get(0).getId());
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        //mnkbc
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // TODO: Final Document List Result
            List<DocumentUploadTableNew> documentUploadTableNewFinalList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewImage.getClient_id(),
                    documentUploadTableNewImage.getLoan_type(), false, documentUploadTableNewImage.getDocument_name(),
                    documentUploadTableNewImage.getModule_type());

            data.postValue(documentUploadTableNewFinalList);
        });
        return data;
    }

    public LiveData<List<DocumentUploadTableNew>> getDocumentByDocumentName(DocumentUploadTableNew documentUploadTableNewImage) {
        final MutableLiveData<List<DocumentUploadTableNew>> data = new MutableLiveData<>();
        executor.execute(() -> {

            List<DocumentUploadTableNew> documentUploadTableNewList = dynamicUIDao.getDocumentListByDocumentName(documentUploadTableNewImage.getClient_id(),
                    documentUploadTableNewImage.getLoan_type(), false, documentUploadTableNewImage.getDocument_name(),
                    documentUploadTableNewImage.getModule_type());

            if (documentUploadTableNewList == null || documentUploadTableNewList.size() == 0) {
                // TODO: Updating Response Message and Status For Header
                dynamicUIDao.updateDocumentResponseAndStatus(documentUploadTableNewImage.getResponseMessage(),
                        false, documentUploadTableNewImage.getClient_id(),
                        documentUploadTableNewImage.getLoan_type(), true,
                        documentUploadTableNewImage.getDocument_name(), documentUploadTableNewImage.getModule_type());
            }
            data.postValue(documentUploadTableNewList);
            Log.d(TAG, "GET THE DOCS NAMES "+ documentUploadTableNewList);
        });
        return data;
    }

    public LiveData<List<OTPVerificationTable>> getOTPVerificationData(String clientId, String loanType) {
        final MutableLiveData<List<OTPVerificationTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            boolean dataExist = (dynamicUIDao.loadOTPVerificationData(clientId, loanType) != null);
            if (dataExist) {
                data.postValue(dynamicUIDao.loadOTPVerificationData(clientId, loanType));
            }
        });
        return data;
    }

    public LiveData<List<CIBILTable>> getCIBILTableListFromDB(String clientId, String loanType) {
        final MutableLiveData<List<CIBILTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            data.postValue(dynamicUIDao.getCIBILTableList(clientId, loanType));
        });
        return data;
    }

    public LiveData<List<CIBILTable>> checkKYCAndPersonalDetailForCIBIL(String clientId, String loanType) {
        final MutableLiveData<List<CIBILTable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            try {
                List<String> screenNameList = new ArrayList<>();
                screenNameList.add(SCREEN_NAME_APPLICANT_KYC);
                screenNameList.add(SCREEN_NAME_CO_APPLICANT_KYC);

                List<RawDataTable> rawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameList(screenNameList, clientId);

                if (rawDataTableList != null && rawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : rawDataTableList) {
                        if (!TextUtils.isEmpty(rawDataTable.getScreen_name()) &&
                                rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                                || rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)) {

                            String fullnameObj = "";

                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    fullnameObj = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                } else if (hashMap.containsKey(TAG_NAME_PARTNERSHIP_FIRM_NAME)) {
                                    fullnameObj = hashMap.get(TAG_NAME_PARTNERSHIP_FIRM_NAME).toString();
                                } else if (hashMap.containsKey(TAG_NAME_PROPRIETORSHIP_FIRM_NAME)) {
                                    fullnameObj = hashMap.get(TAG_NAME_PROPRIETORSHIP_FIRM_NAME).toString();
                                } else if (hashMap.containsKey(TAG_NAME_COMPANY_NAME)) {
                                    fullnameObj = hashMap.get(TAG_NAME_COMPANY_NAME).toString();
                                } else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    fullnameObj = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                }
                            }
                            if (!TextUtils.isEmpty(fullnameObj)) {
                                String mob = "";
                                String screen_name = "";
                                String screen_no = "";
                                List<RawDataTable> mobileRawDataList;

                                if (rawDataTable.getScreen_name().equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)) {
                                    mobileRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL,
                                            rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());
                                    screen_name = SCREEN_NAME_PERSONAL_DETAIL;
                                    screen_no = SCREEN_NO_PERSONAL_DETAIL_MSME;
                                } else {
                                    mobileRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL,
                                            rawDataTable.getClient_id(), rawDataTable.getModuleType(), rawDataTable.getLoan_type());

                                    screen_name = SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL;
                                    screen_no = SCREEN_NO_COAPPLICANT_PERSONAL_DETAIL_MSME;
                                }

                                if (mobileRawDataList != null && mobileRawDataList.size() > 0) {
                                    RawDataTable mobileObj = mobileRawDataList.get(0);
                                    HashMap<String, Object> hashMapPersonalDetail = setKeyValueForObject(mobileObj);
                                    if (hashMapPersonalDetail != null && hashMap.size() > 0) {
                                        if (hashMapPersonalDetail.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                            mob = hashMapPersonalDetail.get(TAG_NAME_CONTACT_NO_1).toString();
                                        }
                                    }
                                }

                                if (!TextUtils.isEmpty(mob)) {
                                    // TODO: CIBIL Table

                                    CIBILTable cibilTable = new CIBILTable(rawDataTable.getId(),
                                            screen_no, screen_name, rawDataTable.getClient_id(),
                                            rawDataTable.getLoan_type(), rawDataTable.getModuleType(),
                                            mob, fullnameObj, rawDataTable.getUser_id());

                                    CIBILTable cibilTableFromDB = dynamicUIDao.
                                            getCIBILTableByModuleType(rawDataTable.getClient_id(), rawDataTable.getModuleType());

                                    if (cibilTableFromDB != null) {

                                        // TODO: update mobile number & name
                                        dynamicUIDao.updateCIBILTableMobileAndName(cibilTableFromDB.getId(),
                                                mob, fullnameObj, cibilTableFromDB.isCBChecked());
                                    } else {
                                        // TODO: if not exist then insert
                                        dynamicUIDao.insertCIBILTable(cibilTable);
                                    }
                                }
                            }
                        }
                    }
                }

            } catch (Exception ex) {
                ex.printStackTrace();
                insertLog("checkKYCAndPersonalDetailForCIBIL", ex.getMessage(), "", "", TAG, "", "", "");
            }

            // TODO: FINAL RESULT
            data.postValue(dynamicUIDao.getCIBILTableList(clientId, loanType));
        });
        return data;
    }

    //Document upload api call, sp = USP_LOS_GetSelectedDocumentDetails
    public LiveData<List<DocumentMasterTable>> getDocumentMasterFromServer(String productId, String projectId) {
        final MutableLiveData<List<DocumentMasterTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final DocumentMasterRequestDTO rawDataRequestDTO = new DocumentMasterRequestDTO();
                rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                DocumentMasterRequestDTO.SpNameWithParameterClass spNameWithParameter = new DocumentMasterRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_GET_DOCUMENT_MASTER); // TODO: Sp to get document master table
                DocumentMasterRequestDTO.SpParametersClass spParametersClass = new DocumentMasterRequestDTO.SpParametersClass();
                spParametersClass.setProductId(productId); // TODO: segment id ( product id )
                spParametersClass.setProjectId(projectId); // TODO: BC id
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<DocumentMasterRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<DocumentMasterRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(rawDataRequestDTO, DocumentMasterRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getDocumentMasterFromServer(rawDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    DocumentMasterResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, DocumentMasterResponseDTO.class);
                                                    if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                        Log.d(TAG, " data tv Name server =======> " + new Gson().toJson(rawDataResponseDTO));
                                                        List<DocumentMasterTable> documentMasterTableList = new ArrayList<>();
                                                        for (DocumentMasterTable documentMasterTable : rawDataResponseDTO.getTable()) {
                                                            documentMasterTableList.add(documentMasterTable);
                                                            Log.d(TAG, "get the list of docs data from master table --> " + documentMasterTable.getDocumentName());
                                                        }
                                                        dynamicUIDao.insertAndDeleteDocumentMasterTable(documentMasterTableList);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            insertLog("getDocumentMasterFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getDocumentMasterFromServer", response.message(), "", "", TAG, "", "", "");
                                    }
                                    // TODO: Final result
                                    List<DocumentMasterTable> documentMasterTableList = dynamicUIDao.getDocumentMasterTable();
                                    data.postValue(documentMasterTableList);
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<DocumentMasterTable> documentMasterTableList = dynamicUIDao.getDocumentMasterTable();
                                    data.postValue(documentMasterTableList);
                                    insertLog("getDocumentMasterFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<DocumentMasterTable> documentMasterTableList = dynamicUIDao.getDocumentMasterTable();
                    data.postValue(documentMasterTableList);
                    insertLog("getDocumentMasterFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }
        });
        return data;
    }

    public LiveData<List<KnowledgeBankTable>> getKnowledgeBankFromServer(String productId, String projectId) {
        final MutableLiveData<List<KnowledgeBankTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final KnowledgeBankRequestDTO rawDataRequestDTO = new KnowledgeBankRequestDTO();
                rawDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                KnowledgeBankRequestDTO.SpNameWithParameterClass spNameWithParameter = new KnowledgeBankRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_GET_KNOWLEDGE_BANK_MASTER); // TODO: Sp to get knowledge bank master
                KnowledgeBankRequestDTO.SpParametersClass spParametersClass = new KnowledgeBankRequestDTO.SpParametersClass();
                spParametersClass.setSequenceID(""); // TODO: sequence id ( always empty for mobile app )
                spParametersClass.setOperationType("1"); // TODO: Operation type ( Pass it as 1 for mobile app )
                spNameWithParameter.setSpParameters(spParametersClass);
                ArrayList<KnowledgeBankRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<KnowledgeBankRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                rawDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(rawDataRequestDTO, KnowledgeBankRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getKnowledgeBankFromServer(rawDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    KnowledgeBankResponseDTO rawDataResponseDTO = new Gson().fromJson(tableJson, KnowledgeBankResponseDTO.class);
                                                    if (rawDataResponseDTO != null && rawDataResponseDTO.getTable().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(rawDataResponseDTO));
                                                        List<KnowledgeBankTable> knowledgeBankTableList = new ArrayList<>();

                                                        for (KnowledgeBankTable documentMasterTable : rawDataResponseDTO.getTable()) {
                                                            knowledgeBankTableList.add(documentMasterTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertKnowledgeBankTable(knowledgeBankTableList);

//                                                        List<KnowledgeBankTable> knowledgeBankTableList = new ArrayList<>();
//
//                                                        KnowledgeBankTable knowledgeBankTable1 = new KnowledgeBankTable();
//                                                        knowledgeBankTable1.setDocument_name("Login Checklist");
//                                                        knowledgeBankTable1.setFile_name("1011589200625135806_busaddprf_aadhaar_front_1.jpeg");
//                                                        knowledgeBankTable1.setFile_type(EXTENSION_JPG);
//
//                                                        KnowledgeBankTable knowledgeBankTable2 = new KnowledgeBankTable();
//                                                        knowledgeBankTable2.setDocument_name("RO One");
//                                                        knowledgeBankTable2.setFile_name("1004141200311172358_appldk_form60_front_1.pdf");
//                                                        knowledgeBankTable2.setFile_type(EXTENSION_PDF);
//
//                                                        KnowledgeBankTable knowledgeBankTable3 = new KnowledgeBankTable();
//                                                        knowledgeBankTable3.setDocument_name("Sales Kit");
//                                                        knowledgeBankTable3.setFile_name("1004141191022105352_apphoupht_housephoto_front_1.jpg");
//                                                        knowledgeBankTable3.setFile_type(EXTENSION_JPG);
//
//                                                        knowledgeBankTableList.add(knowledgeBankTable3);
//                                                        knowledgeBankTableList.add(knowledgeBankTable2);
//                                                        knowledgeBankTableList.add(knowledgeBankTable1);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getKnowledgeBankFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getKnowledgeBankFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<KnowledgeBankTable> knowledgeBankTableList = dynamicUIDao.getKnowledgeBankTableFromLocalDB();
                                    data.postValue(knowledgeBankTableList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<KnowledgeBankTable> knowledgeBankTableList = dynamicUIDao.getKnowledgeBankTableFromLocalDB();
                                    data.postValue(knowledgeBankTableList);

                                    insertLog("getKnowledgeBankFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<KnowledgeBankTable> knowledgeBankTableList = dynamicUIDao.getKnowledgeBankTableFromLocalDB();
                    data.postValue(knowledgeBankTableList);

                    insertLog("getKnowledgeBankFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }

    public MutableLiveData<DynamicUITable> GetSpinnerItemFromDB(String FieldTag, String fromScreen, String plusSign) {
        final MutableLiveData<DynamicUITable> dynamicUITableMutableLiveData1 = new MutableLiveData<>();
        executor.execute(() -> {
            if (!TextUtils.isEmpty(plusSign) && plusSign.equalsIgnoreCase("yes") ||
                    plusSign.equalsIgnoreCase("no")) {
                try {
                    if (plusSign.equalsIgnoreCase("yes")) {
                        List<String> stringList = dynamicUIDao.getDistinctPlusSignNames();
                        if (stringList != null && stringList.size() > 1) {
                            String spinnterItem = stringList.get(1).trim(); // TODO: Default starting position
                            DynamicUITable dynamicUITable = dynamicUIDao.GetSpinnerItemFromDBbyPlusSign(FieldTag, fromScreen, spinnterItem);
//                            dynamicUITableMutableLiveData1.setValue(dynamicUITable);
                            dynamicUITableMutableLiveData.postValue(dynamicUITable);
                        } else {
                            DynamicUITable dynamicUITable = dynamicUIDao.GetSpinnerItemFromDB(FieldTag, fromScreen);
                            dynamicUITableMutableLiveData.postValue(dynamicUITable);
                        }
                    } else if (plusSign.equalsIgnoreCase("no")) {
                        DynamicUITable dynamicUITable = dynamicUIDao.GetSpinnerItemFromDB(FieldTag, fromScreen);
                        dynamicUITableMutableLiveData.postValue(dynamicUITable);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                List<DynamicUITable> dynamicUITableList = dynamicUIDao.getTableBasedOnPlusSign(fromScreen, plusSign);
                boolean dataExist = (dynamicUITableList != null && dynamicUITableList.size() > 0);
                if (dataExist) {
                    DynamicUITable dynamicUITable = dynamicUIDao.GetSpinnerItemFromDBbyPlusSign(FieldTag, fromScreen, plusSign);
                    dynamicUITableMutableLiveData.postValue(dynamicUITable);
                } else {
                    DynamicUITable dynamicUITable = dynamicUIDao.GetSpinnerItemFromDB(FieldTag, fromScreen);
                    dynamicUITableMutableLiveData.postValue(dynamicUITable);
                }
            }
        });// TODO: Initially plus sign will be "yes"
//        return dynamicUIDao.GetSpinnerItemFromDBbyPlusSign(FieldTag, fromScreen, /*plusSign*/"Aadhaar");
//        return  dynamicUIDao.GetDummyRecord(fromScreen);
        return dynamicUITableMutableLiveData1;
    }

    public List<String> GetSpinnerItemListFromDB() {
        return dynamicUIDao.getDistinctPlusSignNames();
    }


    public LiveData<DynamicUITable> getDynamicUITable() {
        return dynamicUITableMutableLiveData;
    }

    public HashMap<String, Object> setKeyValueForObject(RawDataTable rawDataTable) {
        HashMap<String, Object> rawDataHashMap = new HashMap<>();
        try {
            if (!TextUtils.isEmpty(rawDataTable.getRawdata())) {
                String rawData = rawDataTable.getRawdata();

                rawDataHashMap = App.createHashMapFromJsonString(rawData);
                Log.d(TAG, "Hashmap ==> get the data for NO " + rawDataHashMap);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return rawDataHashMap;
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    public void updateValueForRawObjectValue(RawDataTable rawDataTable, String schemeUpdate) {
        try {
            if(rawDataTable.getRawdata() != null) {
                JSONObject jsonObject = new JSONObject(rawDataTable.getRawdata().toString());
                String loanType = jsonObject.optString("LOAN TYPE");
                String loanProduct = jsonObject.optString("LOAN PRODUCT");
                String loanScehme = jsonObject.optString("LOAN SCHEME");
                String requested_loan_amount = jsonObject.optString("REQUESTED LOAN AMOUNT");
                String loan_tenure = jsonObject.optString("LOAN TENURE(IN MONTHS)");
                String PURPOSE = jsonObject.optString("PURPOSE");
                String declared_repayment_capacity = jsonObject.optString("DECLARED REPAYMENT CAPACITY");
                String first_installment_date = jsonObject.optString("FIRST INSTALLMENT DATE");
                String negative_area = jsonObject.optString("NEGATIVE AREA");
                String negative_profile_list = jsonObject.optString("NEGATIVE PROFILE LIST");
                String negative_profile = jsonObject.optString("NEGATIVE PROFILE");
                String save = jsonObject.optString("SAVE");
                loanScehme = schemeUpdate;
                JSONObject jsonObjectVal = new JSONObject();
                jsonObjectVal.put("LOAN TYPE", "" + loanType);
                jsonObjectVal.put("LOAN PRODUCT", "" + loanProduct);
                jsonObjectVal.put("LOAN SCHEME", "" + loanScehme);
                jsonObjectVal.put("REQUESTED LOAN AMOUNT", "" + requested_loan_amount);
                jsonObjectVal.put("LOAN TENURE(IN MONTHS)", "" + loan_tenure);
                jsonObjectVal.put("PURPOSE", "" + PURPOSE);
                jsonObjectVal.put("DECLARED REPAYMENT CAPACITY", "" + declared_repayment_capacity);
                jsonObjectVal.put("FIRST INSTALLMENT DATE", "" + first_installment_date);
                jsonObjectVal.put("NEGATIVE AREA", "" + negative_area);
                jsonObjectVal.put("NEGATIVE PROFILE LIST", "" + negative_profile_list);
                jsonObjectVal.put("NEGATIVE PROFILE", "" + negative_profile);

                jsonObjectVal.put("save", "" + save);

                dynamicUIDao.updateRawDataBag(SCREEN_NO_APPLICANT_LOAN_PROPOSAL_EL, rawDataTable.getId(), jsonObjectVal.toString());
            }else{
                Log.e(getClass().getSimpleName(),"Raw data not found");
            }
        } catch (JSONException e) {
            e.printStackTrace();
            Log.e(getClass().getSimpleName(),"Invalid Raw data not found:::"+e.getLocalizedMessage());
        }
        /*HashMap<String, Object> rawDataHashMap = new HashMap<>();
        try {
            if (!TextUtils.isEmpty(rawDataTable.getRawdata())) {
                String rawData = rawDataTable.getRawdata();

                rawDataHashMap = App.createHashMapFromJsonString(rawData);
                Log.d(TAG, "Hashmap ==> " + rawDataHashMap);

                if(rawDataHashMap.containsKey("LOAN SCHEME")){
                    rawDataHashMap.replace("LOAN SCHEME",schemeUpdate);
                }
                //Log.d(TAG, "Update Hashmap ==> " + rawDataHashMap);
            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }*/
//        return rawDataHashMap;
    }

    public void clearBusinessProofDetails(DynamicUITable dynamicUITable) {
        try {

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1, dynamicUITable.getScreenName(),
                    "", true);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2, dynamicUITable.getScreenName(),
                    "", true);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_3, dynamicUITable.getScreenName(),
                    "", true);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_PINCODE, dynamicUITable.getScreenName(),
                    "", true);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_CITY, dynamicUITable.getScreenName(),
                    "", true);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_DISTRICT, dynamicUITable.getScreenName(),
                    "", true);

            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_STATE, dynamicUITable.getScreenName(),
                    "", true);
            dynamicUIDao.updateDynamicTableValueAndNonEditable(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LANDMARK, dynamicUITable.getScreenName(),
                    "", true);


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public LiveData<List<UserLoginMenuTable>> getUserLoginMenuFromServer(String userId, String roleId) {
        final MutableLiveData<List<UserLoginMenuTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final UserLoginMenuRequestDTO userLoginMenuRequestDTO = new UserLoginMenuRequestDTO();
                userLoginMenuRequestDTO.setIMEINumber(appHelper.getIMEI());
                UserLoginMenuRequestDTO.SpNameWithParameterClass spNameWithParameter = new UserLoginMenuRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_USER_LOGIN_MENU_DETAILS); // TODO: Sp to get knowledge bank master
                UserLoginMenuRequestDTO.SpParametersClass spParametersClass = new UserLoginMenuRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setKey("GetMenuDetails"); // TODO: key
                spParametersClass.setUserID(userId); // TODO: user id
                spParametersClass.setRoleID(roleId); // TODO: roleId
                ArrayList<UserLoginMenuRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<UserLoginMenuRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                userLoginMenuRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(userLoginMenuRequestDTO, UserLoginMenuRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getUserLoginMenuBankFromServer(userLoginMenuRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, RESET_PASSWORD_TOKEN), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    UserLoginMenuResponseDTO userLoginMenuResponseDTO = new Gson().fromJson(tableJson, UserLoginMenuResponseDTO.class);
                                                    if (userLoginMenuResponseDTO != null && userLoginMenuResponseDTO.getTable().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(userLoginMenuResponseDTO));
                                                        List<UserLoginMenuTable> userLoginMenuTableList = new ArrayList<>();

                                                        for (UserLoginMenuTable userLoginMenuTable : userLoginMenuResponseDTO.getTable()) {
                                                            userLoginMenuTableList.add(userLoginMenuTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserLoginMenuTable(userLoginMenuTableList);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getUserLoginMenuFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getUserLoginMenuFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<UserLoginMenuTable> userLoginMenuTableList = dynamicUIDao.getUserLoginMenuTableFromLocalDB();
                                    data.postValue(userLoginMenuTableList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<UserLoginMenuTable> userLoginMenuTableList = dynamicUIDao.getUserLoginMenuTableFromLocalDB();
                                    data.postValue(userLoginMenuTableList);

                                    insertLog("getusermenuListeBankFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<UserLoginMenuTable> userLoginMenuTableList = dynamicUIDao.getUserLoginMenuTableFromLocalDB();
                    data.postValue(userLoginMenuTableList);

                    insertLog("getUserMenuBankFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }

    //productName
    public LiveData<List<GetLeadDropDownProductNameTable>> getLeadDropDownProductNameServer(String userId, String sigmentId, String bcid, String productId) {
        final MutableLiveData<List<GetLeadDropDownProductNameTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetLeadDropDownDetailsRequestDTO getLeadDropDownDetailsRequestDTO = new GetLeadDropDownDetailsRequestDTO();
                getLeadDropDownDetailsRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass spNameWithParameter = new GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_PRODUCT_NAME_DETAILS); // TODO: Sp to get knowledge bank master
                GetLeadDropDownDetailsRequestDTO.SpParametersClass spParametersClass = new GetLeadDropDownDetailsRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setProductId(productId);
                spParametersClass.setRMUserId(userId); // TODO: user id
                spParametersClass.setSegmentId(sigmentId); // TODO: sigmentId
                spParametersClass.setBCID(bcid); // TODO: BCID
                ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                getLeadDropDownDetailsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getLeadDropDownDetailsRequestDTO, GetLeadDropDownDetailsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownDetailsFromServer(getLeadDropDownDetailsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, RESET_PASSWORD_TOKEN), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    GetLeadDropDownProductNameDetailsDTO getLeadDropDownProductNameDetailsDTO = new Gson().fromJson(tableJson, GetLeadDropDownProductNameDetailsDTO.class);
                                                    if (getLeadDropDownProductNameDetailsDTO != null && getLeadDropDownProductNameDetailsDTO.getGetLeadDropDownProductNameTable().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(getLeadDropDownProductNameDetailsDTO));
                                                        List<GetLeadDropDownProductNameTable> getLeadDropDownProductNameTablesList = new ArrayList<>();

                                                        for (GetLeadDropDownProductNameTable getLeadDropDownProductNameTable : getLeadDropDownProductNameDetailsDTO.getGetLeadDropDownProductNameTable()) {
                                                            getLeadDropDownProductNameTablesList.add(getLeadDropDownProductNameTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserDropDownProductNameTable(getLeadDropDownProductNameTablesList);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownProductNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownProductNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadDropDownProductNameTable> getLeadDropDownProductTypeTablList = dynamicUIDao.getLeadDropDownProductNameTableFromLocalDB();
                                    data.postValue(getLeadDropDownProductTypeTablList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadDropDownProductNameTable> getLeadDropDownProductTypeTablList = dynamicUIDao.getLeadDropDownProductNameTableFromLocalDB();
                                    data.postValue(getLeadDropDownProductTypeTablList);

                                    insertLog("getLeadDropDownProductNameFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadDropDownProductNameTable> getLeadDropDownProductTypeTablList = dynamicUIDao.getLeadDropDownProductNameTableFromLocalDB();
                    data.postValue(getLeadDropDownProductTypeTablList);

                    insertLog("getLeadDropDownProductNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }

    //product Type
    public LiveData<List<GetLeadDropDownProductTypeTable>> getLeadDropDownProductTypeServer(String userId, String sigmentId, String bcid, String productId) {
        final MutableLiveData<List<GetLeadDropDownProductTypeTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetLeadDropDownDetailsRequestDTO getLeadDropDownDetailsRequestDTO = new GetLeadDropDownDetailsRequestDTO();
                getLeadDropDownDetailsRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass spNameWithParameter = new GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_PRODUCT_TYPE_DETAILS); // TODO: Sp to get knowledge bank master
                GetLeadDropDownDetailsRequestDTO.SpParametersClass spParametersClass = new GetLeadDropDownDetailsRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setRMUserId(userId); // TODO: user id
                spParametersClass.setProductId(productId); // TODO: productId
                spParametersClass.setSegmentId(sigmentId);
                spParametersClass.setBCID(bcid); // TODO: BCID
                ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                getLeadDropDownDetailsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getLeadDropDownDetailsRequestDTO, GetLeadDropDownDetailsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownDetailsFromServer(getLeadDropDownDetailsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, RESET_PASSWORD_TOKEN), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    GetLeadDropDownProductTypeResponseDTO getLeadDropDownProductTypeResponseDTO = new Gson().fromJson(tableJson, GetLeadDropDownProductTypeResponseDTO.class);
                                                    if (getLeadDropDownProductTypeResponseDTO != null && getLeadDropDownProductTypeResponseDTO.getGetLeadDropDownProductTypeTables().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(getLeadDropDownProductTypeResponseDTO));
                                                        List<GetLeadDropDownProductTypeTable> getLeadDropDownProductTypeTablesList = new ArrayList<>();

                                                        for (GetLeadDropDownProductTypeTable getLeadDropDownProductTypeTable : getLeadDropDownProductTypeResponseDTO.getGetLeadDropDownProductTypeTables()) {
                                                            getLeadDropDownProductTypeTablesList.add(getLeadDropDownProductTypeTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserDropDownProductTypeTable(getLeadDropDownProductTypeTablesList);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownProductTypeFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownProductTypeFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadDropDownProductTypeTable> getLeadDropDownProductTypeTablList = dynamicUIDao.getLeadDropDownProductTypeTableFromLocalDB();
                                    data.postValue(getLeadDropDownProductTypeTablList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadDropDownProductTypeTable> getLeadDropDownProductTypeTablList = dynamicUIDao.getLeadDropDownProductTypeTableFromLocalDB();
                                    data.postValue(getLeadDropDownProductTypeTablList);


                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadDropDownProductTypeTable> getLeadDropDownProductTypeTablList = dynamicUIDao.getLeadDropDownProductTypeTableFromLocalDB();
                    data.postValue(getLeadDropDownProductTypeTablList);

                    insertLog("getLeadDropDownProductTypeFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }

    // SQL ID And NAME
    public LiveData<List<GetLeadDropDownSqIdAndNameTable>> getLeadDropDownSqIdAndNameServer(String userId, String sigmentId, String bcid, String productId) {
        final MutableLiveData<List<GetLeadDropDownSqIdAndNameTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetLeadDropDownDetailsRequestDTO getLeadDropDownDetailsRequestDTO = new GetLeadDropDownDetailsRequestDTO();
                getLeadDropDownDetailsRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass spNameWithParameter = new GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_SOURCE_OF_ACQUISITION); // TODO: Sp to get knowledge bank master
                GetLeadDropDownDetailsRequestDTO.SpParametersClass spParametersClass = new GetLeadDropDownDetailsRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setProductId(productId); // TODO: productId
                spParametersClass.setRMUserId(userId); // TODO: user id
                spParametersClass.setSegmentId(sigmentId); // TODO: sigmentId
                spParametersClass.setBCID(bcid); // TODO: BCID
                ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                getLeadDropDownDetailsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getLeadDropDownDetailsRequestDTO, GetLeadDropDownDetailsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownDetailsFromServer(getLeadDropDownDetailsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, RESET_PASSWORD_TOKEN), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    GetLeadDropDownSqIdAndNameresponseDTO getLeadDropDownDetailsResponseDTO = new Gson().fromJson(tableJson, GetLeadDropDownSqIdAndNameresponseDTO.class);
                                                    if (getLeadDropDownDetailsResponseDTO != null && getLeadDropDownDetailsResponseDTO.getGetLeadDropDownSqIdAndNameTables().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(getLeadDropDownDetailsResponseDTO));
                                                        List<GetLeadDropDownSqIdAndNameTable> getLeadDropDownSqIdAndNameTableList = new ArrayList<>();

                                                        for (GetLeadDropDownSqIdAndNameTable getLeadDropDownSqIdAndNameTable : getLeadDropDownDetailsResponseDTO.getGetLeadDropDownSqIdAndNameTables()) {
                                                            getLeadDropDownSqIdAndNameTableList.add(getLeadDropDownSqIdAndNameTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserDropDownSqIdAndNameTable(getLeadDropDownSqIdAndNameTableList);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownSqIdAndNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownSqIdAndNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadDropDownSqIdAndNameTable> getLeadDropDownSqIdAndNameTables = dynamicUIDao.getLeadDropDownSqIdAndNameTableFromLocalDB();
                                    data.postValue(getLeadDropDownSqIdAndNameTables);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadDropDownSqIdAndNameTable> getLeadDropDownSqIdAndNameTables = dynamicUIDao.getLeadDropDownSqIdAndNameTableFromLocalDB();
                                    data.postValue(getLeadDropDownSqIdAndNameTables);
                                    ;


                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadDropDownSqIdAndNameTable> getLeadDropDownSqIdAndNameTables = dynamicUIDao.getLeadDropDownSqIdAndNameTableFromLocalDB();
                    data.postValue(getLeadDropDownSqIdAndNameTables);

                    insertLog("getLeadDropDownFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }

    // SQL BANK DETAILS
    public LiveData<List<GetLeadDropDownBankDetailsTable>> getLeadDropDownBankDetailsServer(String userId, String sigmentId, String bcid, String productId) {
        final MutableLiveData<List<GetLeadDropDownBankDetailsTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetLeadDropDownDetailsRequestDTO getLeadDropDownDetailsRequestDTO = new GetLeadDropDownDetailsRequestDTO();
                getLeadDropDownDetailsRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass spNameWithParameter = new GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_BANK_DETAILS); // TODO: Sp to get knowledge bank master
                GetLeadDropDownDetailsRequestDTO.SpParametersClass spParametersClass = new GetLeadDropDownDetailsRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setProductId(productId);
                spParametersClass.setRMUserId(userId); // TODO: user id
                spParametersClass.setSegmentId(sigmentId); // TODO: sigmentId
                spParametersClass.setBCID(bcid); // TODO: BCID
                ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                getLeadDropDownDetailsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getLeadDropDownDetailsRequestDTO, GetLeadDropDownDetailsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownDetailsFromServer(getLeadDropDownDetailsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, RESET_PASSWORD_TOKEN), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    GetLeadDropDownBankDetailsResponseDTO getLeadDropDownDetailsResponseDTO = new Gson().fromJson(tableJson, GetLeadDropDownBankDetailsResponseDTO.class);
                                                    if (getLeadDropDownDetailsResponseDTO != null && getLeadDropDownDetailsResponseDTO.getGetLeadDropDownBankDetailsTables().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(getLeadDropDownDetailsResponseDTO));
                                                        List<GetLeadDropDownBankDetailsTable> getLeadDropDownBankDetailsTableList = new ArrayList<>();

                                                        for (GetLeadDropDownBankDetailsTable getLeadDropDownBankDetailsTable : getLeadDropDownDetailsResponseDTO.getGetLeadDropDownBankDetailsTables()) {
                                                            getLeadDropDownBankDetailsTableList.add(getLeadDropDownBankDetailsTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserDropDownBankDetailTable(getLeadDropDownBankDetailsTableList);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownSqIdAndNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownSqIdAndNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadDropDownBankDetailsTable> getLeadDropDownBankDetailsTable = dynamicUIDao.getLeadDropDownBankDetailsTableFromLocalDB();
                                    data.postValue(getLeadDropDownBankDetailsTable);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadDropDownBankDetailsTable> getLeadDropDownBankDetailsTable = dynamicUIDao.getLeadDropDownBankDetailsTableFromLocalDB();
                                    data.postValue(getLeadDropDownBankDetailsTable);


                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadDropDownBankDetailsTable> getLeadDropDownBankDetailsTable = dynamicUIDao.getLeadDropDownBankDetailsTableFromLocalDB();
                    data.postValue(getLeadDropDownBankDetailsTable);

                    insertLog("getLeadDropDownFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }

    // SQL BRANCH DETAILS
    public LiveData<List<GetLeadDropDownBranchNameTable>> getLeadDropDownBranchNameServer(String userId, String sigmentId, String bcid, String productId) {
        final MutableLiveData<List<GetLeadDropDownBranchNameTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetLeadDropDownDetailsRequestDTO getLeadDropDownDetailsRequestDTO = new GetLeadDropDownDetailsRequestDTO();
                getLeadDropDownDetailsRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass spNameWithParameter = new GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_BRANCH_NAME_DETAILS); // TODO: Sp to get knowledge bank master
                GetLeadDropDownDetailsRequestDTO.SpParametersClass spParametersClass = new GetLeadDropDownDetailsRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setProductId(productId);
                spParametersClass.setRMUserId(userId); // TODO: user id
                spParametersClass.setSegmentId(sigmentId); // TODO: sigmentId
                spParametersClass.setBCID(bcid); // TODO: BCID
                ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<GetLeadDropDownDetailsRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                getLeadDropDownDetailsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getLeadDropDownDetailsRequestDTO, GetLeadDropDownDetailsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownDetailsFromServer(getLeadDropDownDetailsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, RESET_PASSWORD_TOKEN), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    GetLeadDropDownDetailsResponseDTO getLeadDropDownDetailsResponseDTO = new Gson().fromJson(tableJson, GetLeadDropDownDetailsResponseDTO.class);
                                                    if (getLeadDropDownDetailsResponseDTO != null && getLeadDropDownDetailsResponseDTO.getGetLeadDropDownBranchNameTables().size() > 0) {
                                                        Log.d(TAG, " getKnowledgeBankFromServer =======> " + new Gson().toJson(getLeadDropDownDetailsResponseDTO));
                                                        List<GetLeadDropDownBranchNameTable> getLeadDropDownBranchNameTableList = new ArrayList<>();

                                                        for (GetLeadDropDownBranchNameTable getLeadDropDownBankDetailsTable : getLeadDropDownDetailsResponseDTO.getGetLeadDropDownBranchNameTables()) {
                                                            getLeadDropDownBranchNameTableList.add(getLeadDropDownBankDetailsTable);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserDropDownBranchNameTable(getLeadDropDownBranchNameTableList);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownSqIdAndNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownSqIdAndNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadDropDownBranchNameTable> getLeadDropDownBranchNameTable = dynamicUIDao.getLeadDropDownBranchNameTableFromLocalDB();
                                    data.postValue(getLeadDropDownBranchNameTable);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadDropDownBranchNameTable> getLeadDropDownBranchNameTable = dynamicUIDao.getLeadDropDownBranchNameTableFromLocalDB();
                                    data.postValue(getLeadDropDownBranchNameTable);


                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadDropDownBranchNameTable> getLeadDropDownBranchNameTable = dynamicUIDao.getLeadDropDownBranchNameTableFromLocalDB();
                    data.postValue(getLeadDropDownBranchNameTable);

                    insertLog("getLeadDropDownFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                });
            }

        });
        return data;
    }


    // TODO: LOG IN SERVICE CALL
    public LiveData<LoginnewResponseDTO> logInLDAPService(String userId, String password, String uniqueId) {
        final MutableLiveData<LoginnewResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(LDAP_LOGIN_URL);

            final LoginNewRequestDTO loginNewRequestDTO = new LoginNewRequestDTO();
            loginNewRequestDTO.setUniqueId(uniqueId);
            loginNewRequestDTO.setClientID(userId);
            loginNewRequestDTO.setExtCustId("");
            loginNewRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
            loginNewRequestDTO.setRequestFrom("");
            LoginNewRequestDTO.RequestStringClass requestStringClass = new LoginNewRequestDTO.RequestStringClass();
            LoginNewRequestDTO.LoginRequest loginRequest = new LoginNewRequestDTO.LoginRequest();
            loginRequest.setUserId(userId);
            loginRequest.setPassword(password);
            loginRequest.setAppVersion(BuildConfig.VERSION_NAME);
            requestStringClass.setLoginRequest(loginRequest);
            loginNewRequestDTO.setRequestString(requestStringClass);
            String baseString = new Gson().toJson(loginNewRequestDTO, LoginNewRequestDTO.class).replace("\\u003d", "=");
            String k1 = SHA256Encrypt.sha256(baseString);
            executor.execute(() -> {
                DynamicUIWebService.createService(DynamicUIWebservice.class).logInLDAPService(loginNewRequestDTO, k1).enqueue(new Callback<JsonObject>() {
                    @Override
                    public void onResponse(Call<JsonObject> call, Response<JsonObject> response) {
                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                        executor.execute(() -> {
                            if (response.isSuccessful()) {

                                LoginnewResponseDTO loginnewResponseDTO = new Gson().fromJson(response.body().toString(), LoginnewResponseDTO.class);

                                if (loginnewResponseDTO != null && loginnewResponseDTO.getApiResponse() != null) {
                                    String headerK1 = response.headers().get("k1");
                                    //String baseString = new Gson().toJson(loginnewResponseDTO,LoginnewResponseDTO.class);
                                    String k1 = SHA256Encrypt.sha256(response.body().toString());

                                    if (TextUtils.isEmpty(headerK1) || !headerK1.trim().equalsIgnoreCase(k1.trim()) || !uniqueId.equalsIgnoreCase(loginnewResponseDTO.getUniqueId())) {
                                        loginnewResponseDTO = new LoginnewResponseDTO();
                                        loginnewResponseDTO.setErrorMessage("login failed");
                                    }
                                } else {
                                    loginnewResponseDTO = new LoginnewResponseDTO();
                                    loginnewResponseDTO.setErrorMessage("login failed");
                                }
                                Log.d(TAG, "onResponse  ==> " + loginnewResponseDTO);

                                data.postValue(loginnewResponseDTO);
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<JsonObject> call, Throwable t) {
                        Log.d(TAG, "onFailure ==> " + t.getMessage());
                        data.postValue(new LoginnewResponseDTO());
                    }
                });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            data.postValue(new LoginnewResponseDTO());
        }
        return data;
    }


    public LiveData<PosidexResponseDTO> posidexServiceData(String userId, String clientId, String loanType, String uniqueId, String moduleType) {
        final MutableLiveData<PosidexResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, moduleType, loanType);
                } else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                }
                final PosidexRequestDTO posidexRequestDTO = new PosidexRequestDTO();
                posidexRequestDTO.setUniqueId(uniqueId);
                posidexRequestDTO.setClientID(clientId);
                posidexRequestDTO.setExternalCustomerId(clientId);
                posidexRequestDTO.setModuleType(moduleType);
                posidexRequestDTO.setCoapplicantId(moduleType);
                //posidexRequestDTO.setAADHAR("");

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    posidexRequestDTO.setAADHAR(value);
                                    // TODO: if first name is empty then set value otherwise values already setted
                                }
                            }

                        }
                    }
                }

                posidexRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                posidexRequestDTO.setCreatedBy(loanType);
                posidexRequestDTO.setCreatedByProject(loanType);

                PosidexRequestDTO.RequestString requestString = new PosidexRequestDTO.RequestString();
                PosidexRequestDTO.RequestString.Envelope envelope = new PosidexRequestDTO.RequestString.Envelope();
                PosidexRequestDTO.RequestString.Envelope.Header header = new PosidexRequestDTO.RequestString.Envelope.Header();
                PosidexRequestDTO.RequestString.Envelope.Header.FindCustomerheadreq headerdata = new PosidexRequestDTO.RequestString.Envelope.Header.FindCustomerheadreq();

                headerdata.setServiceRequestId("Dedupe");
                headerdata.setRequestUUID(clientId);
                headerdata.setMessageDateTime("");
                headerdata.setChannelId("LOS");
                headerdata.setUserID(userId);
                headerdata.setCorpID("");
                header.setFindCustomerheadreq(headerdata);

                PosidexRequestDTO.RequestString.Envelope.Body bodydata = new PosidexRequestDTO.RequestString.Envelope.Body();
                PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer findCustomer = new PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer();
                PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Metadata metadata = new PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Metadata();
                metadata.setRequestId(userId);
                //metadata.setProfileId("8");
                metadata.setCustomerID(clientId);
                metadata.setSrcSystem("Finacle");
                metadata.setIsUpdateCustomer("FALSE");
                metadata.setRequestType("B");
                metadata.setIsToBeVerified("N");
                PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Demographics demographics = new PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Demographics();
                demographics.setFathername("");
                demographics.setDob("");
                demographics.setPan("");


                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    // TODO: check pan card,passport,driving license,voter id , aadhaar, ration card no
                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                        if (!TextUtils.isEmpty(kycType)) {
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                                demographics.setPan(value);
                                                demographics.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_DRIVING_LICENSE)) {
                                                demographics.setDrvLicenceNo(value);
                                                demographics.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)) {
                                                demographics.setVoterId(value);
                                                demographics.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PASSPORT)) {
                                                demographics.setPassportNo(value);
                                                demographics.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)) {
                                                demographics.setRationCardNo(value);
                                                demographics.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)) {
                                                demographics.setUID(value);
                                                demographics.setDocNumber(value);
                                            }
                                        }
                                    }
                                }
                            }



                            /*if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    demographics.setUID(value);
                                }
                            }*/
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    demographics.setName(value);
                                }
                            }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    demographics.setName(value);
                                }
                            }

                           /* if (hashMap.containsKey(TAG_NAME_PAN)) {
                                String value = hashMap.get(TAG_NAME_PAN).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    demographics.setPan(value);
                                }
                            }*/
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    demographics.setDob(value);
                                }
                            }
                        }
                    }
                }
                demographics.setCountry1("");
                demographics.setNationality("INDIAN");
                demographics.setCIN("");
                PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Address address = new PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Address();


                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String value = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    address.setCity(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    address.setPincode(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    address.setState(value);
                                }
                            }

                        }
                    }
                }
                address.setAddresstype("");
                address.setAddress1("");
                address.setLandmark("");
                address.setAreaname("");
                PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Contact contact = new PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Contact();
                contact.setContactType("");
                contact.setPhoneNo("");
                contact.setMobileNo("");
                contact.setStdCode("");
                PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Email email = new PosidexRequestDTO.RequestString.Envelope.Body.FindCustomer.Email();
                email.setEmailType("");
                email.setEmailId("");

                findCustomer.setMetadata(metadata);
                findCustomer.setDemographics(demographics);
                findCustomer.setAddress(address);
                findCustomer.setContact(contact);
                findCustomer.setEmail(email);
                bodydata.setFindCustomer(findCustomer);
                envelope.setBody(bodydata);
                envelope.setHeader(header);
                requestString.setEnvelope(envelope);
                posidexRequestDTO.setRequestString(requestString);
                String baseString = new Gson().toJson(posidexRequestDTO, PosidexRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getposidexService(posidexRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).enqueue(new Callback<PosidexResponseDTO>() {
                    @Override
                    public void onResponse(Call<PosidexResponseDTO> call, Response<PosidexResponseDTO> response) {
                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                        executor.execute(() -> {

                            if (response.isSuccessful()) {
                                PosidexResponseDTO posidexResponseDTO = response.body();
                                posidexResponseDTO.setModuleType(moduleType);
                                data.postValue(posidexResponseDTO);

                                String posidexDataResponse = new Gson().toJson(posidexResponseDTO, PosidexResponseDTO.class);
                                String posidexData = posidexDataResponse.replace("|","");

                                RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_POSIDEX,
                                        clientId, moduleType);

                                if (rawDataTableFromDB == null) {
                                    // TODO: Insert Raw Data Table
                                    RawDataTable rawDataTable = new RawDataTable(posidexData, SCREEN_NO_POSIDEX, SCREEN_NAME_POSIDEX, "", clientId,
                                            loanType, userId, moduleType, "");
                                    dynamicUIDao.insertRawData(rawDataTable);

                                } else {
                                    // TODO: Update Raw Data Table
                                    dynamicUIDao.updateRawDataBag(SCREEN_NO_POSIDEX, rawDataTableFromDB.getId(), posidexData);
                                }
                                if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                                    dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_POSIDEX,MODULE_TYPE_APPLICANT);
                                }
                                //dynamicUIDao.updateRawDataForSync(SCREEN_NO_POSIDEX);
                                postSubmittedAllScreensLiveData(posidexData, SCREEN_NO_POSIDEX,"", userId,SCREEN_NAME_POSIDEX,moduleType);


                            } else {
                                // TODO: Failure Case
                                data.postValue(new PosidexResponseDTO());
                                insertLog("getposidexService", response.message(), "", "", TAG, "", "", "");
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<PosidexResponseDTO> call, Throwable t) {
                        Log.d(TAG, "onFailure ==> " + call.toString());
                        executor.execute(() -> {
                            data.postValue(new PosidexResponseDTO());

                            insertLog("getBearerToken", t.getMessage(), "", "", TAG, "", "", "");
                        });
                    }
                });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new PosidexResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<DeliquencyResponseDTO> getDeliquencyServiceData(String ucic_id, String clientId, String moduleType, String loanType) {
        final MutableLiveData<DeliquencyResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                //List<RawDataTable> posidexRawDataTableList = null;
                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, moduleType, loanType);
                } else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                }
                // posidexRawDataTableList = dynamicUIDao.getRawDataByClientIDAndModuleType(SCREEN_NAME_POSIDEX,clientId, moduleType);

                final DeliquencyRequestDTO deliquencyRequestDTO = new DeliquencyRequestDTO();
                deliquencyRequestDTO.setClientID(clientId);
                deliquencyRequestDTO.setModuleType(moduleType);
                deliquencyRequestDTO.setCoapplicantId(moduleType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    deliquencyRequestDTO.setAADHAR(value);
                                }
                            }

                        }
                    }
                }
                deliquencyRequestDTO.setCreatedBy(loanType);
                deliquencyRequestDTO.setCreatedByProject(loanType);
                deliquencyRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                deliquencyRequestDTO.setExternalCustomerId(clientId);
                deliquencyRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                DeliquencyRequestDTO.RequestString requestStringClass = new DeliquencyRequestDTO.RequestString();
                requestStringClass.setProductID("19");
                //requestStringClass.setSearchableValue("RBL001683151");
                /*if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    requestStringClass.setSearchableValue(appHelper.getSharedPrefObj().getString(UCIC_ID_APPLICANT, ""));
                }else{
                    requestStringClass.setSearchableValue(appHelper.getSharedPrefObj().getString(UCIC_ID_CO_APPLICANT, ""));
                }*/
                requestStringClass.setSearchableValue(ucic_id);
                requestStringClass.setChannelId("SRTK");
                deliquencyRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(deliquencyRequestDTO, DeliquencyRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getDeliquencyService(deliquencyRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).enqueue(new Callback<DeliquencyResponseDTO>() {
                    @Override
                    public void onResponse(Call<DeliquencyResponseDTO> call, Response<DeliquencyResponseDTO> response) {
                        Log.e(TAG, "DATA REFRESHED FROM NETWORK");
                        executor.execute(() -> {
                            if (response.isSuccessful()) {
                                DeliquencyResponseDTO deliquencyResponseDTO = response.body();
                                deliquencyResponseDTO.setModuleType(moduleType);
                                data.postValue(deliquencyResponseDTO);
                                String deliquencyDataResponse = new Gson().toJson(deliquencyResponseDTO, DeliquencyResponseDTO.class);
                                String deliquencyData1 = deliquencyDataResponse.replace("|","");
                                String deliquencyData2 = deliquencyData1.replace(">","");
                                String deliquencyData3 = deliquencyData2.replace("<","");
                                String deliquencyData4 = deliquencyData3.replace("/","");
                                String deliquencyData5 = deliquencyData4.replace("\\","");
                                String deliquencyData = deliquencyData5.replace(".","");

                                RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_DELINQUENCY, clientId, moduleType);
                                if (rawDataTableFromDB == null) {
                                    // TODO: Insert Raw Data Table
                                    RawDataTable rawDataTable = new RawDataTable(deliquencyData, SCREEN_NO_DELIQUENCY, SCREEN_NAME_DELINQUENCY, "", clientId, loanType, userId, moduleType, "");
                                    dynamicUIDao.insertRawData(rawDataTable);
                                } else {
                                    // TODO: Update Raw Data Table
                                    dynamicUIDao.updateRawDataBag(SCREEN_NO_DELIQUENCY, rawDataTableFromDB.getId(), deliquencyData);
                                }
                                if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                                    dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_DELIQUENCY,MODULE_TYPE_APPLICANT);
                                }
                                postSubmittedAllScreensLiveData(deliquencyData, SCREEN_NO_DELIQUENCY,"", userId,SCREEN_NAME_DELINQUENCY,moduleType);


                                //dynamicUIDao.updateRawDataForSync(SCREEN_NO_DELIQUENCY);
                            } else {
                                // TODO: Failure Case
                                data.postValue(new DeliquencyResponseDTO());
                                insertLog("getdeliquencyServiceData", response.message(), "", "", TAG, "", "", "");
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<DeliquencyResponseDTO> call, Throwable t) {
                        Log.d(TAG, "onFailure ==> " + t.getMessage());
                        executor.execute(() -> {
                            data.postValue(new DeliquencyResponseDTO());

                            insertLog("getBearerToken", t.getMessage(), "", "", TAG, "", "", "");
                        });
                    }
                });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new DeliquencyResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }


    public LiveData<KarzaResponseDTO> getKarzaServiceData(String registrationNumber, String clientId) {
        final MutableLiveData<KarzaResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final KarzaRequestDTO karzaRequestDto = new KarzaRequestDTO();
                karzaRequestDto.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                karzaRequestDto.setUniqueId(String.valueOf(System.currentTimeMillis()));
                karzaRequestDto.setClientID(clientId);
                KarzaRequestDTO.RequestString requestStringClass = new KarzaRequestDTO.RequestString();
                requestStringClass.setRegistrationNumber(registrationNumber);
                karzaRequestDto.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(karzaRequestDto, KarzaRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getKarzaDataFromServer(karzaRequestDto, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<KarzaResponseDTO>() {
                            @Override
                            public void onResponse(Call<KarzaResponseDTO> call, Response<KarzaResponseDTO> response) {
                                executor.execute(() -> {
                                    Log.d(TAG, "111onSuccess ==> " + response.body());
                                    if (response.isSuccessful()) {
                                        Log.d(TAG, "111onSuccess1 ==> " + response.body());
                                        KarzaResponseDTO karzaResponseDTO = response.body();

                                        String karzaData = new Gson().toJson(karzaResponseDTO, KarzaResponseDTO.class);
                                        String karzaData1 = karzaData.replace("|"," ");
                                        String karzaData2 = karzaData1.replace(">"," ");
                                        String karzaData3 = karzaData2.replace("<"," ");
                                        String karzaData4 = karzaData3.replace("("," ");
                                        String karzaData5 = karzaData4.replace("\\"," ");
                                        String karzaData6 = karzaData5.replace(")"," ");
                                        String karzavalue = karzaData6.replace("."," ");
                                        KarzaResponseDTO karzaResponseDTO1 = new Gson().fromJson(karzavalue, KarzaResponseDTO.class);
                                        data.postValue(karzaResponseDTO1);

                                    } else {
                                        Log.d(TAG, "111onSuccess2 ==> " + response.body());
                                        // TODO: Failure Case
                                        data.postValue(new KarzaResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<KarzaResponseDTO> call, Throwable t) {
                                Log.d(TAG, "111onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    KarzaResponseDTO karzaResponseDTO = new KarzaResponseDTO();
                                    data.postValue(karzaResponseDTO);
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new KarzaResponseDTO());
                insertLog("111getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<CityResponseDTO> getCityServiceData(String forData, String clientId) {
        final MutableLiveData<CityResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final CityRequestDTO cityRequestDTO = new CityRequestDTO();
                cityRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                cityRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                cityRequestDTO.setClientID(clientId);
                CityRequestDTO.RequestString requestStringClass = new CityRequestDTO.RequestString();
                requestStringClass.set_for(forData);
                requestStringClass.setAccess_token("");
                cityRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(cityRequestDTO, CityRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getCityDataFromServer(cityRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<CityResponseDTO>() {
                            @Override
                            public void onResponse(Call<CityResponseDTO> call, Response<CityResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        CityResponseDTO cityResponseDTO = response.body();
                                        data.postValue(cityResponseDTO);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new CityResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<CityResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new CityResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new CityResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<IBPResponse> getIBPDataFromServer(String clientId, String year, String variant,
                                                      String owner,
                                                      String month, String make, String model, String color, String kilomiter, String location) {
        final MutableLiveData<IBPResponse> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final IBPRequest ibpRequest = new IBPRequest();
                ibpRequest.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                ibpRequest.setUniqueId(String.valueOf(System.currentTimeMillis()));
                ibpRequest.setClientID(clientId);
                IBPRequest.RequestString requestStringClass = new IBPRequest.RequestString();
                requestStringClass.setYear(year);
                requestStringClass.setVariant(variant);
                requestStringClass.setOwner(owner);
                requestStringClass.setMonth(month);
                requestStringClass.setMake(make);
                requestStringClass.setModel(model);
                requestStringClass.setColor(color);
                requestStringClass.setKilometer(kilomiter);
                requestStringClass.setLocation(location);
                requestStringClass.setAccess_token("");
                ibpRequest.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(ibpRequest, IBPRequest.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getIBPDataFromServer(ibpRequest, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<IBPResponse>() {
                            @Override
                            public void onResponse(Call<IBPResponse> call, Response<IBPResponse> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        IBPResponse ibpResponse = response.body();
                                        data.postValue(ibpResponse);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new IBPResponse());
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<IBPResponse> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new IBPResponse());
                                });
                            }
                        });
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new IBPResponse());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<List<GetLeadCustomerTypeTable>> getLeadDropDownCustomerType(String profession, String customerType, String type, String isIndividual) {
        final MutableLiveData<List<GetLeadCustomerTypeTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final TypeOfProfessionRequestDTO typeOfProfessionRequestDTO = new TypeOfProfessionRequestDTO();
                typeOfProfessionRequestDTO.setIMEINumber(appHelper.getIMEI());
                typeOfProfessionRequestDTO.setProjectName(loanType);
                TypeOfProfessionRequestDTO.SpNameWithParameterClass spNameWithParameter = new TypeOfProfessionRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_TYPE_OF_PROFESSION);
                TypeOfProfessionRequestDTO.SpParametersClass spParametersClass = new TypeOfProfessionRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);
                spParametersClass.setCustomerType(customerType);
                spParametersClass.setTypeOfProfession(profession);
                spParametersClass.setIsIndividual(isIndividual);
                ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                typeOfProfessionRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(typeOfProfessionRequestDTO, TypeOfProfessionRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownTypeOfProfession(typeOfProfessionRequestDTO,
                                appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    GetLeadCustomerTypeResponseDTO getLeadCustomerTypeResponseDTO = new Gson().fromJson(tableJson, GetLeadCustomerTypeResponseDTO.class);
                                                    if (getLeadCustomerTypeResponseDTO != null && getLeadCustomerTypeResponseDTO.getGetLeadCustomerTypeTablesList().size() > 0) {
                                                        List<GetLeadCustomerTypeTable> getLeadCustomerTypeResponseList = new ArrayList<>();

                                                        for (GetLeadCustomerTypeTable getLeadCustomerTypeTableList : getLeadCustomerTypeResponseDTO.getGetLeadCustomerTypeTablesList()) {
                                                            getLeadCustomerTypeResponseList.add(getLeadCustomerTypeTableList);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Customer Table
                                                        dynamicUIDao.deleteAndInsertUserCustomerTypeTable(getLeadCustomerTypeResponseList);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownProductNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownProductNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadCustomerTypeTable> getLeadCustomerTypeTableList = dynamicUIDao.getLeadCustomerTypeTableFromLocalDB();
                                    data.postValue(getLeadCustomerTypeTableList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadCustomerTypeTable> getLeadCustomerTypeTableList = dynamicUIDao.getLeadCustomerTypeTableFromLocalDB();
                                    data.postValue(getLeadCustomerTypeTableList);

                                    insertLog("getLeadDropDownProductNameFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadCustomerTypeTable> getLeadCustomerTypeTableList = dynamicUIDao.getLeadCustomerTypeTableFromLocalDB();
                    data.postValue(getLeadCustomerTypeTableList);

                });
            }

        });
        return data;
    }

    public LiveData<List<GetLeadDropDownTypeOfProfessionTable>> getLeadDropDownTypeOfProfession(String profession, String customerType, String type, String isIndividual) {
        final MutableLiveData<List<GetLeadDropDownTypeOfProfessionTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final TypeOfProfessionRequestDTO typeOfProfessionRequestDTO = new TypeOfProfessionRequestDTO();
                typeOfProfessionRequestDTO.setIMEINumber(appHelper.getIMEI());
                typeOfProfessionRequestDTO.setProjectName(loanType);
                TypeOfProfessionRequestDTO.SpNameWithParameterClass spNameWithParameter = new TypeOfProfessionRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_TYPE_OF_PROFESSION);
                TypeOfProfessionRequestDTO.SpParametersClass spParametersClass = new TypeOfProfessionRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);
                spParametersClass.setCustomerType(customerType);
                spParametersClass.setTypeOfProfession(profession);
                spParametersClass.setIsIndividual(isIndividual);
                ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                typeOfProfessionRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(typeOfProfessionRequestDTO, TypeOfProfessionRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownTypeOfProfession(typeOfProfessionRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TypeOfProfessionResponseDTO getTypeOfProfessionResponseDTO = new Gson().fromJson(tableJson, TypeOfProfessionResponseDTO.class);
                                                    if (getTypeOfProfessionResponseDTO != null && getTypeOfProfessionResponseDTO.getGetLeadDropDownTypeOfProfessionTable().size() > 0) {
                                                        List<GetLeadDropDownTypeOfProfessionTable> getLeadDropDownTypeOfProfessionList = new ArrayList<>();

                                                        for (GetLeadDropDownTypeOfProfessionTable getLeadDropDownProductTypeOfProfessionTablesList : getTypeOfProfessionResponseDTO.getGetLeadDropDownTypeOfProfessionTable()) {
                                                            getLeadDropDownTypeOfProfessionList.add(getLeadDropDownProductTypeOfProfessionTablesList);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertUserDropDownTypeOfProfessionTable(getLeadDropDownTypeOfProfessionList);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownProductNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownProductNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetLeadDropDownTypeOfProfessionTable> getLeadDropDownTypeOfProfessionTablList = dynamicUIDao.getLeadDropDownTypeOfProfessionTableFromLocalDB();
                                    data.postValue(getLeadDropDownTypeOfProfessionTablList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetLeadDropDownTypeOfProfessionTable> getLeadDropDownTypeOfProfessionTablList = dynamicUIDao.getLeadDropDownTypeOfProfessionTableFromLocalDB();
                                    data.postValue(getLeadDropDownTypeOfProfessionTablList);

                                    insertLog("getLeadDropDownProductNameFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetLeadDropDownTypeOfProfessionTable> getLeadDropDownTypeOfProfessionTablList = dynamicUIDao.getLeadDropDownTypeOfProfessionTableFromLocalDB();
                    data.postValue(getLeadDropDownTypeOfProfessionTablList);

                });
            }
        });
        return data;
    }

    public LiveData<List<GetKYCDropDownIDProofTable>> getDropDownKYCType(String type, String clientId, String moduleType, String customerType, String profession,String isEkyc, int screenId) {
        final MutableLiveData<List<GetKYCDropDownIDProofTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);

                final TypeOfProfessionRequestDTO typeOfProfessionRequestDTO = new TypeOfProfessionRequestDTO();
                typeOfProfessionRequestDTO.setIMEINumber(appHelper.getIMEI());
                typeOfProfessionRequestDTO.setProjectName(loanType);
                TypeOfProfessionRequestDTO.SpNameWithParameterClass spNameWithParameter = new TypeOfProfessionRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_TYPE_OF_PROFESSION);
                TypeOfProfessionRequestDTO.SpParametersClass spParametersClass = new TypeOfProfessionRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);
                spParametersClass.setISEKYC(isEkyc);
                spParametersClass.setScreenid(screenId);

                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setCustomerType(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setTypeOfProfession(value);
                                }
                            }
                        }
                    }
                } else {
                    spParametersClass.setTypeOfProfession(profession);
                    spParametersClass.setCustomerType(customerType);
                }
                ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                typeOfProfessionRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(typeOfProfessionRequestDTO, TypeOfProfessionRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownTypeOfProfession(typeOfProfessionRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    KYCIdProofResponseDTO getKYCIdProofResponseDTO = new Gson().fromJson(tableJson, KYCIdProofResponseDTO.class);
                                                    if (getKYCIdProofResponseDTO != null && getKYCIdProofResponseDTO.getGetKYCDropDownIDProofTable().size() > 0) {
                                                        List<GetKYCDropDownIDProofTable> getKYCDropDownIDProofTables = new ArrayList<>();

                                                        for (GetKYCDropDownIDProofTable getGetKYCDropDownIDProofTableTablesList : getKYCIdProofResponseDTO.getGetKYCDropDownIDProofTable()) {
                                                            getKYCDropDownIDProofTables.add(getGetKYCDropDownIDProofTableTablesList);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertKYCIdProofTable(getKYCDropDownIDProofTables);

                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                            insertLog("getLeadDropDownProductNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownProductNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetKYCDropDownIDProofTable> getGetKYCDropDownIDProofTablelList = dynamicUIDao.getGetKYCDropDownIDProofTableFromLocalDB();
                                    data.postValue(getGetKYCDropDownIDProofTablelList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetKYCDropDownIDProofTable> getGetKYCDropDownIDProofTablelList = dynamicUIDao.getGetKYCDropDownIDProofTableFromLocalDB();
                                    data.postValue(getGetKYCDropDownIDProofTablelList);
                                    insertLog("getLeadDropDownProductNameFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetKYCDropDownIDProofTable> getGetKYCDropDownIDProofTablelList = dynamicUIDao.getGetKYCDropDownIDProofTableFromLocalDB();
                    data.postValue(getGetKYCDropDownIDProofTablelList);
                });
            }
        });
        return data;
    }

    public LiveData<List<GetKYCDropDownIDProofTable>> getDropDownGuarantorKYCType(String type, String clientId, String moduleType, String customerType, String profession) {
        final MutableLiveData<List<GetKYCDropDownIDProofTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {

            try {
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);

                final TypeOfProfessionRequestDTO typeOfProfessionRequestDTO = new TypeOfProfessionRequestDTO();
                typeOfProfessionRequestDTO.setIMEINumber(appHelper.getIMEI());
                typeOfProfessionRequestDTO.setProjectName(loanType);
                TypeOfProfessionRequestDTO.SpNameWithParameterClass spNameWithParameter = new TypeOfProfessionRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_TYPE_OF_PROFESSION);
                TypeOfProfessionRequestDTO.SpParametersClass spParametersClass = new TypeOfProfessionRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);

                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setCustomerType(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setTypeOfProfession(value);
                                }
                            }
                        }
                    }
                } else {
                    spParametersClass.setTypeOfProfession(profession);
                    spParametersClass.setCustomerType(customerType);
                }
                ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                typeOfProfessionRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(typeOfProfessionRequestDTO, TypeOfProfessionRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownTypeOfProfession(typeOfProfessionRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    KYCIdProofResponseDTO getKYCIdProofResponseDTO = new Gson().fromJson(tableJson, KYCIdProofResponseDTO.class);
                                                    if (getKYCIdProofResponseDTO != null && getKYCIdProofResponseDTO.getGetKYCDropDownIDProofTable().size() > 0) {
                                                        List<GetKYCDropDownIDProofTable> getKYCDropDownIDProofTables = new ArrayList<>();

                                                        for (GetKYCDropDownIDProofTable getGetKYCDropDownIDProofTableTablesList : getKYCIdProofResponseDTO.getGetKYCDropDownIDProofTable()) {
                                                            getKYCDropDownIDProofTables.add(getGetKYCDropDownIDProofTableTablesList);
                                                        }

                                                        // TODO: Delete And Insert Knowledge Bank Table
                                                        dynamicUIDao.deleteAndInsertKYCIdProofTable(getKYCDropDownIDProofTables);

//
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("getLeadDropDownProductNameFromServer", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("getLeadDropDownProductNameFromServer", response.message(), "", "", TAG, "", "", "");
                                    }

                                    // TODO: Final result
                                    List<GetKYCDropDownIDProofTable> getGetKYCDropDownIDProofTablelList = dynamicUIDao.getGetKYCDropDownIDProofTableFromLocalDB();
                                    data.postValue(getGetKYCDropDownIDProofTablelList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetKYCDropDownIDProofTable> getGetKYCDropDownIDProofTablelList = dynamicUIDao.getGetKYCDropDownIDProofTableFromLocalDB();
                                    data.postValue(getGetKYCDropDownIDProofTablelList);

                                    insertLog("getLeadDropDownProductNameFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetKYCDropDownIDProofTable> getGetKYCDropDownIDProofTablelList = dynamicUIDao.getGetKYCDropDownIDProofTableFromLocalDB();
                    data.postValue(getGetKYCDropDownIDProofTablelList);

                });
            }

        });
        return data;
    }

    public LiveData<List<GetAddressAddressProofTable>> getAddressAddressProof(String type, String clientId, String moduleType) {
        final MutableLiveData<List<GetAddressAddressProofTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                List<RawDataTable> applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC,
                        clientId, moduleType, loanType);
                final TypeOfProfessionRequestDTO typeOfProfessionRequestDTO = new TypeOfProfessionRequestDTO();
                typeOfProfessionRequestDTO.setIMEINumber(appHelper.getIMEI());
                typeOfProfessionRequestDTO.setProjectName(loanType);
                TypeOfProfessionRequestDTO.SpNameWithParameterClass spNameWithParameter = new TypeOfProfessionRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_TYPE_OF_PROFESSION);
                TypeOfProfessionRequestDTO.SpParametersClass spParametersClass = new TypeOfProfessionRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);

                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setCustomerType(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setTypeOfProfession(value);
                                }
                            }
                        }
                    }
                } else {
                    if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setCustomerType(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    spParametersClass.setTypeOfProfession(value);
                                }
                            }
                        }
                    }
                }

                ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<TypeOfProfessionRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                typeOfProfessionRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(typeOfProfessionRequestDTO, TypeOfProfessionRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLeadDropDownTypeOfProfession(typeOfProfessionRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    KYCAddressProofResponseDTO getKYCAddressProofResponseDTO = new Gson().fromJson(tableJson, KYCAddressProofResponseDTO.class);
                                                    if (getKYCAddressProofResponseDTO != null && getKYCAddressProofResponseDTO.getGetAddressAddressProofTable().size() > 0) {
                                                        List<GetAddressAddressProofTable> getKYCAddressProofResponseTables = new ArrayList<>();

                                                        for (GetAddressAddressProofTable getGetAddressAddressProofTableList : getKYCAddressProofResponseDTO.getGetAddressAddressProofTable()) {
                                                            getKYCAddressProofResponseTables.add(getGetAddressAddressProofTableList);
                                                        }
                                                        dynamicUIDao.deleteAddressAddressProofTable(getKYCAddressProofResponseTables);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                        }
                                    } else {
                                    }
                                    // TODO: Final result
                                    List<GetAddressAddressProofTable> getGetAddressAddressProofTableList = dynamicUIDao.getGetAddressAddressProofTableFromLocalDB();
                                    data.postValue(getGetAddressAddressProofTableList);

                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    List<GetAddressAddressProofTable> getGetAddressAddressProofTableList = dynamicUIDao.getGetAddressAddressProofTableFromLocalDB();
                                    data.postValue(getGetAddressAddressProofTableList);
                                    insertLog("getLeadDropDownProductNameFromServer", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                    List<GetAddressAddressProofTable> getGetAddressAddressProofTableList = dynamicUIDao.getGetAddressAddressProofTableFromLocalDB();
                    data.postValue(getGetAddressAddressProofTableList);

                });
            }
        });
        return data;
    }

    public LiveData<GetMakeResponseDTO> getMakeServiceData(String month, String year, String clientId) {
        final MutableLiveData<GetMakeResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final GetMakeRequestDTO makeRequestDTO = new GetMakeRequestDTO();
                makeRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                makeRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                makeRequestDTO.setCreatedBy(loanType);
                makeRequestDTO.setCreatedByProject(loanType);
                makeRequestDTO.setClientID(clientId);
                GetMakeRequestDTO.RequestString requestStringClass = new GetMakeRequestDTO.RequestString();
                requestStringClass.setAccess_token("");
                requestStringClass.setMonth(month);
                requestStringClass.setYear(year);
                makeRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(makeRequestDTO, GetMakeRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getMakeServiceData(makeRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<GetMakeResponseDTO>() {
                            @Override
                            public void onResponse(Call<GetMakeResponseDTO> call, Response<GetMakeResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        GetMakeResponseDTO getMakeResponseDTO = response.body();
                                        data.postValue(getMakeResponseDTO);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new GetMakeResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<GetMakeResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new GetMakeResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new GetMakeResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<GetModelResponseDTO> getModelServiceData(String make, String month, String year, String clientId) {
        final MutableLiveData<GetModelResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final GetModelRequest modelRequestDTO = new GetModelRequest();
                modelRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                modelRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                modelRequestDTO.setClientID(clientId);
                GetModelRequest.RequestString requestStringClass = new GetModelRequest.RequestString();
                requestStringClass.setAccess_token("");
                requestStringClass.setMonth(month);
                requestStringClass.setYear(year);
                requestStringClass.setMake(make);
                modelRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(modelRequestDTO, GetModelRequest.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getModelServiceData(modelRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<GetModelResponseDTO>() {
                            @Override
                            public void onResponse(Call<GetModelResponseDTO> call, Response<GetModelResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        GetModelResponseDTO getModelResponseDTO = response.body();
                                        data.postValue(getModelResponseDTO);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new GetModelResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<GetModelResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new GetModelResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new GetModelResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<GETVariantResponseDTO> getVariantServiceData(String make, String model, String month, String year, String clientId) {
        final MutableLiveData<GETVariantResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final GetVariantRequestDTO variantRequestDTO = new GetVariantRequestDTO();
                variantRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                variantRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                variantRequestDTO.setClientID(clientId);
                GetVariantRequestDTO.RequestString requestStringClass = new GetVariantRequestDTO.RequestString();
                requestStringClass.setAccess_token("");
                requestStringClass.setMonth(month);
                requestStringClass.setYear(year);
                requestStringClass.setMake(make);
                requestStringClass.setModel(model);
                variantRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(variantRequestDTO, GetVariantRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getVariantServiceData(variantRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<GETVariantResponseDTO>() {
                            @Override
                            public void onResponse(Call<GETVariantResponseDTO> call, Response<GETVariantResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        GETVariantResponseDTO getVariantResponseDTO = response.body();
                                        data.postValue(getVariantResponseDTO);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new GETVariantResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<GETVariantResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new GETVariantResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new GETVariantResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<GetColorResponseDTO> getColorServiceData(String clientId) {
        final MutableLiveData<GetColorResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {
                final GETColorRequestDTO colorRequestDTO = new GETColorRequestDTO();
                colorRequestDTO.setCreatedDate(appHelper.getCurrentDateTime(DATE_FORMAT_YYYY_MM_DD_T_HH_MM_SS));
                colorRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                colorRequestDTO.setClientID(clientId);
                GETColorRequestDTO.RequestString requestStringClass = new GETColorRequestDTO.RequestString();
                requestStringClass.setAccess_token("");
                colorRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(colorRequestDTO, GETColorRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getColorServiceData(colorRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<GetColorResponseDTO>() {
                            @Override
                            public void onResponse(Call<GetColorResponseDTO> call, Response<GetColorResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        GetColorResponseDTO getColorResponseDTO = response.body();
                                        data.postValue(getColorResponseDTO);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new GetColorResponseDTO());
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<GetColorResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new GetColorResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new GetColorResponseDTO());
                insertLog("getBearerToken", ex.getMessage(), "", "", TAG, "", "", "");
            });
        }
        return data;
    }

    public LiveData<RampResponseDTO> getRampServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<RampResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RAMP_HUNTER);
            executor.execute(() -> {
                final RampRequestDTO rampRequestDTO = new RampRequestDTO();
                rampRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                rampRequestDTO.setUniqueld(String.valueOf(System.currentTimeMillis()));
                rampRequestDTO.setClientID(clientId);
                rampRequestDTO.setServiceType("RAMP");
                rampRequestDTO.setKYCld("");
                rampRequestDTO.setCreateBy("EL");
                rampRequestDTO.setModuleType(moduleType);
                rampRequestDTO.setCoapplicantId(moduleType);
                rampRequestDTO.setCreatedByProject("EL");
                rampRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                rampRequestDTO.setExternalCustomerld("");
                RampRequestDTO.RequestString requestStringClass = new RampRequestDTO.RequestString();
                RampRequestDTO.RequestString.RampRequest rampRequest = new RampRequestDTO.RequestString.RampRequest();
                rampRequest.setModuleType(moduleType);
                rampRequest.setApplicationId(clientId);
                RampRequestDTO.RequestString.RampRequest.RequestVOList requestVOList = new RampRequestDTO.RequestString.RampRequest.RequestVOList();

                //////////////////////////////////////////////////////////
                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, moduleType, loanType);

                } else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, moduleType, loanType);

                }
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    rampRequestDTO.setKYCld(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setName(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_PAN)) {
                                String value = hashMap.get(TAG_NAME_PAN).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setDocNumber(value);
                                    requestVOList.setPan(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setDob(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_COUNTRY_NAME)) {
                                String value = hashMap.get(TAG_NAME_COUNTRY_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setCountry(value);
                                }
                            }
                        }
                    }
                }
                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
                                String value = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setState(value);
                                }
                            }
                        }
                    }
                }
                requestVOList.setType("");
                requestVOList.setTin("");
                requestVOList.setSsn("");
                requestVOList.setRationCardNo("");
                requestVOList.setPhone("");
                requestVOList.setNationality("INDIAN");
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setEmail(value);
                                    // TODO: if first name is empty then set value otherwise values already setted
                                }
                            }
                        }
                    }
                }

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_VOTERID)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_VOTERID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setVoterId(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setPincode(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_DRIVINGLICENSE)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_DRIVINGLICENSE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setDrivingLicence(value);
                                    Log.d(TAG, "get the driving license............." + requestVOList.drivingLicence);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String value = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setCity(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_AADHAAR)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_AADHAAR).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setAadhar(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_PASSPORT)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_PASSPORT).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setPassport(value);
                                }
                            }
                        }
                    }
                }

                requestVOList.setDin("");
                requestVOList.setDigitalID("");
                requestVOList.setCustomerType("");
                requestVOList.setCustomerId("");
                requestVOList.setCin("");
                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            String addressline1="",addressline2="",addressline3="";
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1 = value;
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2 = value;
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline3 = value;
                                }
                            }
                            requestVOList.setAddress(addressline1 + " " + addressline2 + " " + addressline3);
                        }
                    }
                }

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_AADHAAR)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_AADHAAR).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestVOList.setAadhar(value);
                                }
                            }
                        }
                    }
                }

                requestVOList.setP7("");
                requestVOList.setP8("");
                requestVOList.setP9("");
                requestVOList.setP10("");
                requestVOList.setP11("");

                ArrayList<RampRequestDTO.RequestString.RampRequest.RequestVOList> requestVOLists = new ArrayList<RampRequestDTO.RequestString.RampRequest.RequestVOList>();
                requestVOLists.add(requestVOList);
                rampRequest.setRequestVOList(requestVOLists);
                requestStringClass.setRampRequest(rampRequest);
                rampRequestDTO.setRequestString(requestStringClass);

                String baseString = new Gson().toJson(rampRequestDTO, RampRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getRampServiceData(rampRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<RampResponseDTO>() {
                            @Override
                            public void onResponse(Call<RampResponseDTO> call, Response<RampResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        RampResponseDTO rampResponseDTO = response.body();
                                        rampResponseDTO.setModuleType(moduleType);
                                        data.postValue(rampResponseDTO);

                                        String rampDataResponse = new Gson().toJson(rampResponseDTO, RampResponseDTO.class);
                                        String rampData = rampDataResponse.replace("|","");
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_RAMP,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(rampData, SCREEN_NO_RAMP, SCREEN_NAME_RAMP, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_RAMP, rawDataTableFromDB.getId(), rampData);
                                        }
                                        if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                                            dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_RAMP,MODULE_TYPE_APPLICANT);
                                        }
                                        postSubmittedAllScreensLiveData(rampData, SCREEN_NO_RAMP,"", userId,SCREEN_NAME_RAMP,moduleType);
                                        //dynamicUIDao.updateRawDataForSync(SCREEN_NO_RAMP);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new RampResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<RampResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new RampResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new RampResponseDTO());
            });
        }
        return data;
    }

//    public LiveData<HunterResponseDTO> getHunterServiceData(String userId, String clientId, String loanType, String moduleType) {
//        final MutableLiveData<HunterResponseDTO> data = new MutableLiveData<>();
//        try {
//            DynamicUIWebService.changeApiBaseUrl(RAMP_HUNTER);
//            executor.execute(() -> {
//                final HunterRequestDTO hunterRequestDTO = new HunterRequestDTO();
//                hunterRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
//                hunterRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
//                hunterRequestDTO.setClientID(clientId);
//                List<RawDataTable> applicantRawDataTableList = null;
//                List<RawDataTable> personalDetailRawDataTableList = null;
//                List<RawDataTable> addressDetailRawDataTableList = null;
//                List<RawDataTable> bankDetaiRawDataTableList = null;
//
//                List<RawDataTable> coapplicantRawDataTableList = null;
//                List<RawDataTable> coApplicantsocioEcnomicDetailsRawDataTableList = null;
//                List<RawDataTable> coApplicantaddressDetailRawDataTableList = null;
//                List<RawDataTable> coApplicantOneaddressDetailSize = null;
//                List<RawDataTable> coApplicantTwoaddressDetailSize = null;
//                List<RawDataTable> loanProposalDetailsRawDataTableList = null;
//
//                List<RawDataTable> businessProfileList = null;
//                List<RawDataTable> salaryProfileList = null;
//                List<RawDataTable> businessProofList = null;
//                List<RawDataTable> salaryProofList = null;
//
//                /* if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {*/
//                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
//                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
//                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
//                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
//                businessProfileList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_PROFILE, clientId, MODULE_TYPE_APPLICANT, loanType);
//                salaryProfileList=dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SALARY_PROFILE, clientId, MODULE_TYPE_APPLICANT, loanType);
//                businessProofList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_ADDRESS_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);
//                salaryProofList=dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_OFFICE_ADDRESS_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);
//
//                //socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, moduleType, loanType);
//
//               /* } else {
//                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
//                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, moduleType, loanType);
//                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, moduleType, loanType);
//                    bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS, clientId, moduleType, loanType);
//                    socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, moduleType, loanType);
//                }*/
//                coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, "CoApplicant1", loanType);
//                coApplicantsocioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, "CoApplicant1", loanType);
//                coApplicantaddressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant1", loanType);
//                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
//                coApplicantOneaddressDetailSize = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant1", loanType);
//
//                coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, "CoApplicant2", loanType);
//                coApplicantsocioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, "CoApplicant2", loanType);
//                coApplicantaddressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant2", loanType);
//                coApplicantTwoaddressDetailSize= dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant2", loanType);
//
//                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//
//                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_AADHAAR)) {
//                                String value = hashMap.get(TAG_NAME_KYC_TYPE_AADHAAR).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    hunterRequestDTO.setAADHAR(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
//                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    hunterRequestDTO.setKYCId(value);
//                                }
//                            }
//                        }
//                    }
//                }
//                hunterRequestDTO.setExternalCustomerId(clientId);
//                hunterRequestDTO.setCreatedByProject("EL");
//                hunterRequestDTO.setCreatedBy("EL");
//                HunterRequestDTO.RequestString requestStringClass = new HunterRequestDTO.RequestString();
//                HunterRequestDTO.RequestString.HunterVerificationRetail hunterVerificationRetail = new HunterRequestDTO.RequestString.HunterVerificationRetail();
//                hunterVerificationRetail.setTerm("0");
//                hunterVerificationRetail.setSubmissionNotificationRqd("");
//                hunterVerificationRetail.setProduct("PL_I_ST");
//                hunterVerificationRetail.setOriginator("");
//                hunterVerificationRetail.setIdentifier("");
//                hunterVerificationRetail.setDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
//                hunterVerificationRetail.setCount("");
//                hunterVerificationRetail.setClassification("");
//                hunterVerificationRetail.setAssOrigVal("0");
//                if (loanProposalDetailsRawDataTableList != null && loanProposalDetailsRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : loanProposalDetailsRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
//                                String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    hunterVerificationRetail.setAppVal(value);
//                                }
//                            }
//                        }
//                    }
//                }
//
//                hunterVerificationRetail.setAppDte(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
//                hunterVerificationRetail.setModuleType(MODULE_TYPE_APPLICANT);
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item item = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item();
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant mainApplicant = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant();
//
//                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//
//                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
//                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    mainApplicant.setMobile(value);
//                                }
//                            }
//                        }
//                    }
//                }
//                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
//                    boolean idProof = false;
//                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            String kycType = "";
//                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
//                                kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
//                                if(kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)){
//                                    idProof = true;
//                                }
//                            }
//                            if(kycType.equalsIgnoreCase(TAG_NAME_KYC_TYPE_AADHAAR)){
//                                if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
//                                    String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        mainApplicant.setLastName(value);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
//                                    String firstName = hashMap.get(TAG_NAME_FIRST_NAME).toString();
//                                    if (!TextUtils.isEmpty(firstName)) {
//                                        mainApplicant.setFirstName(firstName);
//                                    }
//                                }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
//                                    mainApplicant.setFirstName(hashMap.get(TAG_NAME_FULL_NAME).toString());
//                                }
//                                if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
//                                    String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        mainApplicant.setDateOfBirth(value);
//                                    }
//                                }
//                            }
//                            else if(idProof == false){
//                                if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
//                                    String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        mainApplicant.setLastName(value);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
//                                    String firstName = hashMap.get(TAG_NAME_FIRST_NAME).toString();
//                                    if (!TextUtils.isEmpty(firstName)) {
//                                        mainApplicant.setFirstName(firstName);
//                                    }
//                                }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
//                                    mainApplicant.setFirstName(hashMap.get(TAG_NAME_FULL_NAME).toString());
//                                }
//                                if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
//                                    String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        mainApplicant.setDateOfBirth(value);
//                                    }
//                                }else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
//                                    String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        mainApplicant.setDateOfBirth(value);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//                mainApplicant.setBusinessTelephone("");
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.IdDocument idDocument = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.IdDocument();
//
//                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            String kycType="";
//                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
//                                kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
//                            }
//                            if(kycType.equalsIgnoreCase(TAG_NAME_KYC_TYPE_AADHAAR)){
//                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
//                                    String value = hashMap.get(TAG_NAME_KYC_ID).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        idDocument.setDocNumber(value);
//                                        idDocument.setRecDocCode(TAG_NAME_KYC_TYPE_AADHAAR);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.ResidentialAddress residentialAddress = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.ResidentialAddress();
//
//                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            String addressline1 = "", addressline2 = "", addressline3 = "";
//                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
//                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline1=value;
//                                    // inquiryAddress.setAddressLine(value);
//                                }
//                            }
//                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
//                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline2 = value;
//                                }
//                            }
//                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
//                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline2 = value;
//                                }
//                            }
//                            residentialAddress.setAddress(addressline1 + " " + addressline2 + " " + addressline3);
//
//                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
//                                String value = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    residentialAddress.setCity(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
//                                String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    residentialAddress.setPincode(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
//                                String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    residentialAddress.setState(value);
//                                }
//                            }
//                        }
//                    }
//                }
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.BankAccount bankAccount = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.BankAccount();
//                if (bankDetaiRawDataTableList != null && bankDetaiRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : bankDetaiRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
//                                String value = hashMap.get(TAG_NAME_BANK_NAME).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    bankAccount.setBankName(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
//                                String value = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    bankAccount.setAccountInteger(value);
//                                }
//                            }
//                        }
//                    }
//                }
//
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Email email = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Email();
//                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
//                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
//                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    email.setEmailAddress(value);
//                                }
//                            }
//                        }
//                    }
//                }
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer employer = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer();
//
//                if (salaryProfileList != null && salaryProfileList.size() > 0) {
//                    for (RawDataTable rawDataTable : salaryProfileList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_EMPLOYER_NAME)) {
//                                String value = hashMap.get(TAG_NAME_EMPLOYER_NAME).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employer.setOrgName(value);
//                                }
//                            }
//                        }
//                    }
//                }
//                if (businessProfileList != null && businessProfileList.size() > 0) {
//                    for (RawDataTable rawDataTable : businessProfileList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            if (hashMap.containsKey(TAG_NAME_ENTERPRISE_NAME)) {
//                                String value = hashMap.get(TAG_NAME_ENTERPRISE_NAME).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employer.setOrgName(value);
//                                }
//                            }
//                        }
//                    }
//                }
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer.EmployerAddress employerAddress = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer.EmployerAddress();
//                if (salaryProofList != null && salaryProofList.size() > 0) {
//                    for (RawDataTable rawDataTable : salaryProofList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            String addressline1 = "", addressline2 = "", addressline3 = "";
//                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
//                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline1 = value;
//                                }
//                            }
//                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
//                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline2 = value;
//                                }
//                            }
//                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
//                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline3 = value;
//                                }
//                            }
//                            employerAddress.setAddress(addressline1 + " " + addressline2 + " " + addressline3);
//                            if (hashMap.containsKey(TAG_NAME_CITY)) {
//                                String value = hashMap.get(TAG_NAME_CITY).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employerAddress.setCity(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
//                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employerAddress.setPincode(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_STATE)) {
//                                String value = hashMap.get(TAG_NAME_STATE).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employerAddress.setState(value);
//                                }
//                            }
//
//                        }
//                    }
//                }
//                if (businessProofList != null && businessProofList.size() > 0) {
//                    for (RawDataTable rawDataTable : businessProofList) {
//                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                        if (hashMap != null && hashMap.size() > 0) {
//                            String addressline1 = "", addressline2 = "";
//                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
//                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline1  = value;
//                                }
//                            }
//                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
//                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    addressline2 = value;
//                                }
//                            }
//                            employerAddress.setAddress(addressline1+" "+addressline2);
//                            if (hashMap.containsKey(TAG_NAME_CITY)) {
//                                String value = hashMap.get(TAG_NAME_CITY).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employerAddress.setCity(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
//                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employerAddress.setPincode(value);
//                                }
//                            }
//
//                            if (hashMap.containsKey(TAG_NAME_STATE)) {
//                                String value = hashMap.get(TAG_NAME_STATE).toString();
//                                if (!TextUtils.isEmpty(value)) {
//                                    employerAddress.setState(value);
//                                }
//                            }
//                        }
//                    }
//                }
//
//                employer.setEmployerAddress(employerAddress);
//                mainApplicant.setIdDocument(idDocument);
//                mainApplicant.setResidentialAddress(residentialAddress);
//                mainApplicant.setBankAccount(bankAccount);
//                mainApplicant.setEmail(email);
//                mainApplicant.setEmployer(employer);
//                item.setMainApplicant(mainApplicant);
//
//                ArrayList<String> coApplicantList = new ArrayList<>();
//                if (coApplicantTwoaddressDetailSize != null && coApplicantTwoaddressDetailSize.size() > 0){
//                    coApplicantList.add("CoApplicant1");
//                    coApplicantList.add("CoApplicant2");
//                }else if (coApplicantOneaddressDetailSize != null && coApplicantOneaddressDetailSize.size() > 0){
//                    coApplicantList.add("CoApplicant1");
//                }
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant jointApplicant =null;
//                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant.ResidentialAddress residentialAddress1 = null;
//                ArrayList<HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant> jointApplicantslist = new ArrayList<HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant>();
//
//                for (int i = 0; i < coApplicantList.size(); i++) {
//                    coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, coApplicantList.get(i), loanType);
//                    coApplicantsocioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, coApplicantList.get(i), loanType);
//                    coApplicantaddressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, coApplicantList.get(i), loanType);
//                    jointApplicant = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant();
//                    residentialAddress1 = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant.ResidentialAddress();
//                    jointApplicant.setNationality("INDIA");
//                    jointApplicant.setModuleType(coApplicantList.get(i));
//                    jointApplicant.setIncome("0");
//
//                    if (coapplicantRawDataTableList != null && coapplicantRawDataTableList.size() > 0) {
//                        for (RawDataTable rawDataTable : coapplicantRawDataTableList) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                            if (hashMap != null && hashMap.size() > 0) {
//
//                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
//                                    String value = hashMap.get(TAG_NAME_KYC_ID).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        // TODO: check pan card,passport,driving license,voter id , aadhaar, ration card no
//                                        if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
//                                            String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
//                                            if (!TextUtils.isEmpty(kycType)) {
//                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
//                                                    jointApplicant.setPan(value);
//                                                }
//                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_DRIVING_LICENSE)) {
//                                                    jointApplicant.setDLNo(value);
//                                                }
//                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)) {
//                                                    jointApplicant.setVoterId(value);
//                                                }
//                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)) {
//                                                    jointApplicant.setUId(value);
//                                                }
//                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PASSPORT)) {
//                                                    jointApplicant.setPassport_Number(value);
//                                                }
//                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)) {
//                                                    jointApplicant.setRationCard_Number(value);
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
//
//                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
//                                    String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        jointApplicant.setFirstName(value);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
//                                    String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        jointApplicant.setFirstName(value);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                    if (coApplicantaddressDetailRawDataTableList != null && coApplicantaddressDetailRawDataTableList.size() > 0) {
//                        for (RawDataTable rawDataTable : coApplicantaddressDetailRawDataTableList) {
//                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
//                            if (hashMap != null && hashMap.size() > 0) {
//                                if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE)) {
//                                    String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        residentialAddress1.setAddress(value);
//                                    }
//                                }
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_CITY)) {
//                                    String value = hashMap.get(TAG_NAME_PERMANENT_CITY).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        residentialAddress1.setCity(value);
//                                    }
//                                }
//
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
//                                    String value = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        residentialAddress1.setPincode(value);
//                                        residentialAddress1.setCountry("INDIA");
//                                    }
//                                }
//
//                                if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
//                                    String value = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
//                                    if (!TextUtils.isEmpty(value)) {
//                                        residentialAddress1.setState(value);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                    jointApplicant.setResidentialAddress(residentialAddress1);
//                    jointApplicantslist.add(jointApplicant);
//
//                }
//                item.setJointApplicant(jointApplicantslist);
//                hunterVerificationRetail.setItem(item);
//                requestStringClass.setHunterVerificationRetail(hunterVerificationRetail);
//                hunterRequestDTO.setRequestString(requestStringClass);
//                String baseString = new Gson().toJson(hunterRequestDTO, HunterRequestDTO.class).replace("\\u003d", "=");
//                String k1 = SHA256Encrypt.sha256(baseString);
//                DynamicUIWebService.createService(DynamicUIWebservice.class).getHunterServiceData(hunterRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
//                        enqueue(new Callback<HunterResponseDTO>() {
//                            @Override
//                            public void onResponse(Call<HunterResponseDTO> call, Response<HunterResponseDTO> response) {
//                                executor.execute(() -> {
//                                    if (response.isSuccessful()) {
//                                        HunterResponseDTO hunterResponseDTO = response.body();
//                                        data.postValue(hunterResponseDTO);
//
//                                        String hunterDataResponse = new Gson().toJson(hunterResponseDTO, HunterResponseDTO.class);
//                                        String hunterData = hunterDataResponse.replace("|","");
//                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_HUNTER,
//                                                clientId, moduleType);
//                                        if (rawDataTableFromDB == null) {
//                                            // TODO: Insert Raw Data Table
//                                            RawDataTable rawDataTable = new RawDataTable(hunterData, SCREEN_NO_HUNTER, SCREEN_NAME_HUNTER, "", clientId,
//                                                    loanType, userId, moduleType, "");
//                                            dynamicUIDao.insertRawData(rawDataTable);
//
//                                        } else {
//                                            // TODO: Update Raw Data Table
//                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_HUNTER, rawDataTableFromDB.getId(), hunterData);
//                                        }
//                                        dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_HUNTER,MODULE_TYPE_GENERATE_CIBIL);
//                                        postSubmittedAllScreensLiveData(hunterData, SCREEN_NO_HUNTER,"", userId,SCREEN_NAME_HUNTER, moduleType);
//                                        dynamicUIDao.updateRawDataForSync(SCREEN_NO_HUNTER);
//
//                                    } else {
//                                        // TODO: Failure Case
//                                        data.postValue(new HunterResponseDTO());
//                                    }
//                                });
//                            }
//
//                            @Override
//                            public void onFailure(Call<HunterResponseDTO> call, Throwable t) {
//                                Log.d(TAG, "onFailure ==> " + t.getMessage());
//                                executor.execute(() -> {
//                                    data.postValue(new HunterResponseDTO());
//                                });
//                            }
//                        });
//
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            executor.execute(() -> {
//                data.postValue(new HunterResponseDTO());
//            });
//        }
//        return data;
//    }

    public LiveData<HunterResponseDTO> getHunterServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<HunterResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RAMP_HUNTER);
            executor.execute(() -> {
                final HunterRequestDTO hunterRequestDTO = new HunterRequestDTO();
                hunterRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                hunterRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                hunterRequestDTO.setClientID(clientId);
                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;

                List<RawDataTable> coapplicantRawDataTableList = null;
                List<RawDataTable> coApplicantsocioEcnomicDetailsRawDataTableList = null;
                List<RawDataTable> coApplicantaddressDetailRawDataTableList = null;
                List<RawDataTable> coApplicantOneaddressDetailSize = null;
                List<RawDataTable> coApplicantTwoaddressDetailSize = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                List<RawDataTable> businessProfileList = null;
                List<RawDataTable> salaryProfileList = null;
                List<RawDataTable> businessProofList = null;
                List<RawDataTable> salaryProofList = null;

                /* if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {*/
                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
                businessProfileList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_PROFILE, clientId, MODULE_TYPE_BUSINESS, loanType);
                salaryProfileList=dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SALARY_PROFILE, clientId, MODULE_TYPE_SALARY, loanType);
                businessProofList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_ADDRESS_PROOF, clientId, MODULE_TYPE_BUSINESS, loanType);
                salaryProofList=dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_OFFICE_ADDRESS_PROOF, clientId, MODULE_TYPE_SALARY, loanType);

                //socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, moduleType, loanType);

               /* } else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, moduleType, loanType);
                    bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_BANK_DETAILS, clientId, moduleType, loanType);
                    socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, moduleType, loanType);
                }*/
                coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, "CoApplicant1", loanType);
                coApplicantsocioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, "CoApplicant1", loanType);
                coApplicantaddressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant1", loanType);
                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                coApplicantOneaddressDetailSize = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant1", loanType);

                coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, "CoApplicant2", loanType);
                coApplicantsocioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, "CoApplicant2", loanType);
                coApplicantaddressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant2", loanType);
                coApplicantTwoaddressDetailSize= dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant2", loanType);


                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_AADHAAR)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_AADHAAR).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    hunterRequestDTO.setAADHAR(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    hunterRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                hunterRequestDTO.setExternalCustomerId(clientId);
                hunterRequestDTO.setCreatedByProject("EL");
                hunterRequestDTO.setCreatedBy("EL");
                HunterRequestDTO.RequestString requestStringClass = new HunterRequestDTO.RequestString();
                HunterRequestDTO.RequestString.HunterVerificationRetail hunterVerificationRetail = new HunterRequestDTO.RequestString.HunterVerificationRetail();
                hunterVerificationRetail.setTerm("0");
                hunterVerificationRetail.setSubmissionNotificationRqd("");
                hunterVerificationRetail.setProduct("PL_I_ST");
                hunterVerificationRetail.setOriginator("");
                hunterVerificationRetail.setIdentifier("");
                hunterVerificationRetail.setDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                hunterVerificationRetail.setCount("");
                hunterVerificationRetail.setClassification("");
                hunterVerificationRetail.setAssOrigVal("0");
                if (loanProposalDetailsRawDataTableList != null && loanProposalDetailsRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : loanProposalDetailsRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    hunterVerificationRetail.setAppVal(value);
                                }
                            }
                        }
                    }
                }

                hunterVerificationRetail.setAppDte(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                hunterVerificationRetail.setModuleType(MODULE_TYPE_APPLICANT);
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item item = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item();
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant mainApplicant = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant();

                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainApplicant.setMobile(value);
                                }
                            }

                        }
                    }
                }
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    boolean idProof = false;
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String kycType="";
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                if(kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)){
                                    idProof = true;
                                }
                            }
                            if(kycType.equalsIgnoreCase(TAG_NAME_KYC_TYPE_AADHAAR)){
                                if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        mainApplicant.setLastName(value);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    String firstName = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                    if (!TextUtils.isEmpty(firstName)) {
                                        mainApplicant.setFirstName(firstName);
                                    }
                                }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    mainApplicant.setFirstName(hashMap.get(TAG_NAME_FULL_NAME).toString());
                                }
                                if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                    String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        mainApplicant.setDateOfBirth(value);
                                    }
                                }
                            }
                            else if(idProof == false){
                                if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        mainApplicant.setLastName(value);

                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    String firstName = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                    if (!TextUtils.isEmpty(firstName)) {
                                        mainApplicant.setFirstName(firstName);
                                    }
                                }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    mainApplicant.setFirstName(hashMap.get(TAG_NAME_FULL_NAME).toString());
                                }
                                if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                    String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        mainApplicant.setDateOfBirth(value);
                                    }
                                }else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                    String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        mainApplicant.setDateOfBirth(value);
                                    }
                                }
                            }
                        }
                    }
                }

                mainApplicant.setBusinessTelephone("");
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.IdDocument idDocument = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.IdDocument();

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String kycType="";
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                            }
                            if(kycType.equalsIgnoreCase(TAG_NAME_KYC_TYPE_AADHAAR)){
                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                    String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        idDocument.setDocNumber(value);
                                        idDocument.setRecDocCode(TAG_NAME_KYC_TYPE_AADHAAR);
                                    }
                                }
                            }
                        }
                    }
                }

                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.ResidentialAddress residentialAddress = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.ResidentialAddress();

                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1="",addressline2="",addressline3="";
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1=value;
                                    // inquiryAddress.setAddressLine(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2=value;
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2=value;
                                }
                            }
                            residentialAddress.setAddress(addressline1+" "+addressline2+" "+addressline3);

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    residentialAddress.setCity(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    residentialAddress.setPincode(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    residentialAddress.setState(value);
                                }
                            }
                        }
                    }
                }
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.BankAccount bankAccount = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.BankAccount();
                if (bankDetaiRawDataTableList != null && bankDetaiRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : bankDetaiRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
                                String value = hashMap.get(TAG_NAME_BANK_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setBankName(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
                                String value = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setAccountInteger(value);
                                }
                            }
                        }
                    }
                }

                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Email email = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Email();
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    email.setEmailAddress(value);
                                }
                            }
                        }
                    }
                }
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer employer = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer();

                if (salaryProfileList != null && salaryProfileList.size() > 0) {
                    for (RawDataTable rawDataTable : salaryProfileList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_EMPLOYER_NAME)) {
                                String value = hashMap.get(TAG_NAME_EMPLOYER_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employer.setOrgName(value);
                                }
                            }
                        }
                    }
                }
                if (businessProfileList != null && businessProfileList.size() > 0) {
                    for (RawDataTable rawDataTable : businessProfileList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_ENTERPRISE_NAME)) {
                                String value = hashMap.get(TAG_NAME_ENTERPRISE_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employer.setOrgName(value);
                                }
                            }
                        }
                    }
                }
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer.EmployerAddress employerAddress = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.MainApplicant.Employer.EmployerAddress();
                if (salaryProofList != null && salaryProofList.size() > 0) {
                    for (RawDataTable rawDataTable : salaryProofList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1 = "", addressline2 = "", addressline3 = "";
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1 = value;
                                    employerAddress.setAddress(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2 = value;
                                    employerAddress.setAddress(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_3)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline3 = value;
                                    employerAddress.setAddress(value);
                                }
                            }
                            employerAddress.setAddress(addressline1 + " " + addressline2 + " " + addressline3);
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String value = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setCity(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setPincode(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setState(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COUNTRY_NAME)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setCountry(value);
                                }
                            }
                        }
                    }
                }
                if (businessProofList != null && businessProofList.size() > 0) {
                    for (RawDataTable rawDataTable : businessProofList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1 = "", addressline2 = "";
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1 = value;
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2 = value;
                                }
                            }
                            employerAddress.setAddress(addressline1 + " " + addressline2);
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String value = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setCity(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setPincode(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    employerAddress.setState(value);
                                }
                            }
                        }
                    }
                }

                employer.setEmployerAddress(employerAddress);

                mainApplicant.setIdDocument(idDocument);
                mainApplicant.setResidentialAddress(residentialAddress);
                mainApplicant.setBankAccount(bankAccount);
                mainApplicant.setEmail(email);
                mainApplicant.setEmployer(employer);
                item.setMainApplicant(mainApplicant);

                ArrayList<String> coApplicantList = new ArrayList<>();
                if (coApplicantTwoaddressDetailSize != null && coApplicantTwoaddressDetailSize.size() > 0){
                    coApplicantList.add("CoApplicant1");
                    coApplicantList.add("CoApplicant2");
                }else if (coApplicantOneaddressDetailSize != null && coApplicantOneaddressDetailSize.size() > 0){
                    coApplicantList.add("CoApplicant1");
                }
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant jointApplicant = null;
                HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant.ResidentialAddress residentialAddress1 = null;
                ArrayList<HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant> jointApplicantslist = new ArrayList<HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant>();

                for (int i = 0; i < coApplicantList.size(); i++) {
                    coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, coApplicantList.get(i), loanType);
                    coApplicantsocioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, coApplicantList.get(i), loanType);
                    coApplicantaddressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, coApplicantList.get(i), loanType);
                    jointApplicant = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant();
                    residentialAddress1 = new HunterRequestDTO.RequestString.HunterVerificationRetail.Item.JointApplicant.ResidentialAddress();
                    jointApplicant.setNationality("INDIA");
                    jointApplicant.setModuleType(coApplicantList.get(i));
                    jointApplicant.setIncome("0");

                    if (coapplicantRawDataTableList != null && coapplicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : coapplicantRawDataTableList) {
                            HashMap<String, Object>hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {

                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                    String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        // TODO: check pan card,passport,driving license,voter id , aadhaar, ration card no
                                        if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                            String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                            if (!TextUtils.isEmpty(kycType)) {
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                                    jointApplicant.setPan(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_DRIVING_LICENSE)) {
                                                    jointApplicant.setDLNo(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)) {
                                                    jointApplicant.setVoterId(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)) {
                                                    jointApplicant.setUId(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PASSPORT)) {
                                                    jointApplicant.setPassport_Number(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)) {
                                                    jointApplicant.setRationCard_Number(value);
                                                }
                                            }
                                        }
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        jointApplicant.setFirstName(value);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        jointApplicant.setFirstName(value);
                                    }
                                }
                            }
                        }
                    }
                    if (coApplicantaddressDetailRawDataTableList != null && coApplicantaddressDetailRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : coApplicantaddressDetailRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE)) {
                                    String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setAddress(value);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_CITY)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_CITY).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setCity(value);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setPincode(value);
                                        residentialAddress1.setCountry("INDIA");
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_PERMANENT_STATE)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_STATE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setState(value);
                                    }
                                }
                            }
                        }
                    }
                    jointApplicant.setResidentialAddress(residentialAddress1);
                    jointApplicantslist.add(jointApplicant);
                }

                item.setJointApplicant(jointApplicantslist);
                hunterVerificationRetail.setItem(item);
                requestStringClass.setHunterVerificationRetail(hunterVerificationRetail);
                hunterRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(hunterRequestDTO, HunterRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getHunterServiceData(hunterRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<HunterResponseDTO>() {
                            @Override
                            public void onResponse(Call<HunterResponseDTO> call, Response<HunterResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        HunterResponseDTO hunterResponseDTO = response.body();
                                        data.postValue(hunterResponseDTO);

                                        String hunterDataResponse = new Gson().toJson(hunterResponseDTO, HunterResponseDTO.class);
                                        String hunterData =hunterDataResponse.replace("|","");
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_HUNTER,
                                                clientId, moduleType);
                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(hunterData, SCREEN_NO_HUNTER, SCREEN_NAME_HUNTER, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_HUNTER, rawDataTableFromDB.getId(), hunterData);
                                        }
                                        dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_HUNTER,MODULE_TYPE_GENERATE_CIBIL);
                                        postSubmittedAllScreensLiveData(hunterData, SCREEN_NO_HUNTER,"", userId,SCREEN_NAME_HUNTER,moduleType);
                                        //dynamicUIDao.updateRawDataForSync(SCREEN_NO_HUNTER);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new HunterResponseDTO());
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<HunterResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new HunterResponseDTO());
                                });
                            }
                        });
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new HunterResponseDTO());
            });
        }
        return data;
    }

    public LiveData<HunterResponseDTO> getHunterNonIndividualServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<HunterResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SENTINEL_SERVICE);
            executor.execute(() -> {
                final HunterNonIndividualRequestDTO hunterNonIndividualRequestDTO = new HunterNonIndividualRequestDTO();
                hunterNonIndividualRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                hunterNonIndividualRequestDTO.setCreatedBy(loanType);
                hunterNonIndividualRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                hunterNonIndividualRequestDTO.setClientID(clientId);
                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;

                List<RawDataTable> coapplicantRawDataTableList = null;
                List<RawDataTable> coApplicantsocioEcnomicDetailsRawDataTableList = null;
                List<RawDataTable> coApplicantaddressDetailRawDataTableList = null;
                List<RawDataTable> coApplicantOneaddressDetailSize = null;
                List<RawDataTable> coApplicantTwoaddressDetailSize = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                List<RawDataTable> businessProfileList = null;
                List<RawDataTable> salaryProfileList = null;
                List<RawDataTable> businessProofList = null;
                List<RawDataTable> salaryProofList = null;

                /* if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {*/
                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
                businessProfileList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_PROFILE, clientId, MODULE_TYPE_APPLICANT, loanType);
                salaryProfileList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SALARY_PROFILE, clientId, MODULE_TYPE_APPLICANT, loanType);
                businessProofList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_ADDRESS_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);
                salaryProofList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_OFFICE_ADDRESS_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);

                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                coApplicantOneaddressDetailSize = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant1", loanType);
                coApplicantTwoaddressDetailSize = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, "CoApplicant2", loanType);

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    hunterNonIndividualRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                hunterNonIndividualRequestDTO.setExternalCustomerId(clientId);
                HunterNonIndividualRequestDTO.RequestString requestStringClass = new HunterNonIndividualRequestDTO.RequestString();
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME hunterVerificationSME = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME();
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item item = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item();
                item.setTerm("0");
                item.setSubmissionNotificationRqd("1");
                item.setProduct("SB_NI_ST");
                item.setOriginator("");
                item.setIdentifier("");
                item.setCount("1");
                item.setClassification("ACCEPTED");
                item.setClntFlg("");
                item.setAssVal(0);
                item.setAssOrigVal("0");

                if (loanProposalDetailsRawDataTableList != null && loanProposalDetailsRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : loanProposalDetailsRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    item.setAppVal(value);
                                }
                            }
                        }
                    }
                }

                item.setAppDte(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                item.setDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                item.setModuleType(MODULE_TYPE_APPLICANT);
                item.setTelephoneExt("91");
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    item.setTelephoneNumber(value);
                                }
                            }
                        }
                    }
                }
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CompanyDetails companyDetails = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CompanyDetails();
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    companyDetails.setBusinessTelephone(value);
                                }
                            }
                        }
                    }
                }
                companyDetails.setEmpNumber("");
                companyDetails.setTurnOver("");
                companyDetails.setSalesTaxNo("");
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PAN)) {
                                String value = hashMap.get(TAG_NAME_PAN).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    companyDetails.setCregNo(value);
                                }
                            }
                        }
                    }
                }
                companyDetails.setDateOfIncor(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                companyDetails.setTanNo("");
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    companyDetails.setOrgName(value);
                                }
                            }
                        }
                    }
                }
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CompanyDetails.CompanyAddress companyAddress = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CompanyDetails.CompanyAddress();

                if (businessProofList != null && businessProofList.size() > 0) {
                    for (RawDataTable rawDataTable : businessProofList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1 = "", addressline2 = "";
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1 = value;
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2 = value;
                                }
                            }
                            companyAddress.setAddress(addressline1 + " " + addressline2);
                            if (hashMap.containsKey(TAG_NAME_CITY)) {
                                String value = hashMap.get(TAG_NAME_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    companyAddress.setCity(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    companyAddress.setPincode(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    companyAddress.setState(value);
                                }
                            }
                        }
                    }
                }

                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter mainPromoter = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter();
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setFirstName(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setFirstName(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_MIDDLE_NAME)) {
                                String value = hashMap.get(TAG_NAME_MIDDLE_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setMiddleName(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
                                String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setLastName(value);
                                }
                            }else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setLastName(value.substring(value.lastIndexOf(" ") + 1));
                                }
                            }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setLastName(value.substring(value.lastIndexOf(" ") + 1));
                                }
                            }
                        }
                        mainPromoter.setRecSexCode(2);
                        mainPromoter.setIncome("0");
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setDateOfBirth(value);
                                }
                            }else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    mainPromoter.setDateOfBirth(value);
                                }
                            }
                        }
                    }
                }
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.Email email = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.Email();
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    email.setEmailAddress(value);
                                }
                            }
                        }
                    }
                }
                email.setCoAddress("");
                email.setDomainName("");
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.IdDocument idDocument = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.IdDocument();
                idDocument.setAcknowNo("");
                idDocument.setCompanyTan("");
                idDocument.setFatherHusbandName("");
                idDocument.setEReciptNo("");
                idDocument.setCountryOfIssue("");
                idDocument.setPlaceOfIssue("");
                idDocument.setDocAc("");
                idDocument.setDocNumber("");
                idDocument.setRecDocCode(32);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    // TODO: check pan card,passport,driving license,voter id , aadhaar, ration card no
                                    if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                        String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                        if (!TextUtils.isEmpty(kycType)) {
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_AADHAAR)) {
                                                idDocument.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                                idDocument.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_DRIVING_LICENSE)) {
                                                idDocument.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)) {
                                                idDocument.setDocNumber(value);
                                            }
                                            if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)) {
                                                idDocument.setDocNumber(value);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.ResidentialAddress residentialAddress = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.ResidentialAddress();
                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1 = "", addressline2 = "",addressline3="";
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1 = value;
                                    // inquiryAddress.setAddressLine(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2 = value;
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_3).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline3 = value;
                                }
                            }
                            residentialAddress.setAddress(addressline1 + " " + addressline2+" "+addressline3);

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_CITY)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_CITY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    residentialAddress.setCity(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    residentialAddress.setPincode(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    residentialAddress.setState(value);
                                }
                            }
                        }
                    }
                }
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.BankAccount bankAccount = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.MainPromoter.BankAccount();
                if (bankDetaiRawDataTableList != null && bankDetaiRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : bankDetaiRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BANK_NAME)) {
                                String value = hashMap.get(TAG_NAME_BANK_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setBankName(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
                                String value = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setAccountNumber(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_BRANCH_NAME)) {
                                String value = hashMap.get(TAG_NAME_BRANCH_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setBranch(value);
                                }
                            }
                        }
                    }
                }

                ArrayList<String> coApplicantList = new ArrayList<>();
                if (coApplicantTwoaddressDetailSize != null && coApplicantTwoaddressDetailSize.size() > 0) {
                    coApplicantList.add("CoApplicant1");
                    coApplicantList.add("CoApplicant2");
                } else if (coApplicantOneaddressDetailSize != null && coApplicantOneaddressDetailSize.size() > 0) {
                    coApplicantList.add("CoApplicant1");
                }
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter coPromoter = null;
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter.CoPromoterIDDocument coPromoterIDDocument = null;
                HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter.ResidentialAddress residentialAddress1 = null;
                ArrayList<HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter> coPromoterList = new ArrayList<HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter>();

                for (int i = 0; i < coApplicantList.size(); i++) {
                    coPromoter = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter();
                    coapplicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, coApplicantList.get(i), loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId,  coApplicantList.get(i), loanType);

                    if (coapplicantRawDataTableList != null && coapplicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : coapplicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setFirstName(value);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setFirstName(value);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_MIDDLE_NAME)) {
                                    String value = hashMap.get(TAG_NAME_MIDDLE_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setLastName(value);
                                    }
                                }else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setLastName(value.substring(value.lastIndexOf(" ") + 1));
                                    }
                                }else if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setLastName(value.substring(value.lastIndexOf(" ") + 1));
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                    String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setDateOfBirth(value);
                                    }
                                }else if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                    String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        coPromoter.setDateOfBirth(value);
                                    }
                                }
                            }
                        }
                    }
                    coPromoter.setNationality("INDIAN");
                    coPromoter.setIncome("0");
                    coPromoter.setModuleType(coApplicantList.get(i));
                    coPromoterIDDocument = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter.CoPromoterIDDocument();
                    coPromoterIDDocument.setRecDocCode(32);
                    coPromoterIDDocument.setAcknowNo("");
                    coPromoterIDDocument.setCompanyTan("");
                    coPromoterIDDocument.setDocNumber("12345");
                    if (coapplicantRawDataTableList != null && coapplicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : coapplicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                    String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        // TODO: check pan card,passport,driving license,voter id , aadhaar, ration card no
                                        if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                            String kycType = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                            if (!TextUtils.isEmpty(kycType)) {
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PAN_CARD)) {
                                                    coPromoterIDDocument.setDocNumber(value);
                                                    coPromoterIDDocument.setDocAc(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_DRIVING_LICENSE)) {
                                                    coPromoterIDDocument.setDocNumber(value);
                                                    coPromoterIDDocument.setDocAc(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_VOTER_ID)) {
                                                    coPromoterIDDocument.setDocNumber(value);
                                                    coPromoterIDDocument.setDocAc(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_RATION_CARD)) {
                                                    coPromoterIDDocument.setDocNumber(value);
                                                    coPromoterIDDocument.setDocAc(value);
                                                }
                                                if (kycType.equalsIgnoreCase(SPINNER_ITEM_FIELD_NAME_PASSPORT)) {
                                                    coPromoterIDDocument.setDocNumber(value);
                                                    coPromoterIDDocument.setDocAc(value);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    coPromoterIDDocument.setCountryOfIssue("");
                    coPromoterIDDocument.setEReciptNo("");
                    coPromoterIDDocument.setFatherHusbandName("");
                    coPromoterIDDocument.setPlaceOfIssue("");
                    coPromoterIDDocument.setDocNumber("123456");

                    residentialAddress1 = new HunterNonIndividualRequestDTO.RequestString.HunterVerificationSME.Item.CoPromoter.ResidentialAddress();
                    residentialAddress1.setCompanyTan("");
                    residentialAddress1.setAcknowNo("");
                    residentialAddress1.setFatherHusbandName("");
                    residentialAddress1.setEReciptNo("");
//                    residentialAddress1.setDocNumber("");
                    residentialAddress1.setCountryOfIssue("");
                    residentialAddress1.setPlaceOfIssue("");

                    if (coapplicantRawDataTableList != null && coapplicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : coapplicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_PAN)) {
                                    String value = hashMap.get(TAG_NAME_PAN).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setDocAc(value);
//                                        residentialAddress1.setDocNumber(value);
                                    }
                                }
                            }
                        }
                    }
                    residentialAddress1.setRecDocCode("32");
                    residentialAddress1.setTimeAtAddress("0");

                    if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                String addressline1 = "", addressline2 = "";
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_1)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_1).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        addressline1 = value;
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_2)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_2).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        addressline2 = value;
                                    }
                                }
                                residentialAddress1.setAddress(addressline1 + " " + addressline2);

                                if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_STATE)) {
                                    String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_STATE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setState(value);
//                                        residentialAddress1.setDocNumber(value);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_CITY)) {
                                    String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_CITY).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setCity(value);
//                                        residentialAddress1.setDocNumber(value);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_COMMUNICATION_PINCODE)) {
                                    String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_COMMUNICATION_PINCODE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        residentialAddress1.setPincode(value);
                                        residentialAddress1.setDocNumber(value);
                                    }
                                }
                            }
                        }
                    }

                    residentialAddress1.setCountry("INDIA");
                    coPromoter.setResidentialAddress(residentialAddress1);
                    coPromoter.setCoPromoterIDDocument(coPromoterIDDocument);
                    coPromoterList.add(coPromoter);
                }
                item.setCoPromoter(coPromoterList);
                mainPromoter.setEmail(email);
                mainPromoter.setIdDocument(idDocument);
                mainPromoter.setResidentialAddress(residentialAddress);
                mainPromoter.setBankAccount(bankAccount);
                companyDetails.setCompanyAddress(companyAddress);
                item.setCompanyDetails(companyDetails);
                item.setMainPromoter(mainPromoter);
                hunterVerificationSME.setItem(item);
                requestStringClass.setHunterVerificationSME(hunterVerificationSME);
                hunterNonIndividualRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(hunterNonIndividualRequestDTO, HunterNonIndividualRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getHunterNonIndividualServiceData(hunterNonIndividualRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<HunterResponseDTO>() {
                            @Override
                            public void onResponse(Call<HunterResponseDTO> call, Response<HunterResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        HunterResponseDTO hunterResponseDTO = response.body();
                                        data.postValue(hunterResponseDTO);

                                        String hunterDataResponse = new Gson().toJson(hunterResponseDTO, HunterResponseDTO.class);
                                        String hunterData = hunterDataResponse.replace("|", "");

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_HUNTER,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(hunterData, SCREEN_NO_HUNTER, SCREEN_NAME_HUNTER, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_HUNTER, rawDataTableFromDB.getId(), hunterData);
                                        }

                                        dynamicUIDao.updateRawDataForSync(SCREEN_NO_HUNTER);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new HunterResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<HunterResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new HunterResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new HunterResponseDTO());
            });
        }
        return data;
    }

    public LiveData<DedupeResponseDTO> getDedupeServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<DedupeResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(RAMP_HUNTER);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, moduleType, loanType);
                } else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, moduleType, loanType);
                }

                final DedupeRequestDTO dedupeRequestDTO = new DedupeRequestDTO();
                dedupeRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                dedupeRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                dedupeRequestDTO.setClientID(clientId);
                dedupeRequestDTO.setServiceType("Dedupe");
                dedupeRequestDTO.setExtCustId(clientId);
                dedupeRequestDTO.setCreatedBy("EL");
                dedupeRequestDTO.setModuleType(moduleType);
                dedupeRequestDTO.setCoapplicantId(moduleType);
                dedupeRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                DedupeRequestDTO.RequestString requestStringClass = new DedupeRequestDTO.RequestString();
                DedupeRequestDTO.RequestString.DedupeEnquiry dedupeEnquiry = new DedupeRequestDTO.RequestString.DedupeEnquiry();

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_DRIVINGLICENSE)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_DRIVINGLICENSE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setDLNo(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_PASSPORT)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_PASSPORT).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setPassport_Number(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_PANCARD)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_PANCARD).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setPan_number_form_60_61(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_VOTERID)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_VOTERID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setVoterId(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_AADHAAR)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_AADHAAR).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setAadhar_Number(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setFirstName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setFirstName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
                                String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setLastName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setDate_of_birth(value);
                                }
                            }
                        }
                    }
                }

                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    dedupeEnquiry.setPhone_no(value);
                                }
                            }
                        }
                    }
                }
                dedupeEnquiry.setUId("");
                dedupeEnquiry.setRequestedByAppOrWeb("App");
                dedupeEnquiry.setModuleType(moduleType);
                dedupeEnquiry.setApplicationId(clientId);
                dedupeEnquiry.setP8("");
                dedupeEnquiry.setP7("");
                dedupeEnquiry.setP6("");
                dedupeEnquiry.setP5("");
                dedupeEnquiry.setP4("");
                dedupeEnquiry.setP3("");
                dedupeEnquiry.setP2("");
                requestStringClass.setDedupeEnquiry(dedupeEnquiry);
                dedupeRequestDTO.setRequestString(requestStringClass);

                String baseString = new Gson().toJson(dedupeRequestDTO, DedupeRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getDedupeServiceData(dedupeRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<DedupeResponseDTO>() {
                            @Override
                            public void onResponse(Call<DedupeResponseDTO> call, Response<DedupeResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        DedupeResponseDTO dedupeResponseDTO = response.body();
                                        dedupeResponseDTO.setModuleType(moduleType);
                                        data.postValue(dedupeResponseDTO);

                                        String dedupeDataResponse = new Gson().toJson(dedupeResponseDTO, DedupeResponseDTO.class);
                                        String dedupeData =dedupeDataResponse.replace("|","");
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_DEDUPE,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(dedupeData, SCREEN_NO_DEDUPE, SCREEN_NAME_DEDUPE, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_DEDUPE, rawDataTableFromDB.getId(), dedupeData);
                                        }
                                        if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                                            dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_DEDUPE,MODULE_TYPE_APPLICANT);
                                        }
                                        postSubmittedAllScreensLiveData(dedupeData, SCREEN_NO_DEDUPE,"", userId,SCREEN_NAME_DEDUPE,moduleType);

                                        //dynamicUIDao.updateRawDataForSync(SCREEN_NO_DEDUPE);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new DedupeResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<DedupeResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new DedupeResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new DedupeResponseDTO());
            });
        }
        return data;
    }

    public LiveData<ENachResponseDTO> getENachServiceData(String userId, String clientId, String loanType, String moduleType,String requestLoanAmount,String tenureMonths,String emiAmount) {
        final MutableLiveData<ENachResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                final ENachRequestDTO eNachRequestDTO = new ENachRequestDTO();
                eNachRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                eNachRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                eNachRequestDTO.setClientID(clientId);
                eNachRequestDTO.setAADHAR("");
                eNachRequestDTO.setServiceType("");
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    eNachRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                eNachRequestDTO.setExternalCustomerId(clientId);
                eNachRequestDTO.setCreatedByProject("EL");
                eNachRequestDTO.setCreatedBy("EL");
                ENachRequestDTO.RequestString requestStringClass = new ENachRequestDTO.RequestString();
                requestStringClass.setEmail_notify("1");
                requestStringClass.setSms_notify("1");
                requestStringClass.setDescription("no");
                requestStringClass.setCurrency("INR");
                requestStringClass.setAmount(requestLoanAmount);

                requestStringClass.setType("link");
                ENachRequestDTO.RequestString.Subscription_registration subscriptionRegistration = new ENachRequestDTO.RequestString.Subscription_registration();
                if (loanProposalDetailsRawDataTableList != null && loanProposalDetailsRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : loanProposalDetailsRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if(requestLoanAmount!=null&&requestLoanAmount.equalsIgnoreCase("0")){
                                if (hashMap.containsKey(TAG_NAME_REQUESTED_LOAN_AMOUNT)) {
                                    String value = hashMap.get(TAG_NAME_REQUESTED_LOAN_AMOUNT).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        subscriptionRegistration.setMax_amount(value);
                                        subscriptionRegistration.setTotalamount(value);
                                    }
                                }
                            }else {
                                subscriptionRegistration.setMax_amount(requestLoanAmount);
                                subscriptionRegistration.setTotalamount(requestLoanAmount);
                            }

                            if(tenureMonths!=null&&tenureMonths.equalsIgnoreCase("0")){
                                if (hashMap.containsKey(TAG_NAME_LOAN_TENURE_IN_MONTHS)) {
                                    String value = hashMap.get(TAG_NAME_LOAN_TENURE_IN_MONTHS).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        subscriptionRegistration.setNoofmonths(value);
                                    }
                                }
                            }else {
                                subscriptionRegistration.setNoofmonths(tenureMonths);
                            }

                            subscriptionRegistration.setEmiamount(emiAmount);
                            if (hashMap.containsKey(TAG_NAME_SAME_FIRST_INSTALLMENT_DATE)) {
                                String value = hashMap.get(TAG_NAME_SAME_FIRST_INSTALLMENT_DATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    subscriptionRegistration.setEmistartdate(value);

                                }
                            }
                        }
                    }
                }
                subscriptionRegistration.setAuth_type("");
                subscriptionRegistration.setMethod("");
                ENachRequestDTO.RequestString.Subscription_registration.Bank_account bankAccount = new ENachRequestDTO.RequestString.Subscription_registration.Bank_account();

                if (bankDetaiRawDataTableList != null && bankDetaiRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : bankDetaiRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_ACCOUNT_HOLDER_NAME)) {
                                String value = hashMap.get(TAG_NAME_ACCOUNT_HOLDER_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setBeneficiary_name(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_ACCOUNT_NUMBER)) {
                                String value = hashMap.get(TAG_NAME_ACCOUNT_NUMBER).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setAccount_number(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_IFSC_CODE)) {
                                String value = hashMap.get(TAG_NAME_IFSC_CODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    bankAccount.setIfsc_code(value);
                                }
                            }

                            bankAccount.setAccount_type("savings");
                        }
                    }
                }
                ENachRequestDTO.RequestString.Customer customer = new ENachRequestDTO.RequestString.Customer();
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customer.setEmail(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customer.setContact(value);
                                }
                            }
                        }
                    }
                }
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customer.setName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customer.setName(value);
                                }
                            }
                        }
                    }
                }

                subscriptionRegistration.setBank_account(bankAccount);
                requestStringClass.setSubscription_registration(subscriptionRegistration);
                requestStringClass.setCustomer(customer);
                eNachRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(eNachRequestDTO, ENachRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getENachServiceData(eNachRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ENachResponseDTO>() {
                            @Override
                            public void onResponse(Call<ENachResponseDTO> call, Response<ENachResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        ENachResponseDTO enachResponseDTO = response.body();
                                        data.postValue(enachResponseDTO);


                                        String eNachDataResponse = new Gson().toJson(enachResponseDTO, ENachResponseDTO.class);
                                        String eNachData = eNachDataResponse.replace("|","");
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_ENACH,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(eNachData, SCREEN_NO_ENACH, SCREEN_NAME_ENACH, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_ENACH, rawDataTableFromDB.getId(), eNachData);
                                        }
                                        postSubmittedAllScreensLiveData(eNachData, SCREEN_NO_ENACH,"", userId,SCREEN_NAME_ENACH,moduleType);

                                        //dynamicUIDao.updateRawDataForSync(SCREEN_NO_ENACH);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new ENachResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ENachResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new ENachResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new ENachResponseDTO());
            });
        }
        return data;
    }

    public LiveData<CPVResponseDTO> getCPVServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<CPVResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SENTINEL_SERVICE);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> applicantPanFromApplicantKYCList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> officeAddressList = null;
                List<RawDataTable> salaryProofList = null;
                List<RawDataTable> businessAddressList = null;
                List<RawDataTable> businessprofile = null;
                List<RawDataTable> salaryProfileList = null;

                if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, moduleType, loanType);

                }else if(moduleType.equalsIgnoreCase(MODULE_TYPE_SALARY)){
                    applicantPanFromApplicantKYCList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                    officeAddressList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_OFFICE_ADDRESS_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);
                    salaryProofList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SALARY_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);
                    salaryProfileList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SALARY_PROFILE, clientId, MODULE_TYPE_APPLICANT, loanType);
                }else if(moduleType.equalsIgnoreCase(MODULE_TYPE_BUSINESS)){
                    applicantPanFromApplicantKYCList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                    businessAddressList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_ADDRESS_PROOF, clientId, MODULE_TYPE_APPLICANT, loanType);
                    businessprofile = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_PROFILE, clientId, MODULE_TYPE_APPLICANT, loanType);
                }else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, moduleType, loanType);
                }
                final CPVRequestDTO cpvRequestDTO = new CPVRequestDTO();
                cpvRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                cpvRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                cpvRequestDTO.setClientID(clientId);
                cpvRequestDTO.setModuleType(moduleType);
                cpvRequestDTO.setCo_applicant_id("");
                cpvRequestDTO.setServiceType("CPVEquifax");
                cpvRequestDTO.setCreatedBy("EL");
                cpvRequestDTO.setCreatedByProject("EL");
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                CPVRequestDTO.RequestString requestStringClass = new CPVRequestDTO.RequestString();
                CPVRequestDTO.RequestString.CPVEquifaxRequest cpvEquifaxRequest = new CPVRequestDTO.RequestString.CPVEquifaxRequest();
                cpvEquifaxRequest.setInquiryFieldsDsv("2|180|Max");
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE_PANCARD)) {
                                String value = hashMap.get(TAG_NAME_KYC_TYPE_PANCARD).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setPANId(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setFirstName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setFirstName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_LAST_NAME)) {
                                String value = hashMap.get(TAG_NAME_LAST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setLastName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_MIDDLE_NAME)) {
                                String value = hashMap.get(TAG_NAME_MIDDLE_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setMiddleName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setDOB(value);
                                }
                            }else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setDOB(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_GENDER)) {
                                String value = hashMap.get(TAG_NAME_GENDER).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setGender(value);
                                }
                            }
                        }
                    }
                }
                if (businessprofile != null && businessprofile.size() > 0) {
                    for (RawDataTable rawDataTable : businessprofile) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_INCORPORATION_DATE)) {
                                String value = hashMap.get(TAG_NAME_BUSINESS_INCORPORATION_DATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setDOB(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_ENTERPRISE_NAME)) {
                                String value = hashMap.get(TAG_NAME_ENTERPRISE_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setFirstName(value);
                                }
                            }
                        }
                    }
                }
                if (salaryProfileList != null && salaryProfileList.size() > 0) {
                    for (RawDataTable rawDataTable : salaryProfileList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_EMPLOYER_NAME)) {
                                String value = hashMap.get(TAG_NAME_EMPLOYER_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setFirstName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_WORKINH_SINCE_WITH_CURRENT_EMPLOYER)) {
                                String value = hashMap.get(TAG_NAME_WORKINH_SINCE_WITH_CURRENT_EMPLOYER).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setDOB(value);
                                }
                            }

                        }
                    }
                }
                if (applicantPanFromApplicantKYCList != null && applicantPanFromApplicantKYCList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantPanFromApplicantKYCList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_PAN)) {
                                String value = hashMap.get(TAG_NAME_PAN).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    cpvEquifaxRequest.setPANId(value);
                                }
                            }
                        }
                    }
                }
                cpvEquifaxRequest.setInquiryPurpose("00");
                cpvEquifaxRequest.setAddressOf(moduleType);
                CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryAddress inquiryAddress = new CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryAddress();
                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1="",addressline2="";
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1=value;
                                    // inquiryAddress.setAddressLine(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2=value;
                                    //inquiryAddress.setAddressLine(value);
                                }
                            }
                            inquiryAddress.setAddressLine(addressline1+" "+addressline2);
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryAddress.setState(value);
                                }
                            }
                            inquiryAddress.setState("MH");
                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryAddress.setPostal(value);
                                }
                            }
                        }
                    }
                }
                if (businessAddressList != null && businessAddressList.size() > 0) {
                    for (RawDataTable rawDataTable : businessAddressList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            String addressline1="",addressline2="";
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1=value;
                                    // inquiryAddress.setAddressLine(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2=value;
                                    //inquiryAddress.setAddressLine(value);
                                }
                            }
                            inquiryAddress.setAddressLine(addressline1+" "+addressline2);
                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryAddress.setState(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryAddress.setPostal(value);
                                }
                            }
                            inquiryAddress.setState("MH");
                        }
                    }
                }
                if (officeAddressList != null && officeAddressList.size() > 0) {
                    for (RawDataTable rawDataTable : officeAddressList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        String addressline1="",addressline2="";
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1)) {
                                String value = hashMap.get(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline1=value;
                                    // inquiryAddress.setAddressLine(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2)) {
                                String value = hashMap.get(TAG_NAME_BUSINESS_ADDRESS_PROOF_ADDRESS_LINE_2).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    addressline2=value;
                                    //inquiryAddress.setAddressLine(value);
                                }
                            }
                            inquiryAddress.setAddressLine(addressline1 + " " + addressline2);

                            if (hashMap.containsKey(TAG_NAME_STATE)) {
                                String value = hashMap.get(TAG_NAME_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryAddress.setState(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_PINCODE)) {
                                String value = hashMap.get(TAG_NAME_PINCODE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryAddress.setPostal(value);
                                }
                            }
                            inquiryAddress.setState("MH");
                        }
                    }
                }

                CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryPhone inquiryPhone = new CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryPhone();
                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    inquiryPhone.setPhoneType("M");
                                    inquiryPhone.setNumber(value);
                                }
                            }
                        }
                    }
                }
                ArrayList<CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryAddress> inquiryAddressesList = new ArrayList<CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryAddress>();
                inquiryAddressesList.add(inquiryAddress);
                ArrayList<CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryPhone> inquiryPhoneList = new ArrayList<CPVRequestDTO.RequestString.CPVEquifaxRequest.InquiryPhone>();
                inquiryPhoneList.add(inquiryPhone);
                cpvEquifaxRequest.setInquiryAddress(inquiryAddressesList);
                cpvEquifaxRequest.setInquiryPhone(inquiryPhoneList);
                requestStringClass.setCPVEquifaxRequest(cpvEquifaxRequest);
                cpvRequestDTO.setRequestString(requestStringClass);

                String Value = new Gson().toJson(cpvRequestDTO, CPVRequestDTO.class);
                String Value1 = Value.replace("|", " ");
                String Value2 = Value1.replace(">", " ");
                String Value3 = Value2.replace("<", " ");
                String Value4 = Value3.replace("(", " ");
                String Value5 = Value4.replace("\\", " ");
                String Value6 = Value5.replace(")", " ");
                String Value7 = Value6.replace("#", " ");
                String Valuevalue = Value7.replace(".", " ");
                CPVRequestDTO cpvRequestDTO1 = new Gson().fromJson(Valuevalue, CPVRequestDTO.class);

                String baseString = new Gson().toJson(cpvRequestDTO1, CPVRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getCPVServiceData(cpvRequestDTO1, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<CPVResponseDTO>() {
                            @Override
                            public void onResponse(Call<CPVResponseDTO> call, Response<CPVResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        CPVResponseDTO cpvResponseDTO = response.body();
                                        cpvResponseDTO.setModuleType(moduleType);
                                        data.postValue(cpvResponseDTO);


                                        String cpvDataResponse = new Gson().toJson(cpvResponseDTO, CPVResponseDTO.class);
                                        String cpvData = cpvDataResponse.replace("|", "");

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_CPV,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(cpvData, SCREEN_NO_CPV, SCREEN_NAME_CPV, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_CPV, rawDataTableFromDB.getId(), cpvData);
                                        }
                                        //TODO : This Code is Once user Hit api SUCCESSFULLY we are updating Sync 1
                                        if(!moduleType.equalsIgnoreCase(MODULE_TYPE_CO_APPLICANT)){
                                            dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_CPV,moduleType);
                                        }
                                        postSubmittedAllScreensLiveData(cpvData, SCREEN_NO_CPV,"", userId, SCREEN_NAME_CPV, moduleType);

                                        //dynamicUIDao.updateRawDataForSync(SCREEN_NO_CPV);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new CPVResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<CPVResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new CPVResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new CPVResponseDTO());
            });
        }
        return data;
    }

    public LiveData<DigitalDocResponseDTO> getDigitalDocSanctionLetterServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<DigitalDocResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SENTINEL_SERVICE);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;
                List<RawDataTable> socioEcnomicDetailsRawDataTableList = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
                socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                final DigitalDocRequestSanctionLetterRuralDTO digitalDocRequestSanctionLetterRuralDTO = new DigitalDocRequestSanctionLetterRuralDTO();
                digitalDocRequestSanctionLetterRuralDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                digitalDocRequestSanctionLetterRuralDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                digitalDocRequestSanctionLetterRuralDTO.setClientID(clientId);
                digitalDocRequestSanctionLetterRuralDTO.setExternalCustomerId("");
                digitalDocRequestSanctionLetterRuralDTO.setServiceType("");
                digitalDocRequestSanctionLetterRuralDTO.setCreatedByProject(loanType);
                digitalDocRequestSanctionLetterRuralDTO.setCreatedBy(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    digitalDocRequestSanctionLetterRuralDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                DigitalDocRequestSanctionLetterRuralDTO.RequestString requestStringClass = new DigitalDocRequestSanctionLetterRuralDTO.RequestString();
                requestStringClass.setElseitshouldbeZero("");
                requestStringClass.setInsuranceandCharges_TractorORVehicalInsurance("");
                requestStringClass.setNamefromCoApplicant2KYC("");
                requestStringClass.setNamefromCoApplicantKYC("");
                requestStringClass.setStampdutyamountbasedonDealerState("");
                requestStringClass.setPERSONALACCIDENTALINSURANCEAMOUNT_ProductDetails("");
                requestStringClass.setCREDITPROTECTINSURANCEAMOUNT_ProductDetails("");
                requestStringClass.setDocumentationCharges_ProductDetails("");
                requestStringClass.setProcessingFee_ProductDetails("");
                requestStringClass.setSTARTDATEOFINSTALLMENT("");
                requestStringClass.setFrequency_ProductDetails("");
                requestStringClass.setTenure_ProductDetails("");
                requestStringClass.setROI("");
                requestStringClass.setFinalLTV_ProductDetails("");
                requestStringClass.setTotalLoanAmount_inWords("");
                requestStringClass.setTotalLoanAmount("");
                requestStringClass.setProducttype("");
                requestStringClass.setNamefromCoApplicant_2KYC("");
                requestStringClass.setAddressdetails_2_ApplicantKYC("");
                requestStringClass.setAddressdetails_1_ApplicantKYC("");
                requestStringClass.setNamefromApplicantKYC("");
                requestStringClass.setCreditSanctionDate("");
                requestStringClass.setSequenceNo("");
                digitalDocRequestSanctionLetterRuralDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(digitalDocRequestSanctionLetterRuralDTO, DigitalDocRequestSanctionLetterRuralDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getDigitalDocSanctionLetterServiceData(digitalDocRequestSanctionLetterRuralDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<DigitalDocResponseDTO>() {
                            @Override
                            public void onResponse(Call<DigitalDocResponseDTO> call, Response<DigitalDocResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        DigitalDocResponseDTO digitalDocResponseDTO = response.body();
                                        data.postValue(digitalDocResponseDTO);

                                        String santionLetterData = new Gson().toJson(digitalDocResponseDTO, DigitalDocResponseDTO.class);

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_DIGITAL_DOCS,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(santionLetterData, SCREEN_NO_SANCTION_LETTER, SCREEN_NAME_DIGITAL_DOCS, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_SANCTION_LETTER, rawDataTableFromDB.getId(), santionLetterData);
                                        }


                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new DigitalDocResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<DigitalDocResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new DigitalDocResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new DigitalDocResponseDTO());
            });
        }
        return data;
    }


    public LiveData<DigitalDocResponseDTO> getDigitalDocApplicationFormServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<DigitalDocResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SENTINEL_SERVICE);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;
                List<RawDataTable> socioEcnomicDetailsRawDataTableList = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
                socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                final DigitalDocApplicationFormUCRequestDTO digitalDocApplicationFormUCRequestDTO = new DigitalDocApplicationFormUCRequestDTO();
                digitalDocApplicationFormUCRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                digitalDocApplicationFormUCRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                digitalDocApplicationFormUCRequestDTO.setClientID(clientId);
                digitalDocApplicationFormUCRequestDTO.setExternalCustomerId("");
                digitalDocApplicationFormUCRequestDTO.setServiceType("");
                digitalDocApplicationFormUCRequestDTO.setCreatedByProject(loanType);
                digitalDocApplicationFormUCRequestDTO.setCreatedBy(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    digitalDocApplicationFormUCRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                DigitalDocApplicationFormUCRequestDTO.RequestString requestStringClass = new DigitalDocApplicationFormUCRequestDTO.RequestString();
                requestStringClass.setRequested_Loan_Amount("");
                requestStringClass.setLEAD_Generation_Date_DDMMYYYY("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_Pincode("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_Country("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_State("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_District("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_City("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_2("");
                requestStringClass.setCo_Applicant2_Residence_Address_Line_1("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_Country("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_Pincode("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_State("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_District("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_City("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_2("");
                requestStringClass.setCo_Applicant1_permanent_Address_Line_1("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_Country("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_Pincode("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_State("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_District("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_City("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_2("");
                requestStringClass.setMain_Applicant_permanent_Address_Line_1("");
                requestStringClass.setReference_2_Contact_Number("");
                requestStringClass.setReference_2_address("");
                requestStringClass.setReference_2_Last_Name("");
                requestStringClass.setReference_2_First_Name("");
                requestStringClass.setReference_1_Contact_Number("");
                requestStringClass.setReference_1_address("");
                requestStringClass.setReference_1_Last_Name("");
                requestStringClass.setReference_1_First_Name("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_Country("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_Pincode("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_State("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_District("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_City("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_2("");
                requestStringClass.setCo_Applicant1_Office_Address_Line_1("");
                requestStringClass.setMain_Applicant_Office_Address_Line_Country("");
                requestStringClass.setMain_Applicant_Office_Address_Line_Pincode("");
                requestStringClass.setMain_Applicant_Office_Address_Line_State("");
                requestStringClass.setMain_Applicant_Office_Address_Line_District("");
                requestStringClass.setMain_Applicant_Office_Address_Line_City("");
                requestStringClass.setMain_Applicant_Office_Address_Line_2("");
                requestStringClass.setMain_Applicant_Office_Address_Line_1("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_Country("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_Pincode("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_State("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_District("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_City("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_2("");
                requestStringClass.setCo_Applicant1_Residence_Address_Line_1("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_Country("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_Pincode("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_State("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_District("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_City("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_2("");
                requestStringClass.setMain_Applicant_Residence_Address_Line_1("");
                requestStringClass.setPoA_Identification_Number("");
                requestStringClass.setPoI_Identification_Number("");
                requestStringClass.setNREGA_Job_Card("");
                requestStringClass.setPAN_No("");
                requestStringClass.setUID_Aadhaar("");
                requestStringClass.setDriving_License("");
                requestStringClass.setVoter_ID_Card("");
                requestStringClass.setPassport_Number("");
                requestStringClass.setDependent3_Occupation_test("");
                requestStringClass.setDependent2_Occupation_test("");
                requestStringClass.setDependent3_age_test("");
                requestStringClass.setDependent2_age_test("");
                requestStringClass.setDependent3_relation_test("");
                requestStringClass.setDependent2_relation_test("");
                requestStringClass.setDependent3_Name_test("");
                requestStringClass.setDependent2_Name_test("");
                requestStringClass.setDependent1_Occupation_test("");
                requestStringClass.setDependent1_age_test("");
                requestStringClass.setDependent1_relation_test("");
                requestStringClass.setDependent1_Name_test("");
                requestStringClass.setApplicant_Mother_Maiden_Name("");
                requestStringClass.setApplicants_email_id_professional("");
                requestStringClass.setApplicants_email_id_personal("");
                requestStringClass.setApplicant_Mobile_Number("");
                requestStringClass.setApplicants_Mother_Name("");
                requestStringClass.setApplicants_Father_Name("");
                requestStringClass.setApplicant_Name_As_per_KYC("");
                requestStringClass.setCo_Applicant2_Name_Text("");
                requestStringClass.setCo_Applicant1_Name_Text("");
                requestStringClass.setApplicant_Name_Text("");
                requestStringClass.setIFSC_Code("");
                requestStringClass.setDealeer_Account_Type("");
                requestStringClass.setDealeer_Account_Number("");
                requestStringClass.setDealeer_Branch_Name("");
                requestStringClass.setDealeer_Bank_Name("");
                requestStringClass.setDealeer_Name("");
                digitalDocApplicationFormUCRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(digitalDocApplicationFormUCRequestDTO, DigitalDocApplicationFormUCRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getDigitalDocApplicationFormServiceData(digitalDocApplicationFormUCRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<DigitalDocResponseDTO>() {
                            @Override
                            public void onResponse(Call<DigitalDocResponseDTO> call, Response<DigitalDocResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        DigitalDocResponseDTO digitalDocResponseDTO = response.body();
                                        data.postValue(digitalDocResponseDTO);


                                        String santionLetterData = new Gson().toJson(digitalDocResponseDTO, DigitalDocResponseDTO.class);

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_DIGITAL_DOCS,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(santionLetterData, SCREEN_NO_APPLICATION_FORM, SCREEN_NAME_DIGITAL_DOCS, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_APPLICATION_FORM, rawDataTableFromDB.getId(), santionLetterData);
                                        }


                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new DigitalDocResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<DigitalDocResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new DigitalDocResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new DigitalDocResponseDTO());
            });
        }
        return data;
    }

    public LiveData<DigitalDocResponseDTO> getDigitalDocHDeedServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<DigitalDocResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SENTINEL_SERVICE);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;
                List<RawDataTable> socioEcnomicDetailsRawDataTableList = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                bankDetaiRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BANK_DETAILS, clientId, MODULE_TYPE_APPLICANT, loanType);
                socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                final DigitaklDocHypothecationDeedTW_UCRequestDTO digitaklDocHypothecationDeedTW_ucRequestDTO = new DigitaklDocHypothecationDeedTW_UCRequestDTO();
                digitaklDocHypothecationDeedTW_ucRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                digitaklDocHypothecationDeedTW_ucRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                digitaklDocHypothecationDeedTW_ucRequestDTO.setClientID(clientId);
                digitaklDocHypothecationDeedTW_ucRequestDTO.setExternalCustomerId("");
                digitaklDocHypothecationDeedTW_ucRequestDTO.setServiceType("");
                digitaklDocHypothecationDeedTW_ucRequestDTO.setCreatedByProject(loanType);
                digitaklDocHypothecationDeedTW_ucRequestDTO.setCreatedBy(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    digitaklDocHypothecationDeedTW_ucRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                DigitaklDocHypothecationDeedTW_UCRequestDTO.RequestString requestStringClass = new DigitaklDocHypothecationDeedTW_UCRequestDTO.RequestString();
                requestStringClass.setRegistrationNumberFromCollateralScreen("");
                requestStringClass.setModel("");
                requestStringClass.setSanctionedAmount("");
                requestStringClass.setCo_Applicant_2_Address_Details_3("");
                requestStringClass.setCo_Applicant_2_Address_Details_2("");
                requestStringClass.setCo_Applicant_2_Address_Details_1("");
                requestStringClass.setCo_Applicant_1_Address_Details_3("");
                requestStringClass.setCo_Applicant_1_Address_Details_2("");
                requestStringClass.setCo_Applicant_1_Address_Details_1("");
                requestStringClass.setApplicant_Address_Details_3("");
                requestStringClass.setApplicant_Address_Details_2("");
                requestStringClass.setApplicant_Address_Details_1("");
                requestStringClass.setCoApplicant2NameText("");
                requestStringClass.setCoApplicant1NameText("");
                requestStringClass.setApplicantNameText("");
                requestStringClass.setLOSID("");
                requestStringClass.setApplicationSubmittedDateDDMMYYYY("");
                requestStringClass.setRBLSanctionDateDDMMYYYY("");
                digitaklDocHypothecationDeedTW_ucRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(digitaklDocHypothecationDeedTW_ucRequestDTO, DigitaklDocHypothecationDeedTW_UCRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getDigitalDocHDeedServiceData(digitaklDocHypothecationDeedTW_ucRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<DigitalDocResponseDTO>() {
                            @Override
                            public void onResponse(Call<DigitalDocResponseDTO> call, Response<DigitalDocResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        DigitalDocResponseDTO digitalDocResponseDTO = response.body();
                                        data.postValue(digitalDocResponseDTO);


                                        String santionLetterData = new Gson().toJson(digitalDocResponseDTO, DigitalDocResponseDTO.class);

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_DIGITAL_DOCS,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(santionLetterData, SCREEN_NO_HYPOTHECATION_DEED, SCREEN_NAME_DIGITAL_DOCS, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_HYPOTHECATION_DEED, rawDataTableFromDB.getId(), santionLetterData);
                                        }


                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new DigitalDocResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<DigitalDocResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new DigitalDocResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new DigitalDocResponseDTO());
            });
        }
        return data;
    }


    public LiveData<RATResponseDTO> getRATServiceData(String customerType, String sourceOfIncome, String industryType,String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<RATResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(SENTINEL_SERVICE);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> bankDetaiRawDataTableList = null;
                List<RawDataTable> socioEcnomicDetailsRawDataTableList = null;
                List<RawDataTable> loanProposalDetailsRawDataTableList = null;

                if (moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, moduleType, loanType);
                    socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, moduleType, loanType);

                } else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, moduleType, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, moduleType, loanType);
                    socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL, clientId, moduleType, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, moduleType, loanType);

                }
                loanProposalDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL, clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                final RATRequestDTO ratRequestDTO = new RATRequestDTO();
                ratRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                ratRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                ratRequestDTO.setClientID(clientId);
                ratRequestDTO.setCo_applicant_id(moduleType);
                ratRequestDTO.setModuleType(moduleType);
                ratRequestDTO.setServiceType("RAT");
                ratRequestDTO.setCreatedBy(loanType);
                ratRequestDTO.setCreatedByProject(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                RATRequestDTO.RequestString requestStringClass = new RATRequestDTO.RequestString();
                RATRequestDTO.RequestString.RatApiRequest ratApiRequest = new RATRequestDTO.RequestString.RatApiRequest();

                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratApiRequest.setExistingCifRating(value);
                                }
                            }
                        }
                    }
                }
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_PAN)) {
                                String value = hashMap.get(TAG_NAME_PAN).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratApiRequest.setExistingCifRating(value);
                                }
                            }
                        }
                    }
                }

                List<RawDataTable> ramprawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(SCREEN_NAME_RAMP, clientId, moduleType);

                if (ramprawDataTableList != null && ramprawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : ramprawDataTableList) {
                        String rawData = rawDataTable.getRawdata();
                        RampResponseDTO rampResponseDTO = new Gson().fromJson(rawData, RampResponseDTO.class);
                        try {
                            if (rampResponseDTO.getApiResponse().getRampResponse().getCaseStatus() != null) {
                                if (rampResponseDTO.getApiResponse().getRampResponse().getCaseStatus().equalsIgnoreCase("ACCEPT")){
                                    ratApiRequest.setRiskCompliance("No");
                                }else {
                                    ratApiRequest.setRiskCompliance("Yes");
                                }

                            }else {
                                ratApiRequest.setRiskCompliance("Yes");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
                if (socioEcnomicDetailsRawDataTableList != null && socioEcnomicDetailsRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : socioEcnomicDetailsRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_PEP)) {
                                String value = hashMap.get(TAG_NAME_PEP).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratApiRequest.setPEPCategory(value);
                                }
                            }
                        }
                    }
                }
                ratApiRequest.setIndustryType(industryType);
                ratApiRequest.setCountryOfResidence("INDIA");
                ratApiRequest.setSourceOfIncome(sourceOfIncome);
                ratApiRequest.setCustomerType(customerType);

                List<RawDataTable> posidexrawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(SCREEN_NAME_POSIDEX, clientId, moduleType);

                if (posidexrawDataTableList != null && posidexrawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : posidexrawDataTableList) {
                        String rawData = rawDataTable.getRawdata();
                        PosidexResponseDTO posidexResponseDTO = new Gson().fromJson(rawData, PosidexResponseDTO.class);
                        if(posidexResponseDTO.getApiResponse().get(0).getUCICtype().equalsIgnoreCase("E")){
                            ratApiRequest.setExistingCustomer("Yes");
                        }else {
                            ratApiRequest.setExistingCustomer("No");
                        }
                    }
                }


                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratApiRequest.setCustomerName(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratApiRequest.setCustomerName(value);
                                }
                            }
                        }
                    }
                }

                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    ratApiRequest.setCustomerAddress(value);
                                }
                            }
                        }
                    }
                }

                requestStringClass.setRatApiRequest(ratApiRequest);
                ratRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(ratRequestDTO, RATRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getRATServiceData(ratRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<RATResponseDTO>() {
                            @Override
                            public void onResponse(Call<RATResponseDTO> call, Response<RATResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        RATResponseDTO ratResponseDTO = response.body();
                                        ratResponseDTO.setModuleType(moduleType);
                                        data.postValue(ratResponseDTO);


                                        String rataDataResponse = new Gson().toJson(ratResponseDTO, RATResponseDTO.class);
                                        String rataData =rataDataResponse.replace("|","");

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_RAT,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(rataData, SCREEN_NO_RAT, SCREEN_NAME_RAT, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_RAT, rawDataTableFromDB.getId(), rataData);
                                        }
                                        if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                                            dynamicUIDao.updateaForSyncTrueForAPIS(SCREEN_NO_RAT,MODULE_TYPE_APPLICANT);
                                        }
                                        postSubmittedAllScreensLiveData(rataData, SCREEN_NO_RAT,"", userId,SCREEN_NAME_RAT,moduleType);

                                        //dynamicUIDao.updateRawDataForSync(SCREEN_NO_RAT);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new RATResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<RATResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new RATResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new RATResponseDTO());
            });
        }
        return data;
    }


    public LiveData<List<SPCustomerTypeResponseTable>> getSPCustomerType(String customerId, String type) {
        final MutableLiveData<List<SPCustomerTypeResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final RATSPRequestDTO ratspRequestDTO = new RATSPRequestDTO();
                ratspRequestDTO.setIMEINumber(appHelper.getIMEI());
                RATSPRequestDTO.SpNameWithParameterClass spNameWithParameter = new RATSPRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_RAT_SOURCE_OF_INCOME_MASTER);
                RATSPRequestDTO.SpParametersClass spParametersClass = new RATSPRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);
                spParametersClass.setCustomerTypeID(customerId);
                ArrayList<RATSPRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<RATSPRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                ratspRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(ratspRequestDTO, RATSPRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getSPRAT(ratspRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    CustomerTypeDropDownResponseDTO customerTypeDropDownResponseDTO = new Gson().fromJson(tableJson, CustomerTypeDropDownResponseDTO.class);
                                                    if (customerTypeDropDownResponseDTO != null && customerTypeDropDownResponseDTO.getGetLeadDropDownTypeOfProfessionTable().size() > 0) {
                                                        List<SPCustomerTypeResponseTable> spCustomerTypeResponseTableList = new ArrayList<>();

                                                        for (SPCustomerTypeResponseTable spCustomerTypeResponseTable : customerTypeDropDownResponseDTO.getGetLeadDropDownTypeOfProfessionTable()) {
                                                            spCustomerTypeResponseTableList.add(spCustomerTypeResponseTable);
                                                            data.postValue(spCustomerTypeResponseTableList);
                                                        }
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }


                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }


    public LiveData<List<SPSourseOfIncomeResponseTable>> getSPSourceOfIncome(String customerId, String type) {
        final MutableLiveData<List<SPSourseOfIncomeResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final RATSPRequestDTO ratspRequestDTO = new RATSPRequestDTO();
                ratspRequestDTO.setIMEINumber(appHelper.getIMEI());
                RATSPRequestDTO.SpNameWithParameterClass spNameWithParameter = new RATSPRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_RAT_SOURCE_OF_INCOME_MASTER);
                RATSPRequestDTO.SpParametersClass spParametersClass = new RATSPRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);
                spParametersClass.setCustomerTypeID(customerId);
                ArrayList<RATSPRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<RATSPRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                ratspRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(ratspRequestDTO, RATSPRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getSPRAT(ratspRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    SourseOfIncomeDropDownResponseDTO sourseOfIncomeDropDownResponseDTO = new Gson().fromJson(tableJson, SourseOfIncomeDropDownResponseDTO.class);
                                                    if (sourseOfIncomeDropDownResponseDTO != null && sourseOfIncomeDropDownResponseDTO.getSpSourseOfIncomeResponseTables().size() > 0) {
                                                        List<SPSourseOfIncomeResponseTable> spSourseOfIncomeResponseTableList  = new ArrayList<>();

                                                        for (SPSourseOfIncomeResponseTable spSourseOfIncomeResponseTable : sourseOfIncomeDropDownResponseDTO.getSpSourseOfIncomeResponseTables()) {
                                                            spSourseOfIncomeResponseTableList.add(spSourseOfIncomeResponseTable);
                                                            data.postValue(spSourseOfIncomeResponseTableList);
                                                        }
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }


                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<SPIndustryTypeResponseTable>> getSPIndustryType(String customerId, String type) {
        final MutableLiveData<List<SPIndustryTypeResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final RATSPRequestDTO ratspRequestDTO = new RATSPRequestDTO();
                ratspRequestDTO.setIMEINumber(appHelper.getIMEI());
                RATSPRequestDTO.SpNameWithParameterClass spNameWithParameter = new RATSPRequestDTO.SpNameWithParameterClass();
                spNameWithParameter.setSpName(SP_NAME_TO_LEAD_RAT_SOURCE_OF_INCOME_MASTER);
                RATSPRequestDTO.SpParametersClass spParametersClass = new RATSPRequestDTO.SpParametersClass();
                spNameWithParameter.setSpParameters(spParametersClass);
                spParametersClass.setType(type);
                spParametersClass.setCustomerTypeID(customerId);
                ArrayList<RATSPRequestDTO.SpNameWithParameterClass> SpNameWithParameterList = new ArrayList<RATSPRequestDTO.SpNameWithParameterClass>();
                SpNameWithParameterList.add(spNameWithParameter);
                ratspRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(ratspRequestDTO, RATSPRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getSPRAT(ratspRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    IndustryTypeDropDownResponseDTO industryTypeDropDownResponseDTO = new Gson().fromJson(tableJson, IndustryTypeDropDownResponseDTO.class);
                                                    if (industryTypeDropDownResponseDTO != null && industryTypeDropDownResponseDTO.getSpIndustryTypeResponseTables().size() > 0) {
                                                        List<SPIndustryTypeResponseTable> spIndustryTypeResponseTableList = new ArrayList<>();

                                                        for (SPIndustryTypeResponseTable spIndustryTypeResponseTable : industryTypeDropDownResponseDTO.getSpIndustryTypeResponseTables()) {
                                                            spIndustryTypeResponseTableList.add(spIndustryTypeResponseTable);
                                                        }
                                                        data.postValue(spIndustryTypeResponseTableList);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }


                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLManufacturerResponseTable>> getTWLGetMake(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLManufacturerResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLManufacturerResponseDTO twlManufacturerResponseDTO = new Gson().fromJson(tableJson, TWLManufacturerResponseDTO.class);
                                                    if (twlManufacturerResponseDTO != null && twlManufacturerResponseDTO.getTwlManufacturerResponseTables().size() > 0) {
                                                        List<TWLManufacturerResponseTable> twlManufacturerResponseTables = new ArrayList<>();

                                                        for (TWLManufacturerResponseTable spIndustryTypeResponseTable : twlManufacturerResponseDTO.getTwlManufacturerResponseTables()) {
                                                            twlManufacturerResponseTables.add(spIndustryTypeResponseTable);
                                                        }
                                                        data.postValue(twlManufacturerResponseTables);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLModelResponseTable>> getTWLGETModel(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLModelResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLModelResponseDTO twlModelResponseDTO = new Gson().fromJson(tableJson, TWLModelResponseDTO.class);
                                                    if (twlModelResponseDTO != null && twlModelResponseDTO.getTwlModelResponseTables().size() > 0) {
                                                        List<TWLModelResponseTable> twlModelResponseTablesList = new ArrayList<>();

                                                        for (TWLModelResponseTable twlManufacturerResponseTables : twlModelResponseDTO.getTwlModelResponseTables()) {
                                                            twlModelResponseTablesList.add(twlManufacturerResponseTables);
                                                        }
                                                        data.postValue(twlModelResponseTablesList);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLVariantResponseTable>> getTWLGETVarient(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLVariantResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLVariantResponseDTO twlVariantResponseDTO = new Gson().fromJson(tableJson, TWLVariantResponseDTO.class);
                                                    if (twlVariantResponseDTO != null && twlVariantResponseDTO.getTwlVariantResponseTables().size() > 0) {
                                                        List<TWLVariantResponseTable> twlVariantResponseTables = new ArrayList<>();

                                                        for (TWLVariantResponseTable data : twlVariantResponseDTO.getTwlVariantResponseTables()) {
                                                            twlVariantResponseTables.add(data);
                                                        }
                                                        data.postValue(twlVariantResponseTables);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLTwowheelertypeResponseTable>> getTWLGetTwoWheeler(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLTwowheelertypeResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLTwowheelertypeResponseDTO twlTwowheelertypeResponseDTO = new Gson().fromJson(tableJson, TWLTwowheelertypeResponseDTO.class);
                                                    if (twlTwowheelertypeResponseDTO != null && twlTwowheelertypeResponseDTO.getTwlTwowheelertypeResponseTables().size() > 0) {
                                                        List<TWLTwowheelertypeResponseTable> twlTwowheelertypeResponseTables = new ArrayList<>();

                                                        for (TWLTwowheelertypeResponseTable data : twlTwowheelertypeResponseDTO.getTwlTwowheelertypeResponseTables()) {
                                                            twlTwowheelertypeResponseTables.add(data);
                                                        }
                                                        data.postValue(twlTwowheelertypeResponseTables);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLEngineCCResponseTable>> getTWLGetEngineCC(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLEngineCCResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLEngineCCResponseDTO twlEngineCCResponseDTO = new Gson().fromJson(tableJson, TWLEngineCCResponseDTO.class);
                                                    if (twlEngineCCResponseDTO != null && twlEngineCCResponseDTO.getTwlEngineCCResponseTables().size() > 0) {
                                                        List<TWLEngineCCResponseTable> list = new ArrayList<>();

                                                        for (TWLEngineCCResponseTable data : twlEngineCCResponseDTO.getTwlEngineCCResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLElectricModelResponseTable>> getTWLElectricModel(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLElectricModelResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLElectricModelResponseDTO twlElectricModelResponseDTO = new Gson().fromJson(tableJson, TWLElectricModelResponseDTO.class);
                                                    if (twlElectricModelResponseDTO != null && twlElectricModelResponseDTO.getTwlElectricModelResponseTables().size() > 0) {
                                                        List<TWLElectricModelResponseTable> list = new ArrayList<>();

                                                        for (TWLElectricModelResponseTable data : twlElectricModelResponseDTO.getTwlElectricModelResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLCategoryResponseTable>>getCategory(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLCategoryResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLCategoryResponseDTO twlCategoryResponseDTO = new Gson().fromJson(tableJson, TWLCategoryResponseDTO.class);
                                                    if (twlCategoryResponseDTO != null && twlCategoryResponseDTO.getTwlCategoryResponseTables().size() > 0) {
                                                        List<TWLCategoryResponseTable> list = new ArrayList<>();

                                                        for (TWLCategoryResponseTable data : twlCategoryResponseDTO.getTwlCategoryResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<TWLExShowRoomPriceResponseTable>> getExShowRoomPrice(String state,String manufacturer, String model, String variant, String twoWheelerType, String engine, String electricModel, String type,String category) {
        final MutableLiveData<List<TWLExShowRoomPriceResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);

        executor.execute(() -> {
            try {
                final GetTWLDataRequestDTO getTWLDataRequestDTO = new GetTWLDataRequestDTO();
                getTWLDataRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetTWLDataRequestDTO.SpNameWithParameter spNameWithParameter = new GetTWLDataRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_TWL_ASSET_MASTER_DETAIL);
                GetTWLDataRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetTWLDataRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setElectricModel(electricModel);
                spParameters.setEngineCC(engine);
                spParameters.setTwowheelertype(twoWheelerType);
                spParameters.setVariant(variant);
                spParameters.setModel(model);
                spParameters.setManufacturer(manufacturer);
                spParameters.setState(state);
                spParameters.setCategory(category);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetTWLDataRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetTWLDataRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getTWLDataRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getTWLDataRequestDTO, GetTWLDataRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTWLGetMakeModelData(getTWLDataRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    TWLExShowRoomPriceResponseDTO twlExShowRoomPriceResponseDTO = new Gson().fromJson(tableJson, TWLExShowRoomPriceResponseDTO.class);
                                                    if (twlExShowRoomPriceResponseDTO != null && twlExShowRoomPriceResponseDTO.getTwlExShowRoomPriceResponseTables().size() > 0) {
                                                        List<TWLExShowRoomPriceResponseTable> list = new ArrayList<>();

                                                        for (TWLExShowRoomPriceResponseTable data : twlExShowRoomPriceResponseDTO.getTwlExShowRoomPriceResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }


    public LiveData<List<PinCodeResponseTable>> getPinCodeMasterData(String clientId) {
        final MutableLiveData<List<PinCodeResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
               final PinCodeRequestDTO pinCodeRequestDTO = new PinCodeRequestDTO();
                pinCodeRequestDTO.setIMEINumber(appHelper.getIMEI());
               PinCodeRequestDTO.SpNameWithParameter spNameWithParameter = new PinCodeRequestDTO.SpNameWithParameter();
               spNameWithParameter.setSpName(SP_NAME_TO_GET_PRODUCT_MASTER);
               PinCodeRequestDTO.SpNameWithParameter.SpParameters spParameters = new PinCodeRequestDTO.SpNameWithParameter.SpParameters();

               List<RawDataTable> officeAddressList = null;
               List<RawDataTable> businessAddressList = null;
               List<RawDataTable> addressDetailsRawDataTableList = null;

               addressDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId,
                       MODULE_TYPE_APPLICANT, loanType);
               businessAddressList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_BUSINESS_ADDRESS_PROOF, clientId,
                       MODULE_TYPE_BUSINESS, loanType);
               officeAddressList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_OFFICE_ADDRESS_PROOF, clientId,
                       MODULE_TYPE_SALARY, loanType);
               if(addressDetailsRawDataTableList != null && addressDetailsRawDataTableList.size() > 0){
                   for(RawDataTable rawDataTable : addressDetailsRawDataTableList){
                       HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                       if(hashMap != null && hashMap.size() > 0){
                           if(hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)){
                               String value = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
                               if(!TextUtils.isEmpty(value)){
                                   spParameters.setResiAddressPin(value);
                               }
                           }
                           if(hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)){
                               String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                               if(!TextUtils.isEmpty(value)){
                                   spParameters.setCommAddressPin(value);
                               }
                           }
                       }
                   }
               }
               if(businessAddressList != null && businessAddressList.size() > 0){
                   for(RawDataTable rawDataTable : businessAddressList){
                       HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                       if(hashMap.containsKey(TAG_NAME_PINCODE)){
                           String value = hashMap.get(TAG_NAME_PINCODE).toString();
                           if(!TextUtils.isEmpty(value)){
                               spParameters.setResiAddressPin(value);
                           }
                       }
                   }
               }
                if(officeAddressList != null && officeAddressList.size() > 0){
                    for(RawDataTable rawDataTable : officeAddressList){
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if(hashMap.containsKey(TAG_NAME_PINCODE)){
                            String value = hashMap.get(TAG_NAME_PINCODE).toString();
                            if(!TextUtils.isEmpty(value)){
                                spParameters.setOfficePin(value);
                            }
                        }
                    }
                }
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<PinCodeRequestDTO.SpNameWithParameter> SpNameWithparameterList = new ArrayList<PinCodeRequestDTO.SpNameWithParameter>();
                SpNameWithparameterList.add(spNameWithParameter);
                pinCodeRequestDTO.setSpNameWithParameter(SpNameWithparameterList);
                String baseString = new Gson().toJson(pinCodeRequestDTO, PinCodeRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);

                DynamicUIWebService.createService(DynamicUIWebservice.class).getPinCodeMasterData(pinCodeRequestDTO,
                        appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).enqueue(new Callback<ResponseBody>(){

                    @Override
                    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                        executor.execute(() -> {
                            if(response.isSuccessful()){
                                try {
                                    String strResponse = response.body().string();
                                    JSONObject jsonObject = new JSONObject(strResponse);
                                    if(jsonObject.length() != 0){
                                        String key = jsonObject.keys().next();
                                        if(!TextUtils.isEmpty(key)){
                                            String tableJson = jsonObject.get(key).toString();
                                            PinCodeResponseDTO pinCodeResponseDTO = new Gson().fromJson(tableJson, PinCodeResponseDTO.class);
                                            if(pinCodeResponseDTO != null && pinCodeResponseDTO.getPinCodeResponseTables().size() > 0){
                                                List<PinCodeResponseTable> list = new ArrayList<>();
                                                for(PinCodeResponseTable data : pinCodeResponseDTO.getPinCodeResponseTables()){
                                                    list.add(data);
                                                }
                                                data.postValue(list);
                                            }
                                        }
                                    }
                                }  catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    }

                    @Override
                    public void onFailure(Call<ResponseBody> call, Throwable t) {
                        executor.execute(() -> {

                        });
                    }
                });
            }
            catch (Exception e) {
                e.printStackTrace();
                executor.execute(() -> {

                });
            }
        });
        return data;
    }

    public LiveData<List<PinCodeAreaResponseTable>> getPinCodeAreaMasterData(String clientId,String pincode) {
        final MutableLiveData<List<PinCodeAreaResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final PinCodeAreaRequestDTO pinCodeAreaRequestDTO = new PinCodeAreaRequestDTO();
                pinCodeAreaRequestDTO.setIMEINumber(appHelper.getIMEI());
                PinCodeAreaRequestDTO.SpNameWithParameter spNameWithParameter = new PinCodeAreaRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_PIN_CAODE_AREA);
                PinCodeAreaRequestDTO.SpNameWithParameter.SpParameters spParameters = new PinCodeAreaRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setCommAddressPin(pincode);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<PinCodeAreaRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<PinCodeAreaRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                pinCodeAreaRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(pinCodeAreaRequestDTO, PinCodeAreaRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getPinCodeAreaMasterData(pinCodeAreaRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    PInCodeAreaResponseDTO pinCodeAreaResponseDTO = new Gson().fromJson(tableJson, PInCodeAreaResponseDTO.class);
                                                    if (pinCodeAreaResponseDTO != null && pinCodeAreaResponseDTO.getPinCodeAreaResponseTables().size() > 0) {
                                                        List<PinCodeAreaResponseTable> list = new ArrayList<>();

                                                        for (PinCodeAreaResponseTable data : pinCodeAreaResponseDTO.getPinCodeAreaResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }


    public LiveData<List<NegitiveProfileListResponseTable>> getNegitiveProfileList(String clientId,String productId) {
        final MutableLiveData<List<NegitiveProfileListResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final NegitiveProfileListRequestDTO negitiveProfileListRequestDTO = new NegitiveProfileListRequestDTO();
                negitiveProfileListRequestDTO.setIMEINumber(appHelper.getIMEI());
                NegitiveProfileListRequestDTO.SpNameWithParameter spNameWithParameter = new NegitiveProfileListRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_NEGITIVE_PROFILE_LIST);
                NegitiveProfileListRequestDTO.SpNameWithParameter.SpParameters spParameters = new NegitiveProfileListRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setProductID(productId);

                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                            String customerType = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                            spParameters.setType(customerType);
                        }

                    }
                }
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<NegitiveProfileListRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<NegitiveProfileListRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                negitiveProfileListRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(negitiveProfileListRequestDTO, NegitiveProfileListRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getNegitiveProfileList(negitiveProfileListRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    NegitiveProfileListResponseDTO negitiveProfileListResponseDTO = new Gson().fromJson(tableJson, NegitiveProfileListResponseDTO.class);
                                                    if (negitiveProfileListResponseDTO != null && negitiveProfileListResponseDTO.getNegitiveProfileListResponseDTO().size() > 0) {
                                                        List<NegitiveProfileListResponseTable> list = new ArrayList<>();

                                                        for (NegitiveProfileListResponseTable data : negitiveProfileListResponseDTO.getNegitiveProfileListResponseDTO()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }


    @RequiresApi(api = Build.VERSION_CODES.N)
    public LiveData<CibilResponseModel> insertorUpdateCibilStatus(String clientId, String isAccepctDecline, String loanScheme, String isSubmit, String finalFlag) {
        final MutableLiveData<CibilResponseModel> data = new MutableLiveData<>();
        executor.execute(() -> {
            CibilResponseModel cibilResponseModel = new CibilResponseModel();
            cibilResponseModel.setIsSubmit(isSubmit);
            cibilResponseModel.setIsAccepctOrDecline(isAccepctDecline);
            cibilResponseModel.setLoanScheme(loanScheme);
            cibilResponseModel.setFlag(finalFlag);

            // TODO: Sending result
            data.postValue(cibilResponseModel);

            String rataData = new Gson().toJson(cibilResponseModel, CibilResponseModel.class);

            RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_CIBIL_STATUS,
                    clientId,MODULE_TYPE_GENERATE_CIBIL );

            if (rawDataTableFromDB == null) {
                // TODO: Insert Raw Data Table
                RawDataTable rawDataTable = new RawDataTable(rataData, SCREEN_NO_CIBIL_RESPONSE, SCREEN_NAME_CIBIL_STATUS, "", clientId,
                        loanType, userId, MODULE_TYPE_GENERATE_CIBIL, "");
                dynamicUIDao.insertRawData(rawDataTable);

            } else {
                // TODO: Update Raw Data Table
                dynamicUIDao.updateRawDataBag(SCREEN_NO_CIBIL_RESPONSE, rawDataTableFromDB.getId(), rataData);
            }

            //for Update LOAN SCHEME THROUGH GENERATE CIBIL
            if(isSubmit.equalsIgnoreCase("1")){
                List<RawDataTable> loanProposalDetailsRawDataTableListt = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_LOAN_PROPOSAL,
                        clientId, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE, loanType);
                if (loanProposalDetailsRawDataTableListt != null && loanProposalDetailsRawDataTableListt.size() > 0) {
                    HashMap<String, Object> hashMap = null;
                    for (RawDataTable rawDataTable : loanProposalDetailsRawDataTableListt) {
                        updateValueForRawObjectValue(rawDataTable,loanScheme);
                    }
                }
            }
        });
        return data;
    }

    public LiveData<CIBILFlagsDataModel> insertorUpdateCibilFlagsModel(String clientId,String dedupe,String ramp, String hunter,String deliquency,String cpvApplicant,String cpvBusinessOrSalary,String loanTenure,String loanAmount,String roi) {
        final MutableLiveData<CIBILFlagsDataModel> data = new MutableLiveData<>();
        executor.execute(() -> {
            CIBILFlagsDataModel cibilFlagsDataModel = new CIBILFlagsDataModel();
            cibilFlagsDataModel.setDedup(dedupe);
            cibilFlagsDataModel.setRamp(ramp);
            cibilFlagsDataModel.setHunter(hunter);
            cibilFlagsDataModel.setDeliquency(deliquency);
            cibilFlagsDataModel.setCpvApplicant(cpvApplicant);
            cibilFlagsDataModel.setcPVBusinessOrSalary(cpvBusinessOrSalary);
            cibilFlagsDataModel.setLaonTenure(loanTenure);
            cibilFlagsDataModel.setLoanAmount(loanAmount);
            cibilFlagsDataModel.setRoI(roi);


            // TODO: Sending result
            data.postValue(cibilFlagsDataModel);

            String rataData = new Gson().toJson(cibilFlagsDataModel, CIBILFlagsDataModel.class);

            RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_CIBIL_FLAGS,
                    clientId,MODULE_TYPE_GENERATE_CIBIL );

            if (rawDataTableFromDB == null) {
                // TODO: Insert Raw Data Table
                RawDataTable rawDataTable = new RawDataTable(rataData, SCREEN_NO_CIBIL_FLAGS, SCREEN_NAME_CIBIL_FLAGS, "", clientId,
                        loanType, userId, MODULE_TYPE_GENERATE_CIBIL, "");
                dynamicUIDao.insertRawData(rawDataTable);

            } else {
                // TODO: Update Raw Data Table
                dynamicUIDao.updateRawDataBag(SCREEN_NO_CIBIL_FLAGS, rawDataTableFromDB.getId(), rataData);
            }


        });
        return data;
    }

    public LiveData<CibilUpStreamDownStreamModel> uPStreamDownStreamModel(String clientId,String isUpstream,String isDownStream,String moduleType) {
        final MutableLiveData<CibilUpStreamDownStreamModel> data = new MutableLiveData<>();
        executor.execute(() -> {
            CibilUpStreamDownStreamModel cibilUpStreamDownStreamModel = new CibilUpStreamDownStreamModel();
            cibilUpStreamDownStreamModel.setIsUpStreamSucces(isUpstream);
            cibilUpStreamDownStreamModel.setIsDownStreamSucces(isDownStream);
            // TODO: Sending result
            data.postValue(cibilUpStreamDownStreamModel);

            if (!TextUtils.isEmpty(clientId)) {
                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(clientId);
                if (masterTable != null) {
                    // TODO: ALREADY EXISTING CLIENT IN MASTER TABLE
                    if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                        dynamicUIDao.updateMasterTableVKYCStatus(masterTable.getId(), isUpstream);
                    }else {
                        dynamicUIDao.updateMasterTableVKYCStatusForCoAPPLICANT(masterTable.getId(),isUpstream);
                    }

                }
            }

            String rataData = new Gson().toJson(cibilUpStreamDownStreamModel, CibilUpStreamDownStreamModel.class);
            RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_UPSTREAM_DOWNSTREAM,
                    clientId,MODULE_TYPE_GENERATE_CIBIL );
            if (rawDataTableFromDB == null) {
                // TODO: Insert Raw Data Table
                RawDataTable rawDataTable = new RawDataTable(rataData, SCREEN_NO_UPSTREAM_DOWNSTREAM, SCREEN_NAME_UPSTREAM_DOWNSTREAM, "", clientId,
                        loanType, userId, MODULE_TYPE_GENERATE_CIBIL, "");
                dynamicUIDao.insertRawData(rawDataTable);
            } else {
                // TODO: Update Raw Data Table
                dynamicUIDao.updateRawDataBag(SCREEN_NO_UPSTREAM_DOWNSTREAM, rawDataTableFromDB.getId(), rataData);
            }
        });
        return data;
    }

    public LiveData<SuccessAndFailurModel> cibilSuccessAndFailurModel(String clientId, String cibilSuccessAndFailur, String moduleType) {
        final MutableLiveData<SuccessAndFailurModel> data = new MutableLiveData<>();
        executor.execute(() -> {
            SuccessAndFailurModel cibilSuccessAndFailurModel  = new SuccessAndFailurModel();
            cibilSuccessAndFailurModel.setIsCibilSuccessAndFailur(cibilSuccessAndFailur);
            // TODO: Sending result
            data.postValue(cibilSuccessAndFailurModel);

            String rataData = new Gson().toJson(cibilSuccessAndFailurModel, SuccessAndFailurModel.class);

            RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_CIBIL_SUCCESS_FAILED,
                    clientId,MODULE_TYPE_GENERATE_CIBIL );

            if (rawDataTableFromDB == null) {
                // TODO: Insert Raw Data Table
                RawDataTable rawDataTable = new RawDataTable(rataData, SCREEN_NO_CIBIL_SUCCESS_FAILED, SCREEN_NAME_CIBIL_SUCCESS_FAILED, "", clientId,
                        loanType, userId, MODULE_TYPE_GENERATE_CIBIL, "");
                dynamicUIDao.insertRawData(rawDataTable);

            } else {
                // TODO: Update Raw Data Table
                dynamicUIDao.updateRawDataBag(SCREEN_NO_CIBIL_SUCCESS_FAILED, rawDataTableFromDB.getId(), rataData);
            }

        });
        return data;
    }

    public LiveData<PostSubmitSuccesOrFaiurModel> postSubmitStatus(String clientId, String response) {
        final MutableLiveData<PostSubmitSuccesOrFaiurModel> data = new MutableLiveData<>();
        executor.execute(() -> {
            PostSubmitSuccesOrFaiurModel postSubmitSuccesOrFaiurModel  = new PostSubmitSuccesOrFaiurModel();
            postSubmitSuccesOrFaiurModel.setPostSubmitSuccessAndFailur(response);
            // TODO: Sending result
            data.postValue(postSubmitSuccesOrFaiurModel);

            String rataData = new Gson().toJson(postSubmitSuccesOrFaiurModel, PostSubmitSuccesOrFaiurModel.class);

            RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_POST_SUBMIT_STATUS,
                    CLIENT_ID,MODULE_TYPE_APPLICANT );

            if (rawDataTableFromDB == null) {
                // TODO: Insert Raw Data Table
                RawDataTable rawDataTable = new RawDataTable(rataData, SCREEN_NO_POST_SUBMIT_STATUS, SCREEN_NAME_POST_SUBMIT_STATUS, "", clientId,
                        loanType, userId, MODULE_TYPE_APPLICANT, "");
                dynamicUIDao.insertRawData(rawDataTable);

            } else {
                // TODO: Update Raw Data Table
                dynamicUIDao.updateRawDataBag(SCREEN_NO_POST_SUBMIT_STATUS, rawDataTableFromDB.getId(), rataData);
            }

        });
        return data;
    }

    public LiveData<List<MNachResponseTable>> eNACH_GetRazorpayFetchToken(String uniqueId) {
        final MutableLiveData<List<MNachResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final MNachRequestDTO mNachRequestDTO = new MNachRequestDTO();
                mNachRequestDTO.setIMEINumber(appHelper.getIMEI());
                mNachRequestDTO.setProjectName(loanType);
                MNachRequestDTO.SpNameWithParameter spNameWithParameter = new MNachRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_ENACH_GET_RAZORPAYFETCHTOKEN);
                MNachRequestDTO.SpNameWithParameter.SpParameters spParameters = new MNachRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setUniqueId(uniqueId);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<MNachRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<MNachRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                mNachRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(mNachRequestDTO, MNachRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).eNACH_GetRazorpayFetchToken(mNachRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    MNachResponseDTO mNachResponseDTO = new Gson().fromJson(tableJson, MNachResponseDTO.class);
                                                    if (mNachResponseDTO != null && mNachResponseDTO.getmNachResponseTables().size() > 0) {
                                                        List<MNachResponseTable> list = new ArrayList<>();

                                                        for (MNachResponseTable data : mNachResponseDTO.getmNachResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<ProcessPricingWFResponseTable>> getProcessPricingWF(String userId,String status,String requestedDocCharges,String productId,String projectId,String branchId,String customerName,String customerId,String requestedLoanAmount_VehicleCost,String city,String requestedROI,String requestedPF) {
        final MutableLiveData<List<ProcessPricingWFResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final ProcessPricingWFRequestDTO processPricingWFRequestDTO = new ProcessPricingWFRequestDTO();
                processPricingWFRequestDTO.setIMEINumber(appHelper.getIMEI());
                ProcessPricingWFRequestDTO.SpNameWithParameter spNameWithParameter = new ProcessPricingWFRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_PROCESS_PRICING_WF);
                ProcessPricingWFRequestDTO.SpNameWithParameter.SpParameters spParameters = new ProcessPricingWFRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setStatus(status);
                spParameters.setRequestedDocCharges(requestedDocCharges);
                spParameters.setRequestedPF(requestedPF);
                spParameters.setRequestedROI(requestedROI);
                spParameters.setCity(city);
                spParameters.setRequestedLoanAmount_VehicleCost(requestedLoanAmount_VehicleCost);
                spParameters.setCustomerId(customerId);
                spParameters.setCustomerName(customerName);
                spParameters.setBranchId(branchId);
                spParameters.setProjectId(projectId);
                spParameters.setCreatedUpdatedBy(userId);
                spParameters.setProductId(productId);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<ProcessPricingWFRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<ProcessPricingWFRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                processPricingWFRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(processPricingWFRequestDTO, ProcessPricingWFRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getProcessPricingWF(processPricingWFRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    ProcessPricingWFResponseDTO processPricingWFResponseDTO = new Gson().fromJson(tableJson, ProcessPricingWFResponseDTO.class);
                                                    if (processPricingWFResponseDTO != null && processPricingWFResponseDTO.getProcessPricingWFResponseTableList().size() > 0) {
                                                        List<ProcessPricingWFResponseTable> list = new ArrayList<>();

                                                        for (ProcessPricingWFResponseTable data : processPricingWFResponseDTO.getProcessPricingWFResponseTableList()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<GetPricingInboxResponseTable>> getPricingInbox(String status,String customerId,String branchId,String role,String projectId,String productId) {
        final MutableLiveData<List<GetPricingInboxResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final GetPricingInboxRequestDTO getPricingInboxRequestDTO = new GetPricingInboxRequestDTO();
                getPricingInboxRequestDTO.setIMEINumber(appHelper.getIMEI());
                GetPricingInboxRequestDTO.SpNameWithParameter spNameWithParameter = new GetPricingInboxRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_PRICING_INBOX);
                GetPricingInboxRequestDTO.SpNameWithParameter.SpParameters spParameters = new GetPricingInboxRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setCustomerId(customerId);
                spParameters.setBranchId(branchId);
                spParameters.setRole(role);
                spParameters.setProjectId(projectId);
                spParameters.setProductId(productId);
                spParameters.setStatus(status);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<GetPricingInboxRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<GetPricingInboxRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                getPricingInboxRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(getPricingInboxRequestDTO, GetPricingInboxRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getPricingInbox(getPricingInboxRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    GetPricingInboxResponseDTO getPricingInboxResponseDTO = new Gson().fromJson(tableJson, GetPricingInboxResponseDTO.class);
                                                    if (getPricingInboxResponseDTO != null && getPricingInboxResponseDTO.getGetPricingInboxResponseTable().size() > 0) {
                                                        List<GetPricingInboxResponseTable> list = new ArrayList<>();

                                                        for (GetPricingInboxResponseTable data : getPricingInboxResponseDTO.getGetPricingInboxResponseTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<LoanAmountWisePricingDefaultValuesResponseTable>> getLoanAmountWisePricingDefaultValues(String amount ,String city,String projectId,String productId) {
        final MutableLiveData<List<LoanAmountWisePricingDefaultValuesResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final LoanAmountWisePricingDefaultValuesRequestDTO loanAmountWisePricingDefaultValuesRequestDTO = new LoanAmountWisePricingDefaultValuesRequestDTO();
                loanAmountWisePricingDefaultValuesRequestDTO.setIMEINumber(appHelper.getIMEI());
                LoanAmountWisePricingDefaultValuesRequestDTO.SpNameWithParameter spNameWithParameter = new LoanAmountWisePricingDefaultValuesRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_LOAN_AMOUNT_WISE_PRICING_DEFAULT_VALUES);
                LoanAmountWisePricingDefaultValuesRequestDTO.SpNameWithParameter.SpParameters spParameters = new LoanAmountWisePricingDefaultValuesRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setLoanAmount(amount);
                spParameters.setCity(city);
                spParameters.setProjectId(projectId);
                spParameters.setProductId(productId);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<LoanAmountWisePricingDefaultValuesRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<LoanAmountWisePricingDefaultValuesRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                loanAmountWisePricingDefaultValuesRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(loanAmountWisePricingDefaultValuesRequestDTO, LoanAmountWisePricingDefaultValuesRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getLoanAmountWisePricingDefaultValues(loanAmountWisePricingDefaultValuesRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    LoanAmountWisePricingDefaultValuesResponseDTO loanAmountWisePricingDefaultValuesResponseDTO = new Gson().fromJson(tableJson, LoanAmountWisePricingDefaultValuesResponseDTO.class);
                                                    if (loanAmountWisePricingDefaultValuesResponseDTO != null && loanAmountWisePricingDefaultValuesResponseDTO.getLoanAmountWisePricingDefaultValuesResponseTables().size() > 0) {
                                                        List<LoanAmountWisePricingDefaultValuesResponseTable> list = new ArrayList<>();

                                                        for (LoanAmountWisePricingDefaultValuesResponseTable data : loanAmountWisePricingDefaultValuesResponseDTO.getLoanAmountWisePricingDefaultValuesResponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<CreditApprovalScreenPricingTable>> getCreditApprovalScreenPricing(String customerId, String projectId, String productId) {
        final MutableLiveData<List<CreditApprovalScreenPricingTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final CreditApprovalScreenPricingrequestDTO creditApprovalScreenPricingrequestDTO = new CreditApprovalScreenPricingrequestDTO();
                creditApprovalScreenPricingrequestDTO.setIMEINumber(appHelper.getIMEI());
                creditApprovalScreenPricingrequestDTO.setProjectName(loanType);
                CreditApprovalScreenPricingrequestDTO.SpNameWithParameter spNameWithParameter = new CreditApprovalScreenPricingrequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_CREDIT_APPROVAL_PRICING_VALUES_MANIPULATION);
                CreditApprovalScreenPricingrequestDTO.SpNameWithParameter.SpParameters spParameters = new CreditApprovalScreenPricingrequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setCustomerId(customerId);
                spParameters.setProjectId(projectId);
                spParameters.setProductId(productId);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<CreditApprovalScreenPricingrequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<CreditApprovalScreenPricingrequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                creditApprovalScreenPricingrequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(creditApprovalScreenPricingrequestDTO, CreditApprovalScreenPricingrequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getCreditApprovalScreenPricing(creditApprovalScreenPricingrequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    CreditApprovalScreenPricingResponseDTO creditApprovalScreenPricingResponseDTO = new Gson().fromJson(tableJson, CreditApprovalScreenPricingResponseDTO.class);
                                                    if (creditApprovalScreenPricingResponseDTO != null && creditApprovalScreenPricingResponseDTO.getCreditApprovalScreenPricingTable().size() > 0) {
                                                        List<CreditApprovalScreenPricingTable> list = new ArrayList<>();

                                                        for (CreditApprovalScreenPricingTable data : creditApprovalScreenPricingResponseDTO.getCreditApprovalScreenPricingTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }

    public LiveData<List<SyncWorkflowResponseTable>> getSyncWorkFlowData(String customerId, String isSync, String workFlowId) {
        final MutableLiveData<List<SyncWorkflowResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final SyncWorkflowRequestDTO syncWorkflowRequestDTO = new SyncWorkflowRequestDTO();
                syncWorkflowRequestDTO.setIMEINumber(appHelper.getIMEI());
                syncWorkflowRequestDTO.setProjectName(loanType);
                SyncWorkflowRequestDTO.SpNameWithParameter spNameWithParameter = new SyncWorkflowRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_SYNC_WORKFLOW);
                SyncWorkflowRequestDTO.SpNameWithParameter.SpParameters spParameters = new SyncWorkflowRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setCustomerId(customerId);
                spParameters.setIsSync(isSync);
                spParameters.setWorkFlowId(workFlowId);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<SyncWorkflowRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<SyncWorkflowRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                syncWorkflowRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(syncWorkflowRequestDTO, SyncWorkflowRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getSyncWorkFlowData(syncWorkflowRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    SyncWorkflowResponseDTO syncWorkflowResponseDTO = new Gson().fromJson(tableJson, SyncWorkflowResponseDTO.class);
                                                    if (syncWorkflowResponseDTO != null && syncWorkflowResponseDTO.getSyncWorkflowResponseTable().size() > 0) {
                                                        List<SyncWorkflowResponseTable> list = new ArrayList<>();

                                                        for (SyncWorkflowResponseTable data : syncWorkflowResponseDTO.getSyncWorkflowResponseTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }


    public LiveData<List<BreSnsManageResultsREsponseTable>> getBreSnsManageResults(String breTenure,String loanAMount,String customerId,String loanScheme,String snsWorkFlow,String snsStatus,String breROI,String type,String createdBy,String projectId,String productId,String loanEmi) {
        final MutableLiveData<List<BreSnsManageResultsREsponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final BreSnsManageResultsRequestDTO breSnsManageResultsRequestDTO = new BreSnsManageResultsRequestDTO();
                breSnsManageResultsRequestDTO.setIMEINumber(appHelper.getIMEI());
                breSnsManageResultsRequestDTO.setProjectName(loanType);
                BreSnsManageResultsRequestDTO.SpNameWithParameter spNameWithParameter = new BreSnsManageResultsRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_BRE_SNS_MANAGE_RESULTS);
                BreSnsManageResultsRequestDTO.SpNameWithParameter.SpParameters spParameters = new BreSnsManageResultsRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setType(type);
                spParameters.setCreatedBy(createdBy);
                spParameters.setProjectId(projectId);
                spParameters.setProductId(productId);
                spParameters.setLoanScheme(loanScheme);
                spParameters.setIsSNSWorkflow(snsWorkFlow);
                spParameters.setSnsStatus(snsStatus);
                spParameters.setBreROI(breROI);
                spParameters.setBreTenure(breTenure);
                spParameters.setBreEligibiltyLoanAmount(loanAMount);
                spParameters.setCustomerId(customerId);
                spParameters.setBreEligibleEMI(loanEmi);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<BreSnsManageResultsRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<BreSnsManageResultsRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                breSnsManageResultsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(breSnsManageResultsRequestDTO, BreSnsManageResultsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getBreSnsManageResults(breSnsManageResultsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    BreSnsManageResultsResponseDTO breSnsManageResultsResponseDTO = new Gson().fromJson(tableJson, BreSnsManageResultsResponseDTO.class);
                                                    if (breSnsManageResultsResponseDTO != null && breSnsManageResultsResponseDTO.getBreSnsManageResultsREsponseTables().size() > 0) {
                                                        List<BreSnsManageResultsREsponseTable> list = new ArrayList<>();

                                                        for (BreSnsManageResultsREsponseTable data : breSnsManageResultsResponseDTO.getBreSnsManageResultsREsponseTables()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();

                                            insertLog("", ex.getMessage(), "", "", TAG, "", "", "");
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }

        });
        return data;
    }


    public LiveData<VKYCResponseDTO> getVKYCUpStreamServiceData(String userId, String clientId, String loanType, CIBILTable cibilTable) {
        final MutableLiveData<VKYCResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> personalDetailRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> socioEcnomicDetailsRawDataTableList = null;

                RawDataTable leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, clientId, loanType);
                if(cibilTable.getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                    socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_SOCIO_ECONOMIC_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                }else {
                    applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, cibilTable.getModuleType(), loanType);
                    personalDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, cibilTable.getModuleType(), loanType);
                    addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_ADDRESS_DETAIL, clientId, cibilTable.getModuleType(), loanType);
                    socioEcnomicDetailsRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_SOCIO_ECONOMIC_DETAIL, clientId, cibilTable.getModuleType(), loanType);
                }


                final VKYCRequestDTO vkycRequestDTO = new VKYCRequestDTO();
                vkycRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                vkycRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                if(cibilTable.getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                    vkycRequestDTO.setClientID(clientId+"_"+"A1");
                }else {
                    vkycRequestDTO.setClientID(clientId+"_"+"C"+cibilTable.getModuleType().substring(cibilTable.getModuleType().length() - 1));
                }

                vkycRequestDTO.setServiceType("Vkyc");
                vkycRequestDTO.setCreatedBy(loanType);
                vkycRequestDTO.setModuleType(cibilTable.getModuleType());
                vkycRequestDTO.setCoapplicantId(cibilTable.getModuleType());
                vkycRequestDTO.setCreatedByProject(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    vkycRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                VKYCRequestDTO.RequestString requestStringClass = new VKYCRequestDTO.RequestString();

                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestStringClass.setAppointmentAddress(value);
                                }
                            }
                        }
                    }
                }
                requestStringClass.setIsCustomerInitiated("Y");
                requestStringClass.setIsEkyc("Y");
                requestStringClass.setIsOkyc("N");
                requestStringClass.setEkycCompletionDateTime(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestStringClass.setCustomerName(value);
                                }
                            }else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestStringClass.setCustomerName(value);
                                }
                            }
                        }
                    }
                }


                if (personalDetailRawDataTableList != null && personalDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : personalDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestStringClass.setCustomerEmail(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    requestStringClass.setCustomerMob(value);
                                }
                            }
                        }
                    }
                }

                if(cibilTable.getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                    requestStringClass.setCustomerId(clientId+"_"+"A1");
                }else {
                    requestStringClass.setCustomerId(clientId+"_"+"C"+cibilTable.getModuleType().substring(cibilTable.getModuleType().length() - 1));
                }
                requestStringClass.setAgent_id("");
                requestStringClass.setSend_notification("1");
                requestStringClass.setLink_type("free");
                requestStringClass.setSession_type("VKYC");
                requestStringClass.setClientCode("RBL");
                VKYCRequestDTO.RequestString.ApplicationDetails applicationDetails = new VKYCRequestDTO.RequestString.ApplicationDetails();
                applicationDetails.setProductType("CC");
                VKYCRequestDTO.RequestString.CustomerFinancialInfo customerFinancialInfo = new VKYCRequestDTO.RequestString.CustomerFinancialInfo();

                if (socioEcnomicDetailsRawDataTableList != null && socioEcnomicDetailsRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : socioEcnomicDetailsRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY)) {
                                String value = hashMap.get(TAG_NAME_PRIMARY_OCCUPATION_CATEGORY).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setOccupation(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_SE_HOUSE)) {
                                String value = hashMap.get(TAG_NAME_SE_HOUSE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setResidenceType(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_GROSS_ANNUAL_INCOME)) {
                                String value = hashMap.get(TAG_NAME_GROSS_ANNUAL_INCOME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setIncomeRange(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_APPLICANT_EDUCATION)) {
                                String value = hashMap.get(TAG_NAME_APPLICANT_EDUCATION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setEducationalQualification(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_INCOME_SOURCE)) {
                                String value = hashMap.get(TAG_NAME_INCOME_SOURCE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setSourceOfIncome(value);
                                }
                            }
                        }
                    }
                }

                customerFinancialInfo.setCustomerType("CC");
                if (cibilTable.getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                    if (leadRawData != null) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setCustomerSubType(value);
                                }
                            }
                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setCustomerType(value);
                                }
                            }
                        }
                    }
                } else {
                    if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);

                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setCustomerSubType(value);
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_CUSTOMER_TYPE)) {
                                String value = hashMap.get(TAG_NAME_CUSTOMER_TYPE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    customerFinancialInfo.setCustomerType(value);
                                }
                            }
                        }
                    }
                }


                customerFinancialInfo.setIsPoliticallyExposed("N");
                customerFinancialInfo.setCountryOfResidence("India");

                VKYCRequestDTO.RequestString.AadhaarData aadhaarData = new VKYCRequestDTO.RequestString.AadhaarData();

                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    aadhaarData.setName("");
                                }
                            }else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    aadhaarData.setName("");
                                }
                            }

                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    aadhaarData.setDob("");
                                }
                            }
                        }
                    }
                }
                aadhaarData.setAadhaarImage("");
                aadhaarData.setReferenceId("");

                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE)) {
                                String value = hashMap.get(TAG_NAME_ADDRESS_PERMANENT_ADDRESS_LINE_ONE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    aadhaarData.setAddress("");
                                }
                            }
                        }

                        if (hashMap.containsKey(TAG_NAME_GENDER)) {
                            String value = hashMap.get(TAG_NAME_GENDER).toString();
                            if (!TextUtils.isEmpty(value)) {
                                aadhaarData.setGender("");
                            }
                        }
                    }
                }

                requestStringClass.setAadhaarData(aadhaarData);
                requestStringClass.setCustomerFinancialInfo(customerFinancialInfo);
                requestStringClass.setApplicationDetails(applicationDetails);
                vkycRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(vkycRequestDTO, VKYCRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getVKYCServiceData(vkycRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<VKYCResponseDTO>() {
                            @Override
                            public void onResponse(Call<VKYCResponseDTO> call, Response<VKYCResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        VKYCResponseDTO vkycResponseDTO = response.body();
                                        data.postValue(vkycResponseDTO);

                                        String vkycData = new Gson().toJson(vkycResponseDTO, VKYCResponseDTO.class);
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_VKYC_UP_STREAM,
                                                clientId, moduleType);
                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(vkycData, SCREEN_NO_VKYC_UP_STREAM, SCREEN_NAME_VKYC_UP_STREAM, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_VKYC_UP_STREAM, rawDataTableFromDB.getId(), vkycData);
                                        }
                                        postSubmittedAllScreensLiveData(vkycData, SCREEN_NO_VKYC_UP_STREAM,"", userId,SCREEN_NAME_VKYC_UP_STREAM,moduleType);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new VKYCResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<VKYCResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new VKYCResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new VKYCResponseDTO());
            });
        }
        return data;
    }

    public LiveData<DownStreamResponseDTO> getVKYCDownStreamServiceData(String userId, String clientId, String loanType, String moduleType) {
        final MutableLiveData<DownStreamResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(POSIDEX_DILIQUENCY);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;

                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);

                final DownStreamRequestDTO downStreamRequestDTO = new DownStreamRequestDTO();
                downStreamRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                downStreamRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                downStreamRequestDTO.setClientID(clientId);
                downStreamRequestDTO.setServiceType("Vkycdownstream");
                downStreamRequestDTO.setCreatedBy(loanType);
                downStreamRequestDTO.setCreatedByProject(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    downStreamRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                DownStreamRequestDTO.RequestString requestStringClass = new DownStreamRequestDTO.RequestString();
                requestStringClass.setClientCode("");
                requestStringClass.setSession_id("");
                requestStringClass.setCustomerId(userId);
                downStreamRequestDTO.setRequestString(requestStringClass);
                String baseString = new Gson().toJson(downStreamRequestDTO, DownStreamRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getVKYCDownStreamServiceData(downStreamRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<DownStreamResponseDTO>() {
                            @Override
                            public void onResponse(Call<DownStreamResponseDTO> call, Response<DownStreamResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        DownStreamResponseDTO downStreamResponseDTO = response.body();
                                        data.postValue(downStreamResponseDTO);


                                        /*String downStreamData = new Gson().toJson(downStreamResponseDTO, DownStreamResponseDTO.class);

                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_VKYC_DOWN_STREAM,
                                                clientId, MODULE_TYPE_GENERATE_CIBIL);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(downStreamData, SCREEN_NO_VKYC_DOWN_STREAM, SCREEN_NAME_VKYC_DOWN_STREAM, "", clientId,
                                                    loanType, userId, MODULE_TYPE_GENERATE_CIBIL, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_VKYC_DOWN_STREAM, rawDataTableFromDB.getId(), downStreamData);
                                        }*/


                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new DownStreamResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<DownStreamResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new DownStreamResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new DownStreamResponseDTO());
            });
        }
        return data;
    }


    public LiveData<ESignEStampResponseDTO> getEsignEStampData(String clientId,String tenure,String loanAmount,String rateOfInterest, List<CIBILTable> cibilTableDB) {
        final MutableLiveData<ESignEStampResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(ESIGN_ESTAMP_INITIATION);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;
                List<RawDataTable> addressDetailRawDataTableList = null;
                List<RawDataTable> personalDetailsRawDataList = null;
                RawDataTable leadRawData = null;
                leadRawData = dynamicUIDao.getRawdataByScreenNameTopOne(SCREEN_NAME_LEAD, CLIENT_ID, loanType);
                addressDetailRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_ADDRESS_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);
                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);
                personalDetailsRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, MODULE_TYPE_APPLICANT, loanType);

                final ESignEStampRequestDTO eSignEStampRequestDTO = new ESignEStampRequestDTO();
                eSignEStampRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                eSignEStampRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                eSignEStampRequestDTO.setClientID(clientId);
                eSignEStampRequestDTO.setExternalCustomerId(clientId);
                eSignEStampRequestDTO.setServiceType("Esign");
                eSignEStampRequestDTO.setModuleType(MODULE_TYPE_APPLICANT);
                eSignEStampRequestDTO.setCoapplicantId(MODULE_TYPE_APPLICANT);
                //eSignEStampRequestDTO.setCreatedByProject(loanType);
                eSignEStampRequestDTO.setCreatedBy("EL");
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    eSignEStampRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                ESignEStampRequestDTO.RequestString requestString = new ESignEStampRequestDTO.RequestString();
                ESignEStampRequestDTO.RequestString.EsignIntiationreq esignIntiationreq = new ESignEStampRequestDTO.RequestString.EsignIntiationreq();
                if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_COMMUNICATION_STATE)) {
                                String value = hashMap.get(TAG_NAME_COMMUNICATION_STATE).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    esignIntiationreq.setStatecode(value);
                                }
                            }
                        }
                    }
                }
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                            String nonIndividual = hashMap.get(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL).toString();
                            if (nonIndividual.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                                esignIntiationreq.setRegtype("2");
                            }else {
                                esignIntiationreq.setRegtype("1");
                            }
                        }
                    }
                }

                ESignEStampRequestDTO.RequestString.EsignIntiationreq.Loansection loansection = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Loansection();
                loansection.setRoi(rateOfInterest);
                loansection.setSnctamount(loanAmount);
                loansection.setTenure(tenure);
                ESignEStampRequestDTO.RequestString.EsignIntiationreq.Entitydetails entitydetails = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Entitydetails();
                String nonIndividualValue="",typeOfProfession="";
                if (leadRawData != null) {
                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                    if (hashMap != null && hashMap.size() > 0) {
                        if (hashMap.containsKey(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                            nonIndividualValue = hashMap.get(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL).toString();
                        }
                        if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                            typeOfProfession = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                        }
                    }
                }
                if (nonIndividualValue.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                    if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : applicantRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {
                                if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setEntityname(value);
                                    }
                                } else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                    String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setEntityname(value);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                    String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setDoi(value);
                                    }
                                } else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                    String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setDoi(value);
                                    }
                                }

                                if (hashMap.containsKey(TAG_NAME_PAN)) {
                                    String value = hashMap.get(TAG_NAME_PAN).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setEntitypan(value);
                                    }
                                }

                            }
                        }
                    }
                    if (personalDetailsRawDataList != null && personalDetailsRawDataList.size() > 0) {
                        for (RawDataTable rawDataTable : personalDetailsRawDataList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {

                                if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                    String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setEmailid(value);
                                    }
                                }
                                if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                    String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setContactno(value);
                                    }
                                }

                            }
                        }
                    }
                    if (addressDetailRawDataTableList != null && addressDetailRawDataTableList.size() > 0) {
                        for (RawDataTable rawDataTable : addressDetailRawDataTableList) {
                            HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                            if (hashMap != null && hashMap.size() > 0) {

                                if (hashMap.containsKey(TAG_NAME_PERMANENT_ADDRESS_LINE_1)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_ADDRESS_LINE_1).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setRegaddr(value);
                                    }
                                }if (hashMap.containsKey(TAG_NAME_PERMANENT_PINCODE)) {
                                    String value = hashMap.get(TAG_NAME_PERMANENT_PINCODE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setRegpin(value);
                                    }
                                }if (hashMap.containsKey(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1)) {
                                    String value = hashMap.get(TAG_NAME_COMMUNICATION_ADDRESS_LINE_1).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setCommaddr(value);
                                    }
                                }if (hashMap.containsKey(TAG_NAME_COMMUNICATION_PINCODE)) {
                                    String value = hashMap.get(TAG_NAME_COMMUNICATION_PINCODE).toString();
                                    if (!TextUtils.isEmpty(value)) {
                                        entitydetails.setCommpin(value);
                                    }
                                }
                            }
                        }
                    }
                    entitydetails.setLglcnstn(typeOfProfession);
                }
                ESignEStampRequestDTO.RequestString.EsignIntiationreq.Estampdetails estampdetails = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Estampdetails();
                ESignEStampRequestDTO.RequestString.EsignIntiationreq.Estampdetails.Estampdetail estampdetail = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Estampdetails.Estampdetail();
                estampdetail.setSecondpartyovdvalue("");
                estampdetail.setSecondpartyovdtype("");
                estampdetail.setFirstpartyovdvalue("");
                estampdetail.setFirstpartyovdtype("");
                estampdetail.setSecondpartypincode("");
                estampdetail.setFirstpartypincode("");
                estampdetail.setDocumentid("1");
                estampdetail.setConsiderationprice(loanAmount);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {
                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    estampdetail.setFirstparty(value);
                                }
                            }else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    estampdetail.setFirstparty(value);
                                }
                            }
                        }
                    }
                }
                ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Estampdetails.Estampdetail> estampdetailsList = new ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Estampdetails.Estampdetail>();
                estampdetailsList.add(estampdetail);
                estampdetails.setEstampdetail(estampdetailsList);
                ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity prtcptentity = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity();
                ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant participant = null;

                List<RawDataTable> applicantRawDataList = null;
                List<RawDataTable> personalDetailRawDataList = null;
                ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant> participantList = new ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant>();

                ArrayList<String> authorizedSignatureList = new ArrayList<>();
                if (nonIndividualValue.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                    for (int i = 0; i < cibilTableDB.size(); i++) {
                        if (cibilTableDB.get(i).getModuleType() != null) {
                            if (!cibilTableDB.get(i).getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                                applicantRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, cibilTableDB.get(i).getModuleType(), loanType);
                                personalDetailRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, cibilTableDB.get(i).getModuleType(), loanType);
                            }
                            participant = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant();

                            if (applicantRawDataList != null && applicantRawDataList.size() > 0) {
                                for (RawDataTable rawDataTable : applicantRawDataList) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                            String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setFullname(value);
                                            }
                                        } else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                            String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setFullname(value);
                                            }
                                        }

                                        if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                            String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setDoi(value);
                                            }
                                        } else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                            String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setDoi(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                            String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                            participant.setOvdid(value);
                                        }
                                        if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                            String value = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                            participant.setOvdtype(value);
                                        }
                                        if (hashMap.containsKey(TAG_NAME_PAN)) {
                                            String value = hashMap.get(TAG_NAME_PAN).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setPanno(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                                            String nonIndividual = hashMap.get(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL).toString();
                                            if (nonIndividual.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                                                participant.setPartytype("Indian Entity");
                                            } else {
                                                participant.setPartytype("Resident Individual");
                                            }
                                        }

                                        if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION) || hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                            String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                            participant.setLegalconstitution(value);
                                        }
                                    }
                                }
                            }
                            if (personalDetailRawDataList != null && personalDetailRawDataList.size() > 0) {
                                for (RawDataTable rawDataTable : personalDetailRawDataList) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                    if (hashMap != null && hashMap.size() > 0) {

                                        if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                            String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setEmaild(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                            String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setMobno(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_CONTACT_NO_2)) {
                                            String value = hashMap.get(TAG_NAME_CONTACT_NO_2).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                participant.setAlternatemobno(value);
                                            }
                                        }
                                        if (hashMap.containsKey(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS)) {
                                            String value = hashMap.get(TAG_NAME_RELATIONSHIP_WITH_THE_BUSINESS).toString();
                                            if (!TextUtils.isEmpty(value)) {
                                                authorizedSignatureList.add(value);
                                            }
                                        }

                                    }
                                }
                            }

                            //participant.setParticipantid(String.valueOf(i+1));
                            //participant.setSeqno(String.valueOf(i+1));
                            participant.setAlternateemaild("");
                            participant.setRelationshipwithcontract("Co-Obligant");
                           /* if (cibilTableDB.get(i).getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                                participant.setRelationshipwithcontract("Debtor");
                            } else {
                                participant.setRelationshipwithcontract("Co-Obligant");
                            }*/
                        }
                        if(!cibilTableDB.get(i).getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                            ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents documents = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents();
                            documents.setDocumentid("1");
                            ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents> documentsList = new ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents>();
                            documentsList.add(documents);
                            participant.setDocuments(documentsList);
                            participantList.add(participant);
                        }

                    }
                }else {
                    if(cibilTableDB!=null){
                        for (int i = 0; i < cibilTableDB.size(); i++) {
                            if (cibilTableDB.get(i).getModuleType() != null) {
                                if (cibilTableDB.get(i).getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                                    applicantRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, cibilTableDB.get(i).getModuleType(), loanType);
                                    personalDetailRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_PERSONAL_DETAIL, clientId, cibilTableDB.get(i).getModuleType(), loanType);
                                } else {
                                    applicantRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_CO_APPLICANT_KYC, clientId, cibilTableDB.get(i).getModuleType(), loanType);
                                    personalDetailRawDataList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_COAPPLICANT_PERSONAL_DETAIL, clientId, cibilTableDB.get(i).getModuleType(), loanType);
                                }
                                participant = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant();
                                if (applicantRawDataList != null && applicantRawDataList.size() > 0) {
                                    for (RawDataTable rawDataTable : applicantRawDataList) {
                                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                        if (hashMap != null && hashMap.size() > 0) {
                                            if (hashMap.containsKey(TAG_NAME_FULL_NAME)) {
                                                String value = hashMap.get(TAG_NAME_FULL_NAME).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setFullname(value);
                                                }
                                            } else if (hashMap.containsKey(TAG_NAME_FIRST_NAME)) {
                                                String value = hashMap.get(TAG_NAME_FIRST_NAME).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setFullname(value);
                                                }
                                            }

                                            if (hashMap.containsKey(TAG_NAME_APPLICATION_DATE_OF_BIRTH)) {
                                                String value = hashMap.get(TAG_NAME_APPLICATION_DATE_OF_BIRTH).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setDoi(value);
                                                }
                                            } else if (hashMap.containsKey(TAG_NAME_DATE_OF_INCORPORATION)) {
                                                String value = hashMap.get(TAG_NAME_DATE_OF_INCORPORATION).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setDoi(value);
                                                }
                                            }
                                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                                participant.setOvdid(value);
                                            }
                                            if (hashMap.containsKey(TAG_NAME_KYC_TYPE)) {
                                                String value = hashMap.get(TAG_NAME_KYC_TYPE).toString();
                                                participant.setOvdtype(value);
                                            }
                                            if (hashMap.containsKey(TAG_NAME_PAN)) {
                                                String value = hashMap.get(TAG_NAME_PAN).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setPanno(value);
                                                }
                                            }
                                            if (hashMap.containsKey(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                                                String nonIndividual = hashMap.get(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL).toString();
                                                if (nonIndividual.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                                                    participant.setPartytype("Indian Entity");
                                                } else {
                                                    participant.setPartytype("Resident Individual");
                                                }
                                            }

                                            if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION) || hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                                String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                                participant.setLegalconstitution(value);
                                            }
                                            participant.setParticipantid(String.valueOf(i + 1));
                                            participant.setSeqno(String.valueOf(i + 1));
                                            participant.setAlternateemaild("");
                                            if (cibilTableDB.get(i).getModuleType().equalsIgnoreCase(MODULE_TYPE_APPLICANT)) {
                                                participant.setRelationshipwithcontract("Debtor");
                                            } else {
                                                participant.setRelationshipwithcontract("Co-Obligant");
                                            }
                                        }
                                    }
                                }

                                if (leadRawData != null) {
                                    HashMap<String, Object> hashMap = setKeyValueForObject(leadRawData);
                                    if (hashMap != null && hashMap.size() > 0) {
                                        if (hashMap.containsKey(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL)) {
                                            String nonIndividual = hashMap.get(TAG_NAME_INDIVIDUAL_OR_NONINDIVIDUAL).toString();
                                            if (nonIndividual.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                                                participant.setPartytype("Indian Entity");
                                                if (hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION) || hashMap.containsKey(TAG_NAME_TYPE_OF_PROFESSION)) {
                                                    String value = hashMap.get(TAG_NAME_TYPE_OF_PROFESSION).toString();
                                                    participant.setLegalconstitution(value);
                                                }
                                            } else {
                                                participant.setPartytype("Resident Individual");
                                                participant.setLegalconstitution("Resident Individual");
                                            }
                                        }

                                    }
                                }
                                if (personalDetailRawDataList != null && personalDetailRawDataList.size() > 0) {
                                    for (RawDataTable rawDataTable : personalDetailRawDataList) {
                                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                                        if (hashMap != null && hashMap.size() > 0) {

                                            if (hashMap.containsKey(TAG_NAME_E_MAIL_ID)) {
                                                String value = hashMap.get(TAG_NAME_E_MAIL_ID).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setEmaild(value);
                                                }
                                            }
                                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_1)) {
                                                String value = hashMap.get(TAG_NAME_CONTACT_NO_1).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setMobno(value);
                                                }
                                            }
                                            if (hashMap.containsKey(TAG_NAME_CONTACT_NO_2)) {
                                                String value = hashMap.get(TAG_NAME_CONTACT_NO_2).toString();
                                                if (!TextUtils.isEmpty(value)) {
                                                    participant.setAlternatemobno(value);
                                                }
                                            }

                                        }
                                    }
                                }
                            }

                            ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents documents = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents();
                            documents.setDocumentid("1");
                            ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents> documentsList = new ArrayList<ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant.Documents>();
                            documentsList.add(documents);
                            participant.setDocuments(documentsList);
                            participantList.add(participant);
                        }}
                }
                if(participantList != null) {

                    if (nonIndividualValue.equalsIgnoreCase(TAG_NAME_NONINDIVIDUAL)) {
                        if(authorizedSignatureList!=null){
                            int firstPartipant = 0;
                            for (int i = 0; i < authorizedSignatureList.size(); i++) {
                                if(firstPartipant == 0) {
                                    if (authorizedSignatureList.get(i).contains("Authorised Signatory")) {
                                        firstPartipant++;
                                        ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant participant1 = new ESignEStampRequestDTO.RequestString.EsignIntiationreq.Prtcptentity.Participant();
                                        participant1.setRelationshipwithcontract("Debtor");
                                        participant1.setPartytype(participantList.get(i).getPartytype());
                                        participant1.setLegalconstitution(participantList.get(i).getLegalconstitution());
                                        participant1.setDoi(participantList.get(i).getDoi());
                                        participant1.setOvdid(participantList.get(i).getOvdid());
                                        participant1.setOvdtype(participantList.get(i).getOvdtype());
                                        participant1.setPanno(participantList.get(i).getPanno());
                                        participant1.setAlternatemobno(participantList.get(i).getAlternatemobno());
                                        participant1.setAlternateemaild(participantList.get(i).getAlternateemaild());
                                        participant1.setMobno(participantList.get(i).getMobno());
                                        participant1.setFullname(participantList.get(i).getFullname());
                                        participant1.setParticipantid(participantList.get(i).getParticipantid());
                                        participant1.setEmaild(participantList.get(i).getEmaild());
                                        participantList.add(participant1);
                                    }
                                }
                            }
                        }
                        for (int i = 0; i < participantList.size(); i++) {
                            if(!participantList.get(i).getRelationshipwithcontract().contains("Debtor")) {
                                participantList.get(i).setParticipantid(i + 2 + "");
                                participantList.get(i).setSeqno(i + 2 + "");
                            }else{
                                participantList.get(i).setParticipantid("1");
                                participantList.get(i).setSeqno("1");
                            }
                        }

                        prtcptentity.setParticipant(participantList);
                    }else {
                        prtcptentity.setParticipant(participantList);
                    }

                }
                esignIntiationreq.setEntitydetails(entitydetails);
                esignIntiationreq.setLoansection(loansection);
                esignIntiationreq.setPrtcptentity(prtcptentity);
                esignIntiationreq.setEstampdetails(estampdetails);
                requestString.setEsignIntiationreq(esignIntiationreq);
                eSignEStampRequestDTO.setRequestString(requestString);
                String baseString = new Gson().toJson(eSignEStampRequestDTO, ESignEStampRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getEsignEStampData(eSignEStampRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ESignEStampResponseDTO>() {
                            @Override
                            public void onResponse(Call<ESignEStampResponseDTO> call, Response<ESignEStampResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        ESignEStampResponseDTO eSignEStampResponseDTO = response.body();
                                        data.postValue(eSignEStampResponseDTO);


                                        String eSignEstampData = new Gson().toJson(eSignEStampResponseDTO, ESignEStampResponseDTO.class);
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_ESIGN_ESTAMP,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(eSignEstampData, SCREEN_NO_ESIGN_ESTAMP, SCREEN_NAME_ESIGN_ESTAMP, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_ESIGN_ESTAMP, rawDataTableFromDB.getId(), eSignEstampData);
                                        }
                                        postSubmittedAllScreensLiveData(eSignEstampData, SCREEN_NO_ESIGN_ESTAMP,"", userId,SCREEN_NAME_ESIGN_ESTAMP,moduleType);

                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new ESignEStampResponseDTO());

                                    }
                                });
                            }
                            @Override
                            public void onFailure(Call<ESignEStampResponseDTO> call, Throwable t) {
                                executor.execute(() -> {
                                    data.postValue(new ESignEStampResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new ESignEStampResponseDTO());
            });
        }
        return data;
    }

    public LiveData<ESignEStampStatusResponseDTO> getEsignEStampStatusData(String clientId,String uniquetxnid) {
        final MutableLiveData<ESignEStampStatusResponseDTO> data = new MutableLiveData<>();
        try {
            DynamicUIWebService.changeApiBaseUrl(ESIGN_ESTAMP);
            executor.execute(() -> {

                List<RawDataTable> applicantRawDataTableList = null;


                applicantRawDataTableList = dynamicUIDao.getRawDataByScreenNameAndModuleType(SCREEN_NAME_APPLICANT_KYC, clientId, MODULE_TYPE_APPLICANT, loanType);

                final ESignEStampStatusRequestDTO eSignEStampStatusRequestDTO = new ESignEStampStatusRequestDTO();
                eSignEStampStatusRequestDTO.setCreatedDate(appHelper.getCurrentDate(DATE_FORMAT_YYYY_MM_DD));
                eSignEStampStatusRequestDTO.setUniqueId(String.valueOf(System.currentTimeMillis()));
                eSignEStampStatusRequestDTO.setClientID(clientId);
                eSignEStampStatusRequestDTO.setExternalCustomerId("");
                eSignEStampStatusRequestDTO.setServiceType("Esign");
                eSignEStampStatusRequestDTO.setCreatedByProject(loanType);
                eSignEStampStatusRequestDTO.setCreatedBy(loanType);
                if (applicantRawDataTableList != null && applicantRawDataTableList.size() > 0) {
                    for (RawDataTable rawDataTable : applicantRawDataTableList) {
                        HashMap<String, Object> hashMap = setKeyValueForObject(rawDataTable);
                        if (hashMap != null && hashMap.size() > 0) {

                            if (hashMap.containsKey(TAG_NAME_KYC_ID)) {
                                String value = hashMap.get(TAG_NAME_KYC_ID).toString();
                                if (!TextUtils.isEmpty(value)) {
                                    eSignEStampStatusRequestDTO.setKYCId(value);
                                }
                            }
                        }
                    }
                }
                ESignEStampStatusRequestDTO.RequestString requestString = new ESignEStampStatusRequestDTO.RequestString();
                ESignEStampStatusRequestDTO.RequestString.Ddestatusreq ddestatusreq = new ESignEStampStatusRequestDTO.RequestString.Ddestatusreq();
                ddestatusreq.setUniquetxnid(uniquetxnid);
                ddestatusreq.setExistingtxnid(uniquetxnid);
                ddestatusreq.setSanctionno("");
                ddestatusreq.setLoanno("");
                ddestatusreq.setBusinessvertical("");
                ddestatusreq.setChannel("");
                ddestatusreq.setRequesttime("");
                ddestatusreq.setSessiontoken("");
                requestString.setDdestatusreq(ddestatusreq);
                eSignEStampStatusRequestDTO.setRequestString(requestString);
                String baseString = new Gson().toJson(eSignEStampStatusRequestDTO, ESignEStampStatusRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getEsignEStampStatusData(eSignEStampStatusRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ESignEStampStatusResponseDTO>() {
                            @Override
                            public void onResponse(Call<ESignEStampStatusResponseDTO> call, Response<ESignEStampStatusResponseDTO> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        ESignEStampStatusResponseDTO eSignEStampStatusResponseDTO = response.body();
                                        data.postValue(eSignEStampStatusResponseDTO);


                                        String eSignEstampStatusData = new Gson().toJson(eSignEStampStatusResponseDTO, ESignEStampStatusResponseDTO.class);
                                        RawDataTable rawDataTableFromDB = dynamicUIDao.getRawDataByClientAndModuleTypeTopOne(SCREEN_NAME_ESIGN_ESTAMP_STATUS,
                                                clientId, moduleType);

                                        if (rawDataTableFromDB == null) {
                                            // TODO: Insert Raw Data Table
                                            RawDataTable rawDataTable = new RawDataTable(eSignEstampStatusData, SCREEN_NO_ESIGN_ESTAMP_STATUS, SCREEN_NAME_ESIGN_ESTAMP_STATUS, "", clientId,
                                                    loanType, userId, moduleType, "");
                                            dynamicUIDao.insertRawData(rawDataTable);

                                        } else {
                                            // TODO: Update Raw Data Table
                                            dynamicUIDao.updateRawDataBag(SCREEN_NO_ESIGN_ESTAMP_STATUS, rawDataTableFromDB.getId(), eSignEstampStatusData);
                                        }
                                        postSubmittedAllScreensLiveData(eSignEstampStatusData, SCREEN_NO_ESIGN_ESTAMP_STATUS,"", userId,SCREEN_NAME_ESIGN_ESTAMP_STATUS,moduleType);


                                    } else {
                                        // TODO: Failure Case
                                        data.postValue(new ESignEStampStatusResponseDTO());

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ESignEStampStatusResponseDTO> call, Throwable t) {
                                Log.d(TAG, "onFailure ==> " + t.getMessage());
                                executor.execute(() -> {
                                    data.postValue(new ESignEStampStatusResponseDTO());
                                });
                            }
                        });

            });
        } catch (Exception ex) {
            ex.printStackTrace();
            executor.execute(() -> {
                data.postValue(new ESignEStampStatusResponseDTO());
            });
        }
        return data;
    }

    public LiveData<List<InsertRawDataBagResponseTable>> getInsertRawDataBag(String screenData,String screenNo,String productId,String screenName,String moduleType) {
        final MutableLiveData<List<InsertRawDataBagResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final InsertRawDataBagRequestDTO insertRawDataBagRequestDTO = new InsertRawDataBagRequestDTO();
                insertRawDataBagRequestDTO.setIMEINumber(appHelper.getIMEI());
                insertRawDataBagRequestDTO.setUserId(userId);
                InsertRawDataBagRequestDTO.SpNameWithParameter spNameWithParameter = new InsertRawDataBagRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_INSERT_RAW_DATA_BAG);
                InsertRawDataBagRequestDTO.SpNameWithParameter.SpParameters spParameters = new InsertRawDataBagRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setActionName("N/A");
                if(loanType.equalsIgnoreCase(LOAN_NAME_EL)){
                    if(currentStage!=null&&currentStage.equalsIgnoreCase("Document Execution")){
                        // TODO: STAGE ID 148 MEANS RBL OPS OR DiSBUSMENT
                        spParameters.setStageId(148);
                    }else {
                        // TODO: STAGE ID 0 MEANS  PD STAGE
                        spParameters.setStageId(0);
                    }
                }else {
                    List<RawDataTable> cibilStatusrawDataTableList = dynamicUIDao.getRawDataByClientAndScreenNameModuleTye(SCREEN_NAME_CIBIL_STATUS, CLIENT_ID, MODULE_TYPE_GENERATE_CIBIL);

                    CibilResponseModel cibilResponseModel = null;
                    if (cibilStatusrawDataTableList != null && cibilStatusrawDataTableList.size() > 0) {
                        for (RawDataTable datalist : cibilStatusrawDataTableList) {
                            String rawData = datalist.getRawdata();
                            cibilResponseModel = new Gson().fromJson(rawData, CibilResponseModel.class);
                        }
                        if (currentStage != null && currentStage.equalsIgnoreCase("Document Execution")) {
                            // TODO: STAGE ID 172 MEANS  OPS STAGE
                            spParameters.setStageId(172);
                        } else {
                            if (cibilResponseModel != null && cibilResponseModel.getIsAccepctOrDecline().equalsIgnoreCase("0")) {
                                // TODO: STAGE ID 0 MEANS  PD STAGE
                                spParameters.setStageId(0);
                            } else {
                                if (cibilResponseModel != null && cibilResponseModel.getFlag().equalsIgnoreCase("P")) {
                                    // TODO: STAGE ID 170 MEANS  RBL SCANCTION
                                    spParameters.setStageId(0);
                                } else {
                                    spParameters.setStageId(0);
                                }
                            }
                        }
                    }
                }
                if (loanType.equalsIgnoreCase(LOAN_NAME_EL)) {
                    spParameters.setWorkflowId(20);
                    spParameters.setProductId("26");
                } else if (loanType.equalsIgnoreCase(LOAN_NAME_TWL)) {
                    spParameters.setWorkflowId(19);
                    spParameters.setProductId("25");
                }
                spParameters.setRoleId("4001");
                spParameters.setFieldId(0);


                List<String> stringList = new ArrayList<>();
                JsonParser jsonParser = new JsonParser();
                if (screenName.equalsIgnoreCase(SCREEN_NAME_APPLICANT_KYC)
                        || screenName.equalsIgnoreCase(SCREEN_NAME_CO_APPLICANT_KYC)
                ) {
                    // TODO: Need to check the raw data table and add it into list
                    List<RawDataTable> rawDataTableList = dynamicUIDao.loadRawDataFromClientId(screenNo,CLIENT_ID);
                    if (rawDataTableList != null) {
                        for (RawDataTable rawdataTable : rawDataTableList) {
                            if (rawdataTable != null && !TextUtils.isEmpty(rawdataTable.getRawdata())) {
                                stringList.add(rawdataTable.getRawdata());
                                JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                                byte[] byteArrayPassword = stringList.toString().getBytes();
                                String  submittedValues = Base64.encodeToString(byteArrayPassword, Base64.DEFAULT);
                                spParameters.setRawData(submittedValues);
                            }
                        }
                    }
                } else {
                    stringList.add(screenData);
                    JsonArray jsonArrayStringList = (JsonArray) jsonParser.parse(stringList.toString());
                    byte[] byteArrayPassword = screenData.toString().getBytes();
                    String  submittedValues = Base64.encodeToString(byteArrayPassword, Base64.DEFAULT);
                    spParameters.setRawData(submittedValues);
                }
                spParameters.setCreatedBy(userId);
                spParameters.setModuleId("APP");
                spParameters.setScreenId(Integer.valueOf(screenNo));
               /* if(!TextUtils.isEmpty(branchGSTcode)){
                spParameters.setBCBRID(branchGSTcode);}else {
                spParameters.setBCBRID(branchId);}
                spParameters.setBCID(branchId);*/
                MasterTable masterTable = dynamicUIDao.getMasterTableByClientId(CLIENT_ID);
                spParameters.setBCBRID(masterTable.getBranchGSTcode());
                spParameters.setBCID(masterTable.getBranchId());
                spParameters.setProjectId("1");
                spParameters.setUniqueid(CLIENT_ID);

                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<InsertRawDataBagRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<InsertRawDataBagRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                insertRawDataBagRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(insertRawDataBagRequestDTO, InsertRawDataBagRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getInsertRawDataBag(insertRawDataBagRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();

                                                    InsertRawDataBagResponseDTO insertRawDataBagResponseDTO = new Gson().fromJson(tableJson, InsertRawDataBagResponseDTO.class);
                                                    if (insertRawDataBagResponseDTO != null && insertRawDataBagResponseDTO.getInsertRawDataBagResponseTable().size() > 0) {
                                                        List<InsertRawDataBagResponseTable> list = new ArrayList<>();

                                                        for (InsertRawDataBagResponseTable data : insertRawDataBagResponseDTO.getInsertRawDataBagResponseTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                        }
                                    } else {

                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }
        });
        return data;
    }

    public LiveData<List<ScreenEditValidationResponseTable>> getScreenEditValidation(String customerId, String workFlowId) {
        final MutableLiveData<List<ScreenEditValidationResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final ScreenEditValidationRequestDTO screenEditValidationRequestDTO = new ScreenEditValidationRequestDTO();
                screenEditValidationRequestDTO.setIMEINumber(appHelper.getIMEI());
                screenEditValidationRequestDTO.setProjectName(loanType);
                ScreenEditValidationRequestDTO.SpNameWithParameter spNameWithParameter = new ScreenEditValidationRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_SCREEN_EDIT_VALIDATION);
                ScreenEditValidationRequestDTO.SpNameWithParameter.SpParameters spParameters = new ScreenEditValidationRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setApplicationId(customerId);
                spParameters.setWorkFlowId(workFlowId);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<ScreenEditValidationRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<ScreenEditValidationRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                screenEditValidationRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(screenEditValidationRequestDTO, ScreenEditValidationRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getScreenEditValidation(screenEditValidationRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {

                                                    String tableJson = json.get(key).toString();
                                                    ScreenEditValidationResponseDTO screenEditValidationResponseDTO = new Gson().fromJson(tableJson, ScreenEditValidationResponseDTO.class);

                                                    if (screenEditValidationResponseDTO != null && screenEditValidationResponseDTO.getScreenEditValidationResponseTable().size() > 0) {
                                                        List<ScreenEditValidationResponseTable> list = new ArrayList<>();

                                                        for (ScreenEditValidationResponseTable data : screenEditValidationResponseDTO.getScreenEditValidationResponseTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }
        });
        return data;
    }

    public LiveData<List<StudentGradeResponseTable>> getStudentGrade(String grade) {
        final MutableLiveData<List<StudentGradeResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final StudentGradeRequestDTO studentGradeRequestDTO = new StudentGradeRequestDTO();
                studentGradeRequestDTO.setIMEINumber(appHelper.getIMEI());
                studentGradeRequestDTO.setProjectName(loanType);
                StudentGradeRequestDTO.SpNameWithParameter spNameWithParameter = new StudentGradeRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_STUDENT_GRADE);
                StudentGradeRequestDTO.SpNameWithParameter.SpParameters spParameters = new StudentGradeRequestDTO.SpNameWithParameter.SpParameters();
                spParameters.setQualification(grade);
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<StudentGradeRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<StudentGradeRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                studentGradeRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(studentGradeRequestDTO, StudentGradeRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getStudentGrade(studentGradeRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    StudentGradeResponseDTO studentGradeResponseDTO = new Gson().fromJson(tableJson, StudentGradeResponseDTO.class);
                                                    if (studentGradeResponseDTO != null && studentGradeResponseDTO.getStudentGradeResponseTable().size() > 0) {
                                                        List<StudentGradeResponseTable> list = new ArrayList<>();
                                                        for (StudentGradeResponseTable data : studentGradeResponseDTO.getStudentGradeResponseTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }
        });
        return data;
    }

    public LiveData<List<TenureMonthsResponseTable>> getTenureInMonths() {
        final MutableLiveData<List<TenureMonthsResponseTable>> data = new MutableLiveData<>();
        DynamicUIWebService.changeApiBaseUrl(RAW_DATA_URL);
        executor.execute(() -> {
            try {
                final TenureMonthsRequestDTO tenureMonthsRequestDTO = new TenureMonthsRequestDTO();
                tenureMonthsRequestDTO.setIMEINumber(appHelper.getIMEI());
                tenureMonthsRequestDTO.setProjectName(loanType);
                TenureMonthsRequestDTO.SpNameWithParameter spNameWithParameter = new TenureMonthsRequestDTO.SpNameWithParameter();
                spNameWithParameter.setSpName(SP_NAME_GET_TENURE);
                TenureMonthsRequestDTO.SpNameWithParameter.SpParameters spParameters = new TenureMonthsRequestDTO.SpNameWithParameter.SpParameters();
                spNameWithParameter.setSpParameters(spParameters);
                ArrayList<TenureMonthsRequestDTO.SpNameWithParameter> SpNameWithParameterList = new ArrayList<TenureMonthsRequestDTO.SpNameWithParameter>();
                SpNameWithParameterList.add(spNameWithParameter);
                tenureMonthsRequestDTO.setSpNameWithParameter(SpNameWithParameterList);
                String baseString = new Gson().toJson(tenureMonthsRequestDTO, TenureMonthsRequestDTO.class).replace("\\u003d", "=");
                String k1 = SHA256Encrypt.sha256(baseString);
                DynamicUIWebService.createService(DynamicUIWebservice.class).getTenureInMonths(tenureMonthsRequestDTO, appHelper.getSharedPrefObj().getString(AUTHORIZATION_TOKEN_KEY, ""), k1).
                        enqueue(new Callback<ResponseBody>() {
                            @Override
                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                                executor.execute(() -> {
                                    if (response.isSuccessful()) {
                                        try {
                                            String strResponse = response.body().string();
                                            JSONObject json = new JSONObject(strResponse);
                                            if (json.length() != 0) {
                                                String key = json.keys().next();
                                                if (!TextUtils.isEmpty(key)) {
                                                    String tableJson = json.get(key).toString();
                                                    TenureMonthsResponseDTO tenureMonthsResponseDTO = new Gson().fromJson(tableJson, TenureMonthsResponseDTO.class);
                                                    if (tenureMonthsResponseDTO != null && tenureMonthsResponseDTO.getTenureMonthsResponseTable().size() > 0) {
                                                        List<TenureMonthsResponseTable> list = new ArrayList<>();
                                                        for (TenureMonthsResponseTable data : tenureMonthsResponseDTO.getTenureMonthsResponseTable()) {
                                                            list.add(data);
                                                        }
                                                        data.postValue(list);
                                                    }
                                                }
                                            }
                                        } catch (Exception ex) {
                                            ex.printStackTrace();
                                        }
                                    } else {
                                        insertLog("", response.message(), "", "", TAG, "", "", "");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(Call<ResponseBody> call, Throwable t) {
                                t.printStackTrace();
                                // TODO: Final result
                                executor.execute(() -> {
                                    insertLog("", t.getMessage(), "", "", TAG, "", "", "");
                                });
                            }
                        });
            } catch (Exception ex) {
                ex.printStackTrace();
                // TODO: Final result
                executor.execute(() -> {
                });
            }
        });
        return data;
    }

    // TODO: 09-08-2023
    public LiveData<List<DynamicUITable>> setIsSyncZeroinAllAPIS(String screenNo, String productId, String screenName, String moduleType) {
        final MutableLiveData<List<DynamicUITable>> data = new MutableLiveData<>();
        executor.execute(() -> {
            if(moduleType.equalsIgnoreCase(MODULE_TYPE_APPLICANT)){
                //TODO : This Code is Once user Hit EKYC SUCCESSFULLY Cibil Need To be ReTigger
                //TODO : OPEN
                dynamicUIDao.updateCIBILTableCBChecked(false, CLIENT_ID, MODULE_TYPE_APPLICANT);
                dynamicUIDao.updateaForSyncForAPIS(SCREEN_NO_POSIDEX,MODULE_TYPE_APPLICANT);
                dynamicUIDao.updateaForSyncForAPIS(SCREEN_NO_DELIQUENCY,MODULE_TYPE_APPLICANT);
            }else if(moduleType.equalsIgnoreCase(MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE)){
                dynamicUIDao.updateCIBILTableCBChecked(false, CLIENT_ID, MODULE_TYPE_LOAN_PROPOSAL_WITH_NOMINEE);
            }else if(moduleType.equalsIgnoreCase(MODULE_TYPE_GENERATE_CIBIL)){
                dynamicUIDao.updateaForSyncForAPIS(SCREEN_NO_RAMP,MODULE_TYPE_GENERATE_CIBIL);
            }
        });
        return data;
    }
}